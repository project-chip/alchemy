package action

import (
	"regexp"
	"strings"

	"github.com/beevik/etree"
)

var alchemyCommentPattern = regexp.MustCompile(`XML generated by Alchemy[^\n]*\nSource:\s*(?P<Source>[^\n]+)\s*\nParameters:\s*(?P<Parameters>[^\n]+)\s*\nGit:\s*(?P<Git>[^\n]+)\s*`)

type alchemyInvocation struct {
	path       string
	parameters []string
}

func getClusterRevisions(paths []string) (map[string][]*alchemyInvocation, error) {
	revisions := make(map[string][]*alchemyInvocation)
	for _, path := range paths {
		doc := etree.NewDocument()
		err := doc.ReadFromFile(path)
		if err != nil {
			return nil, err
		}
		for _, child := range doc.Child {
			switch child := child.(type) {
			case *etree.Comment:
				if strings.Contains(child.Data, "generated by Alchemy") {
					matches := alchemyCommentPattern.FindStringSubmatch(child.Data)
					if len(matches) > 0 {
						ai := &alchemyInvocation{
							path:       matches[1],
							parameters: strings.Fields(matches[2]),
						}
						git := matches[3]
						revisions[git] = append(revisions[git], ai)
					}
				}
			}
		}
	}
	return revisions, nil
}
