{
package constraint

import (
	"fmt"
	"math/big"
    "strconv"
	"strings"

	"github.com/project-chip/alchemy/matter/types"
	"github.com/shopspring/decimal"
)

func debug(format string, a ...any) (n int, err error) {
	//return
	return fmt.Fprintf(os.Stderr, format, a...)
}

}

Input <- conf:Cons+ EOF {
    cs := conf.([]interface{})

    var set Set
    for _, i := range cs {
        con := i.(Constraint)
        set = append(set, con)
    }
    return set, nil
}

Cons <- cons:Constraint entry:EntryConstraint? Parenthetical? (_ Comma _)? {
	if entry != nil {
		return &ListConstraint {
			Constraint:cons.(Constraint),
			EntryConstraint:entry.(Constraint),
		}, nil
	}
	return cons, nil
}

EntryConstraint <- _ "[" _ cons:Constraint _ "]" {
	debug("found entry %s\n", string(c.text))
	return cons.(Constraint), nil
}

Constraint <- cons:(Described / Any /  Range / Min / Max / LogicalConstraint / LogicalLimit / TagList / Limit)  {
	switch cons := cons.(type) {
		case Constraint:
			return cons, nil
		case Limit:
			return &ExactConstraint{Value:cons}, nil
		default:
			return nil, fmt.Errorf("unexpected constraint type: %T", cons)
	}
}

Parenthetical <- _ "(" (!")" .)+ ")" 









