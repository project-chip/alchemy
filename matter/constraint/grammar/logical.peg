Logical = or:Or &{
    ll, ok := or.(*LogicalLimit)
    if !ok {
        return false, nil
    }
    return len(ll.Right) > 0, nil 
} {
    return or, nil
}

Or <- _ left:Xor _ right:OrOp* _ {
    //debug("matched OR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    orOps := right.([]any)
    if len(orOps) == 0 {
        return left, nil
    }
    leftCE := left.(Limit)
    return NewLogicalLimit("|", leftCE, orOps)
}

OrOp <- _ ("|" / "\\|") _ f:Xor {
    //debug("matched OR op %s\n", string(c.text))
    fc := f.(Limit)
    return fc, nil
}

Xor <- _ left:And _ right:XorOp* _ {
    //debug("matched XOR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    xorOps := right.([]any)
    if len(xorOps) == 0 {
        return left, nil
    }
    leftCE := left.(Limit)
    return NewLogicalLimit("^", leftCE, xorOps)
}

XorOp <- _ "^" _ f:And {
   // debug("matched XOR op %s\n", string(c.text))
    fc := f.(Limit)
    return fc, nil
}

And <- _ left:LogicalTerm _ right:AndOp* _ {
   // debug("matched AND %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    addOps := right.([]any)
    if len(addOps) == 0 {
        return left, nil
    }
    leftCE := left.(Limit)
    return NewLogicalLimit("&", leftCE, addOps)
}

AndOp <- _ "&" _ f:LogicalTerm {
    //debug("matched AND op %s\n", string(c.text))
    fc := f.(Limit)
    return fc, nil
}

LogicalTerm <- limit:( ParentheticalLogicalLimit / PlainLogicalLimit ) {
	debug("found limit %s\n", string(c.text))
	return limit.(Limit), nil
}

ParentheticalLogicalLimit <- "(" _ limit:PlainLogicalLimit _ ")" {
	return limit.(Limit), nil
}

// Logical expressions are more restricted than most
PlainLogicalLimit <- limit:( NullLimit / EmptyLimit / StringLimit / BooleanLimit / StatusCodeLimit / Expression / HexLimit / TempLimit / PercentageLimit / CharacterLimit / IntLimit / Term / LengthLimit / ReferenceLimit / LogicalIdentifierLimit ) {
	return limit.(Limit), nil
}

LogicalIdentifierLimit <- ref:(LogicalIdentifier) field:(ReferenceField)? {
	debug("found logical identifier limit %s\n", string(c.text))
	rl := &IdentifierLimit{ID:ref.(string)}
	if field != nil {
		rl.Field = field.(Limit)
	}
	return rl, nil
}

LogicalIdentifier <- Word {
	debug("found logical identifier %s\n", string(c.text))
	return string(c.text), nil
}