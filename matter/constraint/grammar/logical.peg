LogicalLimit = or:LogicalLimitOr &{
    ll, ok := or.(*LogicalLimit)
    if !ok {
        return false, nil
    }
    debug("matched logical limit \"%s\"\n", string(c.text))
    return len(ll.Right) > 0, nil 
} {
    return or, nil
}

LogicalLimitOr <- _ left:LogicalLimitXor right:LogicalLimitOrOp* {
    debug("matched OR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    orOps := right.([]any)
    if len(orOps) == 0 {
        return left, nil
    }
    leftCE := left.(Limit)
    return NewLogicalLimit("|", leftCE, orOps)
}

LogicalLimitOrOp <- _ ("|" / "\\|") _ f:LogicalLimitXor {
    debug("matched OR op %s\n", string(c.text))
    fc := f.(Limit)
    return fc, nil
}

LogicalLimitXor <- _ left:LogicalLimitAnd right:LogicalLimitXorOp* {
    debug("matched XOR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    xorOps := right.([]any)
    if len(xorOps) == 0 {
        return left, nil
    }
    leftCE := left.(Limit)
    return NewLogicalLimit("^", leftCE, xorOps)
}

LogicalLimitXorOp <- _ "^" _ f:LogicalLimitAnd {
    debug("matched XOR op %s\n", string(c.text))
    fc := f.(Limit)
    return fc, nil
}

LogicalLimitAnd <- _ left:LogicalLimitTerm right:LogicalLimitAndOp* {
    debug("matched AND %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    addOps := right.([]any)
    if len(addOps) == 0 {
        return left, nil
    }
    leftCE := left.(Limit)
    return NewLogicalLimit("&", leftCE, addOps)
}

LogicalLimitAndOp <- _ "&" _ f:LogicalLimitTerm {
    debug("matched AND op %s\n", string(c.text))
    fc := f.(Limit)
    return fc, nil
}

LogicalLimitTerm <- limit:( ParentheticalLogicalLimit / PlainLogicalLimit ) {
	debug("found logical limit term %s\n", string(c.text))
	return limit.(Limit), nil
}

ParentheticalLogicalLimit <- "(" _ limit:PlainLogicalLimit _ ")" {
	return limit.(Limit), nil
}

// Logical expressions are more restricted than most
PlainLogicalLimit <- limit:( NullLimit / EmptyLimit / StringLimit / BooleanLimit / StatusCodeLimit / Expression / HexLimit / TempLimit / PercentageLimit / CharacterLimit / IntLimit / Term / LengthLimit / ReferenceLimit / LogicalIdentifierLimit ) {
	debug("found plain logical limit %s\n", string(c.text))
	return limit.(Limit), nil
}

LogicalIdentifierLimit <- ref:(LogicalIdentifier) field:(ReferenceField)? {
	debug("found logical identifier limit %s\n", string(c.text))
	rl := &IdentifierLimit{ID:ref.(string)}
	if field != nil {
		rl.Field = field.(Limit)
	}
	return rl, nil
}

LogicalIdentifier <-  Word &{
	return !isReservedWord(string(c.text)), nil
} {
	debug("found logical identifier %s\n", string(c.text))
	return string(c.text), nil
}

LogicalConstraint = or:LogicalConstraintOr &{
    ll, ok := or.(*LogicalConstraint)
    if !ok {
        return false, nil
    }
    return len(ll.Right) > 0, nil 
} {
    return or, nil
}

LogicalConstraintOr <- _ left:LogicalConstraintXor right:LogicalConstraintOrOp* {
    //debug("matched OR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    orOps := right.([]any)
    if len(orOps) == 0 {
        return left, nil
    }
    leftCE := left.(Constraint)
    return NewLogicalConstraint("|", leftCE, orOps)
}

LogicalConstraintOrOp <- _ ("|" / "\\|") _ f:LogicalConstraintXor {
    //debug("matched OR op %s\n", string(c.text))
    fc := f.(Constraint)
    return fc, nil
}

LogicalConstraintXor <- _ left:LogicalConstraintAnd right:LogicalConstraintXorOp* {
    //debug("matched XOR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    xorOps := right.([]any)
    if len(xorOps) == 0 {
        return left, nil
    }
    leftCE := left.(Constraint)
    return NewLogicalConstraint("^", leftCE, xorOps)
}

LogicalConstraintXorOp <- _ "^" _ f:LogicalConstraintAnd {
   // debug("matched XOR op %s\n", string(c.text))
    fc := f.(Constraint)
    return fc, nil
}

LogicalConstraintAnd <- _ left:LogicalConstraintTerm right:LogicalConstraintAndOp* {
   // debug("matched AND %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    addOps := right.([]any)
    if len(addOps) == 0 {
        return left, nil
    }
    leftCE := left.(Constraint)
    return NewLogicalConstraint("&", leftCE, addOps)
}

LogicalConstraintAndOp <- _ "&" _ f:LogicalConstraintTerm {
    //debug("matched AND op %s\n", string(c.text))
    fc := f.(Constraint)
    return fc, nil
}

LogicalConstraintTerm <- constraint:( ParentheticalLogicalConstraint / PlainLogicalConstraint ) {
	debug("found Constraint %s\n", string(c.text))
	return constraint.(Constraint), nil
}

ParentheticalLogicalConstraint <- "(" _ constraint:PlainLogicalConstraint _ ")" {
	return constraint.(Constraint), nil
}

// Logical expressions are more restricted than most
PlainLogicalConstraint <- constraint:( Range / Min / Max / Limit) {
    switch constraint := constraint.(type) {
		case Constraint:
			return constraint, nil
		case Limit:
			return &ExactConstraint{Value:constraint}, nil
		default:
			return nil, fmt.Errorf("unexpected constraint type: %T", constraint)
	}
}
