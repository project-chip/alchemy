// Code generated by pigeon; DO NOT EDIT.

package constraint

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/matter/types"
	"github.com/shopspring/decimal"
)

func debug(format string, a ...any) (n int, err error) {
	return
	return fmt.Fprintf(os.Stdout, format, a...)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 21, col: 1, offset: 276},
			expr: &actionExpr{
				pos: position{line: 21, col: 10, offset: 285},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 21, col: 10, offset: 285},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 21, col: 10, offset: 285},
							label: "conf",
							expr: &oneOrMoreExpr{
								pos: position{line: 21, col: 15, offset: 290},
								expr: &ruleRefExpr{
									pos:    position{line: 21, col: 15, offset: 290},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 21, col: 21, offset: 296},
							offset: 87,
						},
					},
				},
			},
		},
		{
			name: "Cons",
			pos:  position{line: 32, col: 1, offset: 467},
			expr: &actionExpr{
				pos: position{line: 32, col: 9, offset: 475},
				run: (*parser).callonCons1,
				expr: &seqExpr{
					pos: position{line: 32, col: 9, offset: 475},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 32, col: 9, offset: 475},
							label: "cons",
							expr: &ruleRefExpr{
								pos:    position{line: 32, col: 14, offset: 480},
								offset: 3,
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 25, offset: 491},
							label: "entry",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 31, offset: 497},
								expr: &ruleRefExpr{
									pos:    position{line: 32, col: 31, offset: 497},
									offset: 2,
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 32, col: 48, offset: 514},
							expr: &ruleRefExpr{
								pos:    position{line: 32, col: 48, offset: 514},
								offset: 4,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 32, col: 63, offset: 529},
							expr: &seqExpr{
								pos: position{line: 32, col: 64, offset: 530},
								exprs: []any{
									&ruleRefExpr{
										pos:    position{line: 32, col: 64, offset: 530},
										offset: 83,
									},
									&ruleRefExpr{
										pos:    position{line: 32, col: 66, offset: 532},
										offset: 84,
									},
									&ruleRefExpr{
										pos:    position{line: 32, col: 72, offset: 538},
										offset: 83,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EntryConstraint",
			pos:  position{line: 42, col: 1, offset: 695},
			expr: &actionExpr{
				pos: position{line: 42, col: 20, offset: 714},
				run: (*parser).callonEntryConstraint1,
				expr: &seqExpr{
					pos: position{line: 42, col: 20, offset: 714},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 42, col: 20, offset: 714},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 42, col: 22, offset: 716},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 42, col: 26, offset: 720},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 42, col: 28, offset: 722},
							label: "cons",
							expr: &ruleRefExpr{
								pos:    position{line: 42, col: 33, offset: 727},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 42, col: 44, offset: 738},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 42, col: 46, offset: 740},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Constraint",
			pos:  position{line: 46, col: 1, offset: 781},
			expr: &actionExpr{
				pos: position{line: 46, col: 15, offset: 795},
				run: (*parser).callonConstraint1,
				expr: &labeledExpr{
					pos:   position{line: 46, col: 15, offset: 795},
					label: "cons",
					expr: &choiceExpr{
						pos: position{line: 46, col: 21, offset: 801},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 46, col: 21, offset: 801},
								offset: 13,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 33, offset: 813},
								offset: 12,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 40, offset: 820},
								offset: 40,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 48, offset: 828},
								offset: 41,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 54, offset: 834},
								offset: 42,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 60, offset: 840},
								offset: 30,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 80, offset: 860},
								offset: 18,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 95, offset: 875},
								offset: 63,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 105, offset: 885},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "Parenthetical",
			pos:  position{line: 57, col: 1, offset: 1105},
			expr: &seqExpr{
				pos: position{line: 57, col: 18, offset: 1122},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 57, col: 18, offset: 1122},
						offset: 83,
					},
					&litMatcher{
						pos:        position{line: 57, col: 20, offset: 1124},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&oneOrMoreExpr{
						pos: position{line: 57, col: 24, offset: 1128},
						expr: &seqExpr{
							pos: position{line: 57, col: 25, offset: 1129},
							exprs: []any{
								&notExpr{
									pos: position{line: 57, col: 25, offset: 1129},
									expr: &litMatcher{
										pos:        position{line: 57, col: 26, offset: 1130},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
								&anyMatcher{
									line: 57, col: 30, offset: 1134,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 57, col: 34, offset: 1138},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "Limit",
			pos:  position{line: 70, col: 1, offset: 1155},
			expr: &actionExpr{
				pos: position{line: 70, col: 10, offset: 1164},
				run: (*parser).callonLimit1,
				expr: &labeledExpr{
					pos:   position{line: 70, col: 10, offset: 1164},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 70, col: 18, offset: 1172},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 70, col: 18, offset: 1172},
								offset: 6,
							},
							&ruleRefExpr{
								pos:    position{line: 70, col: 39, offset: 1193},
								offset: 7,
							},
						},
					},
				},
			},
		},
		{
			name: "ParentheticalLimit",
			pos:  position{line: 74, col: 1, offset: 1239},
			expr: &actionExpr{
				pos: position{line: 74, col: 23, offset: 1261},
				run: (*parser).callonParentheticalLimit1,
				expr: &seqExpr{
					pos: position{line: 74, col: 23, offset: 1261},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 74, col: 23, offset: 1261},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:    position{line: 74, col: 27, offset: 1265},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 74, col: 29, offset: 1267},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 74, col: 35, offset: 1273},
								offset: 7,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 74, col: 46, offset: 1284},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 74, col: 48, offset: 1286},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "PlainLimit",
			pos:  position{line: 78, col: 1, offset: 1322},
			expr: &actionExpr{
				pos: position{line: 78, col: 15, offset: 1336},
				run: (*parser).callonPlainLimit1,
				expr: &labeledExpr{
					pos:   position{line: 78, col: 15, offset: 1336},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 78, col: 22, offset: 1343},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 78, col: 22, offset: 1343},
								offset: 8,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 32, offset: 1353},
								offset: 9,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 44, offset: 1365},
								offset: 11,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 57, offset: 1378},
								offset: 43,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 70, offset: 1391},
								offset: 44,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 83, offset: 1404},
								offset: 71,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 97, offset: 1418},
								offset: 14,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 112, offset: 1433},
								offset: 61,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 130, offset: 1451},
								offset: 16,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 143, offset: 1464},
								offset: 60,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 154, offset: 1475},
								offset: 57,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 166, offset: 1487},
								offset: 58,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 184, offset: 1505},
								offset: 56,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 201, offset: 1522},
								offset: 59,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 212, offset: 1533},
								offset: 15,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 219, offset: 1540},
								offset: 55,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 233, offset: 1554},
								offset: 48,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 250, offset: 1571},
								offset: 46,
							},
							&ruleRefExpr{
								pos:    position{line: 78, col: 268, offset: 1589},
								offset: 10,
							},
						},
					},
				},
			},
		},
		{
			name: "MSLimit",
			pos:  position{line: 82, col: 1, offset: 1640},
			expr: &actionExpr{
				pos: position{line: 82, col: 12, offset: 1651},
				run: (*parser).callonMSLimit1,
				expr: &litMatcher{
					pos:        position{line: 82, col: 12, offset: 1651},
					val:        "MS",
					ignoreCase: false,
					want:       "\"MS\"",
				},
			},
		},
		{
			name: "NullLimit",
			pos:  position{line: 86, col: 1, offset: 1715},
			expr: &actionExpr{
				pos: position{line: 86, col: 14, offset: 1728},
				run: (*parser).callonNullLimit1,
				expr: &litMatcher{
					pos:        position{line: 86, col: 14, offset: 1728},
					val:        "null",
					ignoreCase: true,
					want:       "\"null\"i",
				},
			},
		},
		{
			name: "UnspecifiedLimit",
			pos:  position{line: 90, col: 1, offset: 1767},
			expr: &actionExpr{
				pos: position{line: 90, col: 21, offset: 1787},
				run: (*parser).callonUnspecifiedLimit1,
				expr: &seqExpr{
					pos: position{line: 90, col: 21, offset: 1787},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 90, col: 22, offset: 1788},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 90, col: 22, offset: 1788},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&litMatcher{
									pos:        position{line: 90, col: 28, offset: 1794},
									val:        "–",
									ignoreCase: false,
									want:       "\"–\"",
								},
								&litMatcher{
									pos:        position{line: 90, col: 34, offset: 1802},
									val:        "n/a",
									ignoreCase: true,
									want:       "\"N/A\"i",
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 90, col: 42, offset: 1810},
							offset: 87,
						},
					},
				},
			},
		},
		{
			name: "EmptyLimit",
			pos:  position{line: 94, col: 1, offset: 1852},
			expr: &actionExpr{
				pos: position{line: 94, col: 15, offset: 1866},
				run: (*parser).callonEmptyLimit1,
				expr: &choiceExpr{
					pos: position{line: 94, col: 16, offset: 1867},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 94, col: 16, offset: 1867},
							val:        "empty",
							ignoreCase: false,
							want:       "\"empty\"",
						},
						&litMatcher{
							pos:        position{line: 94, col: 26, offset: 1877},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "Any",
			pos:  position{line: 100, col: 1, offset: 1917},
			expr: &actionExpr{
				pos: position{line: 100, col: 8, offset: 1924},
				run: (*parser).callonAny1,
				expr: &labeledExpr{
					pos:   position{line: 100, col: 8, offset: 1924},
					label: "any",
					expr: &choiceExpr{
						pos: position{line: 100, col: 13, offset: 1929},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 100, col: 13, offset: 1929},
								val:        "any",
								ignoreCase: false,
								want:       "\"any\"",
							},
							&litMatcher{
								pos:        position{line: 100, col: 21, offset: 1937},
								val:        "all",
								ignoreCase: false,
								want:       "\"all\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Described",
			pos:  position{line: 104, col: 1, offset: 2006},
			expr: &actionExpr{
				pos: position{line: 104, col: 14, offset: 2019},
				run: (*parser).callonDescribed1,
				expr: &litMatcher{
					pos:        position{line: 104, col: 14, offset: 2019},
					val:        "desc",
					ignoreCase: false,
					want:       "\"desc\"",
				},
			},
		},
		{
			name: "BooleanLimit",
			pos:  position{line: 108, col: 1, offset: 2067},
			expr: &actionExpr{
				pos: position{line: 108, col: 17, offset: 2083},
				run: (*parser).callonBooleanLimit1,
				expr: &choiceExpr{
					pos: position{line: 108, col: 18, offset: 2084},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 108, col: 18, offset: 2084},
							val:        "true",
							ignoreCase: true,
							want:       "\"true\"i",
						},
						&litMatcher{
							pos:        position{line: 108, col: 28, offset: 2094},
							val:        "false",
							ignoreCase: true,
							want:       "\"false\"i",
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 116, col: 1, offset: 2244},
			expr: &choiceExpr{
				pos: position{line: 116, col: 9, offset: 2252},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 116, col: 9, offset: 2252},
						run: (*parser).callonTerm2,
						expr: &seqExpr{
							pos: position{line: 116, col: 9, offset: 2252},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 116, col: 9, offset: 2252},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:    position{line: 116, col: 13, offset: 2256},
									offset: 83,
								},
								&labeledExpr{
									pos:   position{line: 116, col: 15, offset: 2258},
									label: "exp",
									expr: &ruleRefExpr{
										pos:    position{line: 116, col: 19, offset: 2262},
										offset: 16,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 116, col: 30, offset: 2273},
									offset: 83,
								},
								&litMatcher{
									pos:        position{line: 116, col: 32, offset: 2275},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 118, col: 5, offset: 2306},
						run: (*parser).callonTerm10,
						expr: &labeledExpr{
							pos:   position{line: 118, col: 5, offset: 2306},
							label: "exp",
							expr: &ruleRefExpr{
								pos:    position{line: 118, col: 10, offset: 2311},
								offset: 16,
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 122, col: 1, offset: 2349},
			expr: &actionExpr{
				pos: position{line: 122, col: 15, offset: 2363},
				run: (*parser).callonExpression1,
				expr: &seqExpr{
					pos: position{line: 122, col: 15, offset: 2363},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 122, col: 15, offset: 2363},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 122, col: 21, offset: 2369},
								offset: 17,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 122, col: 38, offset: 2386},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 122, col: 40, offset: 2388},
							label: "operand",
							expr: &choiceExpr{
								pos: position{line: 122, col: 49, offset: 2397},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 122, col: 49, offset: 2397},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 122, col: 53, offset: 2401},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 122, col: 57, offset: 2405},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&litMatcher{
										pos:        position{line: 122, col: 61, offset: 2409},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 122, col: 66, offset: 2414},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 122, col: 68, offset: 2416},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 122, col: 74, offset: 2422},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionLimit",
			pos:  position{line: 134, col: 1, offset: 2621},
			expr: &choiceExpr{
				pos: position{line: 134, col: 22, offset: 2642},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 134, col: 22, offset: 2642},
						offset: 9,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 34, offset: 2654},
						offset: 11,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 47, offset: 2667},
						offset: 71,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 61, offset: 2681},
						offset: 14,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 76, offset: 2696},
						offset: 61,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 94, offset: 2714},
						offset: 60,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 105, offset: 2725},
						offset: 57,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 117, offset: 2737},
						offset: 59,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 129, offset: 2749},
						offset: 48,
					},
					&ruleRefExpr{
						pos:    position{line: 134, col: 146, offset: 2766},
						offset: 46,
					},
				},
			},
		},
		{
			name: "LogicalLimit",
			pos:  position{line: 136, col: 1, offset: 2784},
			expr: &actionExpr{
				pos: position{line: 136, col: 16, offset: 2799},
				run: (*parser).callonLogicalLimit1,
				expr: &seqExpr{
					pos: position{line: 136, col: 16, offset: 2799},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 136, col: 16, offset: 2799},
							label: "or",
							expr: &ruleRefExpr{
								pos:    position{line: 136, col: 19, offset: 2802},
								offset: 19,
							},
						},
						&andCodeExpr{
							pos: position{line: 136, col: 34, offset: 2817},
							run: (*parser).callonLogicalLimit5,
						},
					},
				},
			},
		},
		{
			name: "LogicalLimitOr",
			pos:  position{line: 146, col: 1, offset: 2959},
			expr: &actionExpr{
				pos: position{line: 146, col: 19, offset: 2977},
				run: (*parser).callonLogicalLimitOr1,
				expr: &seqExpr{
					pos: position{line: 146, col: 19, offset: 2977},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 146, col: 19, offset: 2977},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 146, col: 21, offset: 2979},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 146, col: 26, offset: 2984},
								offset: 21,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 146, col: 42, offset: 3000},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 146, col: 44, offset: 3002},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 146, col: 50, offset: 3008},
								expr: &ruleRefExpr{
									pos:    position{line: 146, col: 50, offset: 3008},
									offset: 20,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 146, col: 68, offset: 3026},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "LogicalLimitOrOp",
			pos:  position{line: 158, col: 1, offset: 3247},
			expr: &actionExpr{
				pos: position{line: 158, col: 21, offset: 3267},
				run: (*parser).callonLogicalLimitOrOp1,
				expr: &seqExpr{
					pos: position{line: 158, col: 21, offset: 3267},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 158, col: 21, offset: 3267},
							offset: 83,
						},
						&choiceExpr{
							pos: position{line: 158, col: 24, offset: 3270},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 158, col: 24, offset: 3270},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&litMatcher{
									pos:        position{line: 158, col: 30, offset: 3276},
									val:        "\\|",
									ignoreCase: false,
									want:       "\"\\\\|\"",
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 158, col: 37, offset: 3283},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 158, col: 39, offset: 3285},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 158, col: 41, offset: 3287},
								offset: 21,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalLimitXor",
			pos:  position{line: 163, col: 1, offset: 3351},
			expr: &actionExpr{
				pos: position{line: 163, col: 20, offset: 3370},
				run: (*parser).callonLogicalLimitXor1,
				expr: &seqExpr{
					pos: position{line: 163, col: 20, offset: 3370},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 163, col: 20, offset: 3370},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 163, col: 22, offset: 3372},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 163, col: 27, offset: 3377},
								offset: 23,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 163, col: 43, offset: 3393},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 163, col: 45, offset: 3395},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 163, col: 51, offset: 3401},
								expr: &ruleRefExpr{
									pos:    position{line: 163, col: 51, offset: 3401},
									offset: 22,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 163, col: 70, offset: 3420},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "LogicalLimitXorOp",
			pos:  position{line: 175, col: 1, offset: 3644},
			expr: &actionExpr{
				pos: position{line: 175, col: 22, offset: 3665},
				run: (*parser).callonLogicalLimitXorOp1,
				expr: &seqExpr{
					pos: position{line: 175, col: 22, offset: 3665},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 175, col: 22, offset: 3665},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 175, col: 24, offset: 3667},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 175, col: 28, offset: 3671},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 175, col: 30, offset: 3673},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 175, col: 32, offset: 3675},
								offset: 23,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalLimitAnd",
			pos:  position{line: 180, col: 1, offset: 3738},
			expr: &actionExpr{
				pos: position{line: 180, col: 20, offset: 3757},
				run: (*parser).callonLogicalLimitAnd1,
				expr: &seqExpr{
					pos: position{line: 180, col: 20, offset: 3757},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 180, col: 20, offset: 3757},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 180, col: 22, offset: 3759},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 180, col: 27, offset: 3764},
								offset: 25,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 180, col: 44, offset: 3781},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 180, col: 46, offset: 3783},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 180, col: 52, offset: 3789},
								expr: &ruleRefExpr{
									pos:    position{line: 180, col: 52, offset: 3789},
									offset: 24,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 180, col: 71, offset: 3808},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "LogicalLimitAndOp",
			pos:  position{line: 192, col: 1, offset: 4031},
			expr: &actionExpr{
				pos: position{line: 192, col: 22, offset: 4052},
				run: (*parser).callonLogicalLimitAndOp1,
				expr: &seqExpr{
					pos: position{line: 192, col: 22, offset: 4052},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 192, col: 22, offset: 4052},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 192, col: 24, offset: 4054},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&ruleRefExpr{
							pos:    position{line: 192, col: 28, offset: 4058},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 192, col: 30, offset: 4060},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 192, col: 32, offset: 4062},
								offset: 25,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalLimitTerm",
			pos:  position{line: 197, col: 1, offset: 4127},
			expr: &actionExpr{
				pos: position{line: 197, col: 21, offset: 4147},
				run: (*parser).callonLogicalLimitTerm1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 21, offset: 4147},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 197, col: 29, offset: 4155},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 197, col: 29, offset: 4155},
								offset: 26,
							},
							&ruleRefExpr{
								pos:    position{line: 197, col: 57, offset: 4183},
								offset: 27,
							},
						},
					},
				},
			},
		},
		{
			name: "ParentheticalLogicalLimit",
			pos:  position{line: 201, col: 1, offset: 4236},
			expr: &actionExpr{
				pos: position{line: 201, col: 30, offset: 4265},
				run: (*parser).callonParentheticalLogicalLimit1,
				expr: &seqExpr{
					pos: position{line: 201, col: 30, offset: 4265},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 201, col: 30, offset: 4265},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:    position{line: 201, col: 34, offset: 4269},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 201, col: 36, offset: 4271},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 201, col: 42, offset: 4277},
								offset: 27,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 201, col: 60, offset: 4295},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 201, col: 62, offset: 4297},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "PlainLogicalLimit",
			pos:  position{line: 206, col: 1, offset: 4386},
			expr: &actionExpr{
				pos: position{line: 206, col: 22, offset: 4407},
				run: (*parser).callonPlainLogicalLimit1,
				expr: &labeledExpr{
					pos:   position{line: 206, col: 22, offset: 4407},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 206, col: 30, offset: 4415},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 206, col: 30, offset: 4415},
								offset: 9,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 42, offset: 4427},
								offset: 11,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 55, offset: 4440},
								offset: 71,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 69, offset: 4454},
								offset: 14,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 84, offset: 4469},
								offset: 61,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 102, offset: 4487},
								offset: 16,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 115, offset: 4500},
								offset: 60,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 126, offset: 4511},
								offset: 57,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 138, offset: 4523},
								offset: 58,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 156, offset: 4541},
								offset: 56,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 173, offset: 4558},
								offset: 59,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 184, offset: 4569},
								offset: 15,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 191, offset: 4576},
								offset: 55,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 205, offset: 4590},
								offset: 48,
							},
							&ruleRefExpr{
								pos:    position{line: 206, col: 222, offset: 4607},
								offset: 28,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalIdentifierLimit",
			pos:  position{line: 210, col: 1, offset: 4664},
			expr: &actionExpr{
				pos: position{line: 210, col: 27, offset: 4690},
				run: (*parser).callonLogicalIdentifierLimit1,
				expr: &seqExpr{
					pos: position{line: 210, col: 27, offset: 4690},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 210, col: 27, offset: 4690},
							label: "ref",
							expr: &ruleRefExpr{
								pos:    position{line: 210, col: 32, offset: 4695},
								offset: 29,
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 51, offset: 4714},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 57, offset: 4720},
								expr: &ruleRefExpr{
									pos:    position{line: 210, col: 58, offset: 4721},
									offset: 51,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalIdentifier",
			pos:  position{line: 218, col: 1, offset: 4850},
			expr: &actionExpr{
				pos: position{line: 218, col: 22, offset: 4871},
				run: (*parser).callonLogicalIdentifier1,
				expr: &ruleRefExpr{
					pos:    position{line: 218, col: 22, offset: 4871},
					offset: 78,
				},
			},
		},
		{
			name: "LogicalConstraint",
			pos:  position{line: 222, col: 1, offset: 4910},
			expr: &actionExpr{
				pos: position{line: 222, col: 21, offset: 4930},
				run: (*parser).callonLogicalConstraint1,
				expr: &seqExpr{
					pos: position{line: 222, col: 21, offset: 4930},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 222, col: 21, offset: 4930},
							label: "or",
							expr: &ruleRefExpr{
								pos:    position{line: 222, col: 24, offset: 4933},
								offset: 31,
							},
						},
						&andCodeExpr{
							pos: position{line: 222, col: 44, offset: 4953},
							run: (*parser).callonLogicalConstraint5,
						},
					},
				},
			},
		},
		{
			name: "LogicalConstraintOr",
			pos:  position{line: 232, col: 1, offset: 5100},
			expr: &actionExpr{
				pos: position{line: 232, col: 24, offset: 5123},
				run: (*parser).callonLogicalConstraintOr1,
				expr: &seqExpr{
					pos: position{line: 232, col: 24, offset: 5123},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 232, col: 24, offset: 5123},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 26, offset: 5125},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 232, col: 31, offset: 5130},
								offset: 33,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 232, col: 52, offset: 5151},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 54, offset: 5153},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 60, offset: 5159},
								expr: &ruleRefExpr{
									pos:    position{line: 232, col: 60, offset: 5159},
									offset: 32,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 232, col: 83, offset: 5182},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "LogicalConstraintOrOp",
			pos:  position{line: 244, col: 1, offset: 5413},
			expr: &actionExpr{
				pos: position{line: 244, col: 26, offset: 5438},
				run: (*parser).callonLogicalConstraintOrOp1,
				expr: &seqExpr{
					pos: position{line: 244, col: 26, offset: 5438},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 244, col: 26, offset: 5438},
							offset: 83,
						},
						&choiceExpr{
							pos: position{line: 244, col: 29, offset: 5441},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 244, col: 29, offset: 5441},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&litMatcher{
									pos:        position{line: 244, col: 35, offset: 5447},
									val:        "\\|",
									ignoreCase: false,
									want:       "\"\\\\|\"",
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 244, col: 42, offset: 5454},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 44, offset: 5456},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 244, col: 46, offset: 5458},
								offset: 33,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalConstraintXor",
			pos:  position{line: 249, col: 1, offset: 5532},
			expr: &actionExpr{
				pos: position{line: 249, col: 25, offset: 5556},
				run: (*parser).callonLogicalConstraintXor1,
				expr: &seqExpr{
					pos: position{line: 249, col: 25, offset: 5556},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 249, col: 25, offset: 5556},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 249, col: 27, offset: 5558},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 249, col: 32, offset: 5563},
								offset: 35,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 249, col: 53, offset: 5584},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 249, col: 55, offset: 5586},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 249, col: 61, offset: 5592},
								expr: &ruleRefExpr{
									pos:    position{line: 249, col: 61, offset: 5592},
									offset: 34,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 249, col: 85, offset: 5616},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "LogicalConstraintXorOp",
			pos:  position{line: 261, col: 1, offset: 5850},
			expr: &actionExpr{
				pos: position{line: 261, col: 27, offset: 5876},
				run: (*parser).callonLogicalConstraintXorOp1,
				expr: &seqExpr{
					pos: position{line: 261, col: 27, offset: 5876},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 261, col: 27, offset: 5876},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 261, col: 29, offset: 5878},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 261, col: 33, offset: 5882},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 261, col: 35, offset: 5884},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 261, col: 37, offset: 5886},
								offset: 35,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalConstraintAnd",
			pos:  position{line: 266, col: 1, offset: 5959},
			expr: &actionExpr{
				pos: position{line: 266, col: 25, offset: 5983},
				run: (*parser).callonLogicalConstraintAnd1,
				expr: &seqExpr{
					pos: position{line: 266, col: 25, offset: 5983},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 266, col: 25, offset: 5983},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 266, col: 27, offset: 5985},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 266, col: 32, offset: 5990},
								offset: 37,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 266, col: 54, offset: 6012},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 266, col: 56, offset: 6014},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 62, offset: 6020},
								expr: &ruleRefExpr{
									pos:    position{line: 266, col: 62, offset: 6020},
									offset: 36,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 266, col: 86, offset: 6044},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "LogicalConstraintAndOp",
			pos:  position{line: 278, col: 1, offset: 6277},
			expr: &actionExpr{
				pos: position{line: 278, col: 27, offset: 6303},
				run: (*parser).callonLogicalConstraintAndOp1,
				expr: &seqExpr{
					pos: position{line: 278, col: 27, offset: 6303},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 278, col: 27, offset: 6303},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 278, col: 29, offset: 6305},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&ruleRefExpr{
							pos:    position{line: 278, col: 33, offset: 6309},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 278, col: 35, offset: 6311},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 278, col: 37, offset: 6313},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalConstraintTerm",
			pos:  position{line: 283, col: 1, offset: 6388},
			expr: &actionExpr{
				pos: position{line: 283, col: 26, offset: 6413},
				run: (*parser).callonLogicalConstraintTerm1,
				expr: &labeledExpr{
					pos:   position{line: 283, col: 26, offset: 6413},
					label: "constraint",
					expr: &choiceExpr{
						pos: position{line: 283, col: 39, offset: 6426},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 283, col: 39, offset: 6426},
								offset: 38,
							},
							&ruleRefExpr{
								pos:    position{line: 283, col: 72, offset: 6459},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "ParentheticalLogicalConstraint",
			pos:  position{line: 287, col: 1, offset: 6527},
			expr: &actionExpr{
				pos: position{line: 287, col: 35, offset: 6561},
				run: (*parser).callonParentheticalLogicalConstraint1,
				expr: &seqExpr{
					pos: position{line: 287, col: 35, offset: 6561},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 287, col: 35, offset: 6561},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:    position{line: 287, col: 39, offset: 6565},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 287, col: 41, offset: 6567},
							label: "constraint",
							expr: &ruleRefExpr{
								pos:    position{line: 287, col: 52, offset: 6578},
								offset: 39,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 287, col: 75, offset: 6601},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 287, col: 77, offset: 6603},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "PlainLogicalConstraint",
			pos:  position{line: 292, col: 1, offset: 6702},
			expr: &actionExpr{
				pos: position{line: 292, col: 27, offset: 6728},
				run: (*parser).callonPlainLogicalConstraint1,
				expr: &labeledExpr{
					pos:   position{line: 292, col: 27, offset: 6728},
					label: "constraint",
					expr: &choiceExpr{
						pos: position{line: 292, col: 40, offset: 6741},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 292, col: 40, offset: 6741},
								offset: 40,
							},
							&ruleRefExpr{
								pos:    position{line: 292, col: 48, offset: 6749},
								offset: 41,
							},
							&ruleRefExpr{
								pos:    position{line: 292, col: 54, offset: 6755},
								offset: 42,
							},
							&ruleRefExpr{
								pos:    position{line: 292, col: 60, offset: 6761},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "Range",
			pos:  position{line: 304, col: 1, offset: 7014},
			expr: &actionExpr{
				pos: position{line: 304, col: 10, offset: 7023},
				run: (*parser).callonRange1,
				expr: &seqExpr{
					pos: position{line: 304, col: 10, offset: 7023},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 304, col: 10, offset: 7023},
							label: "from",
							expr: &ruleRefExpr{
								pos:    position{line: 304, col: 15, offset: 7028},
								offset: 5,
							},
						},
						&litMatcher{
							pos:        position{line: 304, col: 21, offset: 7034},
							val:        " to ",
							ignoreCase: false,
							want:       "\" to \"",
						},
						&labeledExpr{
							pos:   position{line: 304, col: 28, offset: 7041},
							label: "to",
							expr: &ruleRefExpr{
								pos:    position{line: 304, col: 31, offset: 7044},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "Min",
			pos:  position{line: 311, col: 1, offset: 7138},
			expr: &actionExpr{
				pos: position{line: 311, col: 8, offset: 7145},
				run: (*parser).callonMin1,
				expr: &seqExpr{
					pos: position{line: 311, col: 8, offset: 7145},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 311, col: 8, offset: 7145},
							val:        "[Mm]",
							chars:      []rune{'M', 'm'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 311, col: 13, offset: 7150},
							val:        "in ",
							ignoreCase: false,
							want:       "\"in \"",
						},
						&ruleRefExpr{
							pos:    position{line: 311, col: 19, offset: 7156},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 311, col: 21, offset: 7158},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 311, col: 27, offset: 7164},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "Max",
			pos:  position{line: 315, col: 1, offset: 7227},
			expr: &actionExpr{
				pos: position{line: 315, col: 8, offset: 7234},
				run: (*parser).callonMax1,
				expr: &seqExpr{
					pos: position{line: 315, col: 8, offset: 7234},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 315, col: 8, offset: 7234},
							val:        "[Mm]",
							chars:      []rune{'M', 'm'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 315, col: 13, offset: 7239},
							val:        "ax ",
							ignoreCase: false,
							want:       "\"ax \"",
						},
						&ruleRefExpr{
							pos:    position{line: 315, col: 19, offset: 7245},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 315, col: 21, offset: 7247},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 315, col: 27, offset: 7253},
								offset: 5,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 315, col: 33, offset: 7259},
							expr: &seqExpr{
								pos: position{line: 315, col: 34, offset: 7260},
								exprs: []any{
									&ruleRefExpr{
										pos:    position{line: 315, col: 34, offset: 7260},
										offset: 83,
									},
									&litMatcher{
										pos:        position{line: 315, col: 36, offset: 7262},
										val:        "chars",
										ignoreCase: false,
										want:       "\"chars\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MinOfLimit",
			pos:  position{line: 319, col: 1, offset: 7329},
			expr: &actionExpr{
				pos: position{line: 319, col: 15, offset: 7343},
				run: (*parser).callonMinOfLimit1,
				expr: &seqExpr{
					pos: position{line: 319, col: 15, offset: 7343},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 319, col: 15, offset: 7343},
							val:        "minof(",
							ignoreCase: true,
							want:       "\"minOf(\"i",
						},
						&ruleRefExpr{
							pos:    position{line: 319, col: 25, offset: 7353},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 319, col: 27, offset: 7355},
							label: "limits",
							expr: &oneOrMoreExpr{
								pos: position{line: 319, col: 34, offset: 7362},
								expr: &ruleRefExpr{
									pos:    position{line: 319, col: 35, offset: 7363},
									offset: 45,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 319, col: 52, offset: 7380},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 319, col: 54, offset: 7382},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MaxOfLimit",
			pos:  position{line: 330, col: 1, offset: 7571},
			expr: &actionExpr{
				pos: position{line: 330, col: 15, offset: 7585},
				run: (*parser).callonMaxOfLimit1,
				expr: &seqExpr{
					pos: position{line: 330, col: 15, offset: 7585},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 330, col: 15, offset: 7585},
							val:        "maxof(",
							ignoreCase: true,
							want:       "\"maxOf(\"i",
						},
						&ruleRefExpr{
							pos:    position{line: 330, col: 25, offset: 7595},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 330, col: 27, offset: 7597},
							label: "limits",
							expr: &oneOrMoreExpr{
								pos: position{line: 330, col: 34, offset: 7604},
								expr: &ruleRefExpr{
									pos:    position{line: 330, col: 35, offset: 7605},
									offset: 45,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 330, col: 52, offset: 7622},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 330, col: 54, offset: 7624},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MinMaxSetLimit",
			pos:  position{line: 341, col: 1, offset: 7813},
			expr: &actionExpr{
				pos: position{line: 341, col: 19, offset: 7831},
				run: (*parser).callonMinMaxSetLimit1,
				expr: &seqExpr{
					pos: position{line: 341, col: 19, offset: 7831},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 341, col: 19, offset: 7831},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 341, col: 25, offset: 7837},
								offset: 5,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 341, col: 31, offset: 7843},
							expr: &seqExpr{
								pos: position{line: 341, col: 32, offset: 7844},
								exprs: []any{
									&ruleRefExpr{
										pos:    position{line: 341, col: 32, offset: 7844},
										offset: 83,
									},
									&ruleRefExpr{
										pos:    position{line: 341, col: 34, offset: 7846},
										offset: 84,
									},
									&ruleRefExpr{
										pos:    position{line: 341, col: 40, offset: 7852},
										offset: 83,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierLimit",
			pos:  position{line: 345, col: 1, offset: 7880},
			expr: &actionExpr{
				pos: position{line: 345, col: 20, offset: 7899},
				run: (*parser).callonIdentifierLimit1,
				expr: &seqExpr{
					pos: position{line: 345, col: 20, offset: 7899},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 345, col: 20, offset: 7899},
							label: "ref",
							expr: &ruleRefExpr{
								pos:    position{line: 345, col: 25, offset: 7904},
								offset: 47,
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 37, offset: 7916},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 43, offset: 7922},
								expr: &ruleRefExpr{
									pos:    position{line: 345, col: 44, offset: 7923},
									offset: 51,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 353, col: 1, offset: 8052},
			expr: &actionExpr{
				pos: position{line: 353, col: 15, offset: 8066},
				run: (*parser).callonIdentifier1,
				expr: &ruleRefExpr{
					pos:    position{line: 353, col: 15, offset: 8066},
					offset: 75,
				},
			},
		},
		{
			name: "ReferenceLimit",
			pos:  position{line: 358, col: 1, offset: 8112},
			expr: &actionExpr{
				pos: position{line: 358, col: 19, offset: 8130},
				run: (*parser).callonReferenceLimit1,
				expr: &seqExpr{
					pos: position{line: 358, col: 19, offset: 8130},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 358, col: 19, offset: 8130},
							val:        "<<",
							ignoreCase: false,
							want:       "\"<<\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 24, offset: 8135},
							label: "reference",
							expr: &ruleRefExpr{
								pos:    position{line: 358, col: 34, offset: 8145},
								offset: 49,
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 46, offset: 8157},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 358, col: 52, offset: 8163},
								expr: &ruleRefExpr{
									pos:    position{line: 358, col: 53, offset: 8164},
									offset: 52,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 358, col: 71, offset: 8182},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 76, offset: 8187},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 358, col: 82, offset: 8193},
								expr: &ruleRefExpr{
									pos:    position{line: 358, col: 83, offset: 8194},
									offset: 51,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceId",
			pos:  position{line: 369, col: 1, offset: 8423},
			expr: &actionExpr{
				pos: position{line: 369, col: 16, offset: 8438},
				run: (*parser).callonReferenceId1,
				expr: &seqExpr{
					pos: position{line: 369, col: 16, offset: 8438},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 369, col: 16, offset: 8438},
							expr: &litMatcher{
								pos:        position{line: 369, col: 16, offset: 8438},
								val:        "ref_",
								ignoreCase: false,
								want:       "\"ref_\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 369, col: 24, offset: 8446},
							expr: &ruleRefExpr{
								pos:    position{line: 369, col: 24, offset: 8446},
								offset: 50,
							},
						},
					},
				},
			},
		},
		{
			name: "ReferencePart",
			pos:  position{line: 373, col: 1, offset: 8501},
			expr: &actionExpr{
				pos: position{line: 373, col: 18, offset: 8518},
				run: (*parser).callonReferencePart1,
				expr: &seqExpr{
					pos: position{line: 373, col: 18, offset: 8518},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 373, col: 18, offset: 8518},
							offset: 75,
						},
						&zeroOrOneExpr{
							pos: position{line: 373, col: 29, offset: 8529},
							expr: &litMatcher{
								pos:        position{line: 373, col: 29, offset: 8529},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceField",
			pos:  position{line: 377, col: 1, offset: 8568},
			expr: &actionExpr{
				pos: position{line: 377, col: 19, offset: 8586},
				run: (*parser).callonReferenceField1,
				expr: &seqExpr{
					pos: position{line: 377, col: 19, offset: 8586},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 377, col: 19, offset: 8586},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 23, offset: 8590},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 377, col: 30, offset: 8597},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 377, col: 30, offset: 8597},
										offset: 48,
									},
									&ruleRefExpr{
										pos:    position{line: 377, col: 47, offset: 8614},
										offset: 46,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceLabel",
			pos:  position{line: 381, col: 1, offset: 8663},
			expr: &actionExpr{
				pos: position{line: 381, col: 19, offset: 8681},
				run: (*parser).callonReferenceLabel1,
				expr: &seqExpr{
					pos: position{line: 381, col: 19, offset: 8681},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 381, col: 19, offset: 8681},
							offset: 83,
						},
						&ruleRefExpr{
							pos:    position{line: 381, col: 21, offset: 8683},
							offset: 84,
						},
						&ruleRefExpr{
							pos:    position{line: 381, col: 27, offset: 8689},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 381, col: 29, offset: 8691},
							label: "label",
							expr: &ruleRefExpr{
								pos:    position{line: 381, col: 35, offset: 8697},
								offset: 53,
							},
						},
						&andExpr{
							pos: position{line: 381, col: 50, offset: 8712},
							expr: &litMatcher{
								pos:        position{line: 381, col: 51, offset: 8713},
								val:        ">>",
								ignoreCase: false,
								want:       "\">>\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceText",
			pos:  position{line: 385, col: 1, offset: 8758},
			expr: &actionExpr{
				pos: position{line: 385, col: 18, offset: 8775},
				run: (*parser).callonReferenceText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 385, col: 18, offset: 8775},
					expr: &seqExpr{
						pos: position{line: 385, col: 19, offset: 8776},
						exprs: []any{
							&notExpr{
								pos: position{line: 385, col: 19, offset: 8776},
								expr: &litMatcher{
									pos:        position{line: 385, col: 20, offset: 8777},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
							&anyMatcher{
								line: 385, col: 25, offset: 8782,
							},
						},
					},
				},
			},
		},
		{
			name: "IntConstraint",
			pos:  position{line: 392, col: 1, offset: 8830},
			expr: &actionExpr{
				pos: position{line: 392, col: 18, offset: 8847},
				run: (*parser).callonIntConstraint1,
				expr: &labeledExpr{
					pos:   position{line: 392, col: 18, offset: 8847},
					label: "i",
					expr: &ruleRefExpr{
						pos:    position{line: 392, col: 20, offset: 8849},
						offset: 59,
					},
				},
			},
		},
		{
			name: "LengthLimit",
			pos:  position{line: 396, col: 1, offset: 8911},
			expr: &actionExpr{
				pos: position{line: 396, col: 16, offset: 8926},
				run: (*parser).callonLengthLimit1,
				expr: &seqExpr{
					pos: position{line: 396, col: 16, offset: 8926},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 396, col: 16, offset: 8926},
							val:        "len(",
							ignoreCase: true,
							want:       "\"len(\"i",
						},
						&ruleRefExpr{
							pos:    position{line: 396, col: 24, offset: 8934},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 396, col: 26, offset: 8936},
							label: "ref",
							expr: &choiceExpr{
								pos: position{line: 396, col: 32, offset: 8942},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 396, col: 32, offset: 8942},
										offset: 46,
									},
									&ruleRefExpr{
										pos:    position{line: 396, col: 50, offset: 8960},
										offset: 48,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 396, col: 67, offset: 8977},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 396, col: 69, offset: 8979},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "CharacterLimit",
			pos:  position{line: 400, col: 1, offset: 9038},
			expr: &actionExpr{
				pos: position{line: 400, col: 19, offset: 9056},
				run: (*parser).callonCharacterLimit1,
				expr: &seqExpr{
					pos: position{line: 400, col: 19, offset: 9056},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 400, col: 19, offset: 9056},
							label: "maxBytes",
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 28, offset: 9065},
								offset: 59,
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 37, offset: 9074},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 41, offset: 9078},
							label: "maxCodepoints",
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 55, offset: 9092},
								offset: 59,
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 64, offset: 9101},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "TempLimit",
			pos:  position{line: 406, col: 1, offset: 9227},
			expr: &actionExpr{
				pos: position{line: 406, col: 14, offset: 9240},
				run: (*parser).callonTempLimit1,
				expr: &seqExpr{
					pos: position{line: 406, col: 14, offset: 9240},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 406, col: 14, offset: 9240},
							label: "f",
							expr: &choiceExpr{
								pos: position{line: 406, col: 18, offset: 9244},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 406, col: 18, offset: 9244},
										offset: 72,
									},
									&ruleRefExpr{
										pos:    position{line: 406, col: 26, offset: 9252},
										offset: 73,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 36, offset: 9262},
							val:        "°C",
							ignoreCase: false,
							want:       "\"°C\"",
						},
					},
				},
			},
		},
		{
			name: "PercentageLimit",
			pos:  position{line: 417, col: 1, offset: 9521},
			expr: &actionExpr{
				pos: position{line: 417, col: 20, offset: 9540},
				run: (*parser).callonPercentageLimit1,
				expr: &seqExpr{
					pos: position{line: 417, col: 20, offset: 9540},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 417, col: 20, offset: 9540},
							label: "f",
							expr: &choiceExpr{
								pos: position{line: 417, col: 23, offset: 9543},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 417, col: 23, offset: 9543},
										offset: 72,
									},
									&ruleRefExpr{
										pos:    position{line: 417, col: 31, offset: 9551},
										offset: 73,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 40, offset: 9560},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "IntLimit",
			pos:  position{line: 428, col: 1, offset: 9808},
			expr: &actionExpr{
				pos: position{line: 428, col: 13, offset: 9820},
				run: (*parser).callonIntLimit1,
				expr: &seqExpr{
					pos: position{line: 428, col: 13, offset: 9820},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 428, col: 13, offset: 9820},
							label: "i",
							expr: &ruleRefExpr{
								pos:    position{line: 428, col: 15, offset: 9822},
								offset: 73,
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 23, offset: 9830},
							label: "e",
							expr: &zeroOrOneExpr{
								pos: position{line: 428, col: 25, offset: 9832},
								expr: &ruleRefExpr{
									pos:    position{line: 428, col: 25, offset: 9832},
									offset: 86,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HexLimit",
			pos:  position{line: 435, col: 1, offset: 9959},
			expr: &actionExpr{
				pos: position{line: 435, col: 13, offset: 9971},
				run: (*parser).callonHexLimit1,
				expr: &labeledExpr{
					pos:   position{line: 435, col: 13, offset: 9971},
					label: "h",
					expr: &ruleRefExpr{
						pos:    position{line: 435, col: 15, offset: 9973},
						offset: 74,
					},
				},
			},
		},
		{
			name: "StatusCodeLimit",
			pos:  position{line: 442, col: 1, offset: 10027},
			expr: &actionExpr{
				pos: position{line: 442, col: 20, offset: 10046},
				run: (*parser).callonStatusCodeLimit1,
				expr: &labeledExpr{
					pos:   position{line: 442, col: 20, offset: 10046},
					label: "status",
					expr: &ruleRefExpr{
						pos:    position{line: 442, col: 28, offset: 10054},
						offset: 62,
					},
				},
			},
		},
		{
			name: "StatusCode",
			pos:  position{line: 446, col: 1, offset: 10140},
			expr: &choiceExpr{
				pos: position{line: 447, col: 6, offset: 10159},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 447, col: 7, offset: 10160},
						run: (*parser).callonStatusCode2,
						expr: &choiceExpr{
							pos: position{line: 447, col: 8, offset: 10161},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 447, col: 8, offset: 10161},
									val:        "success",
									ignoreCase: true,
									want:       "\"SUCCESS\"i",
								},
								&litMatcher{
									pos:        position{line: 447, col: 21, offset: 10174},
									val:        "ok",
									ignoreCase: true,
									want:       "\"OK\"i",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 448, col: 8, offset: 10230},
						run: (*parser).callonStatusCode6,
						expr: &litMatcher{
							pos:        position{line: 448, col: 8, offset: 10230},
							val:        "failure",
							ignoreCase: true,
							want:       "\"FAILURE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 449, col: 8, offset: 10290},
						run: (*parser).callonStatusCode8,
						expr: &litMatcher{
							pos:        position{line: 449, col: 8, offset: 10290},
							val:        "invalid_subscription",
							ignoreCase: true,
							want:       "\"INVALID_SUBSCRIPTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 450, col: 8, offset: 10375},
						run: (*parser).callonStatusCode10,
						expr: &litMatcher{
							pos:        position{line: 450, col: 8, offset: 10375},
							val:        "unsupported_access",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ACCESS\"i",
						},
					},
					&actionExpr{
						pos: position{line: 451, col: 8, offset: 10456},
						run: (*parser).callonStatusCode12,
						expr: &litMatcher{
							pos:        position{line: 451, col: 8, offset: 10456},
							val:        "unsupported_endpoint",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ENDPOINT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 8, offset: 10541},
						run: (*parser).callonStatusCode14,
						expr: &litMatcher{
							pos:        position{line: 452, col: 8, offset: 10541},
							val:        "invalid_action",
							ignoreCase: true,
							want:       "\"INVALID_ACTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 8, offset: 10614},
						run: (*parser).callonStatusCode16,
						expr: &litMatcher{
							pos:        position{line: 453, col: 8, offset: 10614},
							val:        "unsupported_command",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_COMMAND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 454, col: 8, offset: 10697},
						run: (*parser).callonStatusCode18,
						expr: &litMatcher{
							pos:        position{line: 454, col: 8, offset: 10697},
							val:        "invalid_command",
							ignoreCase: true,
							want:       "\"INVALID_COMMAND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 455, col: 8, offset: 10772},
						run: (*parser).callonStatusCode20,
						expr: &litMatcher{
							pos:        position{line: 455, col: 8, offset: 10772},
							val:        "unsupported_attribute",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ATTRIBUTE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 8, offset: 10859},
						run: (*parser).callonStatusCode22,
						expr: &litMatcher{
							pos:        position{line: 456, col: 8, offset: 10859},
							val:        "constraint_error",
							ignoreCase: true,
							want:       "\"CONSTRAINT_ERROR\"i",
						},
					},
					&actionExpr{
						pos: position{line: 457, col: 8, offset: 10936},
						run: (*parser).callonStatusCode24,
						expr: &litMatcher{
							pos:        position{line: 457, col: 8, offset: 10936},
							val:        "unsupported_write",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_WRITE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 458, col: 8, offset: 11015},
						run: (*parser).callonStatusCode26,
						expr: &litMatcher{
							pos:        position{line: 458, col: 8, offset: 11015},
							val:        "resource_exhausted",
							ignoreCase: true,
							want:       "\"RESOURCE_EXHAUSTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 459, col: 8, offset: 11096},
						run: (*parser).callonStatusCode28,
						expr: &litMatcher{
							pos:        position{line: 459, col: 8, offset: 11096},
							val:        "not_found",
							ignoreCase: true,
							want:       "\"NOT_FOUND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 460, col: 8, offset: 11159},
						run: (*parser).callonStatusCode30,
						expr: &litMatcher{
							pos:        position{line: 460, col: 8, offset: 11159},
							val:        "unreportable_attribute",
							ignoreCase: true,
							want:       "\"UNREPORTABLE_ATTRIBUTE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 461, col: 8, offset: 11248},
						run: (*parser).callonStatusCode32,
						expr: &litMatcher{
							pos:        position{line: 461, col: 8, offset: 11248},
							val:        "invalid_data_type",
							ignoreCase: true,
							want:       "\"INVALID_DATA_TYPE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 462, col: 8, offset: 11326},
						run: (*parser).callonStatusCode34,
						expr: &litMatcher{
							pos:        position{line: 462, col: 8, offset: 11326},
							val:        "unsupported_read",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_READ\"i",
						},
					},
					&actionExpr{
						pos: position{line: 463, col: 8, offset: 11403},
						run: (*parser).callonStatusCode36,
						expr: &litMatcher{
							pos:        position{line: 463, col: 8, offset: 11403},
							val:        "data_version_mismatch",
							ignoreCase: true,
							want:       "\"DATA_VERSION_MISMATCH\"i",
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 8, offset: 11489},
						run: (*parser).callonStatusCode38,
						expr: &litMatcher{
							pos:        position{line: 464, col: 8, offset: 11489},
							val:        "timeout",
							ignoreCase: true,
							want:       "\"TIMEOUT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 465, col: 8, offset: 11549},
						run: (*parser).callonStatusCode40,
						expr: &litMatcher{
							pos:        position{line: 465, col: 8, offset: 11549},
							val:        "unsupported_node",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_NODE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 8, offset: 11626},
						run: (*parser).callonStatusCode42,
						expr: &litMatcher{
							pos:        position{line: 466, col: 8, offset: 11626},
							val:        "busy",
							ignoreCase: true,
							want:       "\"BUSY\"i",
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 8, offset: 11680},
						run: (*parser).callonStatusCode44,
						expr: &litMatcher{
							pos:        position{line: 467, col: 8, offset: 11680},
							val:        "access_restricted",
							ignoreCase: true,
							want:       "\"ACCESS_RESTRICTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 468, col: 8, offset: 11759},
						run: (*parser).callonStatusCode46,
						expr: &litMatcher{
							pos:        position{line: 468, col: 8, offset: 11759},
							val:        "unsupported_cluster",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_CLUSTER\"i",
						},
					},
					&actionExpr{
						pos: position{line: 469, col: 8, offset: 11842},
						run: (*parser).callonStatusCode48,
						expr: &litMatcher{
							pos:        position{line: 469, col: 8, offset: 11842},
							val:        "no_upstream_subscription",
							ignoreCase: true,
							want:       "\"NO_UPSTREAM_SUBSCRIPTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 470, col: 8, offset: 11934},
						run: (*parser).callonStatusCode50,
						expr: &litMatcher{
							pos:        position{line: 470, col: 8, offset: 11934},
							val:        "needs_timed_interaction",
							ignoreCase: true,
							want:       "\"NEEDS_TIMED_INTERACTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 471, col: 8, offset: 12024},
						run: (*parser).callonStatusCode52,
						expr: &litMatcher{
							pos:        position{line: 471, col: 8, offset: 12024},
							val:        "unsupported_event",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_EVENT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 472, col: 8, offset: 12103},
						run: (*parser).callonStatusCode54,
						expr: &litMatcher{
							pos:        position{line: 472, col: 8, offset: 12103},
							val:        "paths_exhausted",
							ignoreCase: true,
							want:       "\"PATHS_EXHAUSTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 473, col: 8, offset: 12178},
						run: (*parser).callonStatusCode56,
						expr: &litMatcher{
							pos:        position{line: 473, col: 8, offset: 12178},
							val:        "timed_request_mismatch",
							ignoreCase: true,
							want:       "\"TIMED_REQUEST_MISMATCH\"i",
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 8, offset: 12266},
						run: (*parser).callonStatusCode58,
						expr: &litMatcher{
							pos:        position{line: 474, col: 8, offset: 12266},
							val:        "failsafe_required",
							ignoreCase: true,
							want:       "\"FAILSAFE_REQUIRED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 475, col: 8, offset: 12345},
						run: (*parser).callonStatusCode60,
						expr: &litMatcher{
							pos:        position{line: 475, col: 8, offset: 12345},
							val:        "invalid_in_state",
							ignoreCase: true,
							want:       "\"INVALID_IN_STATE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 476, col: 8, offset: 12421},
						run: (*parser).callonStatusCode62,
						expr: &litMatcher{
							pos:        position{line: 476, col: 8, offset: 12421},
							val:        "no_command_response",
							ignoreCase: true,
							want:       "\"NO_COMMAND_RESPONSE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 477, col: 8, offset: 12503},
						run: (*parser).callonStatusCode64,
						expr: &litMatcher{
							pos:        position{line: 477, col: 8, offset: 12503},
							val:        "terms_and_conditions_changed",
							ignoreCase: true,
							want:       "\"TERMS_AND_CONDITIONS_CHANGED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 8, offset: 12602},
						run: (*parser).callonStatusCode66,
						expr: &litMatcher{
							pos:        position{line: 478, col: 8, offset: 12602},
							val:        "maintenance_required",
							ignoreCase: true,
							want:       "\"MAINTENANCE_REQUIRED\"i",
						},
					},
				},
			},
		},
		{
			name: "TagList",
			pos:  position{line: 481, col: 1, offset: 12682},
			expr: &actionExpr{
				pos: position{line: 481, col: 12, offset: 12693},
				run: (*parser).callonTagList1,
				expr: &seqExpr{
					pos: position{line: 481, col: 12, offset: 12693},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 481, col: 12, offset: 12693},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 481, col: 14, offset: 12695},
							val:        "Includes",
							ignoreCase: false,
							want:       "\"Includes\"",
						},
						&ruleRefExpr{
							pos:    position{line: 481, col: 25, offset: 12706},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 481, col: 27, offset: 12708},
							label: "or",
							expr: &ruleRefExpr{
								pos:    position{line: 481, col: 31, offset: 12712},
								offset: 64,
							},
						},
					},
				},
			},
		},
		{
			name: "TagOr",
			pos:  position{line: 486, col: 1, offset: 12774},
			expr: &actionExpr{
				pos: position{line: 486, col: 10, offset: 12783},
				run: (*parser).callonTagOr1,
				expr: &seqExpr{
					pos: position{line: 486, col: 10, offset: 12783},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 486, col: 10, offset: 12783},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 486, col: 12, offset: 12785},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 486, col: 17, offset: 12790},
								offset: 66,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 486, col: 24, offset: 12797},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 486, col: 26, offset: 12799},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 486, col: 32, offset: 12805},
								expr: &ruleRefExpr{
									pos:    position{line: 486, col: 32, offset: 12805},
									offset: 65,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 486, col: 41, offset: 12814},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "TagOrOp",
			pos:  position{line: 498, col: 1, offset: 13036},
			expr: &actionExpr{
				pos: position{line: 498, col: 12, offset: 13047},
				run: (*parser).callonTagOrOp1,
				expr: &seqExpr{
					pos: position{line: 498, col: 12, offset: 13047},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 498, col: 12, offset: 13047},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 498, col: 15, offset: 13050},
							val:        "or",
							ignoreCase: true,
							want:       "\"or\"i",
						},
						&ruleRefExpr{
							pos:    position{line: 498, col: 22, offset: 13057},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 498, col: 24, offset: 13059},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 498, col: 26, offset: 13061},
								offset: 66,
							},
						},
					},
				},
			},
		},
		{
			name: "TagAnd",
			pos:  position{line: 504, col: 1, offset: 13117},
			expr: &actionExpr{
				pos: position{line: 504, col: 11, offset: 13127},
				run: (*parser).callonTagAnd1,
				expr: &seqExpr{
					pos: position{line: 504, col: 11, offset: 13127},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 504, col: 11, offset: 13127},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 504, col: 13, offset: 13129},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 504, col: 18, offset: 13134},
								offset: 68,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 504, col: 26, offset: 13142},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 504, col: 28, offset: 13144},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 504, col: 34, offset: 13150},
								expr: &ruleRefExpr{
									pos:    position{line: 504, col: 34, offset: 13150},
									offset: 67,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 504, col: 44, offset: 13160},
							offset: 83,
						},
					},
				},
			},
		},
		{
			name: "TagAndOp",
			pos:  position{line: 516, col: 1, offset: 13385},
			expr: &actionExpr{
				pos: position{line: 516, col: 13, offset: 13397},
				run: (*parser).callonTagAndOp1,
				expr: &seqExpr{
					pos: position{line: 516, col: 13, offset: 13397},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 516, col: 13, offset: 13397},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 516, col: 16, offset: 13400},
							val:        "and",
							ignoreCase: true,
							want:       "\"and\"i",
						},
						&ruleRefExpr{
							pos:    position{line: 516, col: 24, offset: 13408},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 516, col: 26, offset: 13410},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 516, col: 28, offset: 13412},
								offset: 68,
							},
						},
					},
				},
			},
		},
		{
			name: "TagTerm",
			pos:  position{line: 521, col: 1, offset: 13468},
			expr: &actionExpr{
				pos: position{line: 521, col: 12, offset: 13479},
				run: (*parser).callonTagTerm1,
				expr: &labeledExpr{
					pos:   position{line: 521, col: 12, offset: 13479},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 521, col: 20, offset: 13487},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 521, col: 20, offset: 13487},
								offset: 69,
							},
							&ruleRefExpr{
								pos:    position{line: 521, col: 44, offset: 13511},
								offset: 70,
							},
						},
					},
				},
			},
		},
		{
			name: "ParentheticalTagLimit",
			pos:  position{line: 525, col: 1, offset: 13560},
			expr: &actionExpr{
				pos: position{line: 525, col: 26, offset: 13585},
				run: (*parser).callonParentheticalTagLimit1,
				expr: &seqExpr{
					pos: position{line: 525, col: 26, offset: 13585},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 525, col: 26, offset: 13585},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:    position{line: 525, col: 30, offset: 13589},
							offset: 83,
						},
						&labeledExpr{
							pos:   position{line: 525, col: 32, offset: 13591},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 525, col: 38, offset: 13597},
								offset: 68,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 525, col: 46, offset: 13605},
							offset: 83,
						},
						&litMatcher{
							pos:        position{line: 525, col: 48, offset: 13607},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TagIdentifier",
			pos:  position{line: 529, col: 1, offset: 13643},
			expr: &actionExpr{
				pos: position{line: 529, col: 18, offset: 13660},
				run: (*parser).callonTagIdentifier1,
				expr: &seqExpr{
					pos: position{line: 529, col: 18, offset: 13660},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 529, col: 18, offset: 13660},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 529, col: 22, offset: 13664},
							label: "word",
							expr: &ruleRefExpr{
								pos:    position{line: 529, col: 27, offset: 13669},
								offset: 78,
							},
						},
						&litMatcher{
							pos:        position{line: 529, col: 32, offset: 13674},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "StringLimit",
			pos:  position{line: 533, col: 1, offset: 13736},
			expr: &actionExpr{
				pos: position{line: 533, col: 16, offset: 13751},
				run: (*parser).callonStringLimit1,
				expr: &seqExpr{
					pos: position{line: 533, col: 16, offset: 13751},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 533, col: 16, offset: 13751},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 21, offset: 13756},
							label: "limit",
							expr: &zeroOrMoreExpr{
								pos: position{line: 533, col: 27, offset: 13762},
								expr: &charClassMatcher{
									pos:        position{line: 533, col: 27, offset: 13762},
									val:        "[^\"]",
									chars:      []rune{'"'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 533, col: 33, offset: 13768},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 541, col: 1, offset: 13914},
			expr: &actionExpr{
				pos: position{line: 541, col: 10, offset: 13923},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 541, col: 10, offset: 13923},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 541, col: 10, offset: 13923},
							offset: 73,
						},
						&seqExpr{
							pos: position{line: 541, col: 19, offset: 13932},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 541, col: 19, offset: 13932},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 541, col: 23, offset: 13936},
									expr: &charClassMatcher{
										pos:        position{line: 541, col: 23, offset: 13936},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 545, col: 1, offset: 13996},
			expr: &actionExpr{
				pos: position{line: 545, col: 12, offset: 14007},
				run: (*parser).callonInteger1,
				expr: &seqExpr{
					pos: position{line: 545, col: 12, offset: 14007},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 545, col: 12, offset: 14007},
							label: "sign",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 17, offset: 14012},
								expr: &choiceExpr{
									pos: position{line: 545, col: 18, offset: 14013},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 545, col: 18, offset: 14013},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 545, col: 22, offset: 14017},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 28, offset: 14023},
							label: "digits",
							expr: &ruleRefExpr{
								pos:    position{line: 545, col: 35, offset: 14030},
								offset: 85,
							},
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 549, col: 1, offset: 14093},
			expr: &actionExpr{
				pos: position{line: 549, col: 8, offset: 14100},
				run: (*parser).callonHex1,
				expr: &seqExpr{
					pos: position{line: 549, col: 8, offset: 14100},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 549, col: 8, offset: 14100},
							val:        "0x",
							ignoreCase: true,
							want:       "\"0x\"i",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 14, offset: 14106},
							label: "hex",
							expr: &oneOrMoreExpr{
								pos: position{line: 549, col: 18, offset: 14110},
								expr: &charClassMatcher{
									pos:        position{line: 549, col: 18, offset: 14110},
									val:        "[0-9A-Fa-f]",
									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PascalCase",
			pos:  position{line: 557, col: 1, offset: 14273},
			expr: &actionExpr{
				pos: position{line: 557, col: 15, offset: 14287},
				run: (*parser).callonPascalCase1,
				expr: &seqExpr{
					pos: position{line: 557, col: 15, offset: 14287},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 557, col: 15, offset: 14287},
							offset: 77,
						},
						&zeroOrMoreExpr{
							pos: position{line: 557, col: 33, offset: 14305},
							expr: &ruleRefExpr{
								pos:    position{line: 557, col: 33, offset: 14305},
								offset: 76,
							},
						},
					},
				},
			},
		},
		{
			name: "Capitalized",
			pos:  position{line: 561, col: 1, offset: 14352},
			expr: &actionExpr{
				pos: position{line: 561, col: 16, offset: 14367},
				run: (*parser).callonCapitalized1,
				expr: &seqExpr{
					pos: position{line: 561, col: 16, offset: 14367},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 561, col: 16, offset: 14367},
							expr: &ruleRefExpr{
								pos:    position{line: 561, col: 16, offset: 14367},
								offset: 81,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 561, col: 27, offset: 14378},
							expr: &ruleRefExpr{
								pos:    position{line: 561, col: 27, offset: 14378},
								offset: 82,
							},
						},
					},
				},
			},
		},
		{
			name: "PascalCapitalized",
			pos:  position{line: 565, col: 1, offset: 14423},
			expr: &actionExpr{
				pos: position{line: 565, col: 22, offset: 14444},
				run: (*parser).callonPascalCapitalized1,
				expr: &seqExpr{
					pos: position{line: 565, col: 22, offset: 14444},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 565, col: 22, offset: 14444},
							expr: &ruleRefExpr{
								pos:    position{line: 565, col: 22, offset: 14444},
								offset: 81,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 565, col: 33, offset: 14455},
							expr: &ruleRefExpr{
								pos:    position{line: 565, col: 33, offset: 14455},
								offset: 82,
							},
						},
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 569, col: 1, offset: 14500},
			expr: &actionExpr{
				pos: position{line: 569, col: 9, offset: 14508},
				run: (*parser).callonWord1,
				expr: &seqExpr{
					pos: position{line: 569, col: 9, offset: 14508},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 569, col: 9, offset: 14508},
							offset: 80,
						},
						&oneOrMoreExpr{
							pos: position{line: 569, col: 16, offset: 14515},
							expr: &ruleRefExpr{
								pos:    position{line: 569, col: 16, offset: 14515},
								offset: 79,
							},
						},
					},
				},
			},
		},
		{
			name: "Text",
			pos:  position{line: 573, col: 1, offset: 14554},
			expr: &choiceExpr{
				pos: position{line: 573, col: 10, offset: 14563},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 573, col: 10, offset: 14563},
						offset: 80,
					},
					&ruleRefExpr{
						pos:    position{line: 573, col: 19, offset: 14572},
						offset: 85,
					},
				},
			},
		},
		{
			name: "Letter",
			pos:  position{line: 575, col: 1, offset: 14581},
			expr: &choiceExpr{
				pos: position{line: 575, col: 12, offset: 14592},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 575, col: 12, offset: 14592},
						offset: 81,
					},
					&ruleRefExpr{
						pos:    position{line: 575, col: 24, offset: 14604},
						offset: 82,
					},
				},
			},
		},
		{
			name: "Uppercase",
			pos:  position{line: 577, col: 1, offset: 14616},
			expr: &actionExpr{
				pos: position{line: 577, col: 14, offset: 14629},
				run: (*parser).callonUppercase1,
				expr: &charClassMatcher{
					pos:        position{line: 577, col: 14, offset: 14629},
					val:        "[A-Z]",
					ranges:     []rune{'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Lowercase",
			pos:  position{line: 581, col: 1, offset: 14669},
			expr: &actionExpr{
				pos: position{line: 581, col: 14, offset: 14682},
				run: (*parser).callonLowercase1,
				expr: &charClassMatcher{
					pos:        position{line: 581, col: 14, offset: 14682},
					val:        "[a-z]",
					ranges:     []rune{'a', 'z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 585, col: 1, offset: 14722},
			expr: &zeroOrMoreExpr{
				pos: position{line: 585, col: 18, offset: 14741},
				expr: &charClassMatcher{
					pos:        position{line: 585, col: 18, offset: 14741},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Comma",
			pos:  position{line: 587, col: 1, offset: 14753},
			expr: &litMatcher{
				pos:        position{line: 587, col: 10, offset: 14762},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
		},
		{
			name: "Digits",
			pos:  position{line: 589, col: 1, offset: 14768},
			expr: &actionExpr{
				pos: position{line: 589, col: 11, offset: 14778},
				run: (*parser).callonDigits1,
				expr: &oneOrMoreExpr{
					pos: position{line: 589, col: 11, offset: 14778},
					expr: &charClassMatcher{
						pos:        position{line: 589, col: 11, offset: 14778},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Exp",
			pos:  position{line: 593, col: 1, offset: 14839},
			expr: &actionExpr{
				pos: position{line: 593, col: 8, offset: 14846},
				run: (*parser).callonExp1,
				expr: &seqExpr{
					pos: position{line: 593, col: 8, offset: 14846},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 593, col: 8, offset: 14846},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 12, offset: 14850},
							label: "digits",
							expr: &ruleRefExpr{
								pos:    position{line: 593, col: 19, offset: 14857},
								offset: 85,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 593, col: 26, offset: 14864},
							expr: &litMatcher{
								pos:        position{line: 593, col: 26, offset: 14864},
								val:        "^",
								ignoreCase: false,
								want:       "\"^\"",
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 597, col: 1, offset: 14894},
			expr: &notExpr{
				pos: position{line: 597, col: 7, offset: 14902},
				expr: &anyMatcher{
					line: 597, col: 8, offset: 14903,
				},
			},
		},
	},
}

func (c *current) onInput1(conf any) (any, error) {
	cs := conf.([]interface{})

	var set Set
	for _, i := range cs {
		con := i.(Constraint)
		set = append(set, con)
	}
	return set, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["conf"])
}

func (c *current) onCons1(cons, entry any) (any, error) {
	if entry != nil {
		return &ListConstraint{
			Constraint:      cons.(Constraint),
			EntryConstraint: entry.(Constraint),
		}, nil
	}
	return cons, nil
}

func (p *parser) callonCons1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCons1(stack["cons"], stack["entry"])
}

func (c *current) onEntryConstraint1(cons any) (any, error) {
	return cons.(Constraint), nil
}

func (p *parser) callonEntryConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryConstraint1(stack["cons"])
}

func (c *current) onConstraint1(cons any) (any, error) {
	switch cons := cons.(type) {
	case Constraint:
		return cons, nil
	case Limit:
		return &ExactConstraint{Value: cons}, nil
	default:
		return nil, fmt.Errorf("unexpected constraint type: %T", cons)
	}
}

func (p *parser) callonConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstraint1(stack["cons"])
}

func (c *current) onLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit1(stack["limit"])
}

func (c *current) onParentheticalLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonParentheticalLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParentheticalLimit1(stack["limit"])
}

func (c *current) onPlainLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonPlainLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlainLimit1(stack["limit"])
}

func (c *current) onMSLimit1() (any, error) {
	return &ManufacturerLimit{Value: string(c.text)}, nil
}

func (p *parser) callonMSLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMSLimit1()
}

func (c *current) onNullLimit1() (any, error) {
	return &NullLimit{}, nil
}

func (p *parser) callonNullLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLimit1()
}

func (c *current) onUnspecifiedLimit1() (any, error) {
	return &UnspecifiedLimit{}, nil
}

func (p *parser) callonUnspecifiedLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnspecifiedLimit1()
}

func (c *current) onEmptyLimit1() (any, error) {
	return &EmptyLimit{}, nil
}

func (p *parser) callonEmptyLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLimit1()
}

func (c *current) onAny1(any any) (any, error) {
	return &AllConstraint{Value: string(any.([]uint8))}, nil
}

func (p *parser) callonAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAny1(stack["any"])
}

func (c *current) onDescribed1() (any, error) {
	return &DescribedConstraint{}, nil
}

func (p *parser) callonDescribed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescribed1()
}

func (c *current) onBooleanLimit1() (any, error) {
	b, err := strconv.ParseBool(string(c.text))
	if err != nil {
		return nil, err
	}
	return &BooleanLimit{Value: b}, nil
}

func (p *parser) callonBooleanLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLimit1()
}

func (c *current) onTerm2(exp any) (any, error) {
	return exp, nil
}

func (p *parser) callonTerm2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm2(stack["exp"])
}

func (c *current) onTerm10(exp any) (any, error) {
	return exp, nil
}

func (p *parser) callonTerm10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm10(stack["exp"])
}

func (c *current) onExpression1(left, operand, right any) (any, error) {
	var val []uint8
	for _, d := range operand.([]uint8) {
		val = append(val, d)
	}
	return &MathExpressionLimit{
		Operand: string(val),
		Left:    left.(Limit),
		Right:   right.(Limit),
	}, nil
}

func (p *parser) callonExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onLogicalLimit5(or any) (bool, error) {
	ll, ok := or.(*LogicalLimit)
	if !ok {
		return false, nil
	}
	return len(ll.Right) > 0, nil
}

func (p *parser) callonLogicalLimit5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimit5(stack["or"])
}

func (c *current) onLogicalLimit1(or any) (any, error) {
	return or, nil
}

func (p *parser) callonLogicalLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimit1(stack["or"])
}

func (c *current) onLogicalLimitOr1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	orOps := right.([]any)
	if len(orOps) == 0 {
		return left, nil
	}
	leftCE := left.(Limit)
	return NewLogicalLimit("|", leftCE, orOps)
}

func (p *parser) callonLogicalLimitOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimitOr1(stack["left"], stack["right"])
}

func (c *current) onLogicalLimitOrOp1(f any) (any, error) {
	fc := f.(Limit)
	return fc, nil
}

func (p *parser) callonLogicalLimitOrOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimitOrOp1(stack["f"])
}

func (c *current) onLogicalLimitXor1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	xorOps := right.([]any)
	if len(xorOps) == 0 {
		return left, nil
	}
	leftCE := left.(Limit)
	return NewLogicalLimit("^", leftCE, xorOps)
}

func (p *parser) callonLogicalLimitXor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimitXor1(stack["left"], stack["right"])
}

func (c *current) onLogicalLimitXorOp1(f any) (any, error) {
	fc := f.(Limit)
	return fc, nil
}

func (p *parser) callonLogicalLimitXorOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimitXorOp1(stack["f"])
}

func (c *current) onLogicalLimitAnd1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	addOps := right.([]any)
	if len(addOps) == 0 {
		return left, nil
	}
	leftCE := left.(Limit)
	return NewLogicalLimit("&", leftCE, addOps)
}

func (p *parser) callonLogicalLimitAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimitAnd1(stack["left"], stack["right"])
}

func (c *current) onLogicalLimitAndOp1(f any) (any, error) {
	fc := f.(Limit)
	return fc, nil
}

func (p *parser) callonLogicalLimitAndOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimitAndOp1(stack["f"])
}

func (c *current) onLogicalLimitTerm1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonLogicalLimitTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalLimitTerm1(stack["limit"])
}

func (c *current) onParentheticalLogicalLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonParentheticalLogicalLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParentheticalLogicalLimit1(stack["limit"])
}

func (c *current) onPlainLogicalLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonPlainLogicalLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlainLogicalLimit1(stack["limit"])
}

func (c *current) onLogicalIdentifierLimit1(ref, field any) (any, error) {
	rl := &IdentifierLimit{ID: ref.(string)}
	if field != nil {
		rl.Field = field.(Limit)
	}
	return rl, nil
}

func (p *parser) callonLogicalIdentifierLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalIdentifierLimit1(stack["ref"], stack["field"])
}

func (c *current) onLogicalIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLogicalIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalIdentifier1()
}

func (c *current) onLogicalConstraint5(or any) (bool, error) {
	ll, ok := or.(*LogicalConstraint)
	if !ok {
		return false, nil
	}
	return len(ll.Right) > 0, nil
}

func (p *parser) callonLogicalConstraint5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraint5(stack["or"])
}

func (c *current) onLogicalConstraint1(or any) (any, error) {
	return or, nil
}

func (p *parser) callonLogicalConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraint1(stack["or"])
}

func (c *current) onLogicalConstraintOr1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	orOps := right.([]any)
	if len(orOps) == 0 {
		return left, nil
	}
	leftCE := left.(Constraint)
	return NewLogicalConstraint("|", leftCE, orOps)
}

func (p *parser) callonLogicalConstraintOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraintOr1(stack["left"], stack["right"])
}

func (c *current) onLogicalConstraintOrOp1(f any) (any, error) {
	fc := f.(Constraint)
	return fc, nil
}

func (p *parser) callonLogicalConstraintOrOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraintOrOp1(stack["f"])
}

func (c *current) onLogicalConstraintXor1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	xorOps := right.([]any)
	if len(xorOps) == 0 {
		return left, nil
	}
	leftCE := left.(Constraint)
	return NewLogicalConstraint("^", leftCE, xorOps)
}

func (p *parser) callonLogicalConstraintXor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraintXor1(stack["left"], stack["right"])
}

func (c *current) onLogicalConstraintXorOp1(f any) (any, error) {
	fc := f.(Constraint)
	return fc, nil
}

func (p *parser) callonLogicalConstraintXorOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraintXorOp1(stack["f"])
}

func (c *current) onLogicalConstraintAnd1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	addOps := right.([]any)
	if len(addOps) == 0 {
		return left, nil
	}
	leftCE := left.(Constraint)
	return NewLogicalConstraint("&", leftCE, addOps)
}

func (p *parser) callonLogicalConstraintAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraintAnd1(stack["left"], stack["right"])
}

func (c *current) onLogicalConstraintAndOp1(f any) (any, error) {
	fc := f.(Constraint)
	return fc, nil
}

func (p *parser) callonLogicalConstraintAndOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraintAndOp1(stack["f"])
}

func (c *current) onLogicalConstraintTerm1(constraint any) (any, error) {
	return constraint.(Constraint), nil
}

func (p *parser) callonLogicalConstraintTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalConstraintTerm1(stack["constraint"])
}

func (c *current) onParentheticalLogicalConstraint1(constraint any) (any, error) {
	return constraint.(Constraint), nil
}

func (p *parser) callonParentheticalLogicalConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParentheticalLogicalConstraint1(stack["constraint"])
}

func (c *current) onPlainLogicalConstraint1(constraint any) (any, error) {
	switch constraint := constraint.(type) {
	case Constraint:
		return constraint, nil
	case Limit:
		return &ExactConstraint{Value: constraint}, nil
	default:
		return nil, fmt.Errorf("unexpected constraint type: %T", constraint)
	}
}

func (p *parser) callonPlainLogicalConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlainLogicalConstraint1(stack["constraint"])
}

func (c *current) onRange1(from, to any) (any, error) {
	return &RangeConstraint{
		Minimum: from.(Limit),
		Maximum: to.(Limit),
	}, nil
}

func (p *parser) callonRange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRange1(stack["from"], stack["to"])
}

func (c *current) onMin1(limit any) (any, error) {
	return &MinConstraint{Minimum: limit.(Limit)}, nil
}

func (p *parser) callonMin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMin1(stack["limit"])
}

func (c *current) onMax1(limit any) (any, error) {
	return &MaxConstraint{Maximum: limit.(Limit)}, nil
}

func (p *parser) callonMax1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMax1(stack["limit"])
}

func (c *current) onMinOfLimit1(limits any) (any, error) {
	ls := limits.([]interface{})

	var set LimitSet
	for _, i := range ls {
		con := i.(Limit)
		set = append(set, con)
	}
	return &MinOfLimit{Minimums: set}, nil
}

func (p *parser) callonMinOfLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinOfLimit1(stack["limits"])
}

func (c *current) onMaxOfLimit1(limits any) (any, error) {
	ls := limits.([]interface{})

	var set LimitSet
	for _, i := range ls {
		con := i.(Limit)
		set = append(set, con)
	}
	return &MaxOfLimit{Maximums: set}, nil
}

func (p *parser) callonMaxOfLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMaxOfLimit1(stack["limits"])
}

func (c *current) onMinMaxSetLimit1(limit any) (any, error) {
	return limit, nil
}

func (p *parser) callonMinMaxSetLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinMaxSetLimit1(stack["limit"])
}

func (c *current) onIdentifierLimit1(ref, field any) (any, error) {
	rl := &IdentifierLimit{ID: ref.(string)}
	if field != nil {
		rl.Field = field.(Limit)
	}
	return rl, nil
}

func (p *parser) callonIdentifierLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierLimit1(stack["ref"], stack["field"])
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onReferenceLimit1(reference, label, field any) (any, error) {
	rl := &ReferenceLimit{Reference: reference.(string)}
	if label != nil {
		rl.Label = label.(string)
	}
	if field != nil {
		rl.Field = field.(Limit)
	}
	return rl, nil
}

func (p *parser) callonReferenceLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceLimit1(stack["reference"], stack["label"], stack["field"])
}

func (c *current) onReferenceId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceId1()
}

func (c *current) onReferencePart1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferencePart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferencePart1()
}

func (c *current) onReferenceField1(field any) (any, error) {
	return field.(Limit), nil
}

func (p *parser) callonReferenceField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceField1(stack["field"])
}

func (c *current) onReferenceLabel1(label any) (any, error) {
	return label.(string), nil
}

func (p *parser) callonReferenceLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceLabel1(stack["label"])
}

func (c *current) onReferenceText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceText1()
}

func (c *current) onIntConstraint1(i any) (any, error) {
	return &MaxConstraint{Maximum: i.(Limit)}, nil
}

func (p *parser) callonIntConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstraint1(stack["i"])
}

func (c *current) onLengthLimit1(ref any) (any, error) {
	return &LengthLimit{Reference: ref.(Limit)}, nil
}

func (p *parser) callonLengthLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLengthLimit1(stack["ref"])
}

func (c *current) onCharacterLimit1(maxBytes, maxCodepoints any) (any, error) {
	mb := maxBytes.(Limit)
	mcp := maxCodepoints.(Limit)
	return &CharacterLimit{ByteCount: mb, CodepointCount: mcp}, nil
}

func (p *parser) callonCharacterLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterLimit1(stack["maxBytes"], stack["maxCodepoints"])
}

func (c *current) onTempLimit1(f any) (any, error) {
	switch f := f.(type) {
	case int64:
		return &TemperatureLimit{Value: decimal.NewFromInt(f)}, nil
	case decimal.Decimal:
		return &TemperatureLimit{Value: f}, nil
	default:
		return nil, fmt.Errorf("unknown temperature limit type: %T", f)
	}
}

func (p *parser) callonTempLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTempLimit1(stack["f"])
}

func (c *current) onPercentageLimit1(f any) (any, error) {
	switch f := f.(type) {
	case int64:
		return &PercentLimit{Value: decimal.NewFromInt(f)}, nil
	case decimal.Decimal:
		return &PercentLimit{Value: f}, nil
	default:
		return nil, fmt.Errorf("unknown percentage limit type: %T", f)
	}
}

func (p *parser) callonPercentageLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentageLimit1(stack["f"])
}

func (c *current) onIntLimit1(i, e any) (any, error) {
	if e != nil {
		return &ExpLimit{Value: i.(int64), Exp: e.(int64)}, nil
	}
	return &IntLimit{Value: i.(int64)}, nil
}

func (p *parser) callonIntLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntLimit1(stack["i"], stack["e"])
}

func (c *current) onHexLimit1(h any) (any, error) {
	return &HexLimit{Value: h.(uint64)}, nil
}

func (p *parser) callonHexLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexLimit1(stack["h"])
}

func (c *current) onStatusCodeLimit1(status any) (any, error) {
	return &StatusCodeLimit{StatusCode: status.(types.StatusCode)}, nil
}

func (p *parser) callonStatusCodeLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCodeLimit1(stack["status"])
}

func (c *current) onStatusCode2() (any, error) {
	return types.StatusCodeSuccess, nil
}

func (p *parser) callonStatusCode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode2()
}

func (c *current) onStatusCode6() (any, error) {
	return types.StatusCodeFailure, nil
}

func (p *parser) callonStatusCode6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode6()
}

func (c *current) onStatusCode8() (any, error) {
	return types.StatusCodeInvalidSubscription, nil
}

func (p *parser) callonStatusCode8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode8()
}

func (c *current) onStatusCode10() (any, error) {
	return types.StatusCodeUnsupportedAccess, nil
}

func (p *parser) callonStatusCode10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode10()
}

func (c *current) onStatusCode12() (any, error) {
	return types.StatusCodeUnsupportedEndpoint, nil
}

func (p *parser) callonStatusCode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode12()
}

func (c *current) onStatusCode14() (any, error) {
	return types.StatusCodeInvalidAction, nil
}

func (p *parser) callonStatusCode14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode14()
}

func (c *current) onStatusCode16() (any, error) {
	return types.StatusCodeUnsupportedCommand, nil
}

func (p *parser) callonStatusCode16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode16()
}

func (c *current) onStatusCode18() (any, error) {
	return types.StatusCodeInvalidCommand, nil
}

func (p *parser) callonStatusCode18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode18()
}

func (c *current) onStatusCode20() (any, error) {
	return types.StatusCodeUnsupportedAttribute, nil
}

func (p *parser) callonStatusCode20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode20()
}

func (c *current) onStatusCode22() (any, error) {
	return types.StatusCodeConstraintError, nil
}

func (p *parser) callonStatusCode22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode22()
}

func (c *current) onStatusCode24() (any, error) {
	return types.StatusCodeUnsupportedWrite, nil
}

func (p *parser) callonStatusCode24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode24()
}

func (c *current) onStatusCode26() (any, error) {
	return types.StatusCodeResourceExhausted, nil
}

func (p *parser) callonStatusCode26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode26()
}

func (c *current) onStatusCode28() (any, error) {
	return types.StatusCodeNotFound, nil
}

func (p *parser) callonStatusCode28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode28()
}

func (c *current) onStatusCode30() (any, error) {
	return types.StatusCodeUnreportableAttribute, nil
}

func (p *parser) callonStatusCode30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode30()
}

func (c *current) onStatusCode32() (any, error) {
	return types.StatusCodeInvalidDataType, nil
}

func (p *parser) callonStatusCode32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode32()
}

func (c *current) onStatusCode34() (any, error) {
	return types.StatusCodeUnsupportedRead, nil
}

func (p *parser) callonStatusCode34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode34()
}

func (c *current) onStatusCode36() (any, error) {
	return types.StatusCodeDataVersionMismatch, nil
}

func (p *parser) callonStatusCode36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode36()
}

func (c *current) onStatusCode38() (any, error) {
	return types.StatusCodeTimeout, nil
}

func (p *parser) callonStatusCode38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode38()
}

func (c *current) onStatusCode40() (any, error) {
	return types.StatusCodeUnsupportedNode, nil
}

func (p *parser) callonStatusCode40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode40()
}

func (c *current) onStatusCode42() (any, error) {
	return types.StatusCodeBusy, nil
}

func (p *parser) callonStatusCode42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode42()
}

func (c *current) onStatusCode44() (any, error) {
	return types.StatusCodeAccessRestricted, nil
}

func (p *parser) callonStatusCode44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode44()
}

func (c *current) onStatusCode46() (any, error) {
	return types.StatusCodeUnsupportedCluster, nil
}

func (p *parser) callonStatusCode46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode46()
}

func (c *current) onStatusCode48() (any, error) {
	return types.StatusCodeNoUpstreamSubscription, nil
}

func (p *parser) callonStatusCode48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode48()
}

func (c *current) onStatusCode50() (any, error) {
	return types.StatusCodeNeedsTimedInteraction, nil
}

func (p *parser) callonStatusCode50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode50()
}

func (c *current) onStatusCode52() (any, error) {
	return types.StatusCodeUnsupportedEvent, nil
}

func (p *parser) callonStatusCode52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode52()
}

func (c *current) onStatusCode54() (any, error) {
	return types.StatusCodePathsExhausted, nil
}

func (p *parser) callonStatusCode54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode54()
}

func (c *current) onStatusCode56() (any, error) {
	return types.StatusCodeTimedRequestMismatch, nil
}

func (p *parser) callonStatusCode56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode56()
}

func (c *current) onStatusCode58() (any, error) {
	return types.StatusCodeFailsafeRequired, nil
}

func (p *parser) callonStatusCode58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode58()
}

func (c *current) onStatusCode60() (any, error) {
	return types.StatusCodeInvalidInState, nil
}

func (p *parser) callonStatusCode60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode60()
}

func (c *current) onStatusCode62() (any, error) {
	return types.StatusCodeNoCommandResponse, nil
}

func (p *parser) callonStatusCode62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode62()
}

func (c *current) onStatusCode64() (any, error) {
	return types.StatusCodeTermsAndConditionsChanged, nil
}

func (p *parser) callonStatusCode64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode64()
}

func (c *current) onStatusCode66() (any, error) {
	return types.StatusCodeMaintenanceRequired, nil
}

func (p *parser) callonStatusCode66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode66()
}

func (c *current) onTagList1(or any) (any, error) {
	return &TagListConstraint{Tags: or.(Limit)}, nil
}

func (p *parser) callonTagList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagList1(stack["or"])
}

func (c *current) onTagOr1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	orOps := right.([]any)
	if len(orOps) == 0 {
		return left, nil
	}
	leftCE := left.(Limit)
	return NewLogicalLimit("or", leftCE, orOps)
}

func (p *parser) callonTagOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagOr1(stack["left"], stack["right"])
}

func (c *current) onTagOrOp1(f any) (any, error) {
	fc := f.(Limit)
	return fc, nil
}

func (p *parser) callonTagOrOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagOrOp1(stack["f"])
}

func (c *current) onTagAnd1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	addOps := right.([]any)
	if len(addOps) == 0 {
		return left, nil
	}
	leftCE := left.(Limit)
	return NewLogicalLimit("and", leftCE, addOps)
}

func (p *parser) callonTagAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagAnd1(stack["left"], stack["right"])
}

func (c *current) onTagAndOp1(f any) (any, error) {
	fc := f.(Limit)
	return fc, nil
}

func (p *parser) callonTagAndOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagAndOp1(stack["f"])
}

func (c *current) onTagTerm1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonTagTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagTerm1(stack["limit"])
}

func (c *current) onParentheticalTagLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonParentheticalTagLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParentheticalTagLimit1(stack["limit"])
}

func (c *current) onTagIdentifier1(word any) (any, error) {
	return &TagIdentifierLimit{Tag: word.(string)}, nil
}

func (p *parser) callonTagIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagIdentifier1(stack["word"])
}

func (c *current) onStringLimit1(limit any) (any, error) {
	var val []uint8
	for _, d := range limit.([]any) {
		val = append(val, d.([]uint8)...)
	}
	return &StringLimit{Value: string(val)}, nil
}

func (p *parser) callonStringLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLimit1(stack["limit"])
}

func (c *current) onFloat1() (any, error) {
	return decimal.NewFromString(string(c.text))
}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInteger1(sign, digits any) (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1(stack["sign"], stack["digits"])
}

func (c *current) onHex1(hex any) (any, error) {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	return strconv.ParseUint(string(val), 16, 64)
}

func (p *parser) callonHex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1(stack["hex"])
}

func (c *current) onPascalCase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPascalCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPascalCase1()
}

func (c *current) onCapitalized1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCapitalized1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCapitalized1()
}

func (c *current) onPascalCapitalized1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPascalCapitalized1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPascalCapitalized1()
}

func (c *current) onWord1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWord1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord1()
}

func (c *current) onUppercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercase1()
}

func (c *current) onLowercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercase1()
}

func (c *current) onDigits1() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonDigits1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigits1()
}

func (c *current) onExp1(digits any) (any, error) {
	return digits, nil
}

func (p *parser) callonExp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExp1(stack["digits"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict

	parser *parser // Alchemy patch: we keep a reference to the parent parser here, so inline code can access it
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos position
	val string
	// Alchemy patch: we don't use this optimization, so don't allocate the array
	//basicLatinChars [128]bool
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	offset position // Alchemy patch: we add an offset field to track element positions in the doc
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any // Alchemy patch: we lazily allocate this array, as it's infrequently populated

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
