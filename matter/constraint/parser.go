// Code generated by pigeon; DO NOT EDIT.

package constraint

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/matter/types"
	"github.com/shopspring/decimal"
)

func debug(format string, a ...any) (n int, err error) {
	return
	return fmt.Fprintf(os.Stdout, format, a...)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 21, col: 1, offset: 276},
			expr: &actionExpr{
				pos: position{line: 21, col: 10, offset: 285},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 21, col: 10, offset: 285},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 21, col: 10, offset: 285},
							label: "conf",
							expr: &oneOrMoreExpr{
								pos: position{line: 21, col: 15, offset: 290},
								expr: &ruleRefExpr{
									pos:    position{line: 21, col: 15, offset: 290},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 21, col: 21, offset: 296},
							offset: 49,
						},
					},
				},
			},
		},
		{
			name: "Cons",
			pos:  position{line: 35, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 35, col: 9, offset: 519},
				run: (*parser).callonCons1,
				expr: &seqExpr{
					pos: position{line: 35, col: 9, offset: 519},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 35, col: 9, offset: 519},
							label: "cons",
							expr: &ruleRefExpr{
								pos:    position{line: 35, col: 14, offset: 524},
								offset: 3,
							},
						},
						&labeledExpr{
							pos:   position{line: 35, col: 25, offset: 535},
							label: "entry",
							expr: &zeroOrOneExpr{
								pos: position{line: 35, col: 31, offset: 541},
								expr: &ruleRefExpr{
									pos:    position{line: 35, col: 31, offset: 541},
									offset: 2,
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 35, col: 48, offset: 558},
							expr: &ruleRefExpr{
								pos:    position{line: 35, col: 48, offset: 558},
								offset: 4,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 35, col: 63, offset: 573},
							expr: &seqExpr{
								pos: position{line: 35, col: 64, offset: 574},
								exprs: []any{
									&ruleRefExpr{
										pos:    position{line: 35, col: 64, offset: 574},
										offset: 45,
									},
									&ruleRefExpr{
										pos:    position{line: 35, col: 66, offset: 576},
										offset: 46,
									},
									&ruleRefExpr{
										pos:    position{line: 35, col: 72, offset: 582},
										offset: 45,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EntryConstraint",
			pos:  position{line: 45, col: 1, offset: 739},
			expr: &actionExpr{
				pos: position{line: 45, col: 20, offset: 758},
				run: (*parser).callonEntryConstraint1,
				expr: &seqExpr{
					pos: position{line: 45, col: 20, offset: 758},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 45, col: 20, offset: 758},
							offset: 45,
						},
						&litMatcher{
							pos:        position{line: 45, col: 22, offset: 760},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 45, col: 26, offset: 764},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 45, col: 28, offset: 766},
							label: "cons",
							expr: &ruleRefExpr{
								pos:    position{line: 45, col: 33, offset: 771},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 45, col: 44, offset: 782},
							offset: 45,
						},
						&litMatcher{
							pos:        position{line: 45, col: 46, offset: 784},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Constraint",
			pos:  position{line: 49, col: 1, offset: 825},
			expr: &actionExpr{
				pos: position{line: 49, col: 15, offset: 839},
				run: (*parser).callonConstraint1,
				expr: &labeledExpr{
					pos:   position{line: 49, col: 15, offset: 839},
					label: "cons",
					expr: &choiceExpr{
						pos: position{line: 49, col: 21, offset: 845},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 49, col: 21, offset: 845},
								offset: 13,
							},
							&ruleRefExpr{
								pos:    position{line: 49, col: 33, offset: 857},
								offset: 12,
							},
							&ruleRefExpr{
								pos:    position{line: 49, col: 40, offset: 864},
								offset: 18,
							},
							&ruleRefExpr{
								pos:    position{line: 49, col: 48, offset: 872},
								offset: 19,
							},
							&ruleRefExpr{
								pos:    position{line: 49, col: 54, offset: 878},
								offset: 20,
							},
							&ruleRefExpr{
								pos:    position{line: 49, col: 60, offset: 884},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "Parenthetical",
			pos:  position{line: 60, col: 1, offset: 1104},
			expr: &seqExpr{
				pos: position{line: 60, col: 18, offset: 1121},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 60, col: 18, offset: 1121},
						offset: 45,
					},
					&litMatcher{
						pos:        position{line: 60, col: 20, offset: 1123},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&oneOrMoreExpr{
						pos: position{line: 60, col: 24, offset: 1127},
						expr: &seqExpr{
							pos: position{line: 60, col: 25, offset: 1128},
							exprs: []any{
								&notExpr{
									pos: position{line: 60, col: 25, offset: 1128},
									expr: &litMatcher{
										pos:        position{line: 60, col: 26, offset: 1129},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
								&anyMatcher{
									line: 60, col: 30, offset: 1133,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 60, col: 34, offset: 1137},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "Limit",
			pos:  position{line: 73, col: 1, offset: 1154},
			expr: &actionExpr{
				pos: position{line: 73, col: 10, offset: 1163},
				run: (*parser).callonLimit1,
				expr: &labeledExpr{
					pos:   position{line: 73, col: 10, offset: 1163},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 73, col: 18, offset: 1171},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 73, col: 18, offset: 1171},
								offset: 6,
							},
							&ruleRefExpr{
								pos:    position{line: 73, col: 39, offset: 1192},
								offset: 7,
							},
						},
					},
				},
			},
		},
		{
			name: "ParentheticalLimit",
			pos:  position{line: 77, col: 1, offset: 1238},
			expr: &actionExpr{
				pos: position{line: 77, col: 23, offset: 1260},
				run: (*parser).callonParentheticalLimit1,
				expr: &seqExpr{
					pos: position{line: 77, col: 23, offset: 1260},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 77, col: 23, offset: 1260},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:    position{line: 77, col: 27, offset: 1264},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 77, col: 29, offset: 1266},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 77, col: 35, offset: 1272},
								offset: 7,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 77, col: 46, offset: 1283},
							offset: 45,
						},
						&litMatcher{
							pos:        position{line: 77, col: 48, offset: 1285},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "PlainLimit",
			pos:  position{line: 81, col: 1, offset: 1321},
			expr: &actionExpr{
				pos: position{line: 81, col: 15, offset: 1335},
				run: (*parser).callonPlainLimit1,
				expr: &labeledExpr{
					pos:   position{line: 81, col: 15, offset: 1335},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 81, col: 22, offset: 1342},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 81, col: 22, offset: 1342},
								offset: 8,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 32, offset: 1352},
								offset: 9,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 44, offset: 1364},
								offset: 11,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 57, offset: 1377},
								offset: 37,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 71, offset: 1391},
								offset: 14,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 86, offset: 1406},
								offset: 35,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 104, offset: 1424},
								offset: 16,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 117, offset: 1437},
								offset: 34,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 128, offset: 1448},
								offset: 31,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 140, offset: 1460},
								offset: 32,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 158, offset: 1478},
								offset: 30,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 175, offset: 1495},
								offset: 33,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 186, offset: 1506},
								offset: 15,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 193, offset: 1513},
								offset: 29,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 207, offset: 1527},
								offset: 22,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 224, offset: 1544},
								offset: 21,
							},
							&ruleRefExpr{
								pos:    position{line: 81, col: 242, offset: 1562},
								offset: 10,
							},
						},
					},
				},
			},
		},
		{
			name: "MSLimit",
			pos:  position{line: 85, col: 1, offset: 1613},
			expr: &actionExpr{
				pos: position{line: 85, col: 12, offset: 1624},
				run: (*parser).callonMSLimit1,
				expr: &litMatcher{
					pos:        position{line: 85, col: 12, offset: 1624},
					val:        "MS",
					ignoreCase: false,
					want:       "\"MS\"",
				},
			},
		},
		{
			name: "NullLimit",
			pos:  position{line: 89, col: 1, offset: 1688},
			expr: &actionExpr{
				pos: position{line: 89, col: 14, offset: 1701},
				run: (*parser).callonNullLimit1,
				expr: &litMatcher{
					pos:        position{line: 89, col: 14, offset: 1701},
					val:        "null",
					ignoreCase: true,
					want:       "\"null\"i",
				},
			},
		},
		{
			name: "UnspecifiedLimit",
			pos:  position{line: 93, col: 1, offset: 1740},
			expr: &actionExpr{
				pos: position{line: 93, col: 21, offset: 1760},
				run: (*parser).callonUnspecifiedLimit1,
				expr: &seqExpr{
					pos: position{line: 93, col: 21, offset: 1760},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 93, col: 22, offset: 1761},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 93, col: 22, offset: 1761},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&litMatcher{
									pos:        position{line: 93, col: 28, offset: 1767},
									val:        "–",
									ignoreCase: false,
									want:       "\"–\"",
								},
								&litMatcher{
									pos:        position{line: 93, col: 34, offset: 1775},
									val:        "n/a",
									ignoreCase: true,
									want:       "\"N/A\"i",
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 93, col: 42, offset: 1783},
							offset: 49,
						},
					},
				},
			},
		},
		{
			name: "EmptyLimit",
			pos:  position{line: 97, col: 1, offset: 1825},
			expr: &actionExpr{
				pos: position{line: 97, col: 15, offset: 1839},
				run: (*parser).callonEmptyLimit1,
				expr: &choiceExpr{
					pos: position{line: 97, col: 16, offset: 1840},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 97, col: 16, offset: 1840},
							val:        "empty",
							ignoreCase: false,
							want:       "\"empty\"",
						},
						&litMatcher{
							pos:        position{line: 97, col: 26, offset: 1850},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "Any",
			pos:  position{line: 103, col: 1, offset: 1890},
			expr: &actionExpr{
				pos: position{line: 103, col: 8, offset: 1897},
				run: (*parser).callonAny1,
				expr: &labeledExpr{
					pos:   position{line: 103, col: 8, offset: 1897},
					label: "any",
					expr: &choiceExpr{
						pos: position{line: 103, col: 13, offset: 1902},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 103, col: 13, offset: 1902},
								val:        "any",
								ignoreCase: false,
								want:       "\"any\"",
							},
							&litMatcher{
								pos:        position{line: 103, col: 21, offset: 1910},
								val:        "all",
								ignoreCase: false,
								want:       "\"all\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Described",
			pos:  position{line: 107, col: 1, offset: 1979},
			expr: &actionExpr{
				pos: position{line: 107, col: 14, offset: 1992},
				run: (*parser).callonDescribed1,
				expr: &litMatcher{
					pos:        position{line: 107, col: 14, offset: 1992},
					val:        "desc",
					ignoreCase: false,
					want:       "\"desc\"",
				},
			},
		},
		{
			name: "BooleanLimit",
			pos:  position{line: 111, col: 1, offset: 2040},
			expr: &actionExpr{
				pos: position{line: 111, col: 17, offset: 2056},
				run: (*parser).callonBooleanLimit1,
				expr: &choiceExpr{
					pos: position{line: 111, col: 18, offset: 2057},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 111, col: 18, offset: 2057},
							val:        "true",
							ignoreCase: true,
							want:       "\"true\"i",
						},
						&litMatcher{
							pos:        position{line: 111, col: 28, offset: 2067},
							val:        "false",
							ignoreCase: true,
							want:       "\"false\"i",
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 119, col: 1, offset: 2217},
			expr: &choiceExpr{
				pos: position{line: 119, col: 9, offset: 2225},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 119, col: 9, offset: 2225},
						run: (*parser).callonTerm2,
						expr: &seqExpr{
							pos: position{line: 119, col: 9, offset: 2225},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 119, col: 9, offset: 2225},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:    position{line: 119, col: 13, offset: 2229},
									offset: 45,
								},
								&labeledExpr{
									pos:   position{line: 119, col: 15, offset: 2231},
									label: "exp",
									expr: &ruleRefExpr{
										pos:    position{line: 119, col: 19, offset: 2235},
										offset: 16,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 119, col: 30, offset: 2246},
									offset: 45,
								},
								&litMatcher{
									pos:        position{line: 119, col: 32, offset: 2248},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 2279},
						run: (*parser).callonTerm10,
						expr: &labeledExpr{
							pos:   position{line: 121, col: 5, offset: 2279},
							label: "exp",
							expr: &ruleRefExpr{
								pos:    position{line: 121, col: 10, offset: 2284},
								offset: 16,
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 125, col: 1, offset: 2322},
			expr: &actionExpr{
				pos: position{line: 125, col: 15, offset: 2336},
				run: (*parser).callonExpression1,
				expr: &seqExpr{
					pos: position{line: 125, col: 15, offset: 2336},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 125, col: 15, offset: 2336},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 125, col: 21, offset: 2342},
								offset: 17,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 125, col: 38, offset: 2359},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 125, col: 40, offset: 2361},
							label: "operand",
							expr: &choiceExpr{
								pos: position{line: 125, col: 49, offset: 2370},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 125, col: 49, offset: 2370},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 125, col: 53, offset: 2374},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 125, col: 57, offset: 2378},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&litMatcher{
										pos:        position{line: 125, col: 61, offset: 2382},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 125, col: 66, offset: 2387},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 125, col: 68, offset: 2389},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 125, col: 74, offset: 2395},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionLimit",
			pos:  position{line: 137, col: 1, offset: 2594},
			expr: &choiceExpr{
				pos: position{line: 137, col: 22, offset: 2615},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 137, col: 22, offset: 2615},
						offset: 9,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 34, offset: 2627},
						offset: 11,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 47, offset: 2640},
						offset: 37,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 61, offset: 2654},
						offset: 14,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 76, offset: 2669},
						offset: 35,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 94, offset: 2687},
						offset: 34,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 105, offset: 2698},
						offset: 31,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 117, offset: 2710},
						offset: 33,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 129, offset: 2722},
						offset: 22,
					},
					&ruleRefExpr{
						pos:    position{line: 137, col: 146, offset: 2739},
						offset: 21,
					},
				},
			},
		},
		{
			name: "Range",
			pos:  position{line: 139, col: 1, offset: 2757},
			expr: &actionExpr{
				pos: position{line: 139, col: 10, offset: 2766},
				run: (*parser).callonRange1,
				expr: &seqExpr{
					pos: position{line: 139, col: 10, offset: 2766},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 139, col: 10, offset: 2766},
							label: "from",
							expr: &ruleRefExpr{
								pos:    position{line: 139, col: 15, offset: 2771},
								offset: 5,
							},
						},
						&litMatcher{
							pos:        position{line: 139, col: 21, offset: 2777},
							val:        " to ",
							ignoreCase: false,
							want:       "\" to \"",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 28, offset: 2784},
							label: "to",
							expr: &ruleRefExpr{
								pos:    position{line: 139, col: 31, offset: 2787},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "Min",
			pos:  position{line: 146, col: 1, offset: 2881},
			expr: &actionExpr{
				pos: position{line: 146, col: 8, offset: 2888},
				run: (*parser).callonMin1,
				expr: &seqExpr{
					pos: position{line: 146, col: 8, offset: 2888},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 146, col: 8, offset: 2888},
							val:        "[Mm]",
							chars:      []rune{'M', 'm'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 146, col: 13, offset: 2893},
							val:        "in ",
							ignoreCase: false,
							want:       "\"in \"",
						},
						&ruleRefExpr{
							pos:    position{line: 146, col: 19, offset: 2899},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 146, col: 21, offset: 2901},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 146, col: 27, offset: 2907},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "Max",
			pos:  position{line: 150, col: 1, offset: 2970},
			expr: &actionExpr{
				pos: position{line: 150, col: 8, offset: 2977},
				run: (*parser).callonMax1,
				expr: &seqExpr{
					pos: position{line: 150, col: 8, offset: 2977},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 150, col: 8, offset: 2977},
							val:        "[Mm]",
							chars:      []rune{'M', 'm'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 150, col: 13, offset: 2982},
							val:        "ax ",
							ignoreCase: false,
							want:       "\"ax \"",
						},
						&ruleRefExpr{
							pos:    position{line: 150, col: 19, offset: 2988},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 150, col: 21, offset: 2990},
							label: "limit",
							expr: &ruleRefExpr{
								pos:    position{line: 150, col: 27, offset: 2996},
								offset: 5,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 150, col: 33, offset: 3002},
							expr: &seqExpr{
								pos: position{line: 150, col: 34, offset: 3003},
								exprs: []any{
									&ruleRefExpr{
										pos:    position{line: 150, col: 34, offset: 3003},
										offset: 45,
									},
									&litMatcher{
										pos:        position{line: 150, col: 36, offset: 3005},
										val:        "chars",
										ignoreCase: false,
										want:       "\"chars\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierLimit",
			pos:  position{line: 154, col: 1, offset: 3072},
			expr: &actionExpr{
				pos: position{line: 154, col: 20, offset: 3091},
				run: (*parser).callonIdentifierLimit1,
				expr: &seqExpr{
					pos: position{line: 154, col: 20, offset: 3091},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 154, col: 20, offset: 3091},
							label: "ref",
							expr: &ruleRefExpr{
								pos:    position{line: 154, col: 25, offset: 3096},
								offset: 41,
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 37, offset: 3108},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 154, col: 43, offset: 3114},
								expr: &ruleRefExpr{
									pos:    position{line: 154, col: 44, offset: 3115},
									offset: 25,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceLimit",
			pos:  position{line: 164, col: 1, offset: 3246},
			expr: &actionExpr{
				pos: position{line: 164, col: 19, offset: 3264},
				run: (*parser).callonReferenceLimit1,
				expr: &seqExpr{
					pos: position{line: 164, col: 19, offset: 3264},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 164, col: 19, offset: 3264},
							val:        "<<",
							ignoreCase: false,
							want:       "\"<<\"",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 24, offset: 3269},
							label: "reference",
							expr: &ruleRefExpr{
								pos:    position{line: 164, col: 34, offset: 3279},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 46, offset: 3291},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 52, offset: 3297},
								expr: &ruleRefExpr{
									pos:    position{line: 164, col: 53, offset: 3298},
									offset: 26,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 71, offset: 3316},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 76, offset: 3321},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 82, offset: 3327},
								expr: &ruleRefExpr{
									pos:    position{line: 164, col: 83, offset: 3328},
									offset: 25,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceId",
			pos:  position{line: 175, col: 1, offset: 3557},
			expr: &actionExpr{
				pos: position{line: 175, col: 16, offset: 3572},
				run: (*parser).callonReferenceId1,
				expr: &seqExpr{
					pos: position{line: 175, col: 16, offset: 3572},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 175, col: 16, offset: 3572},
							expr: &litMatcher{
								pos:        position{line: 175, col: 16, offset: 3572},
								val:        "ref_",
								ignoreCase: false,
								want:       "\"ref_\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 175, col: 24, offset: 3580},
							expr: &ruleRefExpr{
								pos:    position{line: 175, col: 24, offset: 3580},
								offset: 24,
							},
						},
					},
				},
			},
		},
		{
			name: "ReferencePart",
			pos:  position{line: 179, col: 1, offset: 3635},
			expr: &actionExpr{
				pos: position{line: 179, col: 18, offset: 3652},
				run: (*parser).callonReferencePart1,
				expr: &seqExpr{
					pos: position{line: 179, col: 18, offset: 3652},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 179, col: 18, offset: 3652},
							offset: 41,
						},
						&zeroOrOneExpr{
							pos: position{line: 179, col: 29, offset: 3663},
							expr: &litMatcher{
								pos:        position{line: 179, col: 29, offset: 3663},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceField",
			pos:  position{line: 183, col: 1, offset: 3702},
			expr: &actionExpr{
				pos: position{line: 183, col: 19, offset: 3720},
				run: (*parser).callonReferenceField1,
				expr: &seqExpr{
					pos: position{line: 183, col: 19, offset: 3720},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 183, col: 19, offset: 3720},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 23, offset: 3724},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 183, col: 30, offset: 3731},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 183, col: 30, offset: 3731},
										offset: 22,
									},
									&ruleRefExpr{
										pos:    position{line: 183, col: 47, offset: 3748},
										offset: 21,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceLabel",
			pos:  position{line: 187, col: 1, offset: 3797},
			expr: &actionExpr{
				pos: position{line: 187, col: 19, offset: 3815},
				run: (*parser).callonReferenceLabel1,
				expr: &seqExpr{
					pos: position{line: 187, col: 19, offset: 3815},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 187, col: 19, offset: 3815},
							offset: 45,
						},
						&ruleRefExpr{
							pos:    position{line: 187, col: 21, offset: 3817},
							offset: 46,
						},
						&ruleRefExpr{
							pos:    position{line: 187, col: 27, offset: 3823},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 187, col: 29, offset: 3825},
							label: "label",
							expr: &ruleRefExpr{
								pos:    position{line: 187, col: 35, offset: 3831},
								offset: 27,
							},
						},
						&andExpr{
							pos: position{line: 187, col: 50, offset: 3846},
							expr: &litMatcher{
								pos:        position{line: 187, col: 51, offset: 3847},
								val:        ">>",
								ignoreCase: false,
								want:       "\">>\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceText",
			pos:  position{line: 191, col: 1, offset: 3892},
			expr: &actionExpr{
				pos: position{line: 191, col: 18, offset: 3909},
				run: (*parser).callonReferenceText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 191, col: 18, offset: 3909},
					expr: &seqExpr{
						pos: position{line: 191, col: 19, offset: 3910},
						exprs: []any{
							&notExpr{
								pos: position{line: 191, col: 19, offset: 3910},
								expr: &litMatcher{
									pos:        position{line: 191, col: 20, offset: 3911},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
							&anyMatcher{
								line: 191, col: 25, offset: 3916,
							},
						},
					},
				},
			},
		},
		{
			name: "IntConstraint",
			pos:  position{line: 198, col: 1, offset: 3964},
			expr: &actionExpr{
				pos: position{line: 198, col: 18, offset: 3981},
				run: (*parser).callonIntConstraint1,
				expr: &labeledExpr{
					pos:   position{line: 198, col: 18, offset: 3981},
					label: "i",
					expr: &ruleRefExpr{
						pos:    position{line: 198, col: 20, offset: 3983},
						offset: 33,
					},
				},
			},
		},
		{
			name: "LengthLimit",
			pos:  position{line: 202, col: 1, offset: 4045},
			expr: &actionExpr{
				pos: position{line: 202, col: 16, offset: 4060},
				run: (*parser).callonLengthLimit1,
				expr: &seqExpr{
					pos: position{line: 202, col: 16, offset: 4060},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 202, col: 16, offset: 4060},
							val:        "len(",
							ignoreCase: true,
							want:       "\"len(\"i",
						},
						&ruleRefExpr{
							pos:    position{line: 202, col: 24, offset: 4068},
							offset: 45,
						},
						&labeledExpr{
							pos:   position{line: 202, col: 26, offset: 4070},
							label: "ref",
							expr: &choiceExpr{
								pos: position{line: 202, col: 32, offset: 4076},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 202, col: 32, offset: 4076},
										offset: 21,
									},
									&ruleRefExpr{
										pos:    position{line: 202, col: 50, offset: 4094},
										offset: 22,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 202, col: 67, offset: 4111},
							offset: 45,
						},
						&litMatcher{
							pos:        position{line: 202, col: 69, offset: 4113},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "CharacterLimit",
			pos:  position{line: 206, col: 1, offset: 4172},
			expr: &actionExpr{
				pos: position{line: 206, col: 19, offset: 4190},
				run: (*parser).callonCharacterLimit1,
				expr: &seqExpr{
					pos: position{line: 206, col: 19, offset: 4190},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 206, col: 19, offset: 4190},
							label: "maxBytes",
							expr: &ruleRefExpr{
								pos:    position{line: 206, col: 28, offset: 4199},
								offset: 33,
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 37, offset: 4208},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 41, offset: 4212},
							label: "maxCodepoints",
							expr: &ruleRefExpr{
								pos:    position{line: 206, col: 55, offset: 4226},
								offset: 33,
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 64, offset: 4235},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "TempLimit",
			pos:  position{line: 212, col: 1, offset: 4361},
			expr: &actionExpr{
				pos: position{line: 212, col: 14, offset: 4374},
				run: (*parser).callonTempLimit1,
				expr: &seqExpr{
					pos: position{line: 212, col: 14, offset: 4374},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 212, col: 14, offset: 4374},
							label: "f",
							expr: &choiceExpr{
								pos: position{line: 212, col: 18, offset: 4378},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 212, col: 18, offset: 4378},
										offset: 38,
									},
									&ruleRefExpr{
										pos:    position{line: 212, col: 26, offset: 4386},
										offset: 39,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 212, col: 36, offset: 4396},
							val:        "°C",
							ignoreCase: false,
							want:       "\"°C\"",
						},
					},
				},
			},
		},
		{
			name: "PercentageLimit",
			pos:  position{line: 223, col: 1, offset: 4655},
			expr: &actionExpr{
				pos: position{line: 223, col: 20, offset: 4674},
				run: (*parser).callonPercentageLimit1,
				expr: &seqExpr{
					pos: position{line: 223, col: 20, offset: 4674},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 223, col: 20, offset: 4674},
							label: "f",
							expr: &choiceExpr{
								pos: position{line: 223, col: 23, offset: 4677},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 223, col: 23, offset: 4677},
										offset: 38,
									},
									&ruleRefExpr{
										pos:    position{line: 223, col: 31, offset: 4685},
										offset: 39,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 40, offset: 4694},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "IntLimit",
			pos:  position{line: 234, col: 1, offset: 4942},
			expr: &actionExpr{
				pos: position{line: 234, col: 13, offset: 4954},
				run: (*parser).callonIntLimit1,
				expr: &seqExpr{
					pos: position{line: 234, col: 13, offset: 4954},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 234, col: 13, offset: 4954},
							label: "i",
							expr: &ruleRefExpr{
								pos:    position{line: 234, col: 15, offset: 4956},
								offset: 39,
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 23, offset: 4964},
							label: "e",
							expr: &zeroOrOneExpr{
								pos: position{line: 234, col: 25, offset: 4966},
								expr: &ruleRefExpr{
									pos:    position{line: 234, col: 25, offset: 4966},
									offset: 48,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HexLimit",
			pos:  position{line: 241, col: 1, offset: 5093},
			expr: &actionExpr{
				pos: position{line: 241, col: 13, offset: 5105},
				run: (*parser).callonHexLimit1,
				expr: &labeledExpr{
					pos:   position{line: 241, col: 13, offset: 5105},
					label: "h",
					expr: &ruleRefExpr{
						pos:    position{line: 241, col: 15, offset: 5107},
						offset: 40,
					},
				},
			},
		},
		{
			name: "StatusCodeLimit",
			pos:  position{line: 248, col: 1, offset: 5161},
			expr: &actionExpr{
				pos: position{line: 248, col: 20, offset: 5180},
				run: (*parser).callonStatusCodeLimit1,
				expr: &labeledExpr{
					pos:   position{line: 248, col: 20, offset: 5180},
					label: "status",
					expr: &ruleRefExpr{
						pos:    position{line: 248, col: 28, offset: 5188},
						offset: 36,
					},
				},
			},
		},
		{
			name: "StatusCode",
			pos:  position{line: 252, col: 1, offset: 5274},
			expr: &choiceExpr{
				pos: position{line: 253, col: 6, offset: 5293},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 253, col: 7, offset: 5294},
						run: (*parser).callonStatusCode2,
						expr: &choiceExpr{
							pos: position{line: 253, col: 8, offset: 5295},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 253, col: 8, offset: 5295},
									val:        "success",
									ignoreCase: true,
									want:       "\"SUCCESS\"i",
								},
								&litMatcher{
									pos:        position{line: 253, col: 21, offset: 5308},
									val:        "ok",
									ignoreCase: true,
									want:       "\"OK\"i",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 8, offset: 5364},
						run: (*parser).callonStatusCode6,
						expr: &litMatcher{
							pos:        position{line: 254, col: 8, offset: 5364},
							val:        "failure",
							ignoreCase: true,
							want:       "\"FAILURE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 255, col: 8, offset: 5424},
						run: (*parser).callonStatusCode8,
						expr: &litMatcher{
							pos:        position{line: 255, col: 8, offset: 5424},
							val:        "invalid_subscription",
							ignoreCase: true,
							want:       "\"INVALID_SUBSCRIPTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 8, offset: 5509},
						run: (*parser).callonStatusCode10,
						expr: &litMatcher{
							pos:        position{line: 256, col: 8, offset: 5509},
							val:        "unsupported_access",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ACCESS\"i",
						},
					},
					&actionExpr{
						pos: position{line: 257, col: 8, offset: 5590},
						run: (*parser).callonStatusCode12,
						expr: &litMatcher{
							pos:        position{line: 257, col: 8, offset: 5590},
							val:        "unsupported_endpoint",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ENDPOINT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 258, col: 8, offset: 5675},
						run: (*parser).callonStatusCode14,
						expr: &litMatcher{
							pos:        position{line: 258, col: 8, offset: 5675},
							val:        "invalid_action",
							ignoreCase: true,
							want:       "\"INVALID_ACTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 259, col: 8, offset: 5748},
						run: (*parser).callonStatusCode16,
						expr: &litMatcher{
							pos:        position{line: 259, col: 8, offset: 5748},
							val:        "unsupported_command",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_COMMAND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 260, col: 8, offset: 5831},
						run: (*parser).callonStatusCode18,
						expr: &litMatcher{
							pos:        position{line: 260, col: 8, offset: 5831},
							val:        "invalid_command",
							ignoreCase: true,
							want:       "\"INVALID_COMMAND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 8, offset: 5906},
						run: (*parser).callonStatusCode20,
						expr: &litMatcher{
							pos:        position{line: 261, col: 8, offset: 5906},
							val:        "unsupported_attribute",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ATTRIBUTE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 8, offset: 5993},
						run: (*parser).callonStatusCode22,
						expr: &litMatcher{
							pos:        position{line: 262, col: 8, offset: 5993},
							val:        "constraint_error",
							ignoreCase: true,
							want:       "\"CONSTRAINT_ERROR\"i",
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 8, offset: 6070},
						run: (*parser).callonStatusCode24,
						expr: &litMatcher{
							pos:        position{line: 263, col: 8, offset: 6070},
							val:        "unsupported_write",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_WRITE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 8, offset: 6149},
						run: (*parser).callonStatusCode26,
						expr: &litMatcher{
							pos:        position{line: 264, col: 8, offset: 6149},
							val:        "resource_exhausted",
							ignoreCase: true,
							want:       "\"RESOURCE_EXHAUSTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 265, col: 8, offset: 6230},
						run: (*parser).callonStatusCode28,
						expr: &litMatcher{
							pos:        position{line: 265, col: 8, offset: 6230},
							val:        "not_found",
							ignoreCase: true,
							want:       "\"NOT_FOUND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 8, offset: 6293},
						run: (*parser).callonStatusCode30,
						expr: &litMatcher{
							pos:        position{line: 266, col: 8, offset: 6293},
							val:        "unreportable_attribute",
							ignoreCase: true,
							want:       "\"UNREPORTABLE_ATTRIBUTE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 8, offset: 6382},
						run: (*parser).callonStatusCode32,
						expr: &litMatcher{
							pos:        position{line: 267, col: 8, offset: 6382},
							val:        "invalid_data_type",
							ignoreCase: true,
							want:       "\"INVALID_DATA_TYPE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 8, offset: 6460},
						run: (*parser).callonStatusCode34,
						expr: &litMatcher{
							pos:        position{line: 268, col: 8, offset: 6460},
							val:        "unsupported_read",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_READ\"i",
						},
					},
					&actionExpr{
						pos: position{line: 269, col: 8, offset: 6537},
						run: (*parser).callonStatusCode36,
						expr: &litMatcher{
							pos:        position{line: 269, col: 8, offset: 6537},
							val:        "data_version_mismatch",
							ignoreCase: true,
							want:       "\"DATA_VERSION_MISMATCH\"i",
						},
					},
					&actionExpr{
						pos: position{line: 270, col: 8, offset: 6623},
						run: (*parser).callonStatusCode38,
						expr: &litMatcher{
							pos:        position{line: 270, col: 8, offset: 6623},
							val:        "timeout",
							ignoreCase: true,
							want:       "\"TIMEOUT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 271, col: 8, offset: 6683},
						run: (*parser).callonStatusCode40,
						expr: &litMatcher{
							pos:        position{line: 271, col: 8, offset: 6683},
							val:        "unsupported_node",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_NODE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 272, col: 8, offset: 6760},
						run: (*parser).callonStatusCode42,
						expr: &litMatcher{
							pos:        position{line: 272, col: 8, offset: 6760},
							val:        "busy",
							ignoreCase: true,
							want:       "\"BUSY\"i",
						},
					},
					&actionExpr{
						pos: position{line: 273, col: 8, offset: 6814},
						run: (*parser).callonStatusCode44,
						expr: &litMatcher{
							pos:        position{line: 273, col: 8, offset: 6814},
							val:        "access_restricted",
							ignoreCase: true,
							want:       "\"ACCESS_RESTRICTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 274, col: 8, offset: 6893},
						run: (*parser).callonStatusCode46,
						expr: &litMatcher{
							pos:        position{line: 274, col: 8, offset: 6893},
							val:        "unsupported_cluster",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_CLUSTER\"i",
						},
					},
					&actionExpr{
						pos: position{line: 275, col: 8, offset: 6976},
						run: (*parser).callonStatusCode48,
						expr: &litMatcher{
							pos:        position{line: 275, col: 8, offset: 6976},
							val:        "no_upstream_subscription",
							ignoreCase: true,
							want:       "\"NO_UPSTREAM_SUBSCRIPTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 276, col: 8, offset: 7068},
						run: (*parser).callonStatusCode50,
						expr: &litMatcher{
							pos:        position{line: 276, col: 8, offset: 7068},
							val:        "needs_timed_interaction",
							ignoreCase: true,
							want:       "\"NEEDS_TIMED_INTERACTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 277, col: 8, offset: 7158},
						run: (*parser).callonStatusCode52,
						expr: &litMatcher{
							pos:        position{line: 277, col: 8, offset: 7158},
							val:        "unsupported_event",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_EVENT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 278, col: 8, offset: 7237},
						run: (*parser).callonStatusCode54,
						expr: &litMatcher{
							pos:        position{line: 278, col: 8, offset: 7237},
							val:        "paths_exhausted",
							ignoreCase: true,
							want:       "\"PATHS_EXHAUSTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 279, col: 8, offset: 7312},
						run: (*parser).callonStatusCode56,
						expr: &litMatcher{
							pos:        position{line: 279, col: 8, offset: 7312},
							val:        "timed_request_mismatch",
							ignoreCase: true,
							want:       "\"TIMED_REQUEST_MISMATCH\"i",
						},
					},
					&actionExpr{
						pos: position{line: 280, col: 8, offset: 7400},
						run: (*parser).callonStatusCode58,
						expr: &litMatcher{
							pos:        position{line: 280, col: 8, offset: 7400},
							val:        "failsafe_required",
							ignoreCase: true,
							want:       "\"FAILSAFE_REQUIRED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 281, col: 8, offset: 7479},
						run: (*parser).callonStatusCode60,
						expr: &litMatcher{
							pos:        position{line: 281, col: 8, offset: 7479},
							val:        "invalid_in_state",
							ignoreCase: true,
							want:       "\"INVALID_IN_STATE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 282, col: 8, offset: 7555},
						run: (*parser).callonStatusCode62,
						expr: &litMatcher{
							pos:        position{line: 282, col: 8, offset: 7555},
							val:        "no_command_response",
							ignoreCase: true,
							want:       "\"NO_COMMAND_RESPONSE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 283, col: 8, offset: 7637},
						run: (*parser).callonStatusCode64,
						expr: &litMatcher{
							pos:        position{line: 283, col: 8, offset: 7637},
							val:        "terms_and_conditions_changed",
							ignoreCase: true,
							want:       "\"TERMS_AND_CONDITIONS_CHANGED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 284, col: 8, offset: 7736},
						run: (*parser).callonStatusCode66,
						expr: &litMatcher{
							pos:        position{line: 284, col: 8, offset: 7736},
							val:        "maintenance_required",
							ignoreCase: true,
							want:       "\"MAINTENANCE_REQUIRED\"i",
						},
					},
				},
			},
		},
		{
			name: "StringLimit",
			pos:  position{line: 287, col: 1, offset: 7816},
			expr: &actionExpr{
				pos: position{line: 287, col: 16, offset: 7831},
				run: (*parser).callonStringLimit1,
				expr: &seqExpr{
					pos: position{line: 287, col: 16, offset: 7831},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 287, col: 16, offset: 7831},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 287, col: 21, offset: 7836},
							label: "limit",
							expr: &zeroOrMoreExpr{
								pos: position{line: 287, col: 27, offset: 7842},
								expr: &charClassMatcher{
									pos:        position{line: 287, col: 27, offset: 7842},
									val:        "[^\"]",
									chars:      []rune{'"'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 287, col: 33, offset: 7848},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 295, col: 1, offset: 7994},
			expr: &actionExpr{
				pos: position{line: 295, col: 10, offset: 8003},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 295, col: 10, offset: 8003},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 295, col: 10, offset: 8003},
							offset: 39,
						},
						&seqExpr{
							pos: position{line: 295, col: 19, offset: 8012},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 295, col: 19, offset: 8012},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 295, col: 23, offset: 8016},
									expr: &charClassMatcher{
										pos:        position{line: 295, col: 23, offset: 8016},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 299, col: 1, offset: 8076},
			expr: &actionExpr{
				pos: position{line: 299, col: 12, offset: 8087},
				run: (*parser).callonInteger1,
				expr: &seqExpr{
					pos: position{line: 299, col: 12, offset: 8087},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 299, col: 12, offset: 8087},
							label: "sign",
							expr: &zeroOrOneExpr{
								pos: position{line: 299, col: 17, offset: 8092},
								expr: &choiceExpr{
									pos: position{line: 299, col: 18, offset: 8093},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 299, col: 18, offset: 8093},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 299, col: 22, offset: 8097},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 28, offset: 8103},
							label: "digits",
							expr: &ruleRefExpr{
								pos:    position{line: 299, col: 35, offset: 8110},
								offset: 47,
							},
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 303, col: 1, offset: 8173},
			expr: &actionExpr{
				pos: position{line: 303, col: 8, offset: 8180},
				run: (*parser).callonHex1,
				expr: &seqExpr{
					pos: position{line: 303, col: 8, offset: 8180},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 303, col: 8, offset: 8180},
							val:        "0x",
							ignoreCase: true,
							want:       "\"0x\"i",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 14, offset: 8186},
							label: "hex",
							expr: &oneOrMoreExpr{
								pos: position{line: 303, col: 18, offset: 8190},
								expr: &charClassMatcher{
									pos:        position{line: 303, col: 18, offset: 8190},
									val:        "[0-9A-Fa-f]",
									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PascalCase",
			pos:  position{line: 311, col: 1, offset: 8353},
			expr: &actionExpr{
				pos: position{line: 311, col: 15, offset: 8367},
				run: (*parser).callonPascalCase1,
				expr: &seqExpr{
					pos: position{line: 311, col: 15, offset: 8367},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 311, col: 15, offset: 8367},
							expr: &ruleRefExpr{
								pos:    position{line: 311, col: 15, offset: 8367},
								offset: 42,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 311, col: 28, offset: 8380},
							expr: &ruleRefExpr{
								pos:    position{line: 311, col: 28, offset: 8380},
								offset: 42,
							},
						},
					},
				},
			},
		},
		{
			name: "Capitalized",
			pos:  position{line: 315, col: 1, offset: 8427},
			expr: &actionExpr{
				pos: position{line: 315, col: 16, offset: 8442},
				run: (*parser).callonCapitalized1,
				expr: &seqExpr{
					pos: position{line: 315, col: 16, offset: 8442},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 315, col: 16, offset: 8442},
							expr: &ruleRefExpr{
								pos:    position{line: 315, col: 16, offset: 8442},
								offset: 43,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 315, col: 27, offset: 8453},
							expr: &ruleRefExpr{
								pos:    position{line: 315, col: 27, offset: 8453},
								offset: 44,
							},
						},
					},
				},
			},
		},
		{
			name: "Uppercase",
			pos:  position{line: 319, col: 1, offset: 8498},
			expr: &actionExpr{
				pos: position{line: 319, col: 14, offset: 8511},
				run: (*parser).callonUppercase1,
				expr: &charClassMatcher{
					pos:        position{line: 319, col: 14, offset: 8511},
					val:        "[A-Z]",
					ranges:     []rune{'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Lowercase",
			pos:  position{line: 323, col: 1, offset: 8551},
			expr: &actionExpr{
				pos: position{line: 323, col: 14, offset: 8564},
				run: (*parser).callonLowercase1,
				expr: &charClassMatcher{
					pos:        position{line: 323, col: 14, offset: 8564},
					val:        "[a-z]",
					ranges:     []rune{'a', 'z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 327, col: 1, offset: 8604},
			expr: &zeroOrMoreExpr{
				pos: position{line: 327, col: 18, offset: 8623},
				expr: &charClassMatcher{
					pos:        position{line: 327, col: 18, offset: 8623},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Comma",
			pos:  position{line: 329, col: 1, offset: 8635},
			expr: &litMatcher{
				pos:        position{line: 329, col: 10, offset: 8644},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
		},
		{
			name: "Digits",
			pos:  position{line: 331, col: 1, offset: 8650},
			expr: &actionExpr{
				pos: position{line: 331, col: 11, offset: 8660},
				run: (*parser).callonDigits1,
				expr: &oneOrMoreExpr{
					pos: position{line: 331, col: 11, offset: 8660},
					expr: &charClassMatcher{
						pos:        position{line: 331, col: 11, offset: 8660},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Exp",
			pos:  position{line: 335, col: 1, offset: 8721},
			expr: &actionExpr{
				pos: position{line: 335, col: 8, offset: 8728},
				run: (*parser).callonExp1,
				expr: &seqExpr{
					pos: position{line: 335, col: 8, offset: 8728},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 335, col: 8, offset: 8728},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 12, offset: 8732},
							label: "digits",
							expr: &ruleRefExpr{
								pos:    position{line: 335, col: 19, offset: 8739},
								offset: 47,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 335, col: 26, offset: 8746},
							expr: &litMatcher{
								pos:        position{line: 335, col: 26, offset: 8746},
								val:        "^",
								ignoreCase: false,
								want:       "\"^\"",
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 339, col: 1, offset: 8776},
			expr: &notExpr{
				pos: position{line: 339, col: 7, offset: 8784},
				expr: &anyMatcher{
					line: 339, col: 8, offset: 8785,
				},
			},
		},
	},
}

func (c *current) onInput1(conf any) (any, error) {
	cs := conf.([]interface{})

	var set Set
	for _, i := range cs {
		con := i.(Constraint)
		set = append(set, con)
	}
	if len(set) == 1 {
		return set[0], nil
	}
	return set, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["conf"])
}

func (c *current) onCons1(cons, entry any) (any, error) {
	if entry != nil {
		return &ListConstraint{
			Constraint:      cons.(Constraint),
			EntryConstraint: entry.(Constraint),
		}, nil
	}
	return cons, nil
}

func (p *parser) callonCons1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCons1(stack["cons"], stack["entry"])
}

func (c *current) onEntryConstraint1(cons any) (any, error) {
	return cons.(Constraint), nil
}

func (p *parser) callonEntryConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryConstraint1(stack["cons"])
}

func (c *current) onConstraint1(cons any) (any, error) {
	switch cons := cons.(type) {
	case Constraint:
		return cons, nil
	case Limit:
		return &ExactConstraint{Value: cons}, nil
	default:
		return nil, fmt.Errorf("unexpected constraint type: %T", cons)
	}
}

func (p *parser) callonConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstraint1(stack["cons"])
}

func (c *current) onLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit1(stack["limit"])
}

func (c *current) onParentheticalLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonParentheticalLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParentheticalLimit1(stack["limit"])
}

func (c *current) onPlainLimit1(limit any) (any, error) {
	return limit.(Limit), nil
}

func (p *parser) callonPlainLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlainLimit1(stack["limit"])
}

func (c *current) onMSLimit1() (any, error) {
	return &ManufacturerLimit{Value: string(c.text)}, nil
}

func (p *parser) callonMSLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMSLimit1()
}

func (c *current) onNullLimit1() (any, error) {
	return &NullLimit{}, nil
}

func (p *parser) callonNullLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLimit1()
}

func (c *current) onUnspecifiedLimit1() (any, error) {
	return &UnspecifiedLimit{}, nil
}

func (p *parser) callonUnspecifiedLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnspecifiedLimit1()
}

func (c *current) onEmptyLimit1() (any, error) {
	return &EmptyLimit{}, nil
}

func (p *parser) callonEmptyLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLimit1()
}

func (c *current) onAny1(any any) (any, error) {
	return &AllConstraint{Value: string(any.([]uint8))}, nil
}

func (p *parser) callonAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAny1(stack["any"])
}

func (c *current) onDescribed1() (any, error) {
	return &DescribedConstraint{}, nil
}

func (p *parser) callonDescribed1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescribed1()
}

func (c *current) onBooleanLimit1() (any, error) {
	b, err := strconv.ParseBool(string(c.text))
	if err != nil {
		return nil, err
	}
	return &BooleanLimit{Value: b}, nil
}

func (p *parser) callonBooleanLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLimit1()
}

func (c *current) onTerm2(exp any) (any, error) {
	return exp, nil
}

func (p *parser) callonTerm2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm2(stack["exp"])
}

func (c *current) onTerm10(exp any) (any, error) {
	return exp, nil
}

func (p *parser) callonTerm10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm10(stack["exp"])
}

func (c *current) onExpression1(left, operand, right any) (any, error) {
	var val []uint8
	for _, d := range operand.([]uint8) {
		val = append(val, d)
	}
	return &MathExpressionLimit{
		Operand: string(val),
		Left:    left.(Limit),
		Right:   right.(Limit),
	}, nil
}

func (p *parser) callonExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onRange1(from, to any) (any, error) {
	return &RangeConstraint{
		Minimum: from.(Limit),
		Maximum: to.(Limit),
	}, nil
}

func (p *parser) callonRange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRange1(stack["from"], stack["to"])
}

func (c *current) onMin1(limit any) (any, error) {
	return &MinConstraint{Minimum: limit.(Limit)}, nil
}

func (p *parser) callonMin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMin1(stack["limit"])
}

func (c *current) onMax1(limit any) (any, error) {
	return &MaxConstraint{Maximum: limit.(Limit)}, nil
}

func (p *parser) callonMax1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMax1(stack["limit"])
}

func (c *current) onIdentifierLimit1(ref, field any) (any, error) {
	rl := &IdentifierLimit{ID: ref.(string)}
	if field != nil {
		rl.Field = field.(Limit)
	}
	return rl, nil
}

func (p *parser) callonIdentifierLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierLimit1(stack["ref"], stack["field"])
}

func (c *current) onReferenceLimit1(reference, label, field any) (any, error) {
	rl := &ReferenceLimit{Reference: reference.(string)}
	if label != nil {
		rl.Label = label.(string)
	}
	if field != nil {
		rl.Field = field.(Limit)
	}
	return rl, nil
}

func (p *parser) callonReferenceLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceLimit1(stack["reference"], stack["label"], stack["field"])
}

func (c *current) onReferenceId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceId1()
}

func (c *current) onReferencePart1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferencePart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferencePart1()
}

func (c *current) onReferenceField1(field any) (any, error) {
	return field.(Limit), nil
}

func (p *parser) callonReferenceField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceField1(stack["field"])
}

func (c *current) onReferenceLabel1(label any) (any, error) {
	return label.(string), nil
}

func (p *parser) callonReferenceLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceLabel1(stack["label"])
}

func (c *current) onReferenceText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceText1()
}

func (c *current) onIntConstraint1(i any) (any, error) {
	return &MaxConstraint{Maximum: i.(Limit)}, nil
}

func (p *parser) callonIntConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstraint1(stack["i"])
}

func (c *current) onLengthLimit1(ref any) (any, error) {
	return &LengthLimit{Reference: ref.(Limit)}, nil
}

func (p *parser) callonLengthLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLengthLimit1(stack["ref"])
}

func (c *current) onCharacterLimit1(maxBytes, maxCodepoints any) (any, error) {
	mb := maxBytes.(Limit)
	mcp := maxCodepoints.(Limit)
	return &CharacterLimit{ByteCount: mb, CodepointCount: mcp}, nil
}

func (p *parser) callonCharacterLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterLimit1(stack["maxBytes"], stack["maxCodepoints"])
}

func (c *current) onTempLimit1(f any) (any, error) {
	switch f := f.(type) {
	case int64:
		return &TemperatureLimit{Value: decimal.NewFromInt(f)}, nil
	case decimal.Decimal:
		return &TemperatureLimit{Value: f}, nil
	default:
		return nil, fmt.Errorf("unknown temperature limit type: %T", f)
	}
}

func (p *parser) callonTempLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTempLimit1(stack["f"])
}

func (c *current) onPercentageLimit1(f any) (any, error) {
	switch f := f.(type) {
	case int64:
		return &PercentLimit{Value: decimal.NewFromInt(f)}, nil
	case decimal.Decimal:
		return &PercentLimit{Value: f}, nil
	default:
		return nil, fmt.Errorf("unknown percentage limit type: %T", f)
	}
}

func (p *parser) callonPercentageLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentageLimit1(stack["f"])
}

func (c *current) onIntLimit1(i, e any) (any, error) {
	if e != nil {
		return &ExpLimit{Value: i.(int64), Exp: e.(int64)}, nil
	}
	return &IntLimit{Value: i.(int64)}, nil
}

func (p *parser) callonIntLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntLimit1(stack["i"], stack["e"])
}

func (c *current) onHexLimit1(h any) (any, error) {
	return &HexLimit{Value: h.(uint64)}, nil
}

func (p *parser) callonHexLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexLimit1(stack["h"])
}

func (c *current) onStatusCodeLimit1(status any) (any, error) {
	return &StatusCodeLimit{StatusCode: status.(types.StatusCode)}, nil
}

func (p *parser) callonStatusCodeLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCodeLimit1(stack["status"])
}

func (c *current) onStatusCode2() (any, error) {
	return types.StatusCodeSuccess, nil
}

func (p *parser) callonStatusCode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode2()
}

func (c *current) onStatusCode6() (any, error) {
	return types.StatusCodeFailure, nil
}

func (p *parser) callonStatusCode6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode6()
}

func (c *current) onStatusCode8() (any, error) {
	return types.StatusCodeInvalidSubscription, nil
}

func (p *parser) callonStatusCode8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode8()
}

func (c *current) onStatusCode10() (any, error) {
	return types.StatusCodeUnsupportedAccess, nil
}

func (p *parser) callonStatusCode10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode10()
}

func (c *current) onStatusCode12() (any, error) {
	return types.StatusCodeUnsupportedEndpoint, nil
}

func (p *parser) callonStatusCode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode12()
}

func (c *current) onStatusCode14() (any, error) {
	return types.StatusCodeInvalidAction, nil
}

func (p *parser) callonStatusCode14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode14()
}

func (c *current) onStatusCode16() (any, error) {
	return types.StatusCodeUnsupportedCommand, nil
}

func (p *parser) callonStatusCode16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode16()
}

func (c *current) onStatusCode18() (any, error) {
	return types.StatusCodeInvalidCommand, nil
}

func (p *parser) callonStatusCode18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode18()
}

func (c *current) onStatusCode20() (any, error) {
	return types.StatusCodeUnsupportedAttribute, nil
}

func (p *parser) callonStatusCode20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode20()
}

func (c *current) onStatusCode22() (any, error) {
	return types.StatusCodeConstraintError, nil
}

func (p *parser) callonStatusCode22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode22()
}

func (c *current) onStatusCode24() (any, error) {
	return types.StatusCodeUnsupportedWrite, nil
}

func (p *parser) callonStatusCode24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode24()
}

func (c *current) onStatusCode26() (any, error) {
	return types.StatusCodeResourceExhausted, nil
}

func (p *parser) callonStatusCode26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode26()
}

func (c *current) onStatusCode28() (any, error) {
	return types.StatusCodeNotFound, nil
}

func (p *parser) callonStatusCode28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode28()
}

func (c *current) onStatusCode30() (any, error) {
	return types.StatusCodeUnreportableAttribute, nil
}

func (p *parser) callonStatusCode30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode30()
}

func (c *current) onStatusCode32() (any, error) {
	return types.StatusCodeInvalidDataType, nil
}

func (p *parser) callonStatusCode32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode32()
}

func (c *current) onStatusCode34() (any, error) {
	return types.StatusCodeUnsupportedRead, nil
}

func (p *parser) callonStatusCode34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode34()
}

func (c *current) onStatusCode36() (any, error) {
	return types.StatusCodeDataVersionMismatch, nil
}

func (p *parser) callonStatusCode36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode36()
}

func (c *current) onStatusCode38() (any, error) {
	return types.StatusCodeTimeout, nil
}

func (p *parser) callonStatusCode38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode38()
}

func (c *current) onStatusCode40() (any, error) {
	return types.StatusCodeUnsupportedNode, nil
}

func (p *parser) callonStatusCode40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode40()
}

func (c *current) onStatusCode42() (any, error) {
	return types.StatusCodeBusy, nil
}

func (p *parser) callonStatusCode42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode42()
}

func (c *current) onStatusCode44() (any, error) {
	return types.StatusCodeAccessRestricted, nil
}

func (p *parser) callonStatusCode44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode44()
}

func (c *current) onStatusCode46() (any, error) {
	return types.StatusCodeUnsupportedCluster, nil
}

func (p *parser) callonStatusCode46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode46()
}

func (c *current) onStatusCode48() (any, error) {
	return types.StatusCodeNoUpstreamSubscription, nil
}

func (p *parser) callonStatusCode48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode48()
}

func (c *current) onStatusCode50() (any, error) {
	return types.StatusCodeNeedsTimedInteraction, nil
}

func (p *parser) callonStatusCode50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode50()
}

func (c *current) onStatusCode52() (any, error) {
	return types.StatusCodeUnsupportedEvent, nil
}

func (p *parser) callonStatusCode52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode52()
}

func (c *current) onStatusCode54() (any, error) {
	return types.StatusCodePathsExhausted, nil
}

func (p *parser) callonStatusCode54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode54()
}

func (c *current) onStatusCode56() (any, error) {
	return types.StatusCodeTimedRequestMismatch, nil
}

func (p *parser) callonStatusCode56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode56()
}

func (c *current) onStatusCode58() (any, error) {
	return types.StatusCodeFailsafeRequired, nil
}

func (p *parser) callonStatusCode58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode58()
}

func (c *current) onStatusCode60() (any, error) {
	return types.StatusCodeInvalidInState, nil
}

func (p *parser) callonStatusCode60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode60()
}

func (c *current) onStatusCode62() (any, error) {
	return types.StatusCodeNoCommandResponse, nil
}

func (p *parser) callonStatusCode62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode62()
}

func (c *current) onStatusCode64() (any, error) {
	return types.StatusCodeTermsAndConditionsChanged, nil
}

func (p *parser) callonStatusCode64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode64()
}

func (c *current) onStatusCode66() (any, error) {
	return types.StatusCodeMaintenanceRequired, nil
}

func (p *parser) callonStatusCode66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode66()
}

func (c *current) onStringLimit1(limit any) (any, error) {
	var val []uint8
	for _, d := range limit.([]any) {
		val = append(val, d.([]uint8)...)
	}
	return &StringLimit{Value: string(val)}, nil
}

func (p *parser) callonStringLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLimit1(stack["limit"])
}

func (c *current) onFloat1() (any, error) {
	return decimal.NewFromString(string(c.text))
}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInteger1(sign, digits any) (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1(stack["sign"], stack["digits"])
}

func (c *current) onHex1(hex any) (any, error) {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	return strconv.ParseUint(string(val), 16, 64)
}

func (p *parser) callonHex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1(stack["hex"])
}

func (c *current) onPascalCase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPascalCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPascalCase1()
}

func (c *current) onCapitalized1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCapitalized1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCapitalized1()
}

func (c *current) onUppercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercase1()
}

func (c *current) onLowercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercase1()
}

func (c *current) onDigits1() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonDigits1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigits1()
}

func (c *current) onExp1(digits any) (any, error) {
	return digits, nil
}

func (p *parser) callonExp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExp1(stack["digits"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
	parser *parser
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	//basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
	offset position
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
