{
package constraint

import (
	"fmt"
	"math/big"
    "strconv"
	"strings"

	 "github.com/shopspring/decimal"
)

func debug(format string, a ...any) (n int, err error) {
	return
	return fmt.Fprintf(os.Stdout, format, a...)
}

}

Input <- conf:Cons+ EOF {
    cs := conf.([]interface{})

    var set ConstraintSet
    for _, i := range cs {
        con := i.(Constraint)
        set = append(set, con)
    }
	if len(set) == 1 {
		return set[0], nil
	}
    return set, nil
}

Cons <- cons:Constraint entry:EntryConstraint? (_ Comma _)? {
	if entry != nil {
		return &ListConstraint {
			Constraint:cons.(Constraint),
			EntryConstraint:entry.(Constraint),
		}, nil
	}
	return cons, nil
}

EntryConstraint <- _ "[" _ cons:Constraint _ "]" {
	debug("found entry %s\n", string(c.text))
	return cons.(Constraint), nil
}

Constraint <- cons:(Described / Any /  Range / Min / Max / Limit)  {
	switch cons := cons.(type) {
		case Constraint:
			return cons, nil
		case ConstraintLimit:
			return &ExactConstraint{Value:cons}, nil
		default:
			return nil, fmt.Errorf("unexpected constraint type: %T", cons)
	}
}

Range <- from:Limit " to " to:Limit {
	debug("found range %s\n", string(c.text))
	return &RangeConstraint  {
		Minimum:from.(ConstraintLimit),
		Maximum:to.(ConstraintLimit),
	}, nil
}

Min <- [Mm] "in " _ limit:Limit {
	debug("found min limit %s\n", string(c.text))
	return &MinConstraint{Minimum:limit.(ConstraintLimit)}, nil
}

Max <- [Mm] "ax " _ limit:Limit (_ "chars")? {
	debug("found max limit %s\n", string(c.text))
	return &MaxConstraint{Maximum:limit.(ConstraintLimit)}, nil
}

Described <- "desc" {
	return &DescribedConstraint{}, nil
}

Any <- any:("any" / "all") {
	return &AllConstraint{Value:string(any.([]uint8))}, nil
}

Limit <- limit:(MSLimit / NullLimit / EmptyLimit / EmptyStringLimit / BooleanLimit / Expression / HexLimit / TempLimit / PercentageLimit / IntLimit / Term / ReferenceLimit  ) {
	debug("found limit %s\n", string(c.text))
	return limit.(ConstraintLimit), nil
}

MSLimit <- "MS" {
	return &ManufacturerLimit{Value:string(c.text)}, nil
}

NullLimit <- "null" {
	return &NullLimit{}, nil
}

EmptyLimit <- "empty" {
	return &EmptyLimit{}, nil
}

EmptyStringLimit <- "\"\"" {
	return &EmptyLimit{}, nil
}

BooleanLimit <- limit:("true" / "True" / "False" / "false") {
    b, err := strconv.ParseBool(string(limit.([]uint8)))
    if err != nil {
        return nil, err
    }
	return &BooleanLimit{Value:b}, nil
}

Term <- '(' _ exp:Expression _ ')' {
	debug("found term add/subtract %s\n", string(c.text))
    return exp, nil
} / exp:(Expression) {
	debug("found term expression %s\n", string(c.text))
    return exp, nil
}

Expression <- left:(IntLimit / ReferenceLimit / HexLimit) _ operand:('+'/'-'/'*'/'-') _ right:Limit {
	debug("found expression %s\n", string(c.text))
	var val []uint8
	for _, d := range operand.([]uint8) {
		val = append(val, d)
	}
	return &MathExpressionLimit{
		Operand:string(val),
		Left:left.(ConstraintLimit),
		Right:right.(ConstraintLimit),
	}, nil
}

IntConstraint <- i:IntLimit {
	debug("found int limit %s\n", string(c.text))
	return &MaxConstraint{Max:i.(ConstraintLimit)}, nil
}

ReferenceLimit <- PascalCase {
	debug("found reference limit %s\n", string(c.text))
	return &ReferenceLimit{Value:string(c.text)}, nil
}

TempLimit <- f:( Float / Integer ) "°C" {
	debug("found temp %s\n", string(c.text))
	switch f := f.(type) {
		case int64:
			return &TemperatureLimit{Value:decimal.NewFromInt(f)}, nil
		case decimal.Decimal:
			return &TemperatureLimit{Value:f}, nil
		default:
			return nil, fmt.Errorf("unknown temperature limit type: %T", f)
	}
}

PercentageLimit <- f:(Float / Integer) "%" {
	debug("found percent %s\n", string(c.text))
	switch f := f.(type) {
		case int64:
			return &PercentLimit{Value:decimal.NewFromInt(f)}, nil
		case decimal.Decimal:
			return &PercentLimit{Value:f}, nil
		default:
			return nil, fmt.Errorf("unknown percentage limit type: %T", f)
	}
}

IntLimit <- i:Integer e:Exp? {
	if e != nil {
		debug("found exp limit %s\n", string(c.text))
		return &ExpLimit{Value:i.(int64), Exp:e.(int64)}, nil
	}
	debug("found int limit %s\n", string(c.text))
	return &IntLimit{Value:i.(int64)}, nil
}


HexLimit <- h:Hex {
	debug("found hex limit %s\n", string(c.text))
	return &HexLimit{Value:h.(uint64)}, nil
}

Float <- Integer ("." [0-9]+) {
	debug("found float %s\n", string(c.text))
	return decimal.NewFromString(string(c.text))
}

Integer <- sign:('-'/'+')? digits:Digits  {
	debug("found int %s\n", string(c.text))
	return strconv.ParseInt(string(c.text), 10, 64)
}

Hex <- ("0x" / "0X") hex:[0-9A-Fa-f]+ {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	debug("found hex %s\n", string(val))
	return strconv.ParseUint(string(val), 16, 64)
}

PascalCase <- Capitalized+ Capitalized* {
	debug("found pascal %s\n", string(c.text))
	return string(c.text), nil
}

Capitalized <- Uppercase Lowercase+ {
	debug("found capitalized %s\n", string(c.text))
	return string(c.text), nil
}

Uppercase <- [A-Z] {
	debug("found uppercase %s\n", string(c.text))
	return string(c.text), nil
}

Lowercase <- [a-z] {
	debug("found lowercase %s\n", string(c.text))
	return string(c.text), nil
}

_ "whitespace" ← [ \t\r\n]*

Comma <- ',' 

Digits <- [0-9]+ {
	return strconv.ParseInt(string(c.text), 10, 64)
}

Exp <- "^" digits:Digits "^"? {
	return digits, nil
}

EOF ← !.