

NumberValue <- (val: Hex {
        return NewHexValue(val.(uint64), string(c.text)), nil
    }
    / val:Float {
        return NewFloatValue(val.(decimal.Decimal), string(c.text)), nil
    }
    / val:Integer {
        return NewIntValue(val.(int64), string(c.text)), nil
    })

BooleanValue <- ("true"i / "false"i) {
	val, err := strconv.ParseBool(string(c.text))
	if err != nil {
		return nil, err
	}
	return NewBooleanValue(val, string(c.text)), nil
}

Float <- Integer ("." [0-9]+) {
	return decimal.NewFromString(string(c.text))
}

Integer <- sign:('-'/'+')? digits:Digits  {
	return strconv.ParseInt(string(c.text), 10, 64)
}

Hex <- "0x"i hex:[0-9A-Fa-f]+ {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	return strconv.ParseUint(string(val), 16, 64)
}

Digits <- [0-9]+ {
	return strconv.ParseInt(string(c.text), 10, 64)
}

NullValue <- "null" {
	return NewNullValue(string(c.text)), nil
}