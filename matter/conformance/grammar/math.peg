

Equality <- _ left:Or right:EqualsOp* _ {
    //debug("matched equality %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    equalityOps := right.([]interface{}) 
    if len(equalityOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    var ee *EqualityExpression
    for _, equalityOp := range equalityOps {
        ee = equalityOp.(*EqualityExpression) 
        ee.Left = leftCE
        leftCE = ee
    }
    return ee, nil
}

EqualsOp <- _ equals:("=="/"!=") _ f:Or {
    //debug("matched Equals Op %s\n", string(c.text))
    fc := f.(Expression)
    return &EqualityExpression{
        Not: (string(equals.([]uint8)) == "!="),
        Right:fc,
    }, nil
}

Or <- _ left:Xor _ right:OrOp* _ {
    //debug("matched OR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    orOps := right.([]any)
    if len(orOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression("|", leftCE, orOps)
}

OrOp <- _ "|" _ f:Xor {
    //debug("matched OR op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}

Xor <- _ left:And _ right:XorOp* _ {
    //debug("matched XOR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    xorOps := right.([]any)
    if len(xorOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression("^", leftCE, xorOps)
}

XorOp <- _ "^" _ f:And {
   // debug("matched XOR op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}

And <- _ left:FeatureTerm _ right:AndOp* _ {
   // debug("matched AND %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    addOps := right.([]any)
    if len(addOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression("&", leftCE, addOps)
}

AndOp <- _ "&" _ f:FeatureTerm {
    //debug("matched AND op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}

FeatureTerm <- not:'!'? '(' _  eq:Equality _ ')' {
    //debug("matched feature term %s\n", string(c.text))
    if not != nil {
        switch eq := eq.(type) {
            case *EqualityExpression:
                eq.Not = true
            case *LogicalExpression:
                eq.Not = true
        }
    }
    return eq, nil
} / reference:ReferenceOp {
    return reference, nil 
} / identifier:IdentifierOp {
    return identifier, nil 
} / feature:FeatureOp {
    return feature, nil 
}
