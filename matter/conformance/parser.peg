{
package conformance

import (
    "fmt"
    "strconv"

    "github.com/hasty/alchemy/matter"
)

func debug(format string, a ...any) (n int, err error) {
	return
	//return fmt.Fprintf(os.Stdout, format, a...)
}

}

Input <- conf:Conformance+ EOF {
    cs := conf.([]interface{})

    var set Set
    for _, i := range cs {
        con := i.(Conformance)
        set = append(set, con)
    }
    return set, nil
}

Conformance <- '[' i:Equality ']' choice:Choice? _ Comma? _ {
    exp := i.(Expression)
    o := &Optional{Expression:exp}
    if choice != nil {
        o.Choice = choice.(*Choice)
    }
    return o, nil   
} / eq:Equality _ Comma? _ {
    exp := eq.(Expression)
    return &Mandatory{Expression:exp}, nil
} / 'M'  _ Comma? _ {
    return &Mandatory{}, nil
} / 'O' choice:Choice?  _ Comma? _ {
    o := &Optional{}
    if choice != nil {
        o.Choice = choice.(*Choice)
    }
    return o, nil
} / 'P'  _ Comma? _ {
    return &Provisional{}, nil
} / 'D'  _ Comma? _ {
    return &Deprecated{}, nil
} / 'X'  _ Comma? _ {
    return &Disallowed{}, nil
} / "desc"  _ Comma? _ { 
     return &Described{}, nil

}

Equality <- _ left:Or right:EqualsOp* _ {
    //debug("matched equality %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    equalityOps := right.([]interface{}) 
    if len(equalityOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    var ee *EqualityExpression
    for _, equalityOp := range equalityOps {
        ee = equalityOp.(*EqualityExpression) 
        ee.Left = leftCE
        leftCE = ee
    }
    return ee, nil
}

EqualsOp <- _ equals:("=="/"!=") _ f:Or {
    //debug("matched Equals Op %s\n", string(c.text))
    fc := f.(Expression)
    return &EqualityExpression{
        Not: (string(equals.([]uint8)) == "!="),
        Right:fc,
    }, nil
}

Or <- _ left:Xor _ right:OrOp* _ {
    //debug("matched OR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    orOps := right.([]any)
    if len(orOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression("|", leftCE, orOps)
}

OrOp <- _ "|" _ f:Xor {
    //debug("matched OR op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}

Xor <- _ left:And _ right:XorOp* _ {
    //debug("matched XOR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    xorOps := right.([]any)
    if len(xorOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression("^", leftCE, xorOps)
}

XorOp <- _ "^" _ f:And {
   // debug("matched XOR op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}

And <- _ left:FeatureTerm _ right:AndOp* _ {
   // debug("matched AND %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    addOps := right.([]any)
    if len(addOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression("&", leftCE, addOps)
}

AndOp <- _ "&" _ f:FeatureTerm {
    //debug("matched AND op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}

FeatureTerm <- not:'!'? '(' _  eq:Equality _ ')' {
    //debug("matched feature term %s\n", string(c.text))
    if not != nil {
        switch eq := eq.(type) {
            case *EqualityExpression:
                eq.Not = true
            case *LogicalExpression:
                eq.Not = true
        }
    }
    return eq, nil
} / reference:ReferenceOp {
    return reference, nil 
} / identifier:IdentifierOp {
    return identifier, nil 
} / feature:FeatureOp {
    return feature, nil 
}


IdentifierOp <- not:'!'? identifier:Identifier {
    //debug("matched identifier op %s\n", string(c.text))
    id := identifier.(string)
    ic := &IdentifierExpression{ID:id}
    if not != nil {
        ic.Not = true
    }
    return ic, nil
}


Identifier <- PascalCase {
    //debug("matched identifier %s\n", string(c.text))
    return string(c.text), nil
}

ReferenceOp <- not:'!'? reference:Reference {
    //debug("matched reference op ref %s\n", reference)
    ic := &ReferenceExpression{Reference:reference.(string)}
    if not != nil {
        ic.Not = true
    }
    return ic, nil
}

Reference <- "<<" reference:ReferenceId ">>" {
    //debug("matched reference %s\n", reference.(string))
    return reference.(string), nil
}

ReferenceId <- "ref_" PascalCase {
    return string(c.text), nil
}

FeatureOp <- not:'!'? feature:Feature {
    id := feature.(string)
    switch id {
        case "O", "M", "P":
            return nil, fmt.Errorf("invalid optional conformance value: %s", id)
    }
    ic := &FeatureExpression{Feature:id}
    if not != nil {
        ic.Not = true
    }
    return ic, nil
}


Feature <- [A-Z][A-Z0-9_]+ {
    return string(c.text), nil
}


ChoiceRange <- lower:Integer '-' upper:Integer {
    minVal := lower.(int)
    if minVal <= 0 {
        return nil, fmt.Errorf("invalid minimum: %d", minVal)
    } 
    maxVal := upper.(int)
    if maxVal <= 0  && minVal > maxVal {
        return nil, fmt.Errorf("invalid maximum: %d", maxVal)
    } 
    return &ChoiceRangeLimit{Min:minVal, Max:maxVal}, nil
}

ChoiceMin <- limit:Integer? '+' {
    if limit == nil {
        return &ChoiceMinLimit{Min:1}, nil
    }
    minVal := limit.(int)
    if minVal <= 0 {
        return nil, fmt.Errorf("invalid minimum: %d", minVal)
    }    
    return &ChoiceMinLimit{Min:minVal}, nil
}

ChoiceMax <- limit:Integer? '-' {
     if limit == nil {
        return &ChoiceMaxLimit{Max:1}, nil
    }
    maxVal := limit.(int)
    if maxVal <= 0 {
        return nil, fmt.Errorf("invalid maximum: %d", maxVal)
    } 
    return &ChoiceMaxLimit{Max:maxVal}, nil
}

ChoiceExact <- limit:Integer {
    exact := limit.(int)
    if exact <= 0 {
        return nil, fmt.Errorf("invalid exact: %d", exact)
    } 
    return &ChoiceExactLimit{Limit:exact}, nil
}

ChoiceLimit <- limit:(ChoiceRange / ChoiceMin / ChoiceMax / ChoiceExact) {
    return limit.(ChoiceLimit), nil
}

Set <- [a-z]+ {
    return string(c.text), nil
}

Choice <- '.' set:Set limit:ChoiceLimit? {
    choice := &Choice{Set:set.(string)}
    if limit != nil {
        switch v := limit.(type) {
            case ChoiceLimit:
            choice.Limit = v
            default:
            return nil, fmt.Errorf("unexpected choice limit type: %T", limit)
        }
    }
    return choice, nil
}

Integer <- ([0-9]+) {
        return strconv.Atoi(string(c.text))
    }

PascalCase <- Capitalized+ Capitalized* {
        debug("matched pascal %s\n", string(c.text))

	return string(c.text), nil
}

Capitalized <- Uppercase+ Lowercase+ {
        debug("matched capitalized %s\n", string(c.text))

	return string(c.text), nil
}

Uppercase <- [A-Z] {
    debug("matched uppercase %s\n", string(c.text))
	return string(c.text), nil
}

Lowercase <- [a-z] {
    debug("matched lowercase %s\n", string(c.text))
	return string(c.text), nil
}

_ "whitespace" ← [ \t\r\n]*

Comma <- ',' 

EOF ← !.