// Code generated by pigeon; DO NOT EDIT.

package conformance

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/shopspring/decimal"
)

func debug(format string, a ...any) (n int, err error) {
	return
	//return fmt.Fprintf(os.Stdout, format, a...)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 19, col: 1, offset: 259},
			expr: &actionExpr{
				pos: position{line: 19, col: 10, offset: 268},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 19, col: 10, offset: 268},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 19, col: 10, offset: 268},
							label: "conf",
							expr: &oneOrMoreExpr{
								pos: position{line: 19, col: 15, offset: 273},
								expr: &ruleRefExpr{
									pos:    position{line: 19, col: 15, offset: 273},
									offset: 2,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 19, col: 28, offset: 286},
							offset: 54,
						},
					},
				},
			},
		},
		{
			name: "ConformanceSeparator",
			pos:  position{line: 30, col: 1, offset: 458},
			expr: &choiceExpr{
				pos: position{line: 30, col: 25, offset: 482},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 30, col: 26, offset: 483},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 30, col: 26, offset: 483},
								offset: 52,
							},
							&ruleRefExpr{
								pos:    position{line: 30, col: 28, offset: 485},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 30, col: 34, offset: 491},
								offset: 52,
							},
						},
					},
					&andExpr{
						pos: position{line: 30, col: 39, offset: 496},
						expr: &ruleRefExpr{
							pos:    position{line: 30, col: 40, offset: 497},
							offset: 54,
						},
					},
				},
			},
		},
		{
			name: "Conformance",
			pos:  position{line: 32, col: 1, offset: 502},
			expr: &choiceExpr{
				pos: position{line: 32, col: 17, offset: 518},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 32, col: 17, offset: 518},
						run: (*parser).callonConformance2,
						expr: &seqExpr{
							pos: position{line: 32, col: 17, offset: 518},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 32, col: 17, offset: 518},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 32, col: 21, offset: 522},
									label: "i",
									expr: &ruleRefExpr{
										pos:    position{line: 32, col: 23, offset: 524},
										offset: 3,
									},
								},
								&litMatcher{
									pos:        position{line: 32, col: 34, offset: 535},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&labeledExpr{
									pos:   position{line: 32, col: 38, offset: 539},
									label: "choice",
									expr: &zeroOrOneExpr{
										pos: position{line: 32, col: 45, offset: 546},
										expr: &ruleRefExpr{
											pos:    position{line: 32, col: 45, offset: 546},
											offset: 46,
										},
									},
								},
								&ruleRefExpr{
									pos:    position{line: 32, col: 53, offset: 554},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 6, offset: 729},
						run: (*parser).callonConformance12,
						expr: &seqExpr{
							pos: position{line: 39, col: 6, offset: 729},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 39, col: 6, offset: 729},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
								&ruleRefExpr{
									pos:    position{line: 39, col: 11, offset: 734},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 790},
						run: (*parser).callonConformance16,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 790},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 41, col: 5, offset: 790},
									val:        "O",
									ignoreCase: false,
									want:       "\"O\"",
								},
								&labeledExpr{
									pos:   position{line: 41, col: 9, offset: 794},
									label: "choice",
									expr: &zeroOrOneExpr{
										pos: position{line: 41, col: 16, offset: 801},
										expr: &ruleRefExpr{
											pos:    position{line: 41, col: 16, offset: 801},
											offset: 46,
										},
									},
								},
								&ruleRefExpr{
									pos:    position{line: 41, col: 25, offset: 810},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 941},
						run: (*parser).callonConformance23,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 941},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 47, col: 5, offset: 941},
									val:        "P",
									ignoreCase: false,
									want:       "\"P\"",
								},
								&ruleRefExpr{
									pos:    position{line: 47, col: 10, offset: 946},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1008},
						run: (*parser).callonConformance27,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1008},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1008},
									val:        "D",
									ignoreCase: false,
									want:       "\"D\"",
								},
								&ruleRefExpr{
									pos:    position{line: 49, col: 10, offset: 1013},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1070},
						run: (*parser).callonConformance31,
						expr: &seqExpr{
							pos: position{line: 51, col: 5, offset: 1070},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 51, col: 5, offset: 1070},
									val:        "X",
									ignoreCase: false,
									want:       "\"X\"",
								},
								&ruleRefExpr{
									pos:    position{line: 51, col: 10, offset: 1075},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1132},
						run: (*parser).callonConformance35,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1132},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 53, col: 5, offset: 1132},
									val:        "desc",
									ignoreCase: false,
									want:       "\"desc\"",
								},
								&ruleRefExpr{
									pos:    position{line: 53, col: 13, offset: 1140},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1198},
						run: (*parser).callonConformance39,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1198},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 55, col: 5, offset: 1198},
									label: "eq",
									expr: &ruleRefExpr{
										pos:    position{line: 55, col: 8, offset: 1201},
										offset: 3,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 55, col: 19, offset: 1212},
									offset: 1,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 60, col: 1, offset: 1308},
			expr: &choiceExpr{
				pos: position{line: 60, col: 15, offset: 1322},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 60, col: 15, offset: 1322},
						offset: 28,
					},
					&ruleRefExpr{
						pos:    position{line: 60, col: 38, offset: 1345},
						offset: 13,
					},
				},
			},
		},
		{
			name: "EquationTerm",
			pos:  position{line: 68, col: 1, offset: 1371},
			expr: &choiceExpr{
				pos: position{line: 68, col: 17, offset: 1387},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 68, col: 17, offset: 1387},
						offset: 38,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 32, offset: 1402},
						offset: 33,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 49, offset: 1419},
						offset: 30,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 67, offset: 1437},
						offset: 21,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 81, offset: 1451},
						offset: 26,
					},
					&actionExpr{
						pos: position{line: 68, col: 93, offset: 1463},
						run: (*parser).callonEquationTerm7,
						expr: &seqExpr{
							pos: position{line: 68, col: 93, offset: 1463},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 68, col: 93, offset: 1463},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:    position{line: 68, col: 97, offset: 1467},
									offset: 52,
								},
								&labeledExpr{
									pos:   position{line: 68, col: 99, offset: 1469},
									label: "eq",
									expr: &ruleRefExpr{
										pos:    position{line: 68, col: 102, offset: 1472},
										offset: 5,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 68, col: 116, offset: 1486},
									offset: 52,
								},
								&litMatcher{
									pos:        position{line: 68, col: 118, offset: 1488},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EquationValue",
			pos:  position{line: 70, col: 1, offset: 1512},
			expr: &actionExpr{
				pos: position{line: 70, col: 18, offset: 1529},
				run: (*parser).callonEquationValue1,
				expr: &seqExpr{
					pos: position{line: 70, col: 18, offset: 1529},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 70, col: 18, offset: 1529},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 70, col: 20, offset: 1531},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 70, col: 25, offset: 1536},
								offset: 6,
							},
						},
						&labeledExpr{
							pos:   position{line: 70, col: 43, offset: 1554},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 70, col: 48, offset: 1559},
								expr: &ruleRefExpr{
									pos:    position{line: 70, col: 50, offset: 1561},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 70, col: 59, offset: 1570},
							offset: 52,
						},
					},
				},
			},
		},
		{
			name: "EquationMultiply",
			pos:  position{line: 88, col: 1, offset: 1920},
			expr: &actionExpr{
				pos: position{line: 88, col: 21, offset: 1940},
				run: (*parser).callonEquationMultiply1,
				expr: &seqExpr{
					pos: position{line: 88, col: 21, offset: 1940},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 88, col: 21, offset: 1940},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 88, col: 23, offset: 1942},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 88, col: 28, offset: 1947},
								offset: 4,
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 42, offset: 1961},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 88, col: 47, offset: 1966},
								expr: &ruleRefExpr{
									pos:    position{line: 88, col: 49, offset: 1968},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 88, col: 59, offset: 1978},
							offset: 52,
						},
					},
				},
			},
		},
		{
			name: "Add",
			pos:  position{line: 106, col: 1, offset: 2328},
			expr: &actionExpr{
				pos: position{line: 106, col: 8, offset: 2335},
				run: (*parser).callonAdd1,
				expr: &litMatcher{
					pos:        position{line: 106, col: 8, offset: 2335},
					val:        "+",
					ignoreCase: false,
					want:       "\"+\"",
				},
			},
		},
		{
			name: "Subtract",
			pos:  position{line: 108, col: 1, offset: 2370},
			expr: &actionExpr{
				pos: position{line: 108, col: 13, offset: 2382},
				run: (*parser).callonSubtract1,
				expr: &litMatcher{
					pos:        position{line: 108, col: 13, offset: 2382},
					val:        "-",
					ignoreCase: false,
					want:       "\"-\"",
				},
			},
		},
		{
			name: "Multiply",
			pos:  position{line: 110, col: 1, offset: 2422},
			expr: &actionExpr{
				pos: position{line: 110, col: 13, offset: 2434},
				run: (*parser).callonMultiply1,
				expr: &litMatcher{
					pos:        position{line: 110, col: 13, offset: 2434},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "Divide",
			pos:  position{line: 112, col: 1, offset: 2474},
			expr: &actionExpr{
				pos: position{line: 112, col: 11, offset: 2484},
				run: (*parser).callonDivide1,
				expr: &litMatcher{
					pos:        position{line: 112, col: 11, offset: 2484},
					val:        "/",
					ignoreCase: false,
					want:       "\"/\"",
				},
			},
		},
		{
			name: "AddOp",
			pos:  position{line: 114, col: 1, offset: 2522},
			expr: &actionExpr{
				pos: position{line: 114, col: 10, offset: 2531},
				run: (*parser).callonAddOp1,
				expr: &seqExpr{
					pos: position{line: 114, col: 10, offset: 2531},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 114, col: 10, offset: 2531},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 12, offset: 2533},
							label: "operand",
							expr: &choiceExpr{
								pos: position{line: 114, col: 21, offset: 2542},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 114, col: 21, offset: 2542},
										offset: 7,
									},
									&ruleRefExpr{
										pos:    position{line: 114, col: 25, offset: 2546},
										offset: 8,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 114, col: 35, offset: 2556},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 37, offset: 2558},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 114, col: 43, offset: 2564},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "MultOp",
			pos:  position{line: 121, col: 1, offset: 2702},
			expr: &actionExpr{
				pos: position{line: 121, col: 11, offset: 2712},
				run: (*parser).callonMultOp1,
				expr: &seqExpr{
					pos: position{line: 121, col: 11, offset: 2712},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 121, col: 11, offset: 2712},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 121, col: 13, offset: 2714},
							label: "operand",
							expr: &choiceExpr{
								pos: position{line: 121, col: 22, offset: 2723},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 121, col: 22, offset: 2723},
										offset: 9,
									},
									&ruleRefExpr{
										pos:    position{line: 121, col: 31, offset: 2732},
										offset: 10,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 121, col: 39, offset: 2740},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 121, col: 41, offset: 2742},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 121, col: 47, offset: 2748},
								offset: 4,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalExpression",
			pos:  position{line: 130, col: 1, offset: 2889},
			expr: &ruleRefExpr{
				pos:    position{line: 130, col: 21, offset: 2909},
				offset: 14,
			},
		},
		{
			name: "Or",
			pos:  position{line: 132, col: 1, offset: 2913},
			expr: &actionExpr{
				pos: position{line: 132, col: 7, offset: 2919},
				run: (*parser).callonOr1,
				expr: &seqExpr{
					pos: position{line: 132, col: 7, offset: 2919},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 132, col: 7, offset: 2919},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 132, col: 9, offset: 2921},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 132, col: 14, offset: 2926},
								offset: 16,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 132, col: 18, offset: 2930},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 132, col: 20, offset: 2932},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 132, col: 26, offset: 2938},
								expr: &ruleRefExpr{
									pos:    position{line: 132, col: 26, offset: 2938},
									offset: 15,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 132, col: 32, offset: 2944},
							offset: 52,
						},
					},
				},
			},
		},
		{
			name: "OrOp",
			pos:  position{line: 144, col: 1, offset: 3175},
			expr: &actionExpr{
				pos: position{line: 144, col: 9, offset: 3183},
				run: (*parser).callonOrOp1,
				expr: &seqExpr{
					pos: position{line: 144, col: 9, offset: 3183},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 144, col: 9, offset: 3183},
							offset: 52,
						},
						&litMatcher{
							pos:        position{line: 144, col: 11, offset: 3185},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&ruleRefExpr{
							pos:    position{line: 144, col: 15, offset: 3189},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 144, col: 17, offset: 3191},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 144, col: 19, offset: 3193},
								offset: 16,
							},
						},
					},
				},
			},
		},
		{
			name: "Xor",
			pos:  position{line: 149, col: 1, offset: 3250},
			expr: &actionExpr{
				pos: position{line: 149, col: 8, offset: 3257},
				run: (*parser).callonXor1,
				expr: &seqExpr{
					pos: position{line: 149, col: 8, offset: 3257},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 149, col: 8, offset: 3257},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 149, col: 10, offset: 3259},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 149, col: 15, offset: 3264},
								offset: 18,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 19, offset: 3268},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 149, col: 21, offset: 3270},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 149, col: 27, offset: 3276},
								expr: &ruleRefExpr{
									pos:    position{line: 149, col: 27, offset: 3276},
									offset: 17,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 34, offset: 3283},
							offset: 52,
						},
					},
				},
			},
		},
		{
			name: "XorOp",
			pos:  position{line: 161, col: 1, offset: 3517},
			expr: &actionExpr{
				pos: position{line: 161, col: 10, offset: 3526},
				run: (*parser).callonXorOp1,
				expr: &seqExpr{
					pos: position{line: 161, col: 10, offset: 3526},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 161, col: 10, offset: 3526},
							offset: 52,
						},
						&litMatcher{
							pos:        position{line: 161, col: 12, offset: 3528},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 161, col: 16, offset: 3532},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 161, col: 18, offset: 3534},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 161, col: 20, offset: 3536},
								offset: 18,
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 166, col: 1, offset: 3592},
			expr: &actionExpr{
				pos: position{line: 166, col: 8, offset: 3599},
				run: (*parser).callonAnd1,
				expr: &seqExpr{
					pos: position{line: 166, col: 8, offset: 3599},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 166, col: 8, offset: 3599},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 166, col: 10, offset: 3601},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 166, col: 15, offset: 3606},
								offset: 20,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 166, col: 27, offset: 3618},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 166, col: 29, offset: 3620},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 166, col: 35, offset: 3626},
								expr: &ruleRefExpr{
									pos:    position{line: 166, col: 35, offset: 3626},
									offset: 19,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 166, col: 42, offset: 3633},
							offset: 52,
						},
					},
				},
			},
		},
		{
			name: "AndOp",
			pos:  position{line: 178, col: 1, offset: 3866},
			expr: &actionExpr{
				pos: position{line: 178, col: 10, offset: 3875},
				run: (*parser).callonAndOp1,
				expr: &seqExpr{
					pos: position{line: 178, col: 10, offset: 3875},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 178, col: 10, offset: 3875},
							offset: 52,
						},
						&litMatcher{
							pos:        position{line: 178, col: 12, offset: 3877},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&ruleRefExpr{
							pos:    position{line: 178, col: 16, offset: 3881},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 178, col: 18, offset: 3883},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 178, col: 20, offset: 3885},
								offset: 20,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalTerm",
			pos:  position{line: 183, col: 1, offset: 3950},
			expr: &choiceExpr{
				pos: position{line: 183, col: 16, offset: 3965},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 183, col: 16, offset: 3965},
						run: (*parser).callonLogicalTerm2,
						expr: &seqExpr{
							pos: position{line: 183, col: 16, offset: 3965},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 183, col: 16, offset: 3965},
									label: "not",
									expr: &zeroOrOneExpr{
										pos: position{line: 183, col: 20, offset: 3969},
										expr: &litMatcher{
											pos:        position{line: 183, col: 20, offset: 3969},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 183, col: 25, offset: 3974},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:    position{line: 183, col: 29, offset: 3978},
									offset: 52,
								},
								&labeledExpr{
									pos:   position{line: 183, col: 32, offset: 3981},
									label: "eq",
									expr: &ruleRefExpr{
										pos:    position{line: 183, col: 35, offset: 3984},
										offset: 3,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 183, col: 46, offset: 3995},
									offset: 52,
								},
								&litMatcher{
									pos:        position{line: 183, col: 48, offset: 3997},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 4234},
						run: (*parser).callonLogicalTerm13,
						expr: &labeledExpr{
							pos:   position{line: 193, col: 5, offset: 4234},
							label: "feature",
							expr: &ruleRefExpr{
								pos:    position{line: 193, col: 13, offset: 4242},
								offset: 37,
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 4283},
						run: (*parser).callonLogicalTerm16,
						expr: &labeledExpr{
							pos:   position{line: 195, col: 5, offset: 4283},
							label: "reference",
							expr: &ruleRefExpr{
								pos:    position{line: 195, col: 15, offset: 4293},
								offset: 32,
							},
						},
					},
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 4338},
						run: (*parser).callonLogicalTerm19,
						expr: &labeledExpr{
							pos:   position{line: 197, col: 5, offset: 4338},
							label: "identifier",
							expr: &ruleRefExpr{
								pos:    position{line: 197, col: 16, offset: 4349},
								offset: 29,
							},
						},
					},
				},
			},
		},
		{
			name: "NumberValue",
			pos:  position{line: 203, col: 1, offset: 4398},
			expr: &choiceExpr{
				pos: position{line: 203, col: 17, offset: 4414},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 203, col: 17, offset: 4414},
						run: (*parser).callonNumberValue2,
						expr: &labeledExpr{
							pos:   position{line: 203, col: 17, offset: 4414},
							label: "val",
							expr: &ruleRefExpr{
								pos:    position{line: 203, col: 22, offset: 4419},
								offset: 24,
							},
						},
					},
					&actionExpr{
						pos: position{line: 206, col: 7, offset: 4499},
						run: (*parser).callonNumberValue5,
						expr: &labeledExpr{
							pos:   position{line: 206, col: 7, offset: 4499},
							label: "val",
							expr: &ruleRefExpr{
								pos:    position{line: 206, col: 11, offset: 4503},
								offset: 22,
							},
						},
					},
					&actionExpr{
						pos: position{line: 209, col: 7, offset: 4596},
						run: (*parser).callonNumberValue8,
						expr: &labeledExpr{
							pos:   position{line: 209, col: 7, offset: 4596},
							label: "val",
							expr: &ruleRefExpr{
								pos:    position{line: 209, col: 11, offset: 4600},
								offset: 23,
							},
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 214, col: 1, offset: 4680},
			expr: &actionExpr{
				pos: position{line: 214, col: 10, offset: 4689},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 214, col: 10, offset: 4689},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 214, col: 10, offset: 4689},
							offset: 23,
						},
						&seqExpr{
							pos: position{line: 214, col: 19, offset: 4698},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 214, col: 19, offset: 4698},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 214, col: 23, offset: 4702},
									expr: &charClassMatcher{
										pos:        position{line: 214, col: 23, offset: 4702},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 218, col: 1, offset: 4761},
			expr: &actionExpr{
				pos: position{line: 218, col: 12, offset: 4772},
				run: (*parser).callonInteger1,
				expr: &seqExpr{
					pos: position{line: 218, col: 12, offset: 4772},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 218, col: 12, offset: 4772},
							label: "sign",
							expr: &zeroOrOneExpr{
								pos: position{line: 218, col: 17, offset: 4777},
								expr: &choiceExpr{
									pos: position{line: 218, col: 18, offset: 4778},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 218, col: 18, offset: 4778},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 218, col: 22, offset: 4782},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 28, offset: 4788},
							label: "digits",
							expr: &ruleRefExpr{
								pos:    position{line: 218, col: 35, offset: 4795},
								offset: 25,
							},
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 222, col: 1, offset: 4857},
			expr: &actionExpr{
				pos: position{line: 222, col: 8, offset: 4864},
				run: (*parser).callonHex1,
				expr: &seqExpr{
					pos: position{line: 222, col: 8, offset: 4864},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 222, col: 8, offset: 4864},
							val:        "0x",
							ignoreCase: true,
							want:       "\"0x\"i",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 14, offset: 4870},
							label: "hex",
							expr: &oneOrMoreExpr{
								pos: position{line: 222, col: 18, offset: 4874},
								expr: &charClassMatcher{
									pos:        position{line: 222, col: 18, offset: 4874},
									val:        "[0-9A-Fa-f]",
									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Digits",
			pos:  position{line: 230, col: 1, offset: 5036},
			expr: &actionExpr{
				pos: position{line: 230, col: 11, offset: 5046},
				run: (*parser).callonDigits1,
				expr: &oneOrMoreExpr{
					pos: position{line: 230, col: 11, offset: 5046},
					expr: &charClassMatcher{
						pos:        position{line: 230, col: 11, offset: 5046},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "NullValue",
			pos:  position{line: 234, col: 1, offset: 5107},
			expr: &actionExpr{
				pos: position{line: 234, col: 14, offset: 5120},
				run: (*parser).callonNullValue1,
				expr: &litMatcher{
					pos:        position{line: 234, col: 14, offset: 5120},
					val:        "null",
					ignoreCase: false,
					want:       "\"null\"",
				},
			},
		},
		{
			name: "ComparisonOperator",
			pos:  position{line: 240, col: 1, offset: 5176},
			expr: &choiceExpr{
				pos: position{line: 241, col: 6, offset: 5203},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 241, col: 7, offset: 5204},
						run: (*parser).callonComparisonOperator2,
						expr: &litMatcher{
							pos:        position{line: 241, col: 7, offset: 5204},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 242, col: 8, offset: 5258},
						run: (*parser).callonComparisonOperator4,
						expr: &litMatcher{
							pos:        position{line: 242, col: 8, offset: 5258},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 243, col: 8, offset: 5314},
						run: (*parser).callonComparisonOperator6,
						expr: &litMatcher{
							pos:        position{line: 243, col: 8, offset: 5314},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 244, col: 8, offset: 5370},
						run: (*parser).callonComparisonOperator8,
						expr: &litMatcher{
							pos:        position{line: 244, col: 8, offset: 5370},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 245, col: 8, offset: 5433},
						run: (*parser).callonComparisonOperator10,
						expr: &litMatcher{
							pos:        position{line: 245, col: 8, offset: 5433},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 8, offset: 5492},
						run: (*parser).callonComparisonOperator12,
						expr: &litMatcher{
							pos:        position{line: 246, col: 8, offset: 5492},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpression",
			pos:  position{line: 248, col: 1, offset: 5552},
			expr: &actionExpr{
				pos: position{line: 248, col: 25, offset: 5576},
				run: (*parser).callonComparisonExpression1,
				expr: &seqExpr{
					pos: position{line: 248, col: 25, offset: 5576},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 248, col: 25, offset: 5576},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 27, offset: 5578},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 248, col: 32, offset: 5583},
								offset: 5,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 248, col: 46, offset: 5597},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 48, offset: 5599},
							label: "op",
							expr: &ruleRefExpr{
								pos:    position{line: 248, col: 51, offset: 5602},
								offset: 27,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 248, col: 70, offset: 5621},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 72, offset: 5623},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 248, col: 78, offset: 5629},
								offset: 5,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 248, col: 92, offset: 5643},
							offset: 52,
						},
					},
				},
			},
		},
		{
			name: "IdentifierOp",
			pos:  position{line: 259, col: 1, offset: 5833},
			expr: &actionExpr{
				pos: position{line: 259, col: 17, offset: 5849},
				run: (*parser).callonIdentifierOp1,
				expr: &seqExpr{
					pos: position{line: 259, col: 17, offset: 5849},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 259, col: 17, offset: 5849},
							label: "not",
							expr: &zeroOrOneExpr{
								pos: position{line: 259, col: 21, offset: 5853},
								expr: &litMatcher{
									pos:        position{line: 259, col: 21, offset: 5853},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 259, col: 26, offset: 5858},
							label: "identifier",
							expr: &ruleRefExpr{
								pos:    position{line: 259, col: 37, offset: 5869},
								offset: 31,
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierValue",
			pos:  position{line: 268, col: 1, offset: 6025},
			expr: &actionExpr{
				pos: position{line: 268, col: 20, offset: 6044},
				run: (*parser).callonIdentifierValue1,
				expr: &labeledExpr{
					pos:   position{line: 268, col: 20, offset: 6044},
					label: "identifier",
					expr: &ruleRefExpr{
						pos:    position{line: 268, col: 31, offset: 6055},
						offset: 31,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 273, col: 1, offset: 6142},
			expr: &actionExpr{
				pos: position{line: 273, col: 15, offset: 6156},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 273, col: 15, offset: 6156},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 273, col: 15, offset: 6156},
							offset: 47,
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 26, offset: 6167},
							expr: &seqExpr{
								pos: position{line: 273, col: 27, offset: 6168},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 273, col: 27, offset: 6168},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&ruleRefExpr{
										pos:    position{line: 273, col: 31, offset: 6172},
										offset: 47,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceOp",
			pos:  position{line: 277, col: 1, offset: 6225},
			expr: &actionExpr{
				pos: position{line: 277, col: 16, offset: 6240},
				run: (*parser).callonReferenceOp1,
				expr: &seqExpr{
					pos: position{line: 277, col: 16, offset: 6240},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 277, col: 16, offset: 6240},
							label: "not",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 20, offset: 6244},
								expr: &litMatcher{
									pos:        position{line: 277, col: 20, offset: 6244},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 25, offset: 6249},
							val:        "<<",
							ignoreCase: false,
							want:       "\"<<\"",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 30, offset: 6254},
							label: "reference",
							expr: &ruleRefExpr{
								pos:    position{line: 277, col: 40, offset: 6264},
								offset: 36,
							},
						},
						&labeledExpr{
							pos:   position{line: 277, col: 52, offset: 6276},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 58, offset: 6282},
								expr: &ruleRefExpr{
									pos:    position{line: 277, col: 59, offset: 6283},
									offset: 34,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 77, offset: 6301},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "ReferenceValue",
			pos:  position{line: 288, col: 1, offset: 6513},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 6531},
				run: (*parser).callonReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 288, col: 19, offset: 6531},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 288, col: 19, offset: 6531},
							val:        "<<",
							ignoreCase: false,
							want:       "\"<<\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 24, offset: 6536},
							label: "reference",
							expr: &ruleRefExpr{
								pos:    position{line: 288, col: 34, offset: 6546},
								offset: 36,
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 46, offset: 6558},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 52, offset: 6564},
								expr: &ruleRefExpr{
									pos:    position{line: 288, col: 53, offset: 6565},
									offset: 34,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 288, col: 71, offset: 6583},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "ReferenceLabel",
			pos:  position{line: 296, col: 1, offset: 6742},
			expr: &actionExpr{
				pos: position{line: 296, col: 19, offset: 6760},
				run: (*parser).callonReferenceLabel1,
				expr: &seqExpr{
					pos: position{line: 296, col: 19, offset: 6760},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 296, col: 19, offset: 6760},
							offset: 52,
						},
						&ruleRefExpr{
							pos:    position{line: 296, col: 21, offset: 6762},
							offset: 53,
						},
						&ruleRefExpr{
							pos:    position{line: 296, col: 27, offset: 6768},
							offset: 52,
						},
						&labeledExpr{
							pos:   position{line: 296, col: 29, offset: 6770},
							label: "label",
							expr: &ruleRefExpr{
								pos:    position{line: 296, col: 35, offset: 6776},
								offset: 35,
							},
						},
						&andExpr{
							pos: position{line: 296, col: 50, offset: 6791},
							expr: &litMatcher{
								pos:        position{line: 296, col: 51, offset: 6792},
								val:        ">>",
								ignoreCase: false,
								want:       "\">>\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceText",
			pos:  position{line: 300, col: 1, offset: 6837},
			expr: &actionExpr{
				pos: position{line: 300, col: 18, offset: 6854},
				run: (*parser).callonReferenceText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 300, col: 18, offset: 6854},
					expr: &seqExpr{
						pos: position{line: 300, col: 19, offset: 6855},
						exprs: []any{
							&notExpr{
								pos: position{line: 300, col: 19, offset: 6855},
								expr: &litMatcher{
									pos:        position{line: 300, col: 20, offset: 6856},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
							&anyMatcher{
								line: 300, col: 25, offset: 6861,
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceId",
			pos:  position{line: 304, col: 1, offset: 6906},
			expr: &actionExpr{
				pos: position{line: 304, col: 16, offset: 6921},
				run: (*parser).callonReferenceId1,
				expr: &seqExpr{
					pos: position{line: 304, col: 16, offset: 6921},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 304, col: 16, offset: 6921},
							val:        "ref_",
							ignoreCase: false,
							want:       "\"ref_\"",
						},
						&ruleRefExpr{
							pos:    position{line: 304, col: 23, offset: 6928},
							offset: 47,
						},
					},
				},
			},
		},
		{
			name: "FeatureOp",
			pos:  position{line: 308, col: 1, offset: 6979},
			expr: &actionExpr{
				pos: position{line: 308, col: 14, offset: 6992},
				run: (*parser).callonFeatureOp1,
				expr: &seqExpr{
					pos: position{line: 308, col: 14, offset: 6992},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 308, col: 14, offset: 6992},
							label: "not",
							expr: &zeroOrOneExpr{
								pos: position{line: 308, col: 18, offset: 6996},
								expr: &litMatcher{
									pos:        position{line: 308, col: 18, offset: 6996},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 308, col: 23, offset: 7001},
							label: "feature",
							expr: &ruleRefExpr{
								pos:    position{line: 308, col: 31, offset: 7009},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "FeatureValue",
			pos:  position{line: 321, col: 1, offset: 7288},
			expr: &actionExpr{
				pos: position{line: 321, col: 17, offset: 7304},
				run: (*parser).callonFeatureValue1,
				expr: &labeledExpr{
					pos:   position{line: 321, col: 17, offset: 7304},
					label: "feature",
					expr: &ruleRefExpr{
						pos:    position{line: 321, col: 25, offset: 7312},
						offset: 39,
					},
				},
			},
		},
		{
			name: "Feature",
			pos:  position{line: 332, col: 1, offset: 7539},
			expr: &actionExpr{
				pos: position{line: 332, col: 12, offset: 7550},
				run: (*parser).callonFeature1,
				expr: &seqExpr{
					pos: position{line: 332, col: 12, offset: 7550},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 332, col: 12, offset: 7550},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&oneOrMoreExpr{
							pos: position{line: 332, col: 17, offset: 7555},
							expr: &charClassMatcher{
								pos:        position{line: 332, col: 17, offset: 7555},
								val:        "[A-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 332, col: 28, offset: 7566},
							expr: &choiceExpr{
								pos: position{line: 332, col: 30, offset: 7568},
								alternatives: []any{
									&notExpr{
										pos: position{line: 332, col: 30, offset: 7568},
										expr: &charClassMatcher{
											pos:        position{line: 332, col: 31, offset: 7569},
											val:        "[A-Za-z0-9_]",
											chars:      []rune{'_'},
											ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 332, col: 46, offset: 7584},
										offset: 54,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ChoiceRange",
			pos:  position{line: 340, col: 1, offset: 7629},
			expr: &actionExpr{
				pos: position{line: 340, col: 16, offset: 7644},
				run: (*parser).callonChoiceRange1,
				expr: &seqExpr{
					pos: position{line: 340, col: 16, offset: 7644},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 340, col: 16, offset: 7644},
							label: "lower",
							expr: &ruleRefExpr{
								pos:    position{line: 340, col: 22, offset: 7650},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 340, col: 30, offset: 7658},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&labeledExpr{
							pos:   position{line: 340, col: 34, offset: 7662},
							label: "upper",
							expr: &ruleRefExpr{
								pos:    position{line: 340, col: 40, offset: 7668},
								offset: 23,
							},
						},
					},
				},
			},
		},
		{
			name: "ChoiceMin",
			pos:  position{line: 352, col: 1, offset: 7991},
			expr: &actionExpr{
				pos: position{line: 352, col: 14, offset: 8004},
				run: (*parser).callonChoiceMin1,
				expr: &seqExpr{
					pos: position{line: 352, col: 14, offset: 8004},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 352, col: 14, offset: 8004},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 352, col: 20, offset: 8010},
								expr: &ruleRefExpr{
									pos:    position{line: 352, col: 20, offset: 8010},
									offset: 23,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 352, col: 29, offset: 8019},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "ChoiceMax",
			pos:  position{line: 363, col: 1, offset: 8262},
			expr: &actionExpr{
				pos: position{line: 363, col: 14, offset: 8275},
				run: (*parser).callonChoiceMax1,
				expr: &seqExpr{
					pos: position{line: 363, col: 14, offset: 8275},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 363, col: 14, offset: 8275},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 363, col: 20, offset: 8281},
								expr: &ruleRefExpr{
									pos:    position{line: 363, col: 20, offset: 8281},
									offset: 23,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 29, offset: 8290},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
				},
			},
		},
		{
			name: "ChoiceExact",
			pos:  position{line: 374, col: 1, offset: 8531},
			expr: &actionExpr{
				pos: position{line: 374, col: 16, offset: 8546},
				run: (*parser).callonChoiceExact1,
				expr: &labeledExpr{
					pos:   position{line: 374, col: 16, offset: 8546},
					label: "limit",
					expr: &ruleRefExpr{
						pos:    position{line: 374, col: 22, offset: 8552},
						offset: 23,
					},
				},
			},
		},
		{
			name: "ChoiceLimit",
			pos:  position{line: 382, col: 1, offset: 8723},
			expr: &actionExpr{
				pos: position{line: 382, col: 16, offset: 8738},
				run: (*parser).callonChoiceLimit1,
				expr: &labeledExpr{
					pos:   position{line: 382, col: 16, offset: 8738},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 382, col: 23, offset: 8745},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 382, col: 23, offset: 8745},
								offset: 40,
							},
							&ruleRefExpr{
								pos:    position{line: 382, col: 37, offset: 8759},
								offset: 41,
							},
							&ruleRefExpr{
								pos:    position{line: 382, col: 49, offset: 8771},
								offset: 42,
							},
							&ruleRefExpr{
								pos:    position{line: 382, col: 61, offset: 8783},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 386, col: 1, offset: 8837},
			expr: &actionExpr{
				pos: position{line: 386, col: 8, offset: 8844},
				run: (*parser).callonSet1,
				expr: &oneOrMoreExpr{
					pos: position{line: 386, col: 8, offset: 8844},
					expr: &charClassMatcher{
						pos:        position{line: 386, col: 8, offset: 8844},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Choice",
			pos:  position{line: 390, col: 1, offset: 8887},
			expr: &actionExpr{
				pos: position{line: 390, col: 11, offset: 8897},
				run: (*parser).callonChoice1,
				expr: &seqExpr{
					pos: position{line: 390, col: 11, offset: 8897},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 390, col: 11, offset: 8897},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 15, offset: 8901},
							label: "set",
							expr: &ruleRefExpr{
								pos:    position{line: 390, col: 19, offset: 8905},
								offset: 45,
							},
						},
						&labeledExpr{
							pos:   position{line: 390, col: 23, offset: 8909},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 390, col: 29, offset: 8915},
								expr: &ruleRefExpr{
									pos:    position{line: 390, col: 29, offset: 8915},
									offset: 44,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PascalCase",
			pos:  position{line: 406, col: 1, offset: 9230},
			expr: &actionExpr{
				pos: position{line: 406, col: 15, offset: 9244},
				run: (*parser).callonPascalCase1,
				expr: &seqExpr{
					pos: position{line: 406, col: 15, offset: 9244},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 406, col: 15, offset: 9244},
							expr: &ruleRefExpr{
								pos:    position{line: 406, col: 15, offset: 9244},
								offset: 48,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 406, col: 28, offset: 9257},
							expr: &ruleRefExpr{
								pos:    position{line: 406, col: 28, offset: 9257},
								offset: 48,
							},
						},
					},
				},
			},
		},
		{
			name: "Capitalized",
			pos:  position{line: 411, col: 1, offset: 9308},
			expr: &actionExpr{
				pos: position{line: 411, col: 16, offset: 9323},
				run: (*parser).callonCapitalized1,
				expr: &seqExpr{
					pos: position{line: 411, col: 16, offset: 9323},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 411, col: 16, offset: 9323},
							expr: &ruleRefExpr{
								pos:    position{line: 411, col: 16, offset: 9323},
								offset: 49,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 411, col: 27, offset: 9334},
							expr: &ruleRefExpr{
								pos:    position{line: 411, col: 27, offset: 9334},
								offset: 50,
							},
						},
					},
				},
			},
		},
		{
			name: "Uppercase",
			pos:  position{line: 415, col: 1, offset: 9382},
			expr: &actionExpr{
				pos: position{line: 415, col: 14, offset: 9395},
				run: (*parser).callonUppercase1,
				expr: &charClassMatcher{
					pos:        position{line: 415, col: 14, offset: 9395},
					val:        "[A-Z]",
					ranges:     []rune{'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Lowercase",
			pos:  position{line: 419, col: 1, offset: 9438},
			expr: &actionExpr{
				pos: position{line: 419, col: 14, offset: 9451},
				run: (*parser).callonLowercase1,
				expr: &charClassMatcher{
					pos:        position{line: 419, col: 14, offset: 9451},
					val:        "[a-z]",
					ranges:     []rune{'a', 'z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "SameLineString",
			pos:  position{line: 423, col: 1, offset: 9494},
			expr: &actionExpr{
				pos: position{line: 423, col: 19, offset: 9512},
				run: (*parser).callonSameLineString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 423, col: 19, offset: 9512},
					expr: &charClassMatcher{
						pos:        position{line: 423, col: 19, offset: 9512},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 427, col: 1, offset: 9561},
			expr: &zeroOrMoreExpr{
				pos: position{line: 427, col: 19, offset: 9579},
				expr: &charClassMatcher{
					pos:        position{line: 427, col: 19, offset: 9579},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Comma",
			pos:  position{line: 429, col: 1, offset: 9591},
			expr: &litMatcher{
				pos:        position{line: 429, col: 10, offset: 9600},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
		},
		{
			name: "EOF",
			pos:  position{line: 431, col: 1, offset: 9606},
			expr: &notExpr{
				pos: position{line: 431, col: 8, offset: 9613},
				expr: &anyMatcher{
					line: 431, col: 9, offset: 9614,
				},
			},
		},
	},
}

func (c *current) onInput1(conf any) (any, error) {
	cs := conf.([]interface{})

	var set Set
	for _, i := range cs {
		con := i.(Conformance)
		set = append(set, con)
	}
	return set, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["conf"])
}

func (c *current) onConformance2(i, choice any) (any, error) {
	exp := i.(Expression)
	o := &Optional{Expression: exp}
	if choice != nil {
		o.Choice = choice.(*Choice)
	}
	return o, nil
}

func (p *parser) callonConformance2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance2(stack["i"], stack["choice"])
}

func (c *current) onConformance12() (any, error) {
	return &Mandatory{}, nil
}

func (p *parser) callonConformance12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance12()
}

func (c *current) onConformance16(choice any) (any, error) {
	o := &Optional{}
	if choice != nil {
		o.Choice = choice.(*Choice)
	}
	return o, nil
}

func (p *parser) callonConformance16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance16(stack["choice"])
}

func (c *current) onConformance23() (any, error) {
	return &Provisional{}, nil
}

func (p *parser) callonConformance23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance23()
}

func (c *current) onConformance27() (any, error) {
	return &Deprecated{}, nil
}

func (p *parser) callonConformance27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance27()
}

func (c *current) onConformance31() (any, error) {
	return &Disallowed{}, nil
}

func (p *parser) callonConformance31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance31()
}

func (c *current) onConformance35() (any, error) {

	return &Described{}, nil
}

func (p *parser) callonConformance35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance35()
}

func (c *current) onConformance39(eq any) (any, error) {
	exp := eq.(Expression)
	return &Mandatory{Expression: exp}, nil
}

func (p *parser) callonConformance39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance39(stack["eq"])
}

func (c *current) onEquationTerm7(eq any) (any, error) {
	return eq, nil
}

func (p *parser) callonEquationTerm7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquationTerm7(stack["eq"])
}

func (c *current) onEquationValue1(left, rest any) (any, error) {
	if rest == nil {
		return left, nil
	}
	multOps := rest.([]interface{})
	if len(multOps) == 0 {
		return left, nil
	}
	cv := left.(ComparisonValue)
	var mo *MathOperation
	for _, multOp := range multOps {
		mo = multOp.(*MathOperation)
		mo.Left = cv
		cv = mo
	}
	return cv, nil
}

func (p *parser) callonEquationValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquationValue1(stack["left"], stack["rest"])
}

func (c *current) onEquationMultiply1(left, rest any) (any, error) {
	if rest == nil {
		return left, nil
	}
	multOps := rest.([]interface{})
	if len(multOps) == 0 {
		return left, nil
	}
	cv := left.(ComparisonValue)
	var mo *MathOperation
	for _, multOp := range multOps {
		mo = multOp.(*MathOperation)
		mo.Left = cv
		cv = mo
	}
	return cv, nil
}

func (p *parser) callonEquationMultiply1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquationMultiply1(stack["left"], stack["rest"])
}

func (c *current) onAdd1() (any, error) {
	return MathOperandAdd, nil
}

func (p *parser) callonAdd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdd1()
}

func (c *current) onSubtract1() (any, error) {
	return MathOperandSubtract, nil
}

func (p *parser) callonSubtract1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubtract1()
}

func (c *current) onMultiply1() (any, error) {
	return MathOperandMultiply, nil
}

func (p *parser) callonMultiply1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiply1()
}

func (c *current) onDivide1() (any, error) {
	return MathOperandDivide, nil
}

func (p *parser) callonDivide1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivide1()
}

func (c *current) onAddOp1(operand, right any) (any, error) {
	return &MathOperation{
		Operand: operand.(MathOperand),
		Right:   right.(ComparisonValue),
	}, nil
}

func (p *parser) callonAddOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddOp1(stack["operand"], stack["right"])
}

func (c *current) onMultOp1(operand, right any) (any, error) {
	return &MathOperation{
		Operand: operand.(MathOperand),
		Right:   right.(ComparisonValue),
	}, nil
}

func (p *parser) callonMultOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultOp1(stack["operand"], stack["right"])
}

func (c *current) onOr1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	orOps := right.([]any)
	if len(orOps) == 0 {
		return left, nil
	}
	leftCE := left.(Expression)
	return NewLogicalExpression("|", leftCE, orOps)
}

func (p *parser) callonOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOr1(stack["left"], stack["right"])
}

func (c *current) onOrOp1(f any) (any, error) {
	fc := f.(Expression)
	return fc, nil
}

func (p *parser) callonOrOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrOp1(stack["f"])
}

func (c *current) onXor1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	xorOps := right.([]any)
	if len(xorOps) == 0 {
		return left, nil
	}
	leftCE := left.(Expression)
	return NewLogicalExpression("^", leftCE, xorOps)
}

func (p *parser) callonXor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onXor1(stack["left"], stack["right"])
}

func (c *current) onXorOp1(f any) (any, error) {
	fc := f.(Expression)
	return fc, nil
}

func (p *parser) callonXorOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onXorOp1(stack["f"])
}

func (c *current) onAnd1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	addOps := right.([]any)
	if len(addOps) == 0 {
		return left, nil
	}
	leftCE := left.(Expression)
	return NewLogicalExpression("&", leftCE, addOps)
}

func (p *parser) callonAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd1(stack["left"], stack["right"])
}

func (c *current) onAndOp1(f any) (any, error) {
	fc := f.(Expression)
	return fc, nil
}

func (p *parser) callonAndOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndOp1(stack["f"])
}

func (c *current) onLogicalTerm2(not, eq any) (any, error) {
	if not != nil {
		switch eq := eq.(type) {
		case *EqualityExpression:
			eq.Not = true
		case *LogicalExpression:
			eq.Not = true
		}
	}
	return eq, nil
}

func (p *parser) callonLogicalTerm2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalTerm2(stack["not"], stack["eq"])
}

func (c *current) onLogicalTerm13(feature any) (any, error) {
	return feature, nil
}

func (p *parser) callonLogicalTerm13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalTerm13(stack["feature"])
}

func (c *current) onLogicalTerm16(reference any) (any, error) {
	return reference, nil
}

func (p *parser) callonLogicalTerm16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalTerm16(stack["reference"])
}

func (c *current) onLogicalTerm19(identifier any) (any, error) {
	return identifier, nil
}

func (p *parser) callonLogicalTerm19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalTerm19(stack["identifier"])
}

func (c *current) onNumberValue2(val any) (any, error) {
	return NewHexValue(val.(uint64), string(c.text)), nil

}

func (p *parser) callonNumberValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberValue2(stack["val"])
}

func (c *current) onNumberValue5(val any) (any, error) {
	return NewFloatValue(val.(decimal.Decimal), string(c.text)), nil

}

func (p *parser) callonNumberValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberValue5(stack["val"])
}

func (c *current) onNumberValue8(val any) (any, error) {
	return NewIntValue(val.(int64), string(c.text)), nil

}

func (p *parser) callonNumberValue8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberValue8(stack["val"])
}

func (c *current) onFloat1() (any, error) {
	return decimal.NewFromString(string(c.text))
}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInteger1(sign, digits any) (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1(stack["sign"], stack["digits"])
}

func (c *current) onHex1(hex any) (any, error) {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	return strconv.ParseUint(string(val), 16, 64)
}

func (p *parser) callonHex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1(stack["hex"])
}

func (c *current) onDigits1() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonDigits1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigits1()
}

func (c *current) onNullValue1() (any, error) {
	return NewNullValue(string(c.text)), nil
}

func (p *parser) callonNullValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullValue1()
}

func (c *current) onComparisonOperator2() (any, error) {
	return ComparisonOperatorEqual, nil
}

func (p *parser) callonComparisonOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator2()
}

func (c *current) onComparisonOperator4() (any, error) {
	return ComparisonOperatorNotEqual, nil
}

func (p *parser) callonComparisonOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator4()
}

func (c *current) onComparisonOperator6() (any, error) {
	return ComparisonOperatorLessThan, nil
}

func (p *parser) callonComparisonOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator6()
}

func (c *current) onComparisonOperator8() (any, error) {
	return ComparisonOperatorLessThanOrEqual, nil
}

func (p *parser) callonComparisonOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator8()
}

func (c *current) onComparisonOperator10() (any, error) {
	return ComparisonOperatorGreaterThan, nil
}

func (p *parser) callonComparisonOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator10()
}

func (c *current) onComparisonOperator12() (any, error) {
	return ComparisonOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonComparisonOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator12()
}

func (c *current) onComparisonExpression1(left, op, right any) (any, error) {

	leftVal := left.(ComparisonValue)
	rightVal := right.(ComparisonValue)
	return &ComparisonExpression{Left: leftVal, Right: rightVal, Op: op.(ComparisonOperator)}, nil
}

func (p *parser) callonComparisonExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onIdentifierOp1(not, identifier any) (any, error) {
	id := identifier.(string)
	ic := &IdentifierExpression{ID: id}
	if not != nil {
		ic.Not = true
	}
	return ic, nil
}

func (p *parser) callonIdentifierOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierOp1(stack["not"], stack["identifier"])
}

func (c *current) onIdentifierValue1(identifier any) (any, error) {

	id := identifier.(string)
	return &IdentifierValue{ID: id}, nil
}

func (p *parser) callonIdentifierValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierValue1(stack["identifier"])
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onReferenceOp1(not, reference, label any) (any, error) {
	ic := &ReferenceExpression{Reference: reference.(string)}
	if label != nil {
		ic.Label = label.(string)
	}
	if not != nil {
		ic.Not = true
	}
	return ic, nil
}

func (p *parser) callonReferenceOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceOp1(stack["not"], stack["reference"], stack["label"])
}

func (c *current) onReferenceValue1(reference, label any) (any, error) {
	ic := &ReferenceValue{Reference: reference.(string)}
	if label != nil {
		ic.Label = label.(string)
	}
	return ic, nil
}

func (p *parser) callonReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceValue1(stack["reference"], stack["label"])
}

func (c *current) onReferenceLabel1(label any) (any, error) {
	return label.(string), nil
}

func (p *parser) callonReferenceLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceLabel1(stack["label"])
}

func (c *current) onReferenceText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceText1()
}

func (c *current) onReferenceId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceId1()
}

func (c *current) onFeatureOp1(not, feature any) (any, error) {
	id := feature.(string)
	switch id {
	case "O", "M", "P":
		return nil, fmt.Errorf("invalid optional conformance value: %s", id)
	}
	ic := &FeatureExpression{Feature: id}
	if not != nil {
		ic.Not = true
	}
	return ic, nil
}

func (p *parser) callonFeatureOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureOp1(stack["not"], stack["feature"])
}

func (c *current) onFeatureValue1(feature any) (any, error) {
	id := feature.(string)
	switch id {
	case "O", "M", "P":
		return nil, fmt.Errorf("invalid optional conformance value: %s", id)
	}
	ic := &FeatureValue{Feature: id}
	return ic, nil
}

func (p *parser) callonFeatureValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureValue1(stack["feature"])
}

func (c *current) onFeature1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFeature1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeature1()
}

func (c *current) onChoiceRange1(lower, upper any) (any, error) {
	minVal := lower.(int)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	maxVal := upper.(int)
	if maxVal <= 0 && minVal > maxVal {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceRangeLimit{Min: minVal, Max: maxVal}, nil
}

func (p *parser) callonChoiceRange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceRange1(stack["lower"], stack["upper"])
}

func (c *current) onChoiceMin1(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMinLimit{Min: 1}, nil
	}
	minVal := limit.(int)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	return &ChoiceMinLimit{Min: minVal}, nil
}

func (p *parser) callonChoiceMin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceMin1(stack["limit"])
}

func (c *current) onChoiceMax1(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMaxLimit{Max: 1}, nil
	}
	maxVal := limit.(int)
	if maxVal <= 0 {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceMaxLimit{Max: maxVal}, nil
}

func (p *parser) callonChoiceMax1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceMax1(stack["limit"])
}

func (c *current) onChoiceExact1(limit any) (any, error) {
	exact := limit.(int)
	if exact <= 0 {
		return nil, fmt.Errorf("invalid exact: %d", exact)
	}
	return &ChoiceExactLimit{Limit: exact}, nil
}

func (p *parser) callonChoiceExact1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceExact1(stack["limit"])
}

func (c *current) onChoiceLimit1(limit any) (any, error) {
	return limit.(ChoiceLimit), nil
}

func (p *parser) callonChoiceLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceLimit1(stack["limit"])
}

func (c *current) onSet1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSet1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1()
}

func (c *current) onChoice1(set, limit any) (any, error) {
	choice := &Choice{Set: set.(string)}
	if limit != nil {
		switch v := limit.(type) {
		case ChoiceLimit:
			choice.Limit = v
		default:
			return nil, fmt.Errorf("unexpected choice limit type: %T", limit)
		}
	}
	return choice, nil
}

func (p *parser) callonChoice1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoice1(stack["set"], stack["limit"])
}

func (c *current) onPascalCase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPascalCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPascalCase1()
}

func (c *current) onCapitalized1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCapitalized1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCapitalized1()
}

func (c *current) onUppercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercase1()
}

func (c *current) onLowercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercase1()
}

func (c *current) onSameLineString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSameLineString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSameLineString1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
	parser *parser
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	//basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
	offset position
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
