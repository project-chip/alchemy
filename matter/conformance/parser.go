// Code generated by pigeon; DO NOT EDIT.

package conformance

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/matter/types"
	"github.com/shopspring/decimal"
)

func debug(format string, a ...any) (n int, err error) {
	return
	//return fmt.Fprintf(os.Stdout, format, a...)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 19, col: 1, offset: 259},
			expr: &actionExpr{
				pos: position{line: 19, col: 10, offset: 268},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 19, col: 10, offset: 268},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 19, col: 10, offset: 268},
							label: "conf",
							expr: &oneOrMoreExpr{
								pos: position{line: 19, col: 15, offset: 273},
								expr: &ruleRefExpr{
									pos:    position{line: 19, col: 15, offset: 273},
									offset: 2,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 19, col: 28, offset: 286},
							offset: 58,
						},
					},
				},
			},
		},
		{
			name: "ConformanceSeparator",
			pos:  position{line: 30, col: 1, offset: 458},
			expr: &choiceExpr{
				pos: position{line: 30, col: 25, offset: 482},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 30, col: 26, offset: 483},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 30, col: 26, offset: 483},
								offset: 56,
							},
							&ruleRefExpr{
								pos:    position{line: 30, col: 28, offset: 485},
								offset: 57,
							},
							&ruleRefExpr{
								pos:    position{line: 30, col: 34, offset: 491},
								offset: 56,
							},
						},
					},
					&andExpr{
						pos: position{line: 30, col: 39, offset: 496},
						expr: &ruleRefExpr{
							pos:    position{line: 30, col: 40, offset: 497},
							offset: 58,
						},
					},
				},
			},
		},
		{
			name: "Conformance",
			pos:  position{line: 32, col: 1, offset: 502},
			expr: &choiceExpr{
				pos: position{line: 32, col: 17, offset: 518},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 32, col: 17, offset: 518},
						run: (*parser).callonConformance2,
						expr: &seqExpr{
							pos: position{line: 32, col: 17, offset: 518},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 32, col: 17, offset: 518},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 32, col: 21, offset: 522},
									label: "i",
									expr: &ruleRefExpr{
										pos:    position{line: 32, col: 23, offset: 524},
										offset: 3,
									},
								},
								&litMatcher{
									pos:        position{line: 32, col: 34, offset: 535},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&labeledExpr{
									pos:   position{line: 32, col: 38, offset: 539},
									label: "choice",
									expr: &zeroOrOneExpr{
										pos: position{line: 32, col: 45, offset: 546},
										expr: &ruleRefExpr{
											pos:    position{line: 32, col: 45, offset: 546},
											offset: 48,
										},
									},
								},
								&ruleRefExpr{
									pos:    position{line: 32, col: 53, offset: 554},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 6, offset: 729},
						run: (*parser).callonConformance12,
						expr: &seqExpr{
							pos: position{line: 39, col: 6, offset: 729},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 39, col: 6, offset: 729},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
								&ruleRefExpr{
									pos:    position{line: 39, col: 11, offset: 734},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 790},
						run: (*parser).callonConformance16,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 790},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 41, col: 5, offset: 790},
									val:        "O",
									ignoreCase: false,
									want:       "\"O\"",
								},
								&labeledExpr{
									pos:   position{line: 41, col: 9, offset: 794},
									label: "choice",
									expr: &zeroOrOneExpr{
										pos: position{line: 41, col: 16, offset: 801},
										expr: &ruleRefExpr{
											pos:    position{line: 41, col: 16, offset: 801},
											offset: 48,
										},
									},
								},
								&ruleRefExpr{
									pos:    position{line: 41, col: 25, offset: 810},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 941},
						run: (*parser).callonConformance23,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 941},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 47, col: 5, offset: 941},
									val:        "P",
									ignoreCase: false,
									want:       "\"P\"",
								},
								&ruleRefExpr{
									pos:    position{line: 47, col: 10, offset: 946},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1008},
						run: (*parser).callonConformance27,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1008},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1008},
									val:        "D",
									ignoreCase: false,
									want:       "\"D\"",
								},
								&ruleRefExpr{
									pos:    position{line: 49, col: 10, offset: 1013},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1070},
						run: (*parser).callonConformance31,
						expr: &seqExpr{
							pos: position{line: 51, col: 5, offset: 1070},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 51, col: 5, offset: 1070},
									val:        "X",
									ignoreCase: false,
									want:       "\"X\"",
								},
								&ruleRefExpr{
									pos:    position{line: 51, col: 10, offset: 1075},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1132},
						run: (*parser).callonConformance35,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1132},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 53, col: 5, offset: 1132},
									val:        "desc",
									ignoreCase: false,
									want:       "\"desc\"",
								},
								&ruleRefExpr{
									pos:    position{line: 53, col: 13, offset: 1140},
									offset: 1,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1198},
						run: (*parser).callonConformance39,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1198},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 55, col: 5, offset: 1198},
									label: "eq",
									expr: &ruleRefExpr{
										pos:    position{line: 55, col: 8, offset: 1201},
										offset: 3,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 55, col: 19, offset: 1212},
									offset: 1,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 60, col: 1, offset: 1308},
			expr: &ruleRefExpr{
				pos:    position{line: 60, col: 15, offset: 1322},
				offset: 13,
			},
		},
		{
			name: "EquationTerm",
			pos:  position{line: 68, col: 1, offset: 1348},
			expr: &choiceExpr{
				pos: position{line: 68, col: 17, offset: 1364},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 68, col: 17, offset: 1364},
						offset: 49,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 35, offset: 1382},
						offset: 22,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 50, offset: 1397},
						offset: 40,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 65, offset: 1412},
						offset: 34,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 82, offset: 1429},
						offset: 31,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 100, offset: 1447},
						offset: 21,
					},
					&ruleRefExpr{
						pos:    position{line: 68, col: 114, offset: 1461},
						offset: 27,
					},
					&actionExpr{
						pos: position{line: 68, col: 126, offset: 1473},
						run: (*parser).callonEquationTerm9,
						expr: &seqExpr{
							pos: position{line: 68, col: 126, offset: 1473},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 68, col: 126, offset: 1473},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:    position{line: 68, col: 130, offset: 1477},
									offset: 56,
								},
								&labeledExpr{
									pos:   position{line: 68, col: 132, offset: 1479},
									label: "eq",
									expr: &ruleRefExpr{
										pos:    position{line: 68, col: 135, offset: 1482},
										offset: 5,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 68, col: 149, offset: 1496},
									offset: 56,
								},
								&litMatcher{
									pos:        position{line: 68, col: 151, offset: 1498},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EquationValue",
			pos:  position{line: 70, col: 1, offset: 1522},
			expr: &actionExpr{
				pos: position{line: 70, col: 18, offset: 1539},
				run: (*parser).callonEquationValue1,
				expr: &seqExpr{
					pos: position{line: 70, col: 18, offset: 1539},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 70, col: 18, offset: 1539},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 70, col: 20, offset: 1541},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 70, col: 25, offset: 1546},
								offset: 6,
							},
						},
						&labeledExpr{
							pos:   position{line: 70, col: 43, offset: 1564},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 70, col: 48, offset: 1569},
								expr: &ruleRefExpr{
									pos:    position{line: 70, col: 50, offset: 1571},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 70, col: 59, offset: 1580},
							offset: 56,
						},
					},
				},
			},
		},
		{
			name: "EquationMultiply",
			pos:  position{line: 88, col: 1, offset: 1930},
			expr: &actionExpr{
				pos: position{line: 88, col: 21, offset: 1950},
				run: (*parser).callonEquationMultiply1,
				expr: &seqExpr{
					pos: position{line: 88, col: 21, offset: 1950},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 88, col: 21, offset: 1950},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 88, col: 23, offset: 1952},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 88, col: 28, offset: 1957},
								offset: 4,
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 42, offset: 1971},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 88, col: 47, offset: 1976},
								expr: &ruleRefExpr{
									pos:    position{line: 88, col: 49, offset: 1978},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 88, col: 59, offset: 1988},
							offset: 56,
						},
					},
				},
			},
		},
		{
			name: "Add",
			pos:  position{line: 106, col: 1, offset: 2338},
			expr: &actionExpr{
				pos: position{line: 106, col: 8, offset: 2345},
				run: (*parser).callonAdd1,
				expr: &litMatcher{
					pos:        position{line: 106, col: 8, offset: 2345},
					val:        "+",
					ignoreCase: false,
					want:       "\"+\"",
				},
			},
		},
		{
			name: "Subtract",
			pos:  position{line: 108, col: 1, offset: 2380},
			expr: &actionExpr{
				pos: position{line: 108, col: 13, offset: 2392},
				run: (*parser).callonSubtract1,
				expr: &litMatcher{
					pos:        position{line: 108, col: 13, offset: 2392},
					val:        "-",
					ignoreCase: false,
					want:       "\"-\"",
				},
			},
		},
		{
			name: "Multiply",
			pos:  position{line: 110, col: 1, offset: 2432},
			expr: &actionExpr{
				pos: position{line: 110, col: 13, offset: 2444},
				run: (*parser).callonMultiply1,
				expr: &litMatcher{
					pos:        position{line: 110, col: 13, offset: 2444},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "Divide",
			pos:  position{line: 112, col: 1, offset: 2484},
			expr: &actionExpr{
				pos: position{line: 112, col: 11, offset: 2494},
				run: (*parser).callonDivide1,
				expr: &litMatcher{
					pos:        position{line: 112, col: 11, offset: 2494},
					val:        "/",
					ignoreCase: false,
					want:       "\"/\"",
				},
			},
		},
		{
			name: "AddOp",
			pos:  position{line: 114, col: 1, offset: 2532},
			expr: &actionExpr{
				pos: position{line: 114, col: 10, offset: 2541},
				run: (*parser).callonAddOp1,
				expr: &seqExpr{
					pos: position{line: 114, col: 10, offset: 2541},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 114, col: 10, offset: 2541},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 12, offset: 2543},
							label: "operand",
							expr: &choiceExpr{
								pos: position{line: 114, col: 21, offset: 2552},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 114, col: 21, offset: 2552},
										offset: 7,
									},
									&ruleRefExpr{
										pos:    position{line: 114, col: 25, offset: 2556},
										offset: 8,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 114, col: 35, offset: 2566},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 37, offset: 2568},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 114, col: 43, offset: 2574},
								offset: 5,
							},
						},
					},
				},
			},
		},
		{
			name: "MultOp",
			pos:  position{line: 121, col: 1, offset: 2712},
			expr: &actionExpr{
				pos: position{line: 121, col: 11, offset: 2722},
				run: (*parser).callonMultOp1,
				expr: &seqExpr{
					pos: position{line: 121, col: 11, offset: 2722},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 121, col: 11, offset: 2722},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 121, col: 13, offset: 2724},
							label: "operand",
							expr: &choiceExpr{
								pos: position{line: 121, col: 22, offset: 2733},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 121, col: 22, offset: 2733},
										offset: 9,
									},
									&ruleRefExpr{
										pos:    position{line: 121, col: 31, offset: 2742},
										offset: 10,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 121, col: 39, offset: 2750},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 121, col: 41, offset: 2752},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 121, col: 47, offset: 2758},
								offset: 4,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalExpression",
			pos:  position{line: 130, col: 1, offset: 2899},
			expr: &ruleRefExpr{
				pos:    position{line: 130, col: 21, offset: 2919},
				offset: 14,
			},
		},
		{
			name: "Or",
			pos:  position{line: 132, col: 1, offset: 2923},
			expr: &actionExpr{
				pos: position{line: 132, col: 7, offset: 2929},
				run: (*parser).callonOr1,
				expr: &seqExpr{
					pos: position{line: 132, col: 7, offset: 2929},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 132, col: 7, offset: 2929},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 132, col: 9, offset: 2931},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 132, col: 14, offset: 2936},
								offset: 16,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 132, col: 18, offset: 2940},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 132, col: 20, offset: 2942},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 132, col: 26, offset: 2948},
								expr: &ruleRefExpr{
									pos:    position{line: 132, col: 26, offset: 2948},
									offset: 15,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 132, col: 32, offset: 2954},
							offset: 56,
						},
					},
				},
			},
		},
		{
			name: "OrOp",
			pos:  position{line: 144, col: 1, offset: 3185},
			expr: &actionExpr{
				pos: position{line: 144, col: 9, offset: 3193},
				run: (*parser).callonOrOp1,
				expr: &seqExpr{
					pos: position{line: 144, col: 9, offset: 3193},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 144, col: 9, offset: 3193},
							offset: 56,
						},
						&litMatcher{
							pos:        position{line: 144, col: 11, offset: 3195},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&ruleRefExpr{
							pos:    position{line: 144, col: 15, offset: 3199},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 144, col: 17, offset: 3201},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 144, col: 19, offset: 3203},
								offset: 16,
							},
						},
					},
				},
			},
		},
		{
			name: "Xor",
			pos:  position{line: 149, col: 1, offset: 3260},
			expr: &actionExpr{
				pos: position{line: 149, col: 8, offset: 3267},
				run: (*parser).callonXor1,
				expr: &seqExpr{
					pos: position{line: 149, col: 8, offset: 3267},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 149, col: 8, offset: 3267},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 149, col: 10, offset: 3269},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 149, col: 15, offset: 3274},
								offset: 18,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 19, offset: 3278},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 149, col: 21, offset: 3280},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 149, col: 27, offset: 3286},
								expr: &ruleRefExpr{
									pos:    position{line: 149, col: 27, offset: 3286},
									offset: 17,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 34, offset: 3293},
							offset: 56,
						},
					},
				},
			},
		},
		{
			name: "XorOp",
			pos:  position{line: 161, col: 1, offset: 3527},
			expr: &actionExpr{
				pos: position{line: 161, col: 10, offset: 3536},
				run: (*parser).callonXorOp1,
				expr: &seqExpr{
					pos: position{line: 161, col: 10, offset: 3536},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 161, col: 10, offset: 3536},
							offset: 56,
						},
						&litMatcher{
							pos:        position{line: 161, col: 12, offset: 3538},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 161, col: 16, offset: 3542},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 161, col: 18, offset: 3544},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 161, col: 20, offset: 3546},
								offset: 18,
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 166, col: 1, offset: 3602},
			expr: &actionExpr{
				pos: position{line: 166, col: 8, offset: 3609},
				run: (*parser).callonAnd1,
				expr: &seqExpr{
					pos: position{line: 166, col: 8, offset: 3609},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 166, col: 8, offset: 3609},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 166, col: 10, offset: 3611},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 166, col: 15, offset: 3616},
								offset: 20,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 166, col: 27, offset: 3628},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 166, col: 29, offset: 3630},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 166, col: 35, offset: 3636},
								expr: &ruleRefExpr{
									pos:    position{line: 166, col: 35, offset: 3636},
									offset: 19,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 166, col: 42, offset: 3643},
							offset: 56,
						},
					},
				},
			},
		},
		{
			name: "AndOp",
			pos:  position{line: 178, col: 1, offset: 3876},
			expr: &actionExpr{
				pos: position{line: 178, col: 10, offset: 3885},
				run: (*parser).callonAndOp1,
				expr: &seqExpr{
					pos: position{line: 178, col: 10, offset: 3885},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 178, col: 10, offset: 3885},
							offset: 56,
						},
						&litMatcher{
							pos:        position{line: 178, col: 12, offset: 3887},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&ruleRefExpr{
							pos:    position{line: 178, col: 16, offset: 3891},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 178, col: 18, offset: 3893},
							label: "f",
							expr: &ruleRefExpr{
								pos:    position{line: 178, col: 20, offset: 3895},
								offset: 20,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalTerm",
			pos:  position{line: 183, col: 1, offset: 3960},
			expr: &choiceExpr{
				pos: position{line: 183, col: 16, offset: 3975},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 183, col: 16, offset: 3975},
						run: (*parser).callonLogicalTerm2,
						expr: &seqExpr{
							pos: position{line: 183, col: 16, offset: 3975},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 183, col: 16, offset: 3975},
									label: "not",
									expr: &zeroOrOneExpr{
										pos: position{line: 183, col: 20, offset: 3979},
										expr: &litMatcher{
											pos:        position{line: 183, col: 20, offset: 3979},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 183, col: 25, offset: 3984},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:    position{line: 183, col: 29, offset: 3988},
									offset: 56,
								},
								&labeledExpr{
									pos:   position{line: 183, col: 32, offset: 3991},
									label: "eq",
									expr: &ruleRefExpr{
										pos:    position{line: 183, col: 35, offset: 3994},
										offset: 3,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 183, col: 46, offset: 4005},
									offset: 56,
								},
								&litMatcher{
									pos:        position{line: 183, col: 48, offset: 4007},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 193, col: 5, offset: 4244},
						offset: 29,
					},
					&ruleRefExpr{
						pos:    position{line: 194, col: 5, offset: 4269},
						offset: 39,
					},
					&ruleRefExpr{
						pos:    position{line: 195, col: 5, offset: 4284},
						offset: 33,
					},
					&ruleRefExpr{
						pos:    position{line: 196, col: 5, offset: 4302},
						offset: 30,
					},
				},
			},
		},
		{
			name: "NumberValue",
			pos:  position{line: 200, col: 1, offset: 4319},
			expr: &choiceExpr{
				pos: position{line: 200, col: 17, offset: 4335},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 200, col: 17, offset: 4335},
						run: (*parser).callonNumberValue2,
						expr: &labeledExpr{
							pos:   position{line: 200, col: 17, offset: 4335},
							label: "val",
							expr: &ruleRefExpr{
								pos:    position{line: 200, col: 22, offset: 4340},
								offset: 25,
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 7, offset: 4420},
						run: (*parser).callonNumberValue5,
						expr: &labeledExpr{
							pos:   position{line: 203, col: 7, offset: 4420},
							label: "val",
							expr: &ruleRefExpr{
								pos:    position{line: 203, col: 11, offset: 4424},
								offset: 23,
							},
						},
					},
					&actionExpr{
						pos: position{line: 206, col: 7, offset: 4517},
						run: (*parser).callonNumberValue8,
						expr: &labeledExpr{
							pos:   position{line: 206, col: 7, offset: 4517},
							label: "val",
							expr: &ruleRefExpr{
								pos:    position{line: 206, col: 11, offset: 4521},
								offset: 24,
							},
						},
					},
				},
			},
		},
		{
			name: "BooleanValue",
			pos:  position{line: 210, col: 1, offset: 4600},
			expr: &actionExpr{
				pos: position{line: 210, col: 17, offset: 4616},
				run: (*parser).callonBooleanValue1,
				expr: &choiceExpr{
					pos: position{line: 210, col: 18, offset: 4617},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 210, col: 18, offset: 4617},
							val:        "true",
							ignoreCase: true,
							want:       "\"true\"i",
						},
						&litMatcher{
							pos:        position{line: 210, col: 28, offset: 4627},
							val:        "false",
							ignoreCase: true,
							want:       "\"false\"i",
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 218, col: 1, offset: 4777},
			expr: &actionExpr{
				pos: position{line: 218, col: 10, offset: 4786},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 218, col: 10, offset: 4786},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 218, col: 10, offset: 4786},
							offset: 24,
						},
						&seqExpr{
							pos: position{line: 218, col: 19, offset: 4795},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 218, col: 19, offset: 4795},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 218, col: 23, offset: 4799},
									expr: &charClassMatcher{
										pos:        position{line: 218, col: 23, offset: 4799},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 222, col: 1, offset: 4858},
			expr: &actionExpr{
				pos: position{line: 222, col: 12, offset: 4869},
				run: (*parser).callonInteger1,
				expr: &seqExpr{
					pos: position{line: 222, col: 12, offset: 4869},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 222, col: 12, offset: 4869},
							label: "sign",
							expr: &zeroOrOneExpr{
								pos: position{line: 222, col: 17, offset: 4874},
								expr: &choiceExpr{
									pos: position{line: 222, col: 18, offset: 4875},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 222, col: 18, offset: 4875},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 222, col: 22, offset: 4879},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 28, offset: 4885},
							label: "digits",
							expr: &ruleRefExpr{
								pos:    position{line: 222, col: 35, offset: 4892},
								offset: 26,
							},
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 226, col: 1, offset: 4954},
			expr: &actionExpr{
				pos: position{line: 226, col: 8, offset: 4961},
				run: (*parser).callonHex1,
				expr: &seqExpr{
					pos: position{line: 226, col: 8, offset: 4961},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 226, col: 8, offset: 4961},
							val:        "0x",
							ignoreCase: true,
							want:       "\"0x\"i",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 14, offset: 4967},
							label: "hex",
							expr: &oneOrMoreExpr{
								pos: position{line: 226, col: 18, offset: 4971},
								expr: &charClassMatcher{
									pos:        position{line: 226, col: 18, offset: 4971},
									val:        "[0-9A-Fa-f]",
									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Digits",
			pos:  position{line: 234, col: 1, offset: 5133},
			expr: &actionExpr{
				pos: position{line: 234, col: 11, offset: 5143},
				run: (*parser).callonDigits1,
				expr: &oneOrMoreExpr{
					pos: position{line: 234, col: 11, offset: 5143},
					expr: &charClassMatcher{
						pos:        position{line: 234, col: 11, offset: 5143},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "NullValue",
			pos:  position{line: 238, col: 1, offset: 5204},
			expr: &actionExpr{
				pos: position{line: 238, col: 14, offset: 5217},
				run: (*parser).callonNullValue1,
				expr: &litMatcher{
					pos:        position{line: 238, col: 14, offset: 5217},
					val:        "null",
					ignoreCase: false,
					want:       "\"null\"",
				},
			},
		},
		{
			name: "ComparisonOperator",
			pos:  position{line: 244, col: 1, offset: 5273},
			expr: &choiceExpr{
				pos: position{line: 245, col: 6, offset: 5300},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 245, col: 7, offset: 5301},
						run: (*parser).callonComparisonOperator2,
						expr: &litMatcher{
							pos:        position{line: 245, col: 7, offset: 5301},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 8, offset: 5355},
						run: (*parser).callonComparisonOperator4,
						expr: &litMatcher{
							pos:        position{line: 246, col: 8, offset: 5355},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 247, col: 8, offset: 5411},
						run: (*parser).callonComparisonOperator6,
						expr: &seqExpr{
							pos: position{line: 247, col: 8, offset: 5411},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 247, col: 8, offset: 5411},
									expr: &litMatcher{
										pos:        position{line: 247, col: 8, offset: 5411},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 247, col: 14, offset: 5417},
									val:        "<=",
									ignoreCase: false,
									want:       "\"<=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 248, col: 8, offset: 5480},
						run: (*parser).callonComparisonOperator11,
						expr: &litMatcher{
							pos:        position{line: 248, col: 8, offset: 5480},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 8, offset: 5536},
						run: (*parser).callonComparisonOperator13,
						expr: &litMatcher{
							pos:        position{line: 249, col: 8, offset: 5536},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 250, col: 8, offset: 5602},
						run: (*parser).callonComparisonOperator15,
						expr: &litMatcher{
							pos:        position{line: 250, col: 8, offset: 5602},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpression",
			pos:  position{line: 253, col: 1, offset: 5656},
			expr: &actionExpr{
				pos: position{line: 253, col: 25, offset: 5680},
				run: (*parser).callonComparisonExpression1,
				expr: &seqExpr{
					pos: position{line: 253, col: 25, offset: 5680},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 253, col: 25, offset: 5680},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 253, col: 27, offset: 5682},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 253, col: 32, offset: 5687},
								offset: 5,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 253, col: 46, offset: 5701},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 253, col: 48, offset: 5703},
							label: "op",
							expr: &ruleRefExpr{
								pos:    position{line: 253, col: 51, offset: 5706},
								offset: 28,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 253, col: 70, offset: 5725},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 253, col: 72, offset: 5727},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 253, col: 78, offset: 5733},
								offset: 5,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 253, col: 92, offset: 5747},
							offset: 56,
						},
					},
				},
			},
		},
		{
			name: "IdentifierOp",
			pos:  position{line: 264, col: 1, offset: 5937},
			expr: &actionExpr{
				pos: position{line: 264, col: 17, offset: 5953},
				run: (*parser).callonIdentifierOp1,
				expr: &seqExpr{
					pos: position{line: 264, col: 17, offset: 5953},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 264, col: 17, offset: 5953},
							label: "not",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 21, offset: 5957},
								expr: &litMatcher{
									pos:        position{line: 264, col: 21, offset: 5957},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 26, offset: 5962},
							label: "identifier",
							expr: &ruleRefExpr{
								pos:    position{line: 264, col: 37, offset: 5973},
								offset: 32,
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 49, offset: 5985},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 55, offset: 5991},
								expr: &ruleRefExpr{
									pos:    position{line: 264, col: 56, offset: 5992},
									offset: 38,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierValue",
			pos:  position{line: 276, col: 1, offset: 6226},
			expr: &actionExpr{
				pos: position{line: 276, col: 20, offset: 6245},
				run: (*parser).callonIdentifierValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 20, offset: 6245},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 276, col: 20, offset: 6245},
							label: "identifier",
							expr: &ruleRefExpr{
								pos:    position{line: 276, col: 31, offset: 6256},
								offset: 32,
							},
						},
						&labeledExpr{
							pos:   position{line: 276, col: 43, offset: 6268},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 276, col: 49, offset: 6274},
								expr: &ruleRefExpr{
									pos:    position{line: 276, col: 50, offset: 6275},
									offset: 38,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 284, col: 1, offset: 6439},
			expr: &actionExpr{
				pos: position{line: 284, col: 15, offset: 6453},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 284, col: 15, offset: 6453},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 284, col: 15, offset: 6453},
							offset: 51,
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 26, offset: 6464},
							expr: &seqExpr{
								pos: position{line: 284, col: 27, offset: 6465},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 284, col: 27, offset: 6465},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&ruleRefExpr{
										pos:    position{line: 284, col: 31, offset: 6469},
										offset: 51,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceOp",
			pos:  position{line: 288, col: 1, offset: 6522},
			expr: &actionExpr{
				pos: position{line: 288, col: 16, offset: 6537},
				run: (*parser).callonReferenceOp1,
				expr: &seqExpr{
					pos: position{line: 288, col: 16, offset: 6537},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 288, col: 16, offset: 6537},
							label: "not",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 20, offset: 6541},
								expr: &litMatcher{
									pos:        position{line: 288, col: 20, offset: 6541},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 288, col: 25, offset: 6546},
							val:        "<<",
							ignoreCase: false,
							want:       "\"<<\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 30, offset: 6551},
							label: "reference",
							expr: &ruleRefExpr{
								pos:    position{line: 288, col: 40, offset: 6561},
								offset: 37,
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 52, offset: 6573},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 58, offset: 6579},
								expr: &ruleRefExpr{
									pos:    position{line: 288, col: 59, offset: 6580},
									offset: 35,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 288, col: 77, offset: 6598},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 82, offset: 6603},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 88, offset: 6609},
								expr: &ruleRefExpr{
									pos:    position{line: 288, col: 89, offset: 6610},
									offset: 38,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceValue",
			pos:  position{line: 302, col: 1, offset: 6905},
			expr: &actionExpr{
				pos: position{line: 302, col: 19, offset: 6923},
				run: (*parser).callonReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 302, col: 19, offset: 6923},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 302, col: 19, offset: 6923},
							val:        "<<",
							ignoreCase: false,
							want:       "\"<<\"",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 24, offset: 6928},
							label: "reference",
							expr: &ruleRefExpr{
								pos:    position{line: 302, col: 34, offset: 6938},
								offset: 37,
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 46, offset: 6950},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 52, offset: 6956},
								expr: &ruleRefExpr{
									pos:    position{line: 302, col: 53, offset: 6957},
									offset: 35,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 71, offset: 6975},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 76, offset: 6980},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 82, offset: 6986},
								expr: &ruleRefExpr{
									pos:    position{line: 302, col: 83, offset: 6987},
									offset: 38,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceLabel",
			pos:  position{line: 313, col: 1, offset: 7228},
			expr: &actionExpr{
				pos: position{line: 313, col: 19, offset: 7246},
				run: (*parser).callonReferenceLabel1,
				expr: &seqExpr{
					pos: position{line: 313, col: 19, offset: 7246},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 313, col: 19, offset: 7246},
							offset: 56,
						},
						&ruleRefExpr{
							pos:    position{line: 313, col: 21, offset: 7248},
							offset: 57,
						},
						&ruleRefExpr{
							pos:    position{line: 313, col: 27, offset: 7254},
							offset: 56,
						},
						&labeledExpr{
							pos:   position{line: 313, col: 29, offset: 7256},
							label: "label",
							expr: &ruleRefExpr{
								pos:    position{line: 313, col: 35, offset: 7262},
								offset: 36,
							},
						},
						&andExpr{
							pos: position{line: 313, col: 50, offset: 7277},
							expr: &litMatcher{
								pos:        position{line: 313, col: 51, offset: 7278},
								val:        ">>",
								ignoreCase: false,
								want:       "\">>\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceText",
			pos:  position{line: 317, col: 1, offset: 7323},
			expr: &actionExpr{
				pos: position{line: 317, col: 18, offset: 7340},
				run: (*parser).callonReferenceText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 317, col: 18, offset: 7340},
					expr: &seqExpr{
						pos: position{line: 317, col: 19, offset: 7341},
						exprs: []any{
							&notExpr{
								pos: position{line: 317, col: 19, offset: 7341},
								expr: &litMatcher{
									pos:        position{line: 317, col: 20, offset: 7342},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
							&anyMatcher{
								line: 317, col: 25, offset: 7347,
							},
						},
					},
				},
			},
		},
		{
			name: "ReferenceId",
			pos:  position{line: 321, col: 1, offset: 7392},
			expr: &actionExpr{
				pos: position{line: 321, col: 16, offset: 7407},
				run: (*parser).callonReferenceId1,
				expr: &seqExpr{
					pos: position{line: 321, col: 16, offset: 7407},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 321, col: 16, offset: 7407},
							val:        "ref_",
							ignoreCase: false,
							want:       "\"ref_\"",
						},
						&ruleRefExpr{
							pos:    position{line: 321, col: 23, offset: 7414},
							offset: 51,
						},
					},
				},
			},
		},
		{
			name: "ReferenceField",
			pos:  position{line: 325, col: 1, offset: 7465},
			expr: &actionExpr{
				pos: position{line: 325, col: 19, offset: 7483},
				run: (*parser).callonReferenceField1,
				expr: &seqExpr{
					pos: position{line: 325, col: 19, offset: 7483},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 325, col: 19, offset: 7483},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 23, offset: 7487},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 325, col: 30, offset: 7494},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 325, col: 30, offset: 7494},
										offset: 34,
									},
									&ruleRefExpr{
										pos:    position{line: 325, col: 47, offset: 7511},
										offset: 31,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FeatureOp",
			pos:  position{line: 329, col: 1, offset: 7570},
			expr: &actionExpr{
				pos: position{line: 329, col: 14, offset: 7583},
				run: (*parser).callonFeatureOp1,
				expr: &seqExpr{
					pos: position{line: 329, col: 14, offset: 7583},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 329, col: 14, offset: 7583},
							label: "not",
							expr: &zeroOrOneExpr{
								pos: position{line: 329, col: 18, offset: 7587},
								expr: &litMatcher{
									pos:        position{line: 329, col: 18, offset: 7587},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 23, offset: 7592},
							label: "feature",
							expr: &ruleRefExpr{
								pos:    position{line: 329, col: 31, offset: 7600},
								offset: 41,
							},
						},
					},
				},
			},
		},
		{
			name: "FeatureValue",
			pos:  position{line: 342, col: 1, offset: 7879},
			expr: &actionExpr{
				pos: position{line: 342, col: 17, offset: 7895},
				run: (*parser).callonFeatureValue1,
				expr: &labeledExpr{
					pos:   position{line: 342, col: 17, offset: 7895},
					label: "feature",
					expr: &ruleRefExpr{
						pos:    position{line: 342, col: 25, offset: 7903},
						offset: 41,
					},
				},
			},
		},
		{
			name: "Feature",
			pos:  position{line: 353, col: 1, offset: 8130},
			expr: &actionExpr{
				pos: position{line: 353, col: 12, offset: 8141},
				run: (*parser).callonFeature1,
				expr: &seqExpr{
					pos: position{line: 353, col: 12, offset: 8141},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 353, col: 12, offset: 8141},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&oneOrMoreExpr{
							pos: position{line: 353, col: 17, offset: 8146},
							expr: &charClassMatcher{
								pos:        position{line: 353, col: 17, offset: 8146},
								val:        "[A-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 353, col: 28, offset: 8157},
							expr: &choiceExpr{
								pos: position{line: 353, col: 30, offset: 8159},
								alternatives: []any{
									&notExpr{
										pos: position{line: 353, col: 30, offset: 8159},
										expr: &charClassMatcher{
											pos:        position{line: 353, col: 31, offset: 8160},
											val:        "[A-Za-z0-9_]",
											chars:      []rune{'_'},
											ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 353, col: 46, offset: 8175},
										offset: 58,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ChoiceRange",
			pos:  position{line: 361, col: 1, offset: 8220},
			expr: &actionExpr{
				pos: position{line: 361, col: 16, offset: 8235},
				run: (*parser).callonChoiceRange1,
				expr: &seqExpr{
					pos: position{line: 361, col: 16, offset: 8235},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 361, col: 16, offset: 8235},
							label: "lower",
							expr: &ruleRefExpr{
								pos:    position{line: 361, col: 22, offset: 8241},
								offset: 24,
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 30, offset: 8249},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 34, offset: 8253},
							label: "upper",
							expr: &ruleRefExpr{
								pos:    position{line: 361, col: 40, offset: 8259},
								offset: 24,
							},
						},
					},
				},
			},
		},
		{
			name: "ChoiceMin",
			pos:  position{line: 373, col: 1, offset: 8586},
			expr: &actionExpr{
				pos: position{line: 373, col: 14, offset: 8599},
				run: (*parser).callonChoiceMin1,
				expr: &seqExpr{
					pos: position{line: 373, col: 14, offset: 8599},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 373, col: 14, offset: 8599},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 373, col: 20, offset: 8605},
								expr: &ruleRefExpr{
									pos:    position{line: 373, col: 20, offset: 8605},
									offset: 24,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 373, col: 29, offset: 8614},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "ChoiceMax",
			pos:  position{line: 384, col: 1, offset: 8859},
			expr: &actionExpr{
				pos: position{line: 384, col: 14, offset: 8872},
				run: (*parser).callonChoiceMax1,
				expr: &seqExpr{
					pos: position{line: 384, col: 14, offset: 8872},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 384, col: 14, offset: 8872},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 384, col: 20, offset: 8878},
								expr: &ruleRefExpr{
									pos:    position{line: 384, col: 20, offset: 8878},
									offset: 24,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 29, offset: 8887},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
				},
			},
		},
		{
			name: "ChoiceExact",
			pos:  position{line: 395, col: 1, offset: 9130},
			expr: &actionExpr{
				pos: position{line: 395, col: 16, offset: 9145},
				run: (*parser).callonChoiceExact1,
				expr: &labeledExpr{
					pos:   position{line: 395, col: 16, offset: 9145},
					label: "limit",
					expr: &ruleRefExpr{
						pos:    position{line: 395, col: 22, offset: 9151},
						offset: 24,
					},
				},
			},
		},
		{
			name: "ChoiceLimit",
			pos:  position{line: 403, col: 1, offset: 9324},
			expr: &actionExpr{
				pos: position{line: 403, col: 16, offset: 9339},
				run: (*parser).callonChoiceLimit1,
				expr: &labeledExpr{
					pos:   position{line: 403, col: 16, offset: 9339},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 403, col: 23, offset: 9346},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 403, col: 23, offset: 9346},
								offset: 42,
							},
							&ruleRefExpr{
								pos:    position{line: 403, col: 37, offset: 9360},
								offset: 43,
							},
							&ruleRefExpr{
								pos:    position{line: 403, col: 49, offset: 9372},
								offset: 44,
							},
							&ruleRefExpr{
								pos:    position{line: 403, col: 61, offset: 9384},
								offset: 45,
							},
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 407, col: 1, offset: 9438},
			expr: &actionExpr{
				pos: position{line: 407, col: 8, offset: 9445},
				run: (*parser).callonSet1,
				expr: &oneOrMoreExpr{
					pos: position{line: 407, col: 8, offset: 9445},
					expr: &charClassMatcher{
						pos:        position{line: 407, col: 8, offset: 9445},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Choice",
			pos:  position{line: 411, col: 1, offset: 9488},
			expr: &actionExpr{
				pos: position{line: 411, col: 11, offset: 9498},
				run: (*parser).callonChoice1,
				expr: &seqExpr{
					pos: position{line: 411, col: 11, offset: 9498},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 411, col: 11, offset: 9498},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 15, offset: 9502},
							label: "set",
							expr: &ruleRefExpr{
								pos:    position{line: 411, col: 19, offset: 9506},
								offset: 47,
							},
						},
						&labeledExpr{
							pos:   position{line: 411, col: 23, offset: 9510},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 29, offset: 9516},
								expr: &ruleRefExpr{
									pos:    position{line: 411, col: 29, offset: 9516},
									offset: 46,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatusCodeValue",
			pos:  position{line: 425, col: 1, offset: 9829},
			expr: &actionExpr{
				pos: position{line: 425, col: 20, offset: 9848},
				run: (*parser).callonStatusCodeValue1,
				expr: &labeledExpr{
					pos:   position{line: 425, col: 20, offset: 9848},
					label: "status",
					expr: &ruleRefExpr{
						pos:    position{line: 425, col: 28, offset: 9856},
						offset: 50,
					},
				},
			},
		},
		{
			name: "StatusCode",
			pos:  position{line: 429, col: 1, offset: 9952},
			expr: &choiceExpr{
				pos: position{line: 430, col: 6, offset: 9971},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 430, col: 7, offset: 9972},
						run: (*parser).callonStatusCode2,
						expr: &choiceExpr{
							pos: position{line: 430, col: 8, offset: 9973},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 430, col: 8, offset: 9973},
									val:        "success",
									ignoreCase: true,
									want:       "\"SUCCESS\"i",
								},
								&litMatcher{
									pos:        position{line: 430, col: 21, offset: 9986},
									val:        "ok",
									ignoreCase: true,
									want:       "\"OK\"i",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 431, col: 8, offset: 10042},
						run: (*parser).callonStatusCode6,
						expr: &litMatcher{
							pos:        position{line: 431, col: 8, offset: 10042},
							val:        "failure",
							ignoreCase: true,
							want:       "\"FAILURE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 432, col: 8, offset: 10102},
						run: (*parser).callonStatusCode8,
						expr: &litMatcher{
							pos:        position{line: 432, col: 8, offset: 10102},
							val:        "invalid_subscription",
							ignoreCase: true,
							want:       "\"INVALID_SUBSCRIPTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 433, col: 8, offset: 10187},
						run: (*parser).callonStatusCode10,
						expr: &litMatcher{
							pos:        position{line: 433, col: 8, offset: 10187},
							val:        "unsupported_access",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ACCESS\"i",
						},
					},
					&actionExpr{
						pos: position{line: 434, col: 8, offset: 10268},
						run: (*parser).callonStatusCode12,
						expr: &litMatcher{
							pos:        position{line: 434, col: 8, offset: 10268},
							val:        "unsupported_endpoint",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ENDPOINT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 435, col: 8, offset: 10353},
						run: (*parser).callonStatusCode14,
						expr: &litMatcher{
							pos:        position{line: 435, col: 8, offset: 10353},
							val:        "invalid_action",
							ignoreCase: true,
							want:       "\"INVALID_ACTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 8, offset: 10426},
						run: (*parser).callonStatusCode16,
						expr: &litMatcher{
							pos:        position{line: 436, col: 8, offset: 10426},
							val:        "unsupported_command",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_COMMAND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 437, col: 8, offset: 10509},
						run: (*parser).callonStatusCode18,
						expr: &litMatcher{
							pos:        position{line: 437, col: 8, offset: 10509},
							val:        "invalid_command",
							ignoreCase: true,
							want:       "\"INVALID_COMMAND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 8, offset: 10584},
						run: (*parser).callonStatusCode20,
						expr: &litMatcher{
							pos:        position{line: 438, col: 8, offset: 10584},
							val:        "unsupported_attribute",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_ATTRIBUTE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 8, offset: 10671},
						run: (*parser).callonStatusCode22,
						expr: &litMatcher{
							pos:        position{line: 439, col: 8, offset: 10671},
							val:        "constraint_error",
							ignoreCase: true,
							want:       "\"CONSTRAINT_ERROR\"i",
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 8, offset: 10748},
						run: (*parser).callonStatusCode24,
						expr: &litMatcher{
							pos:        position{line: 440, col: 8, offset: 10748},
							val:        "unsupported_write",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_WRITE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 8, offset: 10827},
						run: (*parser).callonStatusCode26,
						expr: &litMatcher{
							pos:        position{line: 441, col: 8, offset: 10827},
							val:        "resource_exhausted",
							ignoreCase: true,
							want:       "\"RESOURCE_EXHAUSTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 8, offset: 10908},
						run: (*parser).callonStatusCode28,
						expr: &litMatcher{
							pos:        position{line: 442, col: 8, offset: 10908},
							val:        "not_found",
							ignoreCase: true,
							want:       "\"NOT_FOUND\"i",
						},
					},
					&actionExpr{
						pos: position{line: 443, col: 8, offset: 10971},
						run: (*parser).callonStatusCode30,
						expr: &litMatcher{
							pos:        position{line: 443, col: 8, offset: 10971},
							val:        "unreportable_attribute",
							ignoreCase: true,
							want:       "\"UNREPORTABLE_ATTRIBUTE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 444, col: 8, offset: 11060},
						run: (*parser).callonStatusCode32,
						expr: &litMatcher{
							pos:        position{line: 444, col: 8, offset: 11060},
							val:        "invalid_data_type",
							ignoreCase: true,
							want:       "\"INVALID_DATA_TYPE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 445, col: 8, offset: 11138},
						run: (*parser).callonStatusCode34,
						expr: &litMatcher{
							pos:        position{line: 445, col: 8, offset: 11138},
							val:        "unsupported_read",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_READ\"i",
						},
					},
					&actionExpr{
						pos: position{line: 446, col: 8, offset: 11215},
						run: (*parser).callonStatusCode36,
						expr: &litMatcher{
							pos:        position{line: 446, col: 8, offset: 11215},
							val:        "data_version_mismatch",
							ignoreCase: true,
							want:       "\"DATA_VERSION_MISMATCH\"i",
						},
					},
					&actionExpr{
						pos: position{line: 447, col: 8, offset: 11301},
						run: (*parser).callonStatusCode38,
						expr: &litMatcher{
							pos:        position{line: 447, col: 8, offset: 11301},
							val:        "timeout",
							ignoreCase: true,
							want:       "\"TIMEOUT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 448, col: 8, offset: 11361},
						run: (*parser).callonStatusCode40,
						expr: &litMatcher{
							pos:        position{line: 448, col: 8, offset: 11361},
							val:        "unsupported_node",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_NODE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 449, col: 8, offset: 11438},
						run: (*parser).callonStatusCode42,
						expr: &litMatcher{
							pos:        position{line: 449, col: 8, offset: 11438},
							val:        "busy",
							ignoreCase: true,
							want:       "\"BUSY\"i",
						},
					},
					&actionExpr{
						pos: position{line: 450, col: 8, offset: 11492},
						run: (*parser).callonStatusCode44,
						expr: &litMatcher{
							pos:        position{line: 450, col: 8, offset: 11492},
							val:        "access_restricted",
							ignoreCase: true,
							want:       "\"ACCESS_RESTRICTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 451, col: 8, offset: 11571},
						run: (*parser).callonStatusCode46,
						expr: &litMatcher{
							pos:        position{line: 451, col: 8, offset: 11571},
							val:        "unsupported_cluster",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_CLUSTER\"i",
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 8, offset: 11654},
						run: (*parser).callonStatusCode48,
						expr: &litMatcher{
							pos:        position{line: 452, col: 8, offset: 11654},
							val:        "no_upstream_subscription",
							ignoreCase: true,
							want:       "\"NO_UPSTREAM_SUBSCRIPTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 8, offset: 11746},
						run: (*parser).callonStatusCode50,
						expr: &litMatcher{
							pos:        position{line: 453, col: 8, offset: 11746},
							val:        "needs_timed_interaction",
							ignoreCase: true,
							want:       "\"NEEDS_TIMED_INTERACTION\"i",
						},
					},
					&actionExpr{
						pos: position{line: 454, col: 8, offset: 11836},
						run: (*parser).callonStatusCode52,
						expr: &litMatcher{
							pos:        position{line: 454, col: 8, offset: 11836},
							val:        "unsupported_event",
							ignoreCase: true,
							want:       "\"UNSUPPORTED_EVENT\"i",
						},
					},
					&actionExpr{
						pos: position{line: 455, col: 8, offset: 11915},
						run: (*parser).callonStatusCode54,
						expr: &litMatcher{
							pos:        position{line: 455, col: 8, offset: 11915},
							val:        "paths_exhausted",
							ignoreCase: true,
							want:       "\"PATHS_EXHAUSTED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 8, offset: 11990},
						run: (*parser).callonStatusCode56,
						expr: &litMatcher{
							pos:        position{line: 456, col: 8, offset: 11990},
							val:        "timed_request_mismatch",
							ignoreCase: true,
							want:       "\"TIMED_REQUEST_MISMATCH\"i",
						},
					},
					&actionExpr{
						pos: position{line: 457, col: 8, offset: 12078},
						run: (*parser).callonStatusCode58,
						expr: &litMatcher{
							pos:        position{line: 457, col: 8, offset: 12078},
							val:        "failsafe_required",
							ignoreCase: true,
							want:       "\"FAILSAFE_REQUIRED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 458, col: 8, offset: 12157},
						run: (*parser).callonStatusCode60,
						expr: &litMatcher{
							pos:        position{line: 458, col: 8, offset: 12157},
							val:        "invalid_in_state",
							ignoreCase: true,
							want:       "\"INVALID_IN_STATE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 459, col: 8, offset: 12233},
						run: (*parser).callonStatusCode62,
						expr: &litMatcher{
							pos:        position{line: 459, col: 8, offset: 12233},
							val:        "no_command_response",
							ignoreCase: true,
							want:       "\"NO_COMMAND_RESPONSE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 460, col: 8, offset: 12315},
						run: (*parser).callonStatusCode64,
						expr: &litMatcher{
							pos:        position{line: 460, col: 8, offset: 12315},
							val:        "terms_and_conditions_changed",
							ignoreCase: true,
							want:       "\"TERMS_AND_CONDITIONS_CHANGED\"i",
						},
					},
					&actionExpr{
						pos: position{line: 461, col: 8, offset: 12414},
						run: (*parser).callonStatusCode66,
						expr: &litMatcher{
							pos:        position{line: 461, col: 8, offset: 12414},
							val:        "maintenance_required",
							ignoreCase: true,
							want:       "\"MAINTENANCE_REQUIRED\"i",
						},
					},
				},
			},
		},
		{
			name: "PascalCase",
			pos:  position{line: 466, col: 1, offset: 12496},
			expr: &actionExpr{
				pos: position{line: 466, col: 15, offset: 12510},
				run: (*parser).callonPascalCase1,
				expr: &seqExpr{
					pos: position{line: 466, col: 15, offset: 12510},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 466, col: 15, offset: 12510},
							expr: &ruleRefExpr{
								pos:    position{line: 466, col: 15, offset: 12510},
								offset: 52,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 466, col: 28, offset: 12523},
							expr: &ruleRefExpr{
								pos:    position{line: 466, col: 28, offset: 12523},
								offset: 52,
							},
						},
					},
				},
			},
		},
		{
			name: "Capitalized",
			pos:  position{line: 471, col: 1, offset: 12574},
			expr: &actionExpr{
				pos: position{line: 471, col: 16, offset: 12589},
				run: (*parser).callonCapitalized1,
				expr: &seqExpr{
					pos: position{line: 471, col: 16, offset: 12589},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 471, col: 16, offset: 12589},
							expr: &ruleRefExpr{
								pos:    position{line: 471, col: 16, offset: 12589},
								offset: 53,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 471, col: 27, offset: 12600},
							expr: &ruleRefExpr{
								pos:    position{line: 471, col: 27, offset: 12600},
								offset: 54,
							},
						},
					},
				},
			},
		},
		{
			name: "Uppercase",
			pos:  position{line: 475, col: 1, offset: 12648},
			expr: &actionExpr{
				pos: position{line: 475, col: 14, offset: 12661},
				run: (*parser).callonUppercase1,
				expr: &charClassMatcher{
					pos:        position{line: 475, col: 14, offset: 12661},
					val:        "[A-Z]",
					ranges:     []rune{'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Lowercase",
			pos:  position{line: 479, col: 1, offset: 12704},
			expr: &actionExpr{
				pos: position{line: 479, col: 14, offset: 12717},
				run: (*parser).callonLowercase1,
				expr: &charClassMatcher{
					pos:        position{line: 479, col: 14, offset: 12717},
					val:        "[a-z]",
					ranges:     []rune{'a', 'z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "SameLineString",
			pos:  position{line: 483, col: 1, offset: 12760},
			expr: &actionExpr{
				pos: position{line: 483, col: 19, offset: 12778},
				run: (*parser).callonSameLineString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 483, col: 19, offset: 12778},
					expr: &charClassMatcher{
						pos:        position{line: 483, col: 19, offset: 12778},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 487, col: 1, offset: 12827},
			expr: &zeroOrMoreExpr{
				pos: position{line: 487, col: 19, offset: 12845},
				expr: &charClassMatcher{
					pos:        position{line: 487, col: 19, offset: 12845},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Comma",
			pos:  position{line: 489, col: 1, offset: 12857},
			expr: &litMatcher{
				pos:        position{line: 489, col: 10, offset: 12866},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
		},
		{
			name: "EOF",
			pos:  position{line: 491, col: 1, offset: 12872},
			expr: &notExpr{
				pos: position{line: 491, col: 8, offset: 12879},
				expr: &anyMatcher{
					line: 491, col: 9, offset: 12880,
				},
			},
		},
	},
}

func (c *current) onInput1(conf any) (any, error) {
	cs := conf.([]interface{})

	var set Set
	for _, i := range cs {
		con := i.(Conformance)
		set = append(set, con)
	}
	return set, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["conf"])
}

func (c *current) onConformance2(i, choice any) (any, error) {
	exp := i.(Expression)
	o := &Optional{Expression: exp}
	if choice != nil {
		o.Choice = choice.(*Choice)
	}
	return o, nil
}

func (p *parser) callonConformance2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance2(stack["i"], stack["choice"])
}

func (c *current) onConformance12() (any, error) {
	return &Mandatory{}, nil
}

func (p *parser) callonConformance12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance12()
}

func (c *current) onConformance16(choice any) (any, error) {
	o := &Optional{}
	if choice != nil {
		o.Choice = choice.(*Choice)
	}
	return o, nil
}

func (p *parser) callonConformance16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance16(stack["choice"])
}

func (c *current) onConformance23() (any, error) {
	return &Provisional{}, nil
}

func (p *parser) callonConformance23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance23()
}

func (c *current) onConformance27() (any, error) {
	return &Deprecated{}, nil
}

func (p *parser) callonConformance27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance27()
}

func (c *current) onConformance31() (any, error) {
	return &Disallowed{}, nil
}

func (p *parser) callonConformance31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance31()
}

func (c *current) onConformance35() (any, error) {

	return &Described{}, nil
}

func (p *parser) callonConformance35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance35()
}

func (c *current) onConformance39(eq any) (any, error) {
	exp := eq.(Expression)
	return &Mandatory{Expression: exp}, nil
}

func (p *parser) callonConformance39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance39(stack["eq"])
}

func (c *current) onEquationTerm9(eq any) (any, error) {
	return eq, nil
}

func (p *parser) callonEquationTerm9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquationTerm9(stack["eq"])
}

func (c *current) onEquationValue1(left, rest any) (any, error) {
	if rest == nil {
		return left, nil
	}
	multOps := rest.([]interface{})
	if len(multOps) == 0 {
		return left, nil
	}
	cv := left.(ComparisonValue)
	var mo *MathOperation
	for _, multOp := range multOps {
		mo = multOp.(*MathOperation)
		mo.Left = cv
		cv = mo
	}
	return cv, nil
}

func (p *parser) callonEquationValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquationValue1(stack["left"], stack["rest"])
}

func (c *current) onEquationMultiply1(left, rest any) (any, error) {
	if rest == nil {
		return left, nil
	}
	multOps := rest.([]interface{})
	if len(multOps) == 0 {
		return left, nil
	}
	cv := left.(ComparisonValue)
	var mo *MathOperation
	for _, multOp := range multOps {
		mo = multOp.(*MathOperation)
		mo.Left = cv
		cv = mo
	}
	return cv, nil
}

func (p *parser) callonEquationMultiply1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquationMultiply1(stack["left"], stack["rest"])
}

func (c *current) onAdd1() (any, error) {
	return MathOperandAdd, nil
}

func (p *parser) callonAdd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdd1()
}

func (c *current) onSubtract1() (any, error) {
	return MathOperandSubtract, nil
}

func (p *parser) callonSubtract1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubtract1()
}

func (c *current) onMultiply1() (any, error) {
	return MathOperandMultiply, nil
}

func (p *parser) callonMultiply1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiply1()
}

func (c *current) onDivide1() (any, error) {
	return MathOperandDivide, nil
}

func (p *parser) callonDivide1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivide1()
}

func (c *current) onAddOp1(operand, right any) (any, error) {
	return &MathOperation{
		Operand: operand.(MathOperand),
		Right:   right.(ComparisonValue),
	}, nil
}

func (p *parser) callonAddOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddOp1(stack["operand"], stack["right"])
}

func (c *current) onMultOp1(operand, right any) (any, error) {
	return &MathOperation{
		Operand: operand.(MathOperand),
		Right:   right.(ComparisonValue),
	}, nil
}

func (p *parser) callonMultOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultOp1(stack["operand"], stack["right"])
}

func (c *current) onOr1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	orOps := right.([]any)
	if len(orOps) == 0 {
		return left, nil
	}
	leftCE := left.(Expression)
	return NewLogicalExpression("|", leftCE, orOps)
}

func (p *parser) callonOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOr1(stack["left"], stack["right"])
}

func (c *current) onOrOp1(f any) (any, error) {
	fc := f.(Expression)
	return fc, nil
}

func (p *parser) callonOrOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrOp1(stack["f"])
}

func (c *current) onXor1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	xorOps := right.([]any)
	if len(xorOps) == 0 {
		return left, nil
	}
	leftCE := left.(Expression)
	return NewLogicalExpression("^", leftCE, xorOps)
}

func (p *parser) callonXor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onXor1(stack["left"], stack["right"])
}

func (c *current) onXorOp1(f any) (any, error) {
	fc := f.(Expression)
	return fc, nil
}

func (p *parser) callonXorOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onXorOp1(stack["f"])
}

func (c *current) onAnd1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	addOps := right.([]any)
	if len(addOps) == 0 {
		return left, nil
	}
	leftCE := left.(Expression)
	return NewLogicalExpression("&", leftCE, addOps)
}

func (p *parser) callonAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd1(stack["left"], stack["right"])
}

func (c *current) onAndOp1(f any) (any, error) {
	fc := f.(Expression)
	return fc, nil
}

func (p *parser) callonAndOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndOp1(stack["f"])
}

func (c *current) onLogicalTerm2(not, eq any) (any, error) {
	if not != nil {
		switch eq := eq.(type) {
		case *EqualityExpression:
			eq.Not = true
		case *LogicalExpression:
			eq.Not = true
		}
	}
	return eq, nil
}

func (p *parser) callonLogicalTerm2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalTerm2(stack["not"], stack["eq"])
}

func (c *current) onNumberValue2(val any) (any, error) {
	return NewHexValue(val.(uint64), string(c.text)), nil

}

func (p *parser) callonNumberValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberValue2(stack["val"])
}

func (c *current) onNumberValue5(val any) (any, error) {
	return NewFloatValue(val.(decimal.Decimal), string(c.text)), nil

}

func (p *parser) callonNumberValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberValue5(stack["val"])
}

func (c *current) onNumberValue8(val any) (any, error) {
	return NewIntValue(val.(int64), string(c.text)), nil

}

func (p *parser) callonNumberValue8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberValue8(stack["val"])
}

func (c *current) onBooleanValue1() (any, error) {
	val, err := strconv.ParseBool(string(c.text))
	if err != nil {
		return nil, err
	}
	return NewBooleanValue(val, string(c.text)), nil
}

func (p *parser) callonBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanValue1()
}

func (c *current) onFloat1() (any, error) {
	return decimal.NewFromString(string(c.text))
}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInteger1(sign, digits any) (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1(stack["sign"], stack["digits"])
}

func (c *current) onHex1(hex any) (any, error) {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	return strconv.ParseUint(string(val), 16, 64)
}

func (p *parser) callonHex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1(stack["hex"])
}

func (c *current) onDigits1() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonDigits1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigits1()
}

func (c *current) onNullValue1() (any, error) {
	return NewNullValue(string(c.text)), nil
}

func (p *parser) callonNullValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullValue1()
}

func (c *current) onComparisonOperator2() (any, error) {
	return ComparisonOperatorEqual, nil
}

func (p *parser) callonComparisonOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator2()
}

func (c *current) onComparisonOperator4() (any, error) {
	return ComparisonOperatorNotEqual, nil
}

func (p *parser) callonComparisonOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator4()
}

func (c *current) onComparisonOperator6() (any, error) {
	return ComparisonOperatorLessThanOrEqual, nil
}

func (p *parser) callonComparisonOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator6()
}

func (c *current) onComparisonOperator11() (any, error) {
	return ComparisonOperatorLessThan, nil
}

func (p *parser) callonComparisonOperator11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator11()
}

func (c *current) onComparisonOperator13() (any, error) {
	return ComparisonOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonComparisonOperator13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator13()
}

func (c *current) onComparisonOperator15() (any, error) {
	return ComparisonOperatorGreaterThan, nil
}

func (p *parser) callonComparisonOperator15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator15()
}

func (c *current) onComparisonExpression1(left, op, right any) (any, error) {

	leftVal := left.(ComparisonValue)
	rightVal := right.(ComparisonValue)
	return &ComparisonExpression{Left: leftVal, Right: rightVal, Op: op.(ComparisonOperator)}, nil
}

func (p *parser) callonComparisonExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onIdentifierOp1(not, identifier, field any) (any, error) {
	id := identifier.(string)
	ic := &IdentifierExpression{ID: id}
	if not != nil {
		ic.Not = true
	}
	if field != nil {
		ic.Field = field.(ComparisonValue)
	}
	return ic, nil
}

func (p *parser) callonIdentifierOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierOp1(stack["not"], stack["identifier"], stack["field"])
}

func (c *current) onIdentifierValue1(identifier, field any) (any, error) {

	iv := &IdentifierValue{ID: identifier.(string)}
	if field != nil {
		iv.Field = field.(ComparisonValue)
	}
	return iv, nil
}

func (p *parser) callonIdentifierValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierValue1(stack["identifier"], stack["field"])
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onReferenceOp1(not, reference, label, field any) (any, error) {
	ic := &ReferenceExpression{Reference: reference.(string)}
	if label != nil {
		ic.Label = label.(string)
	}
	if not != nil {
		ic.Not = true
	}
	if field != nil {
		ic.Field = field.(ComparisonValue)
	}
	return ic, nil
}

func (p *parser) callonReferenceOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceOp1(stack["not"], stack["reference"], stack["label"], stack["field"])
}

func (c *current) onReferenceValue1(reference, label, field any) (any, error) {
	ic := &ReferenceValue{Reference: reference.(string)}
	if label != nil {
		ic.Label = label.(string)
	}
	if field != nil {
		ic.Field = field.(ComparisonValue)
	}
	return ic, nil
}

func (p *parser) callonReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceValue1(stack["reference"], stack["label"], stack["field"])
}

func (c *current) onReferenceLabel1(label any) (any, error) {
	return label.(string), nil
}

func (p *parser) callonReferenceLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceLabel1(stack["label"])
}

func (c *current) onReferenceText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceText1()
}

func (c *current) onReferenceId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonReferenceId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceId1()
}

func (c *current) onReferenceField1(field any) (any, error) {
	return field.(ComparisonValue), nil
}

func (p *parser) callonReferenceField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferenceField1(stack["field"])
}

func (c *current) onFeatureOp1(not, feature any) (any, error) {
	id := feature.(string)
	switch id {
	case "O", "M", "P":
		return nil, fmt.Errorf("invalid optional conformance value: %s", id)
	}
	ic := &FeatureExpression{Feature: id}
	if not != nil {
		ic.Not = true
	}
	return ic, nil
}

func (p *parser) callonFeatureOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureOp1(stack["not"], stack["feature"])
}

func (c *current) onFeatureValue1(feature any) (any, error) {
	id := feature.(string)
	switch id {
	case "O", "M", "P":
		return nil, fmt.Errorf("invalid optional conformance value: %s", id)
	}
	ic := &FeatureValue{Feature: id}
	return ic, nil
}

func (p *parser) callonFeatureValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureValue1(stack["feature"])
}

func (c *current) onFeature1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFeature1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeature1()
}

func (c *current) onChoiceRange1(lower, upper any) (any, error) {
	minVal := lower.(int64)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	maxVal := upper.(int64)
	if maxVal <= 0 && minVal > maxVal {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceRangeLimit{Min: minVal, Max: maxVal}, nil
}

func (p *parser) callonChoiceRange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceRange1(stack["lower"], stack["upper"])
}

func (c *current) onChoiceMin1(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMinLimit{Min: 1}, nil
	}
	minVal := limit.(int64)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	return &ChoiceMinLimit{Min: minVal}, nil
}

func (p *parser) callonChoiceMin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceMin1(stack["limit"])
}

func (c *current) onChoiceMax1(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMaxLimit{Max: 1}, nil
	}
	maxVal := limit.(int64)
	if maxVal <= 0 {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceMaxLimit{Max: maxVal}, nil
}

func (p *parser) callonChoiceMax1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceMax1(stack["limit"])
}

func (c *current) onChoiceExact1(limit any) (any, error) {
	exact := limit.(int64)
	if exact <= 0 {
		return nil, fmt.Errorf("invalid exact: %d", exact)
	}
	return &ChoiceExactLimit{Limit: exact}, nil
}

func (p *parser) callonChoiceExact1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceExact1(stack["limit"])
}

func (c *current) onChoiceLimit1(limit any) (any, error) {
	return limit.(ChoiceLimit), nil
}

func (p *parser) callonChoiceLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoiceLimit1(stack["limit"])
}

func (c *current) onSet1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSet1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1()
}

func (c *current) onChoice1(set, limit any) (any, error) {
	choice := &Choice{Set: set.(string)}
	if limit != nil {
		switch v := limit.(type) {
		case ChoiceLimit:
			choice.Limit = v
		default:
			return nil, fmt.Errorf("unexpected choice limit type: %T", limit)
		}
	}
	return choice, nil
}

func (p *parser) callonChoice1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChoice1(stack["set"], stack["limit"])
}

func (c *current) onStatusCodeValue1(status any) (any, error) {
	return NewStatusCodeValue(status.(types.StatusCode), string(c.text)), nil
}

func (p *parser) callonStatusCodeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCodeValue1(stack["status"])
}

func (c *current) onStatusCode2() (any, error) {
	return types.StatusCodeSuccess, nil
}

func (p *parser) callonStatusCode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode2()
}

func (c *current) onStatusCode6() (any, error) {
	return types.StatusCodeFailure, nil
}

func (p *parser) callonStatusCode6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode6()
}

func (c *current) onStatusCode8() (any, error) {
	return types.StatusCodeInvalidSubscription, nil
}

func (p *parser) callonStatusCode8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode8()
}

func (c *current) onStatusCode10() (any, error) {
	return types.StatusCodeUnsupportedAccess, nil
}

func (p *parser) callonStatusCode10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode10()
}

func (c *current) onStatusCode12() (any, error) {
	return types.StatusCodeUnsupportedEndpoint, nil
}

func (p *parser) callonStatusCode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode12()
}

func (c *current) onStatusCode14() (any, error) {
	return types.StatusCodeInvalidAction, nil
}

func (p *parser) callonStatusCode14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode14()
}

func (c *current) onStatusCode16() (any, error) {
	return types.StatusCodeUnsupportedCommand, nil
}

func (p *parser) callonStatusCode16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode16()
}

func (c *current) onStatusCode18() (any, error) {
	return types.StatusCodeInvalidCommand, nil
}

func (p *parser) callonStatusCode18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode18()
}

func (c *current) onStatusCode20() (any, error) {
	return types.StatusCodeUnsupportedAttribute, nil
}

func (p *parser) callonStatusCode20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode20()
}

func (c *current) onStatusCode22() (any, error) {
	return types.StatusCodeConstraintError, nil
}

func (p *parser) callonStatusCode22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode22()
}

func (c *current) onStatusCode24() (any, error) {
	return types.StatusCodeUnsupportedWrite, nil
}

func (p *parser) callonStatusCode24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode24()
}

func (c *current) onStatusCode26() (any, error) {
	return types.StatusCodeResourceExhausted, nil
}

func (p *parser) callonStatusCode26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode26()
}

func (c *current) onStatusCode28() (any, error) {
	return types.StatusCodeNotFound, nil
}

func (p *parser) callonStatusCode28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode28()
}

func (c *current) onStatusCode30() (any, error) {
	return types.StatusCodeUnreportableAttribute, nil
}

func (p *parser) callonStatusCode30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode30()
}

func (c *current) onStatusCode32() (any, error) {
	return types.StatusCodeInvalidDataType, nil
}

func (p *parser) callonStatusCode32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode32()
}

func (c *current) onStatusCode34() (any, error) {
	return types.StatusCodeUnsupportedRead, nil
}

func (p *parser) callonStatusCode34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode34()
}

func (c *current) onStatusCode36() (any, error) {
	return types.StatusCodeDataVersionMismatch, nil
}

func (p *parser) callonStatusCode36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode36()
}

func (c *current) onStatusCode38() (any, error) {
	return types.StatusCodeTimeout, nil
}

func (p *parser) callonStatusCode38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode38()
}

func (c *current) onStatusCode40() (any, error) {
	return types.StatusCodeUnsupportedNode, nil
}

func (p *parser) callonStatusCode40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode40()
}

func (c *current) onStatusCode42() (any, error) {
	return types.StatusCodeBusy, nil
}

func (p *parser) callonStatusCode42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode42()
}

func (c *current) onStatusCode44() (any, error) {
	return types.StatusCodeAccessRestricted, nil
}

func (p *parser) callonStatusCode44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode44()
}

func (c *current) onStatusCode46() (any, error) {
	return types.StatusCodeUnsupportedCluster, nil
}

func (p *parser) callonStatusCode46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode46()
}

func (c *current) onStatusCode48() (any, error) {
	return types.StatusCodeNoUpstreamSubscription, nil
}

func (p *parser) callonStatusCode48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode48()
}

func (c *current) onStatusCode50() (any, error) {
	return types.StatusCodeNeedsTimedInteraction, nil
}

func (p *parser) callonStatusCode50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode50()
}

func (c *current) onStatusCode52() (any, error) {
	return types.StatusCodeUnsupportedEvent, nil
}

func (p *parser) callonStatusCode52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode52()
}

func (c *current) onStatusCode54() (any, error) {
	return types.StatusCodePathsExhausted, nil
}

func (p *parser) callonStatusCode54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode54()
}

func (c *current) onStatusCode56() (any, error) {
	return types.StatusCodeTimedRequestMismatch, nil
}

func (p *parser) callonStatusCode56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode56()
}

func (c *current) onStatusCode58() (any, error) {
	return types.StatusCodeFailsafeRequired, nil
}

func (p *parser) callonStatusCode58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode58()
}

func (c *current) onStatusCode60() (any, error) {
	return types.StatusCodeInvalidInState, nil
}

func (p *parser) callonStatusCode60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode60()
}

func (c *current) onStatusCode62() (any, error) {
	return types.StatusCodeNoCommandResponse, nil
}

func (p *parser) callonStatusCode62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode62()
}

func (c *current) onStatusCode64() (any, error) {
	return types.StatusCodeTermsAndConditionsChanged, nil
}

func (p *parser) callonStatusCode64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode64()
}

func (c *current) onStatusCode66() (any, error) {
	return types.StatusCodeMaintenanceRequired, nil
}

func (p *parser) callonStatusCode66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusCode66()
}

func (c *current) onPascalCase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPascalCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPascalCase1()
}

func (c *current) onCapitalized1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCapitalized1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCapitalized1()
}

func (c *current) onUppercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercase1()
}

func (c *current) onLowercase1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercase1()
}

func (c *current) onSameLineString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSameLineString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSameLineString1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict

	parser *parser // Alchemy patch: we keep a reference to the parent parser here, so inline code can access it
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos position
	val string
	// Alchemy patch: we don't use this optimization, so don't allocate the array
	//basicLatinChars [128]bool
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	offset position // Alchemy patch: we add an offset field to track element positions in the doc
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any // Alchemy patch: we lazily allocate this array, as it's infrequently populated

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
