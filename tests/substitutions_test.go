package tests

import (
	"testing"

	"github.com/hasty/alchemy/asciidoc"
)

func TestSubstitutions(t *testing.T) {
	substitutionsTests.run(t)
}

var substitutionsTests = parseTests{
	
	{ "an externalized footnote macro may contain text formatting", "asciidoctor/substitutions_test_an_externalized_footnote_macro_may_contain_text_formatting.adoc", anExternalizedFootnoteMacroMayContainTextFormatting },
	
	{ "using a footnoteref macro should generate a warning when compat mode is not enabled", "asciidoctor/substitutions_test_using_a_footnoteref_macro_should_generate_a_warning_when_compat_mode_is_not_enabled.adoc", usingAFootnoterefMacroShouldGenerateAWarningWhenCompatModeIsNotEnabled },
	
	{ "should parse multiple footnote references in a single line", "asciidoctor/substitutions_test_should_parse_multiple_footnote_references_in_a_single_line.adoc", shouldParseMultipleFootnoteReferencesInASingleLine },
	
	{ "should not resolve an inline footnote macro missing both id and text", "asciidoctor/substitutions_test_should_not_resolve_an_inline_footnote_macro_missing_both_id_and_text.adoc", shouldNotResolveAnInlineFootnoteMacroMissingBothIdAndText },
	
	{ "inline footnote macro can define a numeric id without conflicting with auto-generated ID", "asciidoctor/substitutions_test_inline_footnote_macro_can_define_a_numeric_id_without_conflicting_with_auto_generated_id.adoc", inlineFootnoteMacroCanDefineANumericIdWithoutConflictingWithAutoGeneratedId },
	
	{ "should be able to reference a bibliography entry in a footnote", "asciidoctor/substitutions_test_should_be_able_to_reference_a_bibliography_entry_in_a_footnote.adoc", shouldBeAbleToReferenceABibliographyEntryInAFootnote },
	
	{ "footnotes in headings are expected to be numbered out of sequence", "asciidoctor/substitutions_test_footnotes_in_headings_are_expected_to_be_numbered_out_of_sequence.adoc", footnotesInHeadingsAreExpectedToBeNumberedOutOfSequence },
	
	{ "a single-line index term macro with a primary term should be registered as an index reference", "asciidoctor/substitutions_test_a_single_line_index_term_macro_with_a_primary_term_should_be_registered_as_an_index_reference.adoc", aSingleLineIndexTermMacroWithAPrimaryTermShouldBeRegisteredAsAnIndexReference },
	
	{ "registers multiple index term macros", "asciidoctor/substitutions_test_registers_multiple_index_term_macros.adoc", registersMultipleIndexTermMacros },
	
	{ "visible shorthand index term macro should not consume leading round bracket", "asciidoctor/substitutions_test_visible_shorthand_index_term_macro_should_not_consume_leading_round_bracket.adoc", visibleShorthandIndexTermMacroShouldNotConsumeLeadingRoundBracket },
	
	{ "index term 2 macro with round bracket syntex should not interfer with index term macro with round bracket syntax", "asciidoctor/substitutions_test_index_term_2_macro_with_round_bracket_syntex_should_not_interfer_with_index_term_macro_with_round_bracket_syntax.adoc", indexTerm2MacroWithRoundBracketSyntexShouldNotInterferWithIndexTermMacroWithRoundBracketSyntax },
	
	{ "should parse concealed shorthand index term with see and seealso", "asciidoctor/substitutions_test_should_parse_concealed_shorthand_index_term_with_see_and_seealso.adoc", shouldParseConcealedShorthandIndexTermWithSeeAndSeealso },
	
	{ "should parse visible index term macro with see and seealso", "asciidoctor/substitutions_test_should_parse_visible_index_term_macro_with_see_and_seealso.adoc", shouldParseVisibleIndexTermMacroWithSeeAndSeealso },
	
	{ "should parse concealed index term macro with see and seealso", "asciidoctor/substitutions_test_should_parse_concealed_index_term_macro_with_see_and_seealso.adoc", shouldParseConcealedIndexTermMacroWithSeeAndSeealso },
	
	{ "replaces dashes", "asciidoctor/substitutions_test_replaces_dashes.adoc", replacesDashes },
	
}


var anExternalizedFootnoteMacroMayContainTextFormatting = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.AttributeEntry{
      Name: "fn-disclaimer",
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "pass:q[footnote:[Only available with an _active_ subscription.]]",
        },
      },
    },
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "You can download patches from the production page.",
    },
    &asciidoc.UserAttributeReference{
      Value: "fn-disclaimer",
    },
    &asciidoc.NewLine{},
  },
}

var usingAFootnoterefMacroShouldGenerateAWarningWhenCompatModeIsNotEnabled = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "You can download the software from the product page.footnote:sub[Option only available if you have an active subscription.]",
    },
    &asciidoc.NewLine{},
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "You can also file a support request.footnote:sub[]",
    },
    &asciidoc.NewLine{},
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "If all else fails, you can give us a call.footnoteref:[sub]",
    },
    &asciidoc.NewLine{},
  },
}

var shouldParseMultipleFootnoteReferencesInASingleLine = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.AttributeEntry{
      Name: "fn-notable-text",
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "footnote:id[about this text]",
        },
      },
    },
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "notable text.",
    },
    &asciidoc.UserAttributeReference{
      Value: "fn-notable-text",
    },
    &asciidoc.NewLine{},
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "more notable text.",
    },
    &asciidoc.UserAttributeReference{
      Value: "fn-notable-text",
    },
    &asciidoc.NewLine{},
  },
}

var shouldNotResolveAnInlineFootnoteMacroMissingBothIdAndText = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "The footnote:[] macro can be used for defining and referencing footnotes.",
    },
    &asciidoc.NewLine{},
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "The footnoteref:[] macro is now deprecated.",
    },
    &asciidoc.NewLine{},
  },
}

var inlineFootnoteMacroCanDefineANumericIdWithoutConflictingWithAutoGeneratedId = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "L'origine du mot forêt",
    },
    &asciidoc.CharacterReplacementReference{
      Value: "blank",
    },
    &asciidoc.String{
      Value: "footnote:forêt[un massif forestier] est complexe.",
    },
    &asciidoc.NewLine{},
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "Qu'est-ce qu'une forêt ?",
    },
    &asciidoc.CharacterReplacementReference{
      Value: "blank",
    },
    &asciidoc.String{
      Value: "footnote:forêt[]",
    },
    &asciidoc.NewLine{},
  },
}

var shouldBeAbleToReferenceABibliographyEntryInAFootnote = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "Choose a design pattern.footnote:[See ",
    },
    &asciidoc.CrossReference{
      Set: nil,
      ID: "gof",
    },
    &asciidoc.String{
      Value: " to find a collection of design patterns.]",
    },
    &asciidoc.NewLine{},
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.Section{
      AttributeList: asciidoc.AttributeList{
        &asciidoc.ShorthandAttribute{
          Style: &asciidoc.ShorthandStyle{
            Val: asciidoc.Set{
              &asciidoc.String{
                Value: "bibliography",
              },
            },
          },
          ID: nil,
          Roles: nil,
          Options: nil,
        },
      },
      Set: asciidoc.Set{
        asciidoc.EmptyLine{
          Text: "",
        },
        &asciidoc.UnorderedListItem{
          Set: asciidoc.Set{
            &asciidoc.String{
              Value: "[",
            },
            &asciidoc.Anchor{
              ID: "gof",
              Set: nil,
            },
            &asciidoc.String{
              Value: "] Erich Gamma, et al. ",
            },
            &asciidoc.Italic{
              AttributeList: nil,
              Set: asciidoc.Set{
                &asciidoc.String{
                  Value: "Design Patterns: Elements of Reusable Object-Oriented Software.",
                },
              },
            },
            &asciidoc.String{
              Value: " Addison-Wesley. 1994.",
            },
          },
          AttributeList: nil,
          Indent: "",
          Marker: "*",
          Checklist: 0,
        },
      },
      Title: asciidoc.Set{
        &asciidoc.String{
          Value: "Bibliography",
        },
      },
      Level: 1,
    },
  },
}

var footnotesInHeadingsAreExpectedToBeNumberedOutOfSequence = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.Section{
      AttributeList: nil,
      Set: asciidoc.Set{
        asciidoc.EmptyLine{
          Text: "",
        },
        &asciidoc.String{
          Value: "para.footnote:[first footnote]",
        },
        &asciidoc.NewLine{},
        asciidoc.EmptyLine{
          Text: "",
        },
      },
      Title: asciidoc.Set{
        &asciidoc.String{
          Value: "Section 1",
        },
      },
      Level: 1,
    },
    &asciidoc.Section{
      AttributeList: nil,
      Set: asciidoc.Set{
        asciidoc.EmptyLine{
          Text: "",
        },
        &asciidoc.String{
          Value: "para.footnote:[third footnote]",
        },
        &asciidoc.NewLine{},
      },
      Title: asciidoc.Set{
        &asciidoc.String{
          Value: "Section 2footnote:[second footnote]",
        },
      },
      Level: 1,
    },
  },
}

var aSingleLineIndexTermMacroWithAPrimaryTermShouldBeRegisteredAsAnIndexReference = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.String{
      Value: "Tigers are big, scary cats.",
    },
    &asciidoc.NewLine{},
    &asciidoc.String{
      Value: "indexterm:[Tigers, \"[Big\\],",
    },
    &asciidoc.NewLine{},
    &asciidoc.String{
      Value: "scary cats\"]",
    },
    &asciidoc.NewLine{},
  },
}

var registersMultipleIndexTermMacros = &asciidoc.Document{
  Set: asciidoc.Set{
    &asciidoc.Paragraph{
      AttributeList: asciidoc.AttributeList{
        &asciidoc.TitleAttribute{
          Val: asciidoc.Set{
            &asciidoc.String{
              Value: "chop",
            },
          },
        },
      },
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "      (text with <indexterm>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <primary>index term</primary>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      </indexterm>index term)",
        },
        &asciidoc.NewLine{},
      },
      Admonition: 0,
    },
  },
}

var visibleShorthandIndexTermMacroShouldNotConsumeLeadingRoundBracket = &asciidoc.Document{
  Set: asciidoc.Set{
    &asciidoc.Paragraph{
      AttributeList: asciidoc.AttributeList{
        &asciidoc.TitleAttribute{
          Val: asciidoc.Set{
            &asciidoc.String{
              Value: "chop",
            },
          },
        },
      },
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "      (<indexterm>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <primary>index term</primary>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      </indexterm>index term for text)",
        },
        &asciidoc.NewLine{},
      },
      Admonition: 0,
    },
  },
}

var indexTerm2MacroWithRoundBracketSyntexShouldNotInterferWithIndexTermMacroWithRoundBracketSyntax = &asciidoc.Document{
  Set: asciidoc.Set{
    &asciidoc.Paragraph{
      AttributeList: asciidoc.AttributeList{
        &asciidoc.TitleAttribute{
          Val: asciidoc.Set{
            &asciidoc.String{
              Value: "chop",
            },
          },
        },
      },
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "      <indexterm>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <primary>Flash</primary>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <see>HTML 5</see>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      </indexterm>",
        },
        &asciidoc.NewLine{},
      },
      Admonition: 0,
    },
  },
}

var shouldParseConcealedShorthandIndexTermWithSeeAndSeealso = &asciidoc.Document{
  Set: asciidoc.Set{
    &asciidoc.Paragraph{
      AttributeList: asciidoc.AttributeList{
        &asciidoc.TitleAttribute{
          Val: asciidoc.Set{
            &asciidoc.String{
              Value: "chop",
            },
          },
        },
      },
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "      <indexterm>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <primary>Flash</primary>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <see>HTML 5</see>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      </indexterm>",
        },
        &asciidoc.NewLine{},
      },
      Admonition: 0,
    },
  },
}

var shouldParseVisibleIndexTermMacroWithSeeAndSeealso = &asciidoc.Document{
  Set: asciidoc.Set{
    &asciidoc.Paragraph{
      AttributeList: asciidoc.AttributeList{
        &asciidoc.TitleAttribute{
          Val: asciidoc.Set{
            &asciidoc.String{
              Value: "chop",
            },
          },
        },
      },
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "      <indexterm>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <primary>Flash</primary>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <see>HTML 5</see>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      </indexterm>",
        },
        &asciidoc.NewLine{},
      },
      Admonition: 0,
    },
  },
}

var shouldParseConcealedIndexTermMacroWithSeeAndSeealso = &asciidoc.Document{
  Set: asciidoc.Set{
    &asciidoc.Paragraph{
      AttributeList: asciidoc.AttributeList{
        &asciidoc.TitleAttribute{
          Val: asciidoc.Set{
            &asciidoc.String{
              Value: "chop",
            },
          },
        },
      },
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "      <indexterm>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <primary>Flash</primary>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      <see>HTML 5</see>",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "      </indexterm>",
        },
        &asciidoc.NewLine{},
      },
      Admonition: 0,
    },
  },
}

var replacesDashes = &asciidoc.Document{
  Set: asciidoc.Set{
    asciidoc.EmptyLine{
      Text: "",
    },
    &asciidoc.UnorderedListItem{
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "foo foo--bar foo\\--bar foo -- bar foo \\-- bar",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "stuff in between",
        },
      },
      AttributeList: nil,
      Indent: "",
      Marker: "--",
      Checklist: 0,
    },
    &asciidoc.UnorderedListItem{
      Set: asciidoc.Set{
        &asciidoc.String{
          Value: "foo",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "stuff in between",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "foo --",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "stuff in between",
        },
        &asciidoc.NewLine{},
        &asciidoc.String{
          Value: "foo --",
        },
      },
      AttributeList: nil,
      Indent: "",
      Marker: "--",
      Checklist: 0,
    },
  },
}


