package tests

import (
	"testing"

	"github.com/project-chip/alchemy/asciidoc"
)

func TestSections(t *testing.T) {
	sectionsTests.run(t)
}

var sectionsTests = parseTests{

	{"synthetic id is generated by default", "asciidoctor/sections_test_synthetic_id_is_generated_by_default.adoc", sectionsTestSyntheticIdIsGeneratedByDefault, nil},

	{"synthetic id removes non-word characters", "asciidoctor/sections_test_synthetic_id_removes_non_word_characters.adoc", sectionsTestSyntheticIdRemovesNonWordCharacters, nil},

	{"synthetic id separator can be set to blank", "asciidoctor/sections_test_synthetic_id_separator_can_be_set_to_blank.adoc", sectionsTestSyntheticIdSeparatorCanBeSetToBlank, nil},

	{"explicit id can be defined using an embedded anchor", "asciidoctor/sections_test_explicit_id_can_be_defined_using_an_embedded_anchor.adoc", sectionsTestExplicitIdCanBeDefinedUsingAnEmbeddedAnchor, nil},

	{"should apply substitutions to title with attribute references when registering section with auto-generated ID", "asciidoctor/sections_test_should_apply_substitutions_to_title_with_attribute_references_when_registering_section_with_auto_generated_id.adoc", sectionsTestShouldApplySubstitutionsToTitleWithAttributeReferencesWhenRegisteringSectionWithAutoGeneratedId, nil},

	{"should apply substitutions to title with attribute references when registering section with explicit ID", "asciidoctor/sections_test_should_apply_substitutions_to_title_with_attribute_references_when_registering_section_with_explicit_id.adoc", sectionsTestShouldApplySubstitutionsToTitleWithAttributeReferencesWhenRegisteringSectionWithExplicitId, nil},

	{"should not apply substitutions to title with attribute references when parsing section with empty ID", "asciidoctor/sections_test_should_not_apply_substitutions_to_title_with_attribute_references_when_parsing_section_with_empty_id.adoc", sectionsTestShouldNotApplySubstitutionsToTitleWithAttributeReferencesWhenParsingSectionWithEmptyId, nil},

	{"title substitutions are applied before generating id", "asciidoctor/sections_test_title_substitutions_are_applied_before_generating_id.adoc", sectionsTestTitleSubstitutionsAreAppliedBeforeGeneratingId, nil},

	{"can set start index of synthetic ids", "asciidoctor/sections_test_can_set_start_index_of_synthetic_ids.adoc", sectionsTestCanSetStartIndexOfSyntheticIds, nil},

	{"should use specified id and reftext when registering section reference", "asciidoctor/sections_test_should_use_specified_id_and_reftext_when_registering_section_reference.adoc", sectionsTestShouldUseSpecifiedIdAndReftextWhenRegisteringSectionReference, nil},

	{"should use specified reftext when registering section reference", "asciidoctor/sections_test_should_use_specified_reftext_when_registering_section_reference.adoc", sectionsTestShouldUseSpecifiedReftextWhenRegisteringSectionReference, nil},

	{"should resolve attribute reference in title using attribute defined at location of section title", "asciidoctor/sections_test_should_resolve_attribute_reference_in_title_using_attribute_defined_at_location_of_section_title.adoc", sectionsTestShouldResolveAttributeReferenceInTitleUsingAttributeDefinedAtLocationOfSectionTitle, nil},

	{"should substitute attributes when registering reftext for section", "asciidoctor/sections_test_should_substitute_attributes_when_registering_reftext_for_section.adoc", sectionsTestShouldSubstituteAttributesWhenRegisteringReftextForSection, nil},

	{"duplicate section id should not overwrite existing section id entry in references table", "asciidoctor/sections_test_duplicate_section_id_should_not_overwrite_existing_section_id_entry_in_references_table.adoc", sectionsTestDuplicateSectionIdShouldNotOverwriteExistingSectionIdEntryInReferencesTable, nil},

	{"should warn if explicit section ID matches auto-generated section ID", "asciidoctor/sections_test_should_warn_if_explicit_section_id_matches_auto_generated_section_id.adoc", sectionsTestShouldWarnIfExplicitSectionIdMatchesAutoGeneratedSectionId, nil},

	{"duplicate block id should not overwrite existing section id entry in references table", "asciidoctor/sections_test_duplicate_block_id_should_not_overwrite_existing_section_id_entry_in_references_table.adoc", sectionsTestDuplicateBlockIdShouldNotOverwriteExistingSectionIdEntryInReferencesTable, nil},

	{"document title with multiline syntax", "asciidoctor/sections_test_document_title_with_multiline_syntax.adoc", sectionsTestDocumentTitleWithMultilineSyntax, nil},

	{"not enough chars for a multiline document title", "asciidoctor/sections_test_not_enough_chars_for_a_multiline_document_title.adoc", sectionsTestNotEnoughCharsForAMultilineDocumentTitle, nil},

	{"should assign id defined using shorthand syntax on document title to body", "asciidoctor/sections_test_should_assign_id_defined_using_shorthand_syntax_on_document_title_to_body.adoc", sectionsTestShouldAssignIdDefinedUsingShorthandSyntaxOnDocumentTitleToBody, nil},

	{"should use ID defined in block attributes instead of ID defined inline", "asciidoctor/sections_test_should_use_id_defined_in_block_attributes_instead_of_id_defined_inline.adoc", sectionsTestShouldUseIdDefinedInBlockAttributesInsteadOfIdDefinedInline, nil},

	{"block id above document title sets id on document", "asciidoctor/sections_test_block_id_above_document_title_sets_id_on_document.adoc", sectionsTestBlockIdAboveDocumentTitleSetsIdOnDocument, nil},

	{"should register document in catalog if id is set", "asciidoctor/sections_test_should_register_document_in_catalog_if_id_is_set.adoc", sectionsTestShouldRegisterDocumentInCatalogIfIdIsSet, nil},

	{"should compute xreftext to document title", "asciidoctor/sections_test_should_compute_xreftext_to_document_title.adoc", sectionsTestShouldComputeXreftextToDocumentTitle, nil},

	{"should not interpret level-0 section as document title if it has a style", "asciidoctor/sections_test_should_not_interpret_level_0_section_as_document_title_if_it_has_a_style.adoc", sectionsTestShouldNotInterpretLevel0SectionAsDocumentTitleIfItHasAStyle, nil},

	{"should discard role and options shorthand attributes defined on document title", "asciidoctor/sections_test_should_discard_role_and_options_shorthand_attributes_defined_on_document_title.adoc", sectionsTestShouldDiscardRoleAndOptionsShorthandAttributesDefinedOnDocumentTitle, nil},

	{"with multiline syntax", "asciidoctor/sections_test_with_multiline_syntax.adoc", sectionsTestWithMultilineSyntax, nil},

	{"should not recognize section title that does not contain alphanumeric character", "asciidoctor/sections_test_should_not_recognize_section_title_that_does_not_contain_alphanumeric_character.adoc", sectionsTestShouldNotRecognizeSectionTitleThatDoesNotContainAlphanumericCharacter, nil},

	{"should not recognize section title that consists of only underscores", "asciidoctor/sections_test_should_not_recognize_section_title_that_consists_of_only_underscores.adoc", sectionsTestShouldNotRecognizeSectionTitleThatConsistsOfOnlyUnderscores, nil},

	{"should preprocess second line of setext section title", "asciidoctor/sections_test_should_preprocess_second_line_of_setext_section_title.adoc", sectionsTestShouldPreprocessSecondLineOfSetextSectionTitle, nil},

	{"heading title with multiline syntax cannot begin with a dot", "asciidoctor/sections_test_heading_title_with_multiline_syntax_cannot_begin_with_a_dot.adoc", sectionsTestHeadingTitleWithMultilineSyntaxCannotBeginWithADot, nil},

	{"should warn if section title is out of sequence", "asciidoctor/sections_test_should_warn_if_section_title_is_out_of_sequence.adoc", sectionsTestShouldWarnIfSectionTitleIsOutOfSequence, nil},

	{"should warn if chapter title is out of sequence", "asciidoctor/sections_test_should_warn_if_chapter_title_is_out_of_sequence.adoc", sectionsTestShouldWarnIfChapterTitleIsOutOfSequence, nil},

	{"should not warn if top-level section title is out of sequence when fragment attribute is set on document", "asciidoctor/sections_test_should_not_warn_if_top_level_section_title_is_out_of_sequence_when_fragment_attribute_is_set_on_document.adoc", sectionsTestShouldNotWarnIfTopLevelSectionTitleIsOutOfSequenceWhenFragmentAttributeIsSetOnDocument, nil},

	{"should warn if nested section title is out of sequence when fragment attribute is set on document", "asciidoctor/sections_test_should_warn_if_nested_section_title_is_out_of_sequence_when_fragment_attribute_is_set_on_document.adoc", sectionsTestShouldWarnIfNestedSectionTitleIsOutOfSequenceWhenFragmentAttributeIsSetOnDocument, nil},

	{"should log error if subsections are found in special sections in article that do not support subsections", "asciidoctor/sections_test_should_log_error_if_subsections_are_found_in_special_sections_in_article_that_do_not_support_subsections.adoc", sectionsTestShouldLogErrorIfSubsectionsAreFoundInSpecialSectionsInArticleThatDoNotSupportSubsections, nil},

	{"should log error if subsections are found in special sections in book that do not support subsections", "asciidoctor/sections_test_should_log_error_if_subsections_are_found_in_special_sections_in_book_that_do_not_support_subsections.adoc", sectionsTestShouldLogErrorIfSubsectionsAreFoundInSpecialSectionsInBookThatDoNotSupportSubsections, nil},

	{"atx document title with leading marker", "asciidoctor/sections_test_atx_document_title_with_leading_marker.adoc", sectionsTestAtxDocumentTitleWithLeadingMarker, nil},

	{"atx section title with symmetric markers", "asciidoctor/sections_test_atx_section_title_with_symmetric_markers.adoc", sectionsTestAtxSectionTitleWithSymmetricMarkers, nil},

	{"should create discrete heading instead of section if style is float", "asciidoctor/sections_test_should_create_discrete_heading_instead_of_section_if_style_is_float.adoc", sectionsTestShouldCreateDiscreteHeadingInsteadOfSectionIfStyleIsFloat, nil},

	{"should create discrete heading instead of section if style is discrete", "asciidoctor/sections_test_should_create_discrete_heading_instead_of_section_if_style_is_discrete.adoc", sectionsTestShouldCreateDiscreteHeadingInsteadOfSectionIfStyleIsDiscrete, nil},

	{"should generate id for discrete heading from converted title", "asciidoctor/sections_test_should_generate_id_for_discrete_heading_from_converted_title.adoc", sectionsTestShouldGenerateIdForDiscreteHeadingFromConvertedTitle, nil},

	{"should create discrete heading if style is float with shorthand role and id", "asciidoctor/sections_test_should_create_discrete_heading_if_style_is_float_with_shorthand_role_and_id.adoc", sectionsTestShouldCreateDiscreteHeadingIfStyleIsFloatWithShorthandRoleAndId, nil},

	{"should create discrete heading if style is discrete with shorthand role and id", "asciidoctor/sections_test_should_create_discrete_heading_if_style_is_discrete_with_shorthand_role_and_id.adoc", sectionsTestShouldCreateDiscreteHeadingIfStyleIsDiscreteWithShorthandRoleAndId, nil},

	{"discrete heading should be a block with context floating_title", "asciidoctor/sections_test_discrete_heading_should_be_a_block_with_context_floating_title.adoc", sectionsTestDiscreteHeadingShouldBeABlockWithContextFloatingTitle, nil},

	{"should preprocess second line of setext discrete heading", "asciidoctor/sections_test_should_preprocess_second_line_of_setext_discrete_heading.adoc", sectionsTestShouldPreprocessSecondLineOfSetextDiscreteHeading, nil},

	{"can assign explicit id to discrete heading", "asciidoctor/sections_test_can_assign_explicit_id_to_discrete_heading.adoc", sectionsTestCanAssignExplicitIdToDiscreteHeading, nil},

	{"should not include discrete heading in toc", "asciidoctor/sections_test_should_not_include_discrete_heading_in_toc.adoc", sectionsTestShouldNotIncludeDiscreteHeadingInToc, nil},

	{"should not set id on discrete heading if sectids attribute is unset", "asciidoctor/sections_test_should_not_set_id_on_discrete_heading_if_sectids_attribute_is_unset.adoc", sectionsTestShouldNotSetIdOnDiscreteHeadingIfSectidsAttributeIsUnset, nil},

	{"should use explicit id for discrete heading if specified", "asciidoctor/sections_test_should_use_explicit_id_for_discrete_heading_if_specified.adoc", sectionsTestShouldUseExplicitIdForDiscreteHeadingIfSpecified, nil},

	{"should add role to class attribute on discrete heading", "asciidoctor/sections_test_should_add_role_to_class_attribute_on_discrete_heading.adoc", sectionsTestShouldAddRoleToClassAttributeOnDiscreteHeading, nil},

	{"should ignore title attribute on discrete heading", "asciidoctor/sections_test_should_ignore_title_attribute_on_discrete_heading.adoc", sectionsTestShouldIgnoreTitleAttributeOnDiscreteHeading, nil},

	{"should use specified id and reftext when registering discrete section reference", "asciidoctor/sections_test_should_use_specified_id_and_reftext_when_registering_discrete_section_reference.adoc", sectionsTestShouldUseSpecifiedIdAndReftextWhenRegisteringDiscreteSectionReference, nil},

	{"should use specified reftext when registering discrete section reference", "asciidoctor/sections_test_should_use_specified_reftext_when_registering_discrete_section_reference.adoc", sectionsTestShouldUseSpecifiedReftextWhenRegisteringDiscreteSectionReference, nil},

	{"should not process inline anchor in discrete heading if explicit ID is assigned", "asciidoctor/sections_test_should_not_process_inline_anchor_in_discrete_heading_if_explicit_id_is_assigned.adoc", sectionsTestShouldNotProcessInlineAnchorInDiscreteHeadingIfExplicitIdIsAssigned, nil},

	{"should print error if standalone document is included without level offset", "asciidoctor/sections_test_should_print_error_if_standalone_document_is_included_without_level_offset.adoc", sectionsTestShouldPrintErrorIfStandaloneDocumentIsIncludedWithoutLevelOffset, nil},

	{"should add level offset to section level", "asciidoctor/sections_test_should_add_level_offset_to_section_level.adoc", sectionsTestShouldAddLevelOffsetToSectionLevel, nil},

	{"level offset should be added to discrete heading", "asciidoctor/sections_test_level_offset_should_be_added_to_discrete_heading.adoc", sectionsTestLevelOffsetShouldBeAddedToDiscreteHeading, nil},

	{"should be able to reset level offset", "asciidoctor/sections_test_should_be_able_to_reset_level_offset.adoc", sectionsTestShouldBeAbleToResetLevelOffset, nil},

	{"should add relative offset value to current leveloffset", "asciidoctor/sections_test_should_add_relative_offset_value_to_current_leveloffset.adoc", sectionsTestShouldAddRelativeOffsetValueToCurrentLeveloffset, nil},

	{"should output section numbers when sectnums attribute is set", "asciidoctor/sections_test_should_output_section_numbers_when_sectnums_attribute_is_set.adoc", sectionsTestShouldOutputSectionNumbersWhenSectnumsAttributeIsSet, nil},

	{"should output section numbers when numbered attribute is set", "asciidoctor/sections_test_should_output_section_numbers_when_numbered_attribute_is_set.adoc", sectionsTestShouldOutputSectionNumbersWhenNumberedAttributeIsSet, nil},

	{"should not crash if child section of part is out of sequence and part numbering is disabled", "asciidoctor/sections_test_should_not_crash_if_child_section_of_part_is_out_of_sequence_and_part_numbering_is_disabled.adoc", sectionsTestShouldNotCrashIfChildSectionOfPartIsOutOfSequenceAndPartNumberingIsDisabled, nil},

	{"should not hang if relative leveloffset attempts to make resolved section level negative", "asciidoctor/sections_test_should_not_hang_if_relative_leveloffset_attempts_to_make_resolved_section_level_negative.adoc", sectionsTestShouldNotHangIfRelativeLeveloffsetAttemptsToMakeResolvedSectionLevelNegative, nil},

	{"should number parts when doctype is book and partnums attributes is set", "asciidoctor/sections_test_should_number_parts_when_doctype_is_book_and_partnums_attributes_is_set.adoc", sectionsTestShouldNumberPartsWhenDoctypeIsBookAndPartnumsAttributesIsSet, nil},

	{"should assign sequential roman numerals to book parts", "asciidoctor/sections_test_should_assign_sequential_roman_numerals_to_book_parts.adoc", sectionsTestShouldAssignSequentialRomanNumeralsToBookParts, nil},

	{"should prepend value of part-signifier attribute to title of numbered part", "asciidoctor/sections_test_should_prepend_value_of_part_signifier_attribute_to_title_of_numbered_part.adoc", sectionsTestShouldPrependValueOfPartSignifierAttributeToTitleOfNumberedPart, nil},

	{"should prepend value of chapter-signifier attribute to title of numbered chapter", "asciidoctor/sections_test_should_prepend_value_of_chapter_signifier_attribute_to_title_of_numbered_chapter.adoc", sectionsTestShouldPrependValueOfChapterSignifierAttributeToTitleOfNumberedChapter, nil},

	{"should allow chapter number to be controlled using chapter-number attribute", "asciidoctor/sections_test_should_allow_chapter_number_to_be_controlled_using_chapter_number_attribute.adoc", sectionsTestShouldAllowChapterNumberToBeControlledUsingChapterNumberAttribute, nil},

	{"blocks should have level", "asciidoctor/sections_test_blocks_should_have_level.adoc", sectionsTestBlocksShouldHaveLevel, nil},

	{"section numbers should not increment when numbered attribute is turned off within document", "asciidoctor/sections_test_section_numbers_should_not_increment_when_numbered_attribute_is_turned_off_within_document.adoc", sectionsTestSectionNumbersShouldNotIncrementWhenNumberedAttributeIsTurnedOffWithinDocument, nil},

	{"section numbers can be toggled even if numbered attribute is enable via the API", "asciidoctor/sections_test_section_numbers_can_be_toggled_even_if_numbered_attribute_is_enable_via_the_api.adoc", sectionsTestSectionNumbersCanBeToggledEvenIfNumberedAttributeIsEnableViaTheApi, nil},

	{"section numbers cannot be toggled even if numbered attribute is disabled via the API", "asciidoctor/sections_test_section_numbers_cannot_be_toggled_even_if_numbered_attribute_is_disabled_via_the_api.adoc", sectionsTestSectionNumbersCannotBeToggledEvenIfNumberedAttributeIsDisabledViaTheApi, nil},

	{"section numbers should not increment until numbered attribute is turned back on", "asciidoctor/sections_test_section_numbers_should_not_increment_until_numbered_attribute_is_turned_back_on.adoc", sectionsTestSectionNumbersShouldNotIncrementUntilNumberedAttributeIsTurnedBackOn, nil},

	{"table with asciidoc content should not disable numbering of subsequent sections", "asciidoctor/sections_test_table_with_asciidoc_content_should_not_disable_numbering_of_subsequent_sections.adoc", sectionsTestTableWithAsciidocContentShouldNotDisableNumberingOfSubsequentSections, nil},

	{"should not number parts when doctype is book", "asciidoctor/sections_test_should_not_number_parts_when_doctype_is_book.adoc", sectionsTestShouldNotNumberPartsWhenDoctypeIsBook, nil},

	{"should number chapters sequentially even when divided into parts", "asciidoctor/sections_test_should_number_chapters_sequentially_even_when_divided_into_parts.adoc", sectionsTestShouldNumberChaptersSequentiallyEvenWhenDividedIntoParts, nil},

	{"reindex_sections should correct section enumeration after sections are modified", "asciidoctor/sections_test_reindex_sections_should_correct_section_enumeration_after_sections_are_modified.adoc", sectionsTestReindexSectionsShouldCorrectSectionEnumerationAfterSectionsAreModified, nil},

	{"should allow sections to be renumbered using numeral or deprecated number property", "asciidoctor/sections_test_should_allow_sections_to_be_renumbered_using_numeral_or_deprecated_number_property.adoc", sectionsTestShouldAllowSectionsToBeRenumberedUsingNumeralOrDeprecatedNumberProperty, nil},

	{"should include anchor if sectanchors document attribute is set", "asciidoctor/sections_test_should_include_anchor_if_sectanchors_document_attribute_is_set.adoc", sectionsTestShouldIncludeAnchorIfSectanchorsDocumentAttributeIsSet, nil},

	{"should position after title text if sectanchors is set to after", "asciidoctor/sections_test_should_position_after_title_text_if_sectanchors_is_set_to_after.adoc", sectionsTestShouldPositionAfterTitleTextIfSectanchorsIsSetToAfter, nil},

	{"should link section if sectlinks document attribute is set", "asciidoctor/sections_test_should_link_section_if_sectlinks_document_attribute_is_set.adoc", sectionsTestShouldLinkSectionIfSectlinksDocumentAttributeIsSet, nil},

	{"should ignore style if it matches sectN", "asciidoctor/sections_test_should_ignore_style_if_it_matches_sect_n.adoc", sectionsTestShouldIgnoreStyleIfItMatchesSectN, nil},

	{"should assign sectname, caption, and numeral to appendix section by default", "asciidoctor/sections_test_should_assign_sectname_caption_and_numeral_to_appendix_section_by_default.adoc", sectionsTestShouldAssignSectnameCaptionAndNumeralToAppendixSectionByDefault, nil},

	{"should not promote level-0 special section in book doctype to document title", "asciidoctor/sections_test_should_not_promote_level_0_special_section_in_book_doctype_to_document_title.adoc", sectionsTestShouldNotPromoteLevel0SpecialSectionInBookDoctypeToDocumentTitle, nil},

	{"should prefix appendix title by numbered label even when section numbering is disabled", "asciidoctor/sections_test_should_prefix_appendix_title_by_numbered_label_even_when_section_numbering_is_disabled.adoc", sectionsTestShouldPrefixAppendixTitleByNumberedLabelEvenWhenSectionNumberingIsDisabled, nil},

	{"should allow appendix number to be controlled using appendix-number attribute", "asciidoctor/sections_test_should_allow_appendix_number_to_be_controlled_using_appendix_number_attribute.adoc", sectionsTestShouldAllowAppendixNumberToBeControlledUsingAppendixNumberAttribute, nil},

	{"should use style from last block attribute line above section that defines a style", "asciidoctor/sections_test_should_use_style_from_last_block_attribute_line_above_section_that_defines_a_style.adoc", sectionsTestShouldUseStyleFromLastBlockAttributeLineAboveSectionThatDefinesAStyle, nil},

	{"setting ID using style shorthand should not clear section style", "asciidoctor/sections_test_setting_id_using_style_shorthand_should_not_clear_section_style.adoc", sectionsTestSettingIdUsingStyleShorthandShouldNotClearSectionStyle, nil},

	{"should use custom appendix caption if specified", "asciidoctor/sections_test_should_use_custom_appendix_caption_if_specified.adoc", sectionsTestShouldUseCustomAppendixCaptionIfSpecified, nil},

	{"should only assign letter to appendix when numbered is enabled and appendix caption is not set", "asciidoctor/sections_test_should_only_assign_letter_to_appendix_when_numbered_is_enabled_and_appendix_caption_is_not_set.adoc", sectionsTestShouldOnlyAssignLetterToAppendixWhenNumberedIsEnabledAndAppendixCaptionIsNotSet, nil},

	{"should increment appendix number for each appendix section", "asciidoctor/sections_test_should_increment_appendix_number_for_each_appendix_section.adoc", sectionsTestShouldIncrementAppendixNumberForEachAppendixSection, nil},

	{"should continue numbering after appendix", "asciidoctor/sections_test_should_continue_numbering_after_appendix.adoc", sectionsTestShouldContinueNumberingAfterAppendix, nil},

	{"should number appendix subsections using appendix letter", "asciidoctor/sections_test_should_number_appendix_subsections_using_appendix_letter.adoc", sectionsTestShouldNumberAppendixSubsectionsUsingAppendixLetter, nil},

	{"should not number level 4 section by default", "asciidoctor/sections_test_should_not_number_level_4_section_by_default.adoc", sectionsTestShouldNotNumberLevel4SectionByDefault, nil},

	{"should only number levels up to value defined by sectnumlevels attribute", "asciidoctor/sections_test_should_only_number_levels_up_to_value_defined_by_sectnumlevels_attribute.adoc", sectionsTestShouldOnlyNumberLevelsUpToValueDefinedBySectnumlevelsAttribute, nil},

	{"should not number sections or subsections in regions where numbered is off", "asciidoctor/sections_test_should_not_number_sections_or_subsections_in_regions_where_numbered_is_off.adoc", sectionsTestShouldNotNumberSectionsOrSubsectionsInRegionsWhereNumberedIsOff, nil},

	{"should not number sections or subsections in toc in regions where numbered is off", "asciidoctor/sections_test_should_not_number_sections_or_subsections_in_toc_in_regions_where_numbered_is_off.adoc", sectionsTestShouldNotNumberSectionsOrSubsectionsInTocInRegionsWhereNumberedIsOff, nil},

	{"should only number sections in toc up to value defined by sectnumlevels attribute", "asciidoctor/sections_test_should_only_number_sections_in_toc_up_to_value_defined_by_sectnumlevels_attribute.adoc", sectionsTestShouldOnlyNumberSectionsInTocUpToValueDefinedBySectnumlevelsAttribute, nil},

	{"should not number special sections or their subsections by default except for appendices", "asciidoctor/sections_test_should_not_number_special_sections_or_their_subsections_by_default_except_for_appendices.adoc", sectionsTestShouldNotNumberSpecialSectionsOrTheirSubsectionsByDefaultExceptForAppendices, nil},

	{"should not number special sections or their subsections in toc by default except for appendices", "asciidoctor/sections_test_should_not_number_special_sections_or_their_subsections_in_toc_by_default_except_for_appendices.adoc", sectionsTestShouldNotNumberSpecialSectionsOrTheirSubsectionsInTocByDefaultExceptForAppendices, nil},

	{"should number special sections and their subsections when sectnums is all", "asciidoctor/sections_test_should_number_special_sections_and_their_subsections_when_sectnums_is_all.adoc", sectionsTestShouldNumberSpecialSectionsAndTheirSubsectionsWhenSectnumsIsAll, nil},

	{"should number special sections and their subsections in toc when sectnums is all", "asciidoctor/sections_test_should_number_special_sections_and_their_subsections_in_toc_when_sectnums_is_all.adoc", sectionsTestShouldNumberSpecialSectionsAndTheirSubsectionsInTocWhenSectnumsIsAll, nil},

	{"level 0 special sections in multipart book should be coerced to level 1", "asciidoctor/sections_test_level_0_special_sections_in_multipart_book_should_be_coerced_to_level_1.adoc", sectionsTestLevel0SpecialSectionsInMultipartBookShouldBeCoercedToLevel1, nil},

	{"should output docbook elements that correspond to special sections in book doctype", "asciidoctor/sections_test_should_output_docbook_elements_that_correspond_to_special_sections_in_book_doctype.adoc", sectionsTestShouldOutputDocbookElementsThatCorrespondToSpecialSectionsInBookDoctype, nil},

	{"abstract section maps to abstract element in docbook for article doctype", "asciidoctor/sections_test_abstract_section_maps_to_abstract_element_in_docbook_for_article_doctype.adoc", sectionsTestAbstractSectionMapsToAbstractElementInDocbookForArticleDoctype, nil},

	{"should allow a special section to be nested at arbitrary depth in DocBook output", "asciidoctor/sections_test_should_allow_a_special_section_to_be_nested_at_arbitrary_depth_in_doc_book_output.adoc", sectionsTestShouldAllowASpecialSectionToBeNestedAtArbitraryDepthInDocBookOutput, nil},

	{"should not interpret a listing block as a heading", "asciidoctor/sections_test_should_not_interpret_a_listing_block_as_a_heading.adoc", sectionsTestShouldNotInterpretAListingBlockAsAHeading, nil},

	{"should not interpret an open block as a heading", "asciidoctor/sections_test_should_not_interpret_an_open_block_as_a_heading.adoc", sectionsTestShouldNotInterpretAnOpenBlockAsAHeading, nil},

	{"should not interpret an attribute list as a heading", "asciidoctor/sections_test_should_not_interpret_an_attribute_list_as_a_heading.adoc", sectionsTestShouldNotInterpretAnAttributeListAsAHeading, nil},

	{"should not match a heading in a description list", "asciidoctor/sections_test_should_not_match_a_heading_in_a_description_list.adoc", sectionsTestShouldNotMatchAHeadingInADescriptionList, nil},

	{"should not match a heading in a bulleted list", "asciidoctor/sections_test_should_not_match_a_heading_in_a_bulleted_list.adoc", sectionsTestShouldNotMatchAHeadingInABulletedList, nil},

	{"should not match a heading in a block", "asciidoctor/sections_test_should_not_match_a_heading_in_a_block.adoc", sectionsTestShouldNotMatchAHeadingInABlock, nil},

	{"should output unnumbered table of contents in header if toc attribute is set", "asciidoctor/sections_test_should_output_unnumbered_table_of_contents_in_header_if_toc_attribute_is_set.adoc", sectionsTestShouldOutputUnnumberedTableOfContentsInHeaderIfTocAttributeIsSet, nil},

	{"should output numbered table of contents in header if toc and numbered attributes are set", "asciidoctor/sections_test_should_output_numbered_table_of_contents_in_header_if_toc_and_numbered_attributes_are_set.adoc", sectionsTestShouldOutputNumberedTableOfContentsInHeaderIfTocAndNumberedAttributesAreSet, nil},

	{"should output a table of contents that honors numbered setting at position of section in document", "asciidoctor/sections_test_should_output_a_table_of_contents_that_honors_numbered_setting_at_position_of_section_in_document.adoc", sectionsTestShouldOutputATableOfContentsThatHonorsNumberedSettingAtPositionOfSectionInDocument, nil},

	{"should not number parts in table of contents for book doctype when numbered attribute is set", "asciidoctor/sections_test_should_not_number_parts_in_table_of_contents_for_book_doctype_when_numbered_attribute_is_set.adoc", sectionsTestShouldNotNumberPartsInTableOfContentsForBookDoctypeWhenNumberedAttributeIsSet, nil},

	{"should output table of contents in header if toc2 attribute is set", "asciidoctor/sections_test_should_output_table_of_contents_in_header_if_toc_2_attribute_is_set.adoc", sectionsTestShouldOutputTableOfContentsInHeaderIfToc2AttributeIsSet, nil},

	{"should set toc position if toc attribute is set to position", "asciidoctor/sections_test_should_set_toc_position_if_toc_attribute_is_set_to_position.adoc", sectionsTestShouldSetTocPositionIfTocAttributeIsSetToPosition, nil},

	{"should set toc position if toc and toc-position attributes are set", "asciidoctor/sections_test_should_set_toc_position_if_toc_and_toc_position_attributes_are_set.adoc", sectionsTestShouldSetTocPositionIfTocAndTocPositionAttributesAreSet, nil},

	{"should set toc position if toc2 and toc-position attribute are set", "asciidoctor/sections_test_should_set_toc_position_if_toc_2_and_toc_position_attribute_are_set.adoc", sectionsTestShouldSetTocPositionIfToc2AndTocPositionAttributeAreSet, nil},

	{"should set toc position if toc attribute is set to direction", "asciidoctor/sections_test_should_set_toc_position_if_toc_attribute_is_set_to_direction.adoc", sectionsTestShouldSetTocPositionIfTocAttributeIsSetToDirection, nil},

	{"should set toc placement to preamble if toc attribute is set to preamble", "asciidoctor/sections_test_should_set_toc_placement_to_preamble_if_toc_attribute_is_set_to_preamble.adoc", sectionsTestShouldSetTocPlacementToPreambleIfTocAttributeIsSetToPreamble, nil},

	{"should use document attributes toc-class, toc-title and toclevels to create toc", "asciidoctor/sections_test_should_use_document_attributes_toc_class_toc_title_and_toclevels_to_create_toc.adoc", sectionsTestShouldUseDocumentAttributesTocClassTocTitleAndToclevelsToCreateToc, nil},

	{"should not output table of contents if toc-placement attribute is unset", "asciidoctor/sections_test_should_not_output_table_of_contents_if_toc_placement_attribute_is_unset.adoc", sectionsTestShouldNotOutputTableOfContentsIfTocPlacementAttributeIsUnset, nil},

	{"should output table of contents at location of toc macro", "asciidoctor/sections_test_should_output_table_of_contents_at_location_of_toc_macro.adoc", sectionsTestShouldOutputTableOfContentsAtLocationOfTocMacro, nil},

	{"should output table of contents at location of toc macro in embedded document", "asciidoctor/sections_test_should_output_table_of_contents_at_location_of_toc_macro_in_embedded_document.adoc", sectionsTestShouldOutputTableOfContentsAtLocationOfTocMacroInEmbeddedDocument, nil},

	{"should output table of contents at default location in embedded document if toc attribute is set", "asciidoctor/sections_test_should_output_table_of_contents_at_default_location_in_embedded_document_if_toc_attribute_is_set.adoc", sectionsTestShouldOutputTableOfContentsAtDefaultLocationInEmbeddedDocumentIfTocAttributeIsSet, nil},

	{"should not activate toc macro if toc-placement is not set", "asciidoctor/sections_test_should_not_activate_toc_macro_if_toc_placement_is_not_set.adoc", sectionsTestShouldNotActivateTocMacroIfTocPlacementIsNotSet, nil},

	{"should only output toc at toc macro if toc is macro", "asciidoctor/sections_test_should_only_output_toc_at_toc_macro_if_toc_is_macro.adoc", sectionsTestShouldOnlyOutputTocAtTocMacroIfTocIsMacro, nil},

	{"should use global attributes for toc-title, toc-class and toclevels for toc macro", "asciidoctor/sections_test_should_use_global_attributes_for_toc_title_toc_class_and_toclevels_for_toc_macro.adoc", sectionsTestShouldUseGlobalAttributesForTocTitleTocClassAndToclevelsForTocMacro, nil},

	{"should honor id, title, role and level attributes on toc macro", "asciidoctor/sections_test_should_honor_id_title_role_and_level_attributes_on_toc_macro.adoc", sectionsTestShouldHonorIdTitleRoleAndLevelAttributesOnTocMacro, nil},

	{"child toc levels should not have additional bullet at parent level in html", "asciidoctor/sections_test_child_toc_levels_should_not_have_additional_bullet_at_parent_level_in_html.adoc", sectionsTestChildTocLevelsShouldNotHaveAdditionalBulletAtParentLevelInHtml, nil},

	{"should not display a table of contents if document has no sections", "asciidoctor/sections_test_should_not_display_a_table_of_contents_if_document_has_no_sections.adoc", sectionsTestShouldNotDisplayATableOfContentsIfDocumentHasNoSections, nil},

	{"should drop anchors from contents of entries in table of contents", "asciidoctor/sections_test_should_drop_anchors_from_contents_of_entries_in_table_of_contents.adoc", sectionsTestShouldDropAnchorsFromContentsOfEntriesInTableOfContents, nil},

	{"should not remove non-anchor tags from contents of entries in table of contents", "asciidoctor/sections_test_should_not_remove_non_anchor_tags_from_contents_of_entries_in_table_of_contents.adoc", sectionsTestShouldNotRemoveNonAnchorTagsFromContentsOfEntriesInTableOfContents, nil},

	{"should create only sections in docbook backend", "asciidoctor/sections_test_should_create_only_sections_in_docbook_backend.adoc", sectionsTestShouldCreateOnlySectionsInDocbookBackend, nil},

	{"document title with level 0 headings", "asciidoctor/sections_test_document_title_with_level_0_headings.adoc", sectionsTestDocumentTitleWithLevel0Headings, nil},

	{"should print error if level 0 section comes after nested section and doctype is not book", "asciidoctor/sections_test_should_print_error_if_level_0_section_comes_after_nested_section_and_doctype_is_not_book.adoc", sectionsTestShouldPrintErrorIfLevel0SectionComesAfterNestedSectionAndDoctypeIsNotBook, nil},

	{"should add class matching role to part", "asciidoctor/sections_test_should_add_class_matching_role_to_part.adoc", sectionsTestShouldAddClassMatchingRoleToPart, nil},

	{"should assign appropriate sectname for section type", "asciidoctor/sections_test_should_assign_appropriate_sectname_for_section_type.adoc", sectionsTestShouldAssignAppropriateSectnameForSectionType, nil},

	{"should allow part intro to be defined using special section", "asciidoctor/sections_test_should_allow_part_intro_to_be_defined_using_special_section.adoc", sectionsTestShouldAllowPartIntroToBeDefinedUsingSpecialSection, nil},

	{"should add partintro style to child paragraph of part", "asciidoctor/sections_test_should_add_partintro_style_to_child_paragraph_of_part.adoc", sectionsTestShouldAddPartintroStyleToChildParagraphOfPart, nil},

	{"should preserve title on partintro defined as partintro paragraph", "asciidoctor/sections_test_should_preserve_title_on_partintro_defined_as_partintro_paragraph.adoc", sectionsTestShouldPreserveTitleOnPartintroDefinedAsPartintroParagraph, nil},

	{"should not promote title on partintro defined as normal paragraph", "asciidoctor/sections_test_should_not_promote_title_on_partintro_defined_as_normal_paragraph.adoc", sectionsTestShouldNotPromoteTitleOnPartintroDefinedAsNormalParagraph, nil},

	{"should add partintro style to child open block of part", "asciidoctor/sections_test_should_add_partintro_style_to_child_open_block_of_part.adoc", sectionsTestShouldAddPartintroStyleToChildOpenBlockOfPart, nil},

	{"should wrap child paragraphs of part in partintro open block", "asciidoctor/sections_test_should_wrap_child_paragraphs_of_part_in_partintro_open_block.adoc", sectionsTestShouldWrapChildParagraphsOfPartInPartintroOpenBlock, nil},

	{"should wrap abstract in implicit part intro in info tag when converting to DocBook", "asciidoctor/sections_test_should_wrap_abstract_in_implicit_part_intro_in_info_tag_when_converting_to_doc_book.adoc", sectionsTestShouldWrapAbstractInImplicitPartIntroInInfoTagWhenConvertingToDocBook, nil},

	{"should wrap abstract in part intro section in info tag when converting to DocBook", "asciidoctor/sections_test_should_wrap_abstract_in_part_intro_section_in_info_tag_when_converting_to_doc_book.adoc", sectionsTestShouldWrapAbstractInPartIntroSectionInInfoTagWhenConvertingToDocBook, nil},

	{"should warn if part has no sections", "asciidoctor/sections_test_should_warn_if_part_has_no_sections.adoc", sectionsTestShouldWarnIfPartHasNoSections, nil},

	{"should create parts and chapters in docbook backend", "asciidoctor/sections_test_should_create_parts_and_chapters_in_docbook_backend.adoc", sectionsTestShouldCreatePartsAndChaptersInDocbookBackend, nil},

	{"subsections in preface and appendix should start at level 2", "asciidoctor/sections_test_subsections_in_preface_and_appendix_should_start_at_level_2.adoc", sectionsTestSubsectionsInPrefaceAndAppendixShouldStartAtLevel2, nil},
}

var sectionsTestSyntheticIdIsGeneratedByDefault = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements:      nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestSyntheticIdRemovesNonWordCharacters = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "idseparator",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "-=-",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements:      nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "This Section Is All You Need",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestSyntheticIdSeparatorCanBeSetToBlank = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "un",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
				&asciidoc.PositionalAttribute{
					Offset:      1,
					ImpliedName: "",
					Val: asciidoc.Elements{
						&asciidoc.String{
							Value: "#one",
						},
					},
				},
			},
			Elements: nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestExplicitIdCanBeDefinedUsingAnEmbeddedAnchor = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "Section Title ",
		},
		&asciidoc.Anchor{
			ID: "refid",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "reftext",
				},
			},
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "-------------------------------",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldApplySubstitutionsToTitleWithAttributeReferencesWhenRegisteringSectionWithAutoGeneratedId = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "foo",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "bar",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "See ",
				},
				&asciidoc.CrossReference{
					AttributeList: nil,
					Elements:      nil,
					ID:            "_section_baz",
					Format:        0,
				},
				&asciidoc.String{
					Value: ".",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "foo",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "baz",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all, folks!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section {foo}",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldApplySubstitutionsToTitleWithAttributeReferencesWhenRegisteringSectionWithExplicitId = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "foo",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "bar",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "See ",
				},
				&asciidoc.CrossReference{
					AttributeList: nil,
					Elements:      nil,
					ID:            "explicit",
					Format:        0,
				},
				&asciidoc.String{
					Value: ".",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "foo",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "baz",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: nil,
							ID: &asciidoc.ShorthandID{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "explicit",
									},
								},
							},
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all, folks!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section {foo}",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotApplySubstitutionsToTitleWithAttributeReferencesWhenParsingSectionWithEmptyId = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "attribute-missing",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "warn",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "[id=]",
				},
				&asciidoc.NewLine{},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all, folks!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section {missing}",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestTitleSubstitutionsAreAppliedBeforeGeneratingId = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "text",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Some section",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "text",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Some section",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestCanSetStartIndexOfSyntheticIds = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "text",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Some section",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "text",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Some section",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldUseSpecifiedIdAndReftextWhenRegisteringSectionReference = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "install",
					},
					Label: asciidoc.Elements{
						&asciidoc.String{
							Value: "Install Procedure",
						},
					},
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldUseSpecifiedReftextWhenRegisteringSectionReference = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.NamedAttribute{
					Name: "reftext",
					Val: asciidoc.Elements{
						&asciidoc.String{
							Value: "Install Procedure",
						},
					},
					Quote: 2,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldResolveAttributeReferenceInTitleUsingAttributeDefinedAtLocationOfSectionTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "platform-id",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "linux",
				},
			},
		},
		&asciidoc.AttributeEntry{
			Name: "platform-name",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Linux",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "install-{platform-id}",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "platform-id",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "win32",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "platform-name",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Windows",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install on {platform-name}",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "install-{platform-id}",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install on {platform-name}",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldSubstituteAttributesWhenRegisteringReftextForSection = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "platform-name",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "n/a",
				},
			},
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "platform-name",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Linux",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Overview",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "install",
					},
					Label: asciidoc.Elements{
						&asciidoc.String{
							Value: "install on ",
						},
						&asciidoc.UserAttributeReference{
							Value: "platform-name",
						},
					},
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestDuplicateSectionIdShouldNotOverwriteExistingSectionIdEntryInReferencesTable = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "install",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "First Install",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "install",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Second Install",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldWarnIfExplicitSectionIdMatchesAutoGeneratedSectionId = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Do Not Repeat Yourself",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "_do_not_repeat_yourself",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Do Not Repeat Yourself",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestDuplicateBlockIdShouldNotOverwriteExistingSectionIdEntryInReferencesTable = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "install",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: nil,
							ID: &asciidoc.ShorthandID{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "install",
									},
								},
							},
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "First Install",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestDocumentTitleWithMultilineSyntax = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "AsciiDoc Writer’s Guide",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "=======================",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "Author Name",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "preamble",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestNotEnoughCharsForAMultilineDocumentTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "idname",
					},
					Label: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAssignIdDefinedUsingShorthandSyntaxOnDocumentTitleToBody = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "idname",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldUseIdDefinedInBlockAttributesInsteadOfIdDefinedInline = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "idname-block",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title [[idname-inline]]",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestBlockIdAboveDocumentTitleSetsIdOnDocument = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "reference",
					},
					Label: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "css-signature",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "refguide",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "preamble",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Reference Manual",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldRegisterDocumentInCatalogIfIdIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "manual",
					},
					Label: asciidoc.Elements{
						&asciidoc.String{
							Value: "Manual",
						},
					},
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "preamble",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Reference Manual",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldComputeXreftextToDocumentTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "manual",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "xrefstyle",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "full",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "This is the ",
				},
				&asciidoc.CrossReference{
					AttributeList: nil,
					Elements:      nil,
					ID:            "manual",
					Format:        0,
				},
				&asciidoc.String{
					Value: ".",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Reference Manual",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotInterpretLevel0SectionAsDocumentTitleIfItHasAStyle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldDiscardRoleAndOptionsShorthandAttributesDefinedOnDocumentTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "idname",
							},
						},
					},
					Roles: []*asciidoc.ShorthandRole{
						&asciidoc.ShorthandRole{
							Elements: asciidoc.Elements{
								&asciidoc.String{
									Value: "rolename",
								},
							},
						},
					},
					Options: []*asciidoc.ShorthandOption{
						&asciidoc.ShorthandOption{
							Elements: asciidoc.Elements{
								&asciidoc.String{
									Value: "optionname",
								},
							},
						},
					},
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestWithMultilineSyntax = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "My Section",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "----^^----",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldNotRecognizeSectionTitleThatDoesNotContainAlphanumericCharacter = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "!@#$",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "----",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldNotRecognizeSectionTitleThatConsistsOfOnlyUnderscores = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "____",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "----",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldPreprocessSecondLineOfSetextSectionTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "Section Title",
		},
		&asciidoc.NewLine{},
		&asciidoc.IfDef{
			Attributes: asciidoc.AttributeNames{
				"asciidoctor",
			},
			Union:  0,
			Inline: false,
		},
		&asciidoc.String{
			Value: "-------------",
		},
		&asciidoc.NewLine{},
		&asciidoc.EndIf{
			Attributes: nil,
			Union:      0,
		},
	},
}

var sectionsTestHeadingTitleWithMultilineSyntaxCannotBeginWithADot = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "视图",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "--",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "content",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "连接器",
		},
		&asciidoc.NewLine{},
		&asciidoc.ThematicBreak{
			AttributeList: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "content",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldWarnIfSectionTitleIsOutOfSequence = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "content",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Nested Section",
								},
							},
							Level: 3,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section A",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section B",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldWarnIfChapterTitleIsOutOfSequence = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Not a Chapter",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotWarnIfTopLevelSectionTitleIsOutOfSequenceWhenFragmentAttributeIsSetOnDocument = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "First Section",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldWarnIfNestedSectionTitleIsOutOfSequenceWhenFragmentAttributeIsSetOnDocument = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements:      nil,
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Nested Section",
								},
							},
							Level: 4,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "First Section",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldLogErrorIfSubsectionsAreFoundInSpecialSectionsInArticleThatDoNotSupportSubsections = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "allowed",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection of Section",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "appendix",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "allowed",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection of Appendix",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Appendix",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "glossary",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "not allowed",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection of Glossary",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Glossary",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "bibliography",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "not allowed",
								},
								&asciidoc.NewLine{},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection of Bibliography",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Bibliography",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldLogErrorIfSubsectionsAreFoundInSpecialSectionsInBookThatDoNotSupportSubsections = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "allowed",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Subsection of Preface",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "colophon",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "not allowed",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Subsection of Colophon",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Colophon",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "dedication",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "not allowed",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Subsection of Dedication",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Dedication",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "abstract",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "allowed",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection of Abstract",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Abstract",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "allowed",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection of Chapter",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "allowed",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Subsection of Appendix",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Appendix",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "not allowed",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Subsection of Glossary",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "bibliography",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "not allowed",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Subsection of Bibliography",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Bibliography",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestAtxDocumentTitleWithLeadingMarker = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "## Section One",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "blah blah",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestAtxSectionTitleWithSymmetricMarkers = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "## Section One ##",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "blah blah",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldCreateDiscreteHeadingInsteadOfSectionIfStyleIsFloat = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldCreateDiscreteHeadingInsteadOfSectionIfStyleIsDiscrete = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 2,
		},
	},
}

var sectionsTestShouldGenerateIdForDiscreteHeadingFromConvertedTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "{sp}Heading{sp}",
				},
			},
			Level: 2,
		},
	},
}

var sectionsTestShouldCreateDiscreteHeadingIfStyleIsFloatWithShorthandRoleAndId = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "first",
							},
						},
					},
					Roles: []*asciidoc.ShorthandRole{
						&asciidoc.ShorthandRole{
							Elements: asciidoc.Elements{
								&asciidoc.String{
									Value: "independent",
								},
							},
						},
					},
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldCreateDiscreteHeadingIfStyleIsDiscreteWithShorthandRoleAndId = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "first",
							},
						},
					},
					Roles: []*asciidoc.ShorthandRole{
						&asciidoc.ShorthandRole{
							Elements: asciidoc.Elements{
								&asciidoc.String{
									Value: "independent",
								},
							},
						},
					},
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestDiscreteHeadingShouldBeABlockWithContextFloatingTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 2,
		},
	},
}

var sectionsTestShouldPreprocessSecondLineOfSetextDiscreteHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Paragraph{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Heading Title",
				},
				&asciidoc.NewLine{},
			},
			Admonition: 0,
		},
		&asciidoc.IfDef{
			Attributes: asciidoc.AttributeNames{
				"asciidoctor",
			},
			Union:  0,
			Inline: false,
		},
		&asciidoc.String{
			Value: "-------------",
		},
		&asciidoc.NewLine{},
		&asciidoc.EndIf{
			Attributes: nil,
			Union:      0,
		},
	},
}

var sectionsTestCanAssignExplicitIdToDiscreteHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "unchained",
					},
					Label: nil,
				},
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 2,
		},
	},
}

var sectionsTestShouldNotIncludeDiscreteHeadingInToc = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "toc",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "float",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Miss Independent",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements:      nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section Two",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotSetIdOnDiscreteHeadingIfSectidsAttributeIsUnset = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 2,
		},
	},
}

var sectionsTestShouldUseExplicitIdForDiscreteHeadingIfSpecified = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "free",
					},
					Label: nil,
				},
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldAddRoleToClassAttributeOnDiscreteHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
				&asciidoc.NamedAttribute{
					Name: "role",
					Val: asciidoc.Elements{
						&asciidoc.String{
							Value: "isolated",
						},
					},
					Quote: 2,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldIgnoreTitleAttributeOnDiscreteHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
				&asciidoc.NamedAttribute{
					Name: "title",
					Val: asciidoc.Elements{
						&asciidoc.String{
							Value: "Captured!",
						},
					},
					Quote: 2,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "not in section",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Independent Heading!",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldUseSpecifiedIdAndReftextWhenRegisteringDiscreteSectionReference = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.AnchorAttribute{
					ID: &asciidoc.String{
						Value: "install",
					},
					Label: asciidoc.Elements{
						&asciidoc.String{
							Value: "Install Procedure",
						},
					},
				},
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldUseSpecifiedReftextWhenRegisteringDiscreteSectionReference = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.NamedAttribute{
					Name: "reftext",
					Val: asciidoc.Elements{
						&asciidoc.String{
							Value: "Install Procedure",
						},
					},
					Quote: 2,
				},
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotProcessInlineAnchorInDiscreteHeadingIfExplicitIdIsAssigned = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "discrete",
							},
						},
					},
					ID: &asciidoc.ShorthandID{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "install",
							},
						},
					},
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Install [[installation]]",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldPrintErrorIfStandaloneDocumentIsIncludedWithoutLevelOffset = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "text in main document",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.SingleLineComment{
					Value: " begin simulated include::[]",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Main Document",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "author",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Junior Writer",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "text in standalone document",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.SingleLineComment{
					Value: " end simulated include::[]",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Standalone Document",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAddLevelOffsetToSectionLevel = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Main document written by ",
				},
				&asciidoc.UserAttributeReference{
					Value: "author",
				},
				&asciidoc.String{
					Value: ".",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "leveloffset",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.SingleLineComment{
					Value: " begin simulated include::[]",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Main Document",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "author",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Junior Writer",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Standalone document written by ",
				},
				&asciidoc.UserAttributeReference{
					Value: "author",
				},
				&asciidoc.String{
					Value: ".",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Standalone section text.",
						},
						&asciidoc.NewLine{},
						&asciidoc.SingleLineComment{
							Value: " end simulated include::[]",
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.AttributeReset{
							Name: "leveloffset",
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section in Standalone",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Main section text.",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section in Main",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Standalone Document",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestLevelOffsetShouldBeAddedToDiscreteHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "leveloffset",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Main Document",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "float",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Discrete Heading",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldBeAbleToResetLevelOffset = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Main preamble.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "leveloffset",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Main Document",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Standalone preamble.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeReset{
					Name: "leveloffset",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Level 1 Section",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Standalone Document",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAddRelativeOffsetValueToCurrentLeveloffset = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Main preamble.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "leveloffset",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Main Document",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeEntry{
					Name: "leveloffset",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "+1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Chapter 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Standalone Section",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputSectionNumbersWhenSectnumsAttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "sectnums",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "text",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "text",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
										&asciidoc.String{
											Value: "text",
										},
										&asciidoc.NewLine{},
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section_1_1_1",
										},
									},
									Level: 3,
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section_1_1",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section_1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "text",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "text",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section_2_1",
								},
							},
							Level: 2,
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "text",
								},
								&asciidoc.NewLine{},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section_2_2",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section_2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputSectionNumbersWhenNumberedAttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "text",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "text",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
										&asciidoc.String{
											Value: "text",
										},
										&asciidoc.NewLine{},
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section_1_1_1",
										},
									},
									Level: 3,
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section_1_1",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section_1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "text",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "text",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section_2_1",
								},
							},
							Level: 2,
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "text",
								},
								&asciidoc.NewLine{},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section_2_2",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section_2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotCrashIfChildSectionOfPartIsOutOfSequenceAndPartNumberingIsDisabled = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "sectnums",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Out of Sequence Section",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotHangIfRelativeLeveloffsetAttemptsToMakeResolvedSectionLevelNegative = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "leveloffset",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "-1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter Title",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNumberPartsWhenDoctypeIsBookAndPartnumsAttributesIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "sectnums",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "partnums",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Syntax",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Language",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "CLI",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Processor",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAssignSequentialRomanNumeralsToBookParts = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "sectnums",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "partnums",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "part intro",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "First Chapter",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "First Part",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "part intro",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Second Chapter",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Second Part",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldPrependValueOfPartSignifierAttributeToTitleOfNumberedPart = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "sectnums",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "partnums",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "part-signifier",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Part",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Syntax",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Language",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "CLI",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Processor",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldPrependValueOfChapterSignifierAttributeToTitleOfNumberedChapter = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "sectnums",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "partnums",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "chapter-signifier",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Syntax",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Language",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "CLI",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Processor",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAllowChapterNumberToBeControlledUsingChapterNumberAttribute = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "sectnums",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "chapter-signifier",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "chapter-number",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "9",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Not the Beginning",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Maybe the End",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestBlocksShouldHaveLevel = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "preamble",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "paragraph",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "paragraph",
								},
								&asciidoc.NewLine{},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section 1.1",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestSectionNumbersShouldNotIncrementWhenNumberedAttributeIsTurnedOffWithinDocument = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeReset{
					Name: "numbered",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Another Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.AttributeEntry{
							Name:     "numbered",
							Elements: nil,
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Final Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section One Subsection",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestSectionNumbersCanBeToggledEvenIfNumberedAttributeIsEnableViaTheApi = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeReset{
					Name: "numbered",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Another Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.AttributeEntry{
							Name:     "numbered",
							Elements: nil,
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Final Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section One Subsection",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestSectionNumbersCannotBeToggledEvenIfNumberedAttributeIsDisabledViaTheApi = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeReset{
					Name: "numbered",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Another Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.AttributeEntry{
							Name:     "numbered",
							Elements: nil,
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Final Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section One Subsection",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestSectionNumbersShouldNotIncrementUntilNumberedAttributeIsTurnedBackOn = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeReset{
					Name: "numbered",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Another Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.AttributeEntry{
							Name:     "numbered",
							Elements: nil,
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Final Colophon Section",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section One Subsection",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestTableWithAsciidocContentShouldNotDisableNumberingOfSubsequentSections = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "preamble",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Table{
							AttributeList: nil,
							ColumnCount:   1,
							Elements: asciidoc.Elements{
								&asciidoc.TableRow{
									Elements: asciidoc.Elements{
										&asciidoc.TableCell{
											Format: &asciidoc.TableCellFormat{
												Multiplier: asciidoc.Optional[int]{
													Value: 1,
													IsSet: false,
												},
												Span: asciidoc.TableCellSpan{
													Column: asciidoc.Optional[int]{
														Value: 1,
														IsSet: false,
													},
													Row: asciidoc.Optional[int]{
														Value: 1,
														IsSet: false,
													},
												},
												HorizontalAlign: asciidoc.Optional[asciidoc.TableCellHorizontalAlign]{
													Value: 0,
													IsSet: false,
												},
												VerticalAlign: asciidoc.Optional[asciidoc.TableCellVerticalAlign]{
													Value: 0,
													IsSet: false,
												},
												Style: asciidoc.Optional[asciidoc.TableCellStyle]{
													Value: 1,
													IsSet: true,
												},
											},
											Elements: asciidoc.Elements{
												&asciidoc.String{
													Value: "content",
												},
											},
											Blank: false,
										},
									},
								},
							},
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotNumberPartsWhenDoctypeIsBook = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 2",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNumberChaptersSequentiallyEvenWhenDividedIntoParts = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 3",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 4",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 2",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestReindexSectionsShouldCorrectSectionEnumerationAfterSectionsAreModified = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "sectnums",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "First Section",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Last Section",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldAllowSectionsToBeRenumberedUsingNumeralOrDeprecatedNumberProperty = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Somewhere in the Middle",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "A Bit Later",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Nearing the End",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements:      nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "The End",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldIncludeAnchorIfSectanchorsDocumentAttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Installation section.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Linux installation instructions.",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Linux",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Installation",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldPositionAfterTitleTextIfSectanchorsIsSetToAfter = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Installation section.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Linux installation instructions.",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Linux",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Installation",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldLinkSectionIfSectlinksDocumentAttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Installation section.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Linux installation instructions.",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Linux",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Installation",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldIgnoreStyleIfItMatchesSectN = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "sect1",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Level 1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "sect2",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Level 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAssignSectnameCaptionAndNumeralToAppendixSectionByDefault = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotPromoteLevel0SpecialSectionInBookDoctypeToDocumentTitle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "doctype",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "book",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Installation details here.",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Installation",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldPrefixAppendixTitleByNumberedLabelEvenWhenSectionNumberingIsDisabled = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldAllowAppendixNumberToBeControlledUsingAppendixNumberAttribute = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "appendix-number",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "α",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "All the Other Stuff",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldUseStyleFromLastBlockAttributeLineAboveSectionThatDefinesAStyle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
				&asciidoc.PositionalAttribute{
					Offset:      1,
					ImpliedName: "",
					Val: asciidoc.Elements{
						&asciidoc.String{
							Value: "appendix",
						},
					},
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestSettingIdUsingStyleShorthandShouldNotClearSectionStyle = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
				&asciidoc.PositionalAttribute{
					Offset:      1,
					ImpliedName: "",
					Val: asciidoc.Elements{
						&asciidoc.String{
							Value: "#attribute-options",
						},
					},
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldUseCustomAppendixCaptionIfSpecified = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "appendix-caption",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "App",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldOnlyAssignLetterToAppendixWhenNumberedIsEnabledAndAppendixCaptionIsNotSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.AttributeReset{
			Name: "appendix-caption",
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldIncrementAppendixNumberForEachAppendixSection = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldContinueNumberingAfterAppendix = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "First Section",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNumberAppendixSubsectionsUsingAppendixLetter = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Details",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Optional Attributes",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotNumberLevel4SectionByDefault = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
										&asciidoc.String{
											Value: "text",
										},
										&asciidoc.NewLine{},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Level_4",
										},
									},
									Level: 4,
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Level_3",
								},
							},
							Level: 3,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Level_2",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Level_1",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldOnlyNumberLevelsUpToValueDefinedBySectnumlevelsAttribute = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.AttributeEntry{
			Name: "sectnumlevels",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "2",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
										&asciidoc.String{
											Value: "text",
										},
										&asciidoc.NewLine{},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Level_4",
										},
									},
									Level: 4,
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Level_3",
								},
							},
							Level: 3,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Level_2",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Level_1",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotNumberSectionsOrSubsectionsInRegionsWhereNumberedIsOff = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeReset{
					Name: "numbered",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Details",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Gotchas",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Terms",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotNumberSectionsOrSubsectionsInTocInRegionsWhereNumberedIsOff = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.AttributeEntry{
			Name:     "toc",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.AttributeReset{
					Name: "numbered",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Details",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Gotchas",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Terms",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldOnlyNumberSectionsInTocUpToValueDefinedBySectnumlevelsAttribute = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name:     "numbered",
			Elements: nil,
		},
		&asciidoc.AttributeEntry{
			Name:     "toc",
			Elements: nil,
		},
		&asciidoc.AttributeEntry{
			Name: "sectnumlevels",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "2",
				},
			},
		},
		&asciidoc.AttributeEntry{
			Name: "toclevels",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "3",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements:      nil,
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Level 3",
								},
							},
							Level: 3,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Level 2",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Level 1",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotNumberSpecialSectionsOrTheirSubsectionsByDefaultExceptForAppendices = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "doctype",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "book",
				},
			},
		},
		&asciidoc.AttributeEntry{
			Name:     "sectnums",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Preface Subsection",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Details",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Gotchas",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Terms",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNotNumberSpecialSectionsOrTheirSubsectionsInTocByDefaultExceptForAppendices = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "doctype",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "book",
				},
			},
		},
		&asciidoc.AttributeEntry{
			Name:     "sectnums",
			Elements: nil,
		},
		&asciidoc.AttributeEntry{
			Name:     "toc",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Preface Subsection",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Details",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Gotchas",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Terms",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNumberSpecialSectionsAndTheirSubsectionsWhenSectnumsIsAll = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "doctype",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "book",
				},
			},
		},
		&asciidoc.AttributeEntry{
			Name: "sectnums",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "all",
				},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Preface Subsection",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Details",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Gotchas",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Terms",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestShouldNumberSpecialSectionsAndTheirSubsectionsInTocWhenSectnumsIsAll = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.AttributeEntry{
			Name: "doctype",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "book",
				},
			},
		},
		&asciidoc.AttributeEntry{
			Name: "sectnums",
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "all",
				},
			},
		},
		&asciidoc.AttributeEntry{
			Name:     "toc",
			Elements: nil,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Preface Subsection",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Section One",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Attribute Options",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Details",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Details",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Gotchas",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Migration",
				},
			},
			Level: 1,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Terms",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary",
				},
			},
			Level: 1,
		},
	},
}

var sectionsTestLevel0SpecialSectionsInMultipartBookShouldBeCoercedToLevel1 = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Multipart Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Preface text",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Appendix text",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Appendix",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputDocbookElementsThatCorrespondToSpecialSectionsInBookDoctype = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "idprefix",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Multipart Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "abstract",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Normal chapter (no abstract in book)",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Abstract Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "dedication",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Dedication content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Dedication Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Preface content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Preface subsection content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Preface sub-section",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
						&asciidoc.TitleAttribute{
							Val: asciidoc.Elements{
								&asciidoc.String{
									Value: "Part intro title",
								},
							},
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Part intro content",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "blah blah",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "blah blah",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "blah blah",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "blah blah",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 3",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "blah blah",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 4",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 2",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Appendix content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Appendix sub-section content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Appendix sub-section",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Appendix Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "bibliography",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Bibliography content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Bibliography Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "glossary",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Glossary content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Glossary Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "colophon",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Colophon content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Colophon Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "index",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Index Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestAbstractSectionMapsToAbstractElementInDocbookForArticleDoctype = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "idprefix",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "abstract",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Abstract content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Abstract Title",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAllowASpecialSectionToBeNestedAtArbitraryDepthInDocBookOutput = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: asciidoc.AttributeList{
								&asciidoc.ShorthandAttribute{
									Style: &asciidoc.ShorthandStyle{
										Elements: asciidoc.Elements{
											&asciidoc.String{
												Value: "glossary",
											},
										},
									},
									ID:      nil,
									Roles:   nil,
									Options: nil,
								},
							},
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "Glossaries are optional.",
								},
								&asciidoc.NewLine{},
								&asciidoc.String{
									Value: "Glossaries entries are an example of a style of AsciiDoc description lists.",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.DescriptionListItem{
									Elements: asciidoc.Elements{
										&asciidoc.NewLine{},
										&asciidoc.String{
											Value: "The corresponding definition.",
										},
									},
									AttributeList: asciidoc.AttributeList{
										&asciidoc.ShorthandAttribute{
											Style: &asciidoc.ShorthandStyle{
												Elements: asciidoc.Elements{
													&asciidoc.String{
														Value: "glossary",
													},
												},
											},
											ID:      nil,
											Roles:   nil,
											Options: nil,
										},
									},
									Marker: "::",
									Term: asciidoc.Elements{
										&asciidoc.String{
											Value: "A glossary term",
										},
									},
								},
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.DescriptionListItem{
									Elements: asciidoc.Elements{
										&asciidoc.NewLine{},
										&asciidoc.String{
											Value: "The corresponding definition.",
										},
									},
									AttributeList: nil,
									Marker:        "::",
									Term: asciidoc.Elements{
										&asciidoc.String{
											Value: "A second glossary term",
										},
									},
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Glossary A",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Glossaries",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotInterpretAListingBlockAsAHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "Section",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "-------",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Listing{
			AttributeList: nil,
			Delimiter: asciidoc.Delimiter{
				Type:   5,
				Length: 4,
			},
			LineList: asciidoc.LineList{
				"code",
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "fin.",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldNotInterpretAnOpenBlockAsAHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "Section",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "-------",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.OpenBlock{
			AttributeList: nil,
			Delimiter: asciidoc.Delimiter{
				Type:   7,
				Length: 2,
			},
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "ha",
				},
				&asciidoc.NewLine{},
			},
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "fin.",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldNotInterpretAnAttributeListAsAHeading = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "Section",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "=======",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "preamble",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.ExampleBlock{
			Delimiter: asciidoc.Delimiter{
				Type:   3,
				Length: 4,
			},
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "TIP",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "This should be a tip, not a heading.",
				},
				&asciidoc.NewLine{},
			},
		},
	},
}

var sectionsTestShouldNotMatchAHeadingInADescriptionList = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "Section",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "-------",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.DescriptionListItem{
			Elements: asciidoc.Elements{
				&asciidoc.NewLine{},
				&asciidoc.LineBreak{},
			},
			AttributeList: nil,
			Marker:        "::",
			Term: asciidoc.Elements{
				&asciidoc.String{
					Value: "term",
				},
				&asciidoc.String{
					Value: "1",
				},
			},
		},
		&asciidoc.Listing{
			AttributeList: nil,
			Delimiter: asciidoc.Delimiter{
				Type:   5,
				Length: 4,
			},
			LineList: asciidoc.LineList{
				"list = [1, 2, 3];",
			},
		},
		&asciidoc.DescriptionListItem{
			Elements: asciidoc.Elements{
				&asciidoc.NewLine{},
				&asciidoc.String{
					Value: "== not a heading",
				},
			},
			AttributeList: nil,
			Marker:        "::",
			Term: asciidoc.Elements{
				&asciidoc.String{
					Value: "term",
				},
				&asciidoc.String{
					Value: "2",
				},
			},
		},
		&asciidoc.String{
			Value: "term3:: def",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.SingleLineComment{
			Value: "",
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "fin.",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldNotMatchAHeadingInABulletedList = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "Section",
		},
		&asciidoc.NewLine{},
		&asciidoc.String{
			Value: "-------",
		},
		&asciidoc.NewLine{},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.UnorderedListItem{
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "first",
				},
				&asciidoc.NewLine{},
				&asciidoc.LineBreak{},
			},
			AttributeList: nil,
			Indent:        "",
			Marker:        "*",
			Checklist:     0,
		},
		&asciidoc.Listing{
			AttributeList: nil,
			Delimiter: asciidoc.Delimiter{
				Type:   5,
				Length: 4,
			},
			LineList: asciidoc.LineList{
				"list = [1, 2, 3];",
			},
		},
		&asciidoc.LineBreak{},
		&asciidoc.NewLine{},
		&asciidoc.UnorderedListItem{
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "second",
				},
				&asciidoc.NewLine{},
				&asciidoc.String{
					Value: "== not a heading",
				},
			},
			AttributeList: nil,
			Indent:        "",
			Marker:        "*",
			Checklist:     0,
		},
		&asciidoc.UnorderedListItem{
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "third",
				},
			},
			AttributeList: nil,
			Indent:        "",
			Marker:        "*",
			Checklist:     0,
		},
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.String{
			Value: "fin.",
		},
		&asciidoc.NewLine{},
	},
}

var sectionsTestShouldNotMatchAHeadingInABlock = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.ExampleBlock{
			Delimiter: asciidoc.Delimiter{
				Type:   3,
				Length: 4,
			},
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "not a heading",
						},
					},
					Level: 1,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
		},
	},
}

var sectionsTestShouldOutputUnnumberedTableOfContentsInHeaderIfTocAttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "While they were waiting...",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Interlude",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all she wrote!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputNumberedTableOfContentsInHeaderIfTocAndNumberedAttributesAreSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "While they were waiting...",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Interlude",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all she wrote!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputATableOfContentsThatHonorsNumberedSettingAtPositionOfSectionInDocument = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "While they were waiting...",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.AttributeReset{
									Name: "numbered",
								},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Interlude",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all she wrote!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotNumberPartsInTableOfContentsForBookDoctypeWhenNumberedAttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "blah",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "First Section of Part 1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "blah",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Second Section of Part 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "blah",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "First Section of Part 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 2",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputTableOfContentsInHeaderIfToc2AttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc2",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldSetTocPositionIfTocAttributeIsSetToPosition = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "toc",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: ">",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldSetTocPositionIfTocAndTocPositionAttributesAreSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "toc-position",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "right",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldSetTocPositionIfToc2AndTocPositionAttributeAreSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc2",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "toc-position",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "right",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldSetTocPositionIfTocAttributeIsSetToDirection = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "toc",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "right",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "numbered",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldSetTocPlacementToPreambleIfTocAttributeIsSetToPreamble = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "toc",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "preamble",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Yada yada",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldUseDocumentAttributesTocClassTocTitleAndToclevelsToCreateToc = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "toc-title",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Contents",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toc-class",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "toc2",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toclevels",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section 1.1.1",
										},
									},
									Level: 3,
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section 1.1.2",
										},
									},
									Level: 3,
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section 1.1",
								},
							},
							Level: 2,
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section 1.2",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Fin.",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotOutputTableOfContentsIfTocPlacementAttributeIsUnset = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeReset{
					Name: "toc-placement",
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputTableOfContentsAtLocationOfTocMacro = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "toc-placement",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "macro",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Once upon a time...",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "toc::[]",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputTableOfContentsAtLocationOfTocMacroInEmbeddedDocument = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "toc-placement",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "macro",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Once upon a time...",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "toc::[]",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOutputTableOfContentsAtDefaultLocationInEmbeddedDocumentIfTocAttributeIsSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "showtitle",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Once upon a time...",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotActivateTocMacroIfTocPlacementIsNotSet = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Once upon a time...",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "toc::[]",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldOnlyOutputTocAtTocMacroIfTocIsMacro = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "toc",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "macro",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Once upon a time...",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "toc::[]",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldUseGlobalAttributesForTocTitleTocClassAndToclevelsForTocMacro = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "toc-placement",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "macro",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toc-title",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Contents",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toc-class",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "contents",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toclevels",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Preamble.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "toc::[]",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section 1.1.1",
										},
									},
									Level: 3,
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section 1.1.2",
										},
									},
									Level: 3,
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section 1.1",
								},
							},
							Level: 2,
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section 1.2",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Fin.",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldHonorIdTitleRoleAndLevelAttributesOnTocMacro = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "toc-placement",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "macro",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toc-title",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Ignored",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toc-class",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "ignored",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "toclevels",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "5",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name: "tocdepth",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "1",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Preamble.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.AnchorAttribute{
							ID: &asciidoc.String{
								Value: "contents",
							},
							Label: nil,
						},
						&asciidoc.NamedAttribute{
							Name: "role",
							Val: asciidoc.Elements{
								&asciidoc.String{
									Value: "contents",
								},
							},
							Quote: 2,
						},
						&asciidoc.TitleAttribute{
							Val: asciidoc.Elements{
								&asciidoc.String{
									Value: "Contents",
								},
							},
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "toc::[levels=",
						},
						&asciidoc.UserAttributeReference{
							Value: "tocdepth",
						},
						&asciidoc.String{
							Value: "]",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section 1.1.1",
										},
									},
									Level: 3,
								},
								&asciidoc.Section{
									AttributeList: nil,
									Elements: asciidoc.Elements{
										&asciidoc.EmptyLine{
											Text: "",
										},
									},
									Title: asciidoc.Elements{
										&asciidoc.String{
											Value: "Section 1.1.2",
										},
									},
									Level: 3,
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section 1.1",
								},
							},
							Level: 2,
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section 1.2",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Fin.",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestChildTocLevelsShouldNotHaveAdditionalBulletAtParentLevelInHtml = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "While they were waiting...",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Interlude",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all she wrote!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section Three",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotDisplayATableOfContentsIfDocumentHasNoSections = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "toc::[]",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "This document has no sections.",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "It only has content.",
				},
				&asciidoc.NewLine{},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldDropAnchorsFromContentsOfEntriesInTableOfContents = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "[[un]]Section One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "[[two]][[deux]]Section Two",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Plant Trees by https://ecosia.org[Searching]",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotRemoveNonAnchorTagsFromContentsOfEntriesInTableOfContents = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name:     "toc",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "icons",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "font",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "`run` command",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "icon:bug[] Issues",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "https://ecosia.org[_Sustainable_ Searches]",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldCreateOnlySectionsInDocbookBackend = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "The adventure.",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "It was a dark and stormy night...",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection One",
								},
							},
							Level: 2,
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "They couldn't believe their eyes when...",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection Two",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 1",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "The return.",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "While they were returning...",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection Three",
								},
							},
							Level: 2,
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "That's all she wrote!",
								},
								&asciidoc.NewLine{},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Subsection Four",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Section 2",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Article",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestDocumentTitleWithLevel0Headings = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Someone's gonna get axed.",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Scene One",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Chapter One",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "While they were waiting...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Interlude",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Chapter Two",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all she wrote!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Scene One",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Chapter Three",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldPrintErrorIfLevel0SectionComesAfterNestedSectionAndDoctypeIsNotBook = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Level 2 Section",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Level 1 Section",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Document Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements:      nil,
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Level 0 Section",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAddClassMatchingRoleToPart = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: nil,
					ID:    nil,
					Roles: []*asciidoc.ShorthandRole{
						&asciidoc.ShorthandRole{
							Elements: asciidoc.Elements{
								&asciidoc.String{
									Value: "newbie",
								},
							},
						},
					},
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter A",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter B",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 2",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAssignAppropriateSectnameForSectionType = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.AttributeEntry{
					Name:     "idprefix",
					Elements: nil,
				},
				&asciidoc.AttributeEntry{
					Name: "idseparator",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "-",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book Title",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "content",
								},
								&asciidoc.NewLine{},
								&asciidoc.EmptyLine{
									Text: "",
								},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Section Title",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter Title",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "appendix",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Section{
							AttributeList: nil,
							Elements: asciidoc.Elements{
								&asciidoc.EmptyLine{
									Text: "",
								},
								&asciidoc.String{
									Value: "content",
								},
								&asciidoc.NewLine{},
							},
							Title: asciidoc.Elements{
								&asciidoc.String{
									Value: "Appendix Section Title",
								},
							},
							Level: 2,
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Appendix Title",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part Title",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAllowPartIntroToBeDefinedUsingSpecialSection = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Part intro content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Part Intro",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Chapter content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAddPartintroStyleToChildParagraphOfPart = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "part intro--a summary",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldPreserveTitleOnPartintroDefinedAsPartintroParagraph = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.TitleAttribute{
							Val: asciidoc.Elements{
								&asciidoc.String{
									Value: "Intro",
								},
							},
						},
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Read this first.",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldNotPromoteTitleOnPartintroDefinedAsNormalParagraph = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.TitleAttribute{
							Val: asciidoc.Elements{
								&asciidoc.String{
									Value: "Intro",
								},
							},
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Read this first.",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldAddPartintroStyleToChildOpenBlockOfPart = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.OpenBlock{
					AttributeList: nil,
					Delimiter: asciidoc.Delimiter{
						Type:   7,
						Length: 2,
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "part intro",
						},
						&asciidoc.NewLine{},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldWrapChildParagraphsOfPartInPartintroOpenBlock = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "part intro",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "more part intro",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldWrapAbstractInImplicitPartIntroInInfoTagWhenConvertingToDocBook = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "abstract",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Abstract of part.",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "more part intro",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldWrapAbstractInPartIntroSectionInInfoTagWhenConvertingToDocBook = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.Paragraph{
							AttributeList: asciidoc.AttributeList{
								&asciidoc.ShorthandAttribute{
									Style: &asciidoc.ShorthandStyle{
										Elements: asciidoc.Elements{
											&asciidoc.String{
												Value: "abstract",
											},
										},
									},
									ID:      nil,
									Roles:   nil,
									Options: nil,
								},
							},
							Elements: asciidoc.Elements{
								&asciidoc.String{
									Value: "Abstract of part.",
								},
								&asciidoc.NewLine{},
							},
							Admonition: 0,
						},
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "more part intro",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Part Intro",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements:      nil,
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldWarnIfPartHasNoSections = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "intro",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestShouldCreatePartsAndChaptersInDocbookBackend = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "The adventure.",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "It was a dark and stormy night...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter One",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "They couldn't believe their eyes when...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter Two",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "The return.",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "While they were returning...",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter Three",
						},
					},
					Level: 1,
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "That's all she wrote!",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter Four",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 2",
				},
			},
			Level: 0,
		},
	},
}

var sectionsTestSubsectionsInPrefaceAndAppendixShouldStartAtLevel2 = &asciidoc.Document{
	Elements: asciidoc.Elements{
		&asciidoc.EmptyLine{
			Text: "",
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.String{
					Value: "Doc Writer",
				},
				&asciidoc.NewLine{},
				&asciidoc.AttributeEntry{
					Name: "doctype",
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "book",
						},
					},
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Multipart Book",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "preface",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Preface content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Preface subsection content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Preface subsection",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Preface",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: nil,
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Paragraph{
					AttributeList: asciidoc.AttributeList{
						&asciidoc.TitleAttribute{
							Val: asciidoc.Elements{
								&asciidoc.String{
									Value: "Part intro title",
								},
							},
						},
						&asciidoc.ShorthandAttribute{
							Style: &asciidoc.ShorthandStyle{
								Elements: asciidoc.Elements{
									&asciidoc.String{
										Value: "partintro",
									},
								},
							},
							ID:      nil,
							Roles:   nil,
							Options: nil,
						},
					},
					Elements: asciidoc.Elements{
						&asciidoc.String{
							Value: "Part intro content",
						},
						&asciidoc.NewLine{},
					},
					Admonition: 0,
				},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "content",
						},
						&asciidoc.NewLine{},
						&asciidoc.EmptyLine{
							Text: "",
						},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Chapter 1",
						},
					},
					Level: 1,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Part 1",
				},
			},
			Level: 0,
		},
		&asciidoc.Section{
			AttributeList: asciidoc.AttributeList{
				&asciidoc.ShorthandAttribute{
					Style: &asciidoc.ShorthandStyle{
						Elements: asciidoc.Elements{
							&asciidoc.String{
								Value: "appendix",
							},
						},
					},
					ID:      nil,
					Roles:   nil,
					Options: nil,
				},
			},
			Elements: asciidoc.Elements{
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.String{
					Value: "Appendix content",
				},
				&asciidoc.NewLine{},
				&asciidoc.EmptyLine{
					Text: "",
				},
				&asciidoc.Section{
					AttributeList: nil,
					Elements: asciidoc.Elements{
						&asciidoc.EmptyLine{
							Text: "",
						},
						&asciidoc.String{
							Value: "Appendix subsection content",
						},
						&asciidoc.NewLine{},
					},
					Title: asciidoc.Elements{
						&asciidoc.String{
							Value: "Appendix subsection",
						},
					},
					Level: 2,
				},
			},
			Title: asciidoc.Elements{
				&asciidoc.String{
					Value: "Appendix",
				},
			},
			Level: 0,
		},
	},
}
