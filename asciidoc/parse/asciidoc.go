// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/hasty/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 92},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 103},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 103},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 103},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 111},
								expr: &ruleRefExpr{
									pos:  position{line: 14, col: 21, offset: 112},
									name: "Element",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 31, offset: 122},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 177},
			expr: &actionExpr{
				pos: position{line: 18, col: 11, offset: 187},
				run: (*parser).callonElement1,
				expr: &labeledExpr{
					pos:   position{line: 18, col: 11, offset: 187},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 18, col: 20, offset: 196},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 18, col: 20, offset: 196},
								name: "BlockElement",
							},
							&ruleRefExpr{
								pos:  position{line: 18, col: 35, offset: 211},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 25, col: 1, offset: 260},
			expr: &actionExpr{
				pos: position{line: 25, col: 16, offset: 275},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 25, col: 16, offset: 275},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 25, col: 16, offset: 275},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 25, col: 32, offset: 291},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 41, offset: 300},
								name: "BlockElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 56, offset: 315},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 26, col: 1, offset: 325},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 32, col: 1, offset: 424},
			expr: &actionExpr{
				pos: position{line: 32, col: 17, offset: 440},
				run: (*parser).callonBlockElements1,
				expr: &labeledExpr{
					pos:   position{line: 32, col: 17, offset: 440},
					label: "blockElement",
					expr: &choiceExpr{
						pos: position{line: 33, col: 5, offset: 460},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 33, col: 5, offset: 460},
								name: "BlockEmptyLine",
							},
							&ruleRefExpr{
								pos:  position{line: 34, col: 5, offset: 481},
								name: "AttributableBlocks",
							},
							&ruleRefExpr{
								pos:  position{line: 35, col: 5, offset: 506},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 37, col: 5, offset: 541},
								name: "NakedBlocks",
							},
							&ruleRefExpr{
								pos:  position{line: 38, col: 5, offset: 559},
								name: "NakedBlockAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 43, col: 1, offset: 620},
			expr: &actionExpr{
				pos: position{line: 43, col: 15, offset: 634},
				run: (*parser).callonNakedBlocks1,
				expr: &labeledExpr{
					pos:   position{line: 43, col: 15, offset: 634},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 44, col: 5, offset: 647},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 44, col: 5, offset: 647},
								name: "MultiLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 45, col: 5, offset: 671},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 46, col: 5, offset: 695},
								name: "AttributeEntry",
							},
							&ruleRefExpr{
								pos:  position{line: 47, col: 5, offset: 717},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 48, col: 5, offset: 738},
								name: "IfDef",
							},
							&ruleRefExpr{
								pos:  position{line: 49, col: 5, offset: 750},
								name: "IfNDef",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 5, offset: 764},
								name: "IfEval",
							},
							&ruleRefExpr{
								pos:  position{line: 51, col: 5, offset: 777},
								name: "EndIfDef",
							},
							&ruleRefExpr{
								pos:  position{line: 52, col: 5, offset: 792},
								name: "FileInclude",
							},
							&ruleRefExpr{
								pos:  position{line: 53, col: 5, offset: 810},
								name: "DescriptionListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 54, col: 5, offset: 836},
								name: "ListContinuation",
							},
							&ruleRefExpr{
								pos:  position{line: 55, col: 5, offset: 859},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 60, col: 1, offset: 900},
			expr: &actionExpr{
				pos: position{line: 60, col: 22, offset: 921},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 60, col: 22, offset: 921},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 60, col: 22, offset: 921},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 33, offset: 932},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 34, offset: 933},
									name: "BlockElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 59, offset: 958},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 61, col: 5, offset: 973},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 61, col: 5, offset: 973},
										name: "Listing",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 5, offset: 988},
										name: "Open",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 5, offset: 999},
										name: "Example",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 5, offset: 1013},
										name: "Sidebar",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 5, offset: 1027},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 5, offset: 1039},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 5, offset: 1053},
										name: "Stem",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 5, offset: 1064},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 5, offset: 1079},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 5, offset: 1099},
										name: "PageBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 5, offset: 1115},
										name: "BlockImage",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 5, offset: 1132},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 5, offset: 1155},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 5, offset: 1180},
										name: "DescriptionListItem",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 75, col: 9, offset: 1209},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 87, col: 1, offset: 1607},
			expr: &actionExpr{
				pos: position{line: 87, col: 19, offset: 1625},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 87, col: 19, offset: 1625},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 88, col: 5, offset: 1641},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 88, col: 6, offset: 1642},
								run: (*parser).callonBlockAttributes4,
								expr: &labeledExpr{
									pos:   position{line: 88, col: 6, offset: 1642},
									label: "anchor",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 14, offset: 1650},
										name: "AnchorAttribute",
									},
								},
							},
							&actionExpr{
								pos: position{line: 91, col: 8, offset: 1711},
								run: (*parser).callonBlockAttributes7,
								expr: &labeledExpr{
									pos:   position{line: 91, col: 8, offset: 1711},
									label: "title",
									expr: &ruleRefExpr{
										pos:  position{line: 91, col: 15, offset: 1718},
										name: "BlockTitle",
									},
								},
							},
							&actionExpr{
								pos: position{line: 94, col: 8, offset: 1773},
								run: (*parser).callonBlockAttributes10,
								expr: &labeledExpr{
									pos:   position{line: 94, col: 8, offset: 1773},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 20, offset: 1785},
										name: "Attributes",
									},
								},
							},
							&actionExpr{
								pos: position{line: 97, col: 8, offset: 1846},
								run: (*parser).callonBlockAttributes13,
								expr: &labeledExpr{
									pos:   position{line: 97, col: 8, offset: 1846},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 20, offset: 1858},
										name: "ShorthandAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 104, col: 1, offset: 1960},
			expr: &actionExpr{
				pos: position{line: 104, col: 14, offset: 1973},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 104, col: 14, offset: 1973},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 104, col: 14, offset: 1973},
							name: "BeginningOfLine",
						},
						&litMatcher{
							pos:        position{line: 104, col: 30, offset: 1989},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 104, col: 34, offset: 1993},
							expr: &charClassMatcher{
								pos:             position{line: 104, col: 35, offset: 1994},
								val:             "[ .]",
								chars:           []rune{' ', '.'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 40, offset: 1999},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 49, offset: 2008},
								name: "BlockTitleContent",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 112, col: 1, offset: 2183},
			expr: &actionExpr{
				pos: position{line: 112, col: 21, offset: 2203},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 112, col: 21, offset: 2203},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 29, offset: 2211},
						expr: &choiceExpr{
							pos: position{line: 112, col: 30, offset: 2212},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 112, col: 30, offset: 2212},
									name: "NakedInlineText",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 2230},
									name: "Alphanumeric",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 63, offset: 2245},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 67, offset: 2249},
									name: "Punctuation",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 81, offset: 2263},
									name: "AttributeReference",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 102, offset: 2284},
									name: "CharacterClassInline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 116, col: 1, offset: 2351},
			expr: &actionExpr{
				pos: position{line: 116, col: 18, offset: 2368},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 116, col: 18, offset: 2368},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 116, col: 18, offset: 2368},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 116, col: 28, offset: 2378},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 29, offset: 2379},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 120, col: 1, offset: 2457},
			expr: &actionExpr{
				pos: position{line: 120, col: 25, offset: 2481},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 120, col: 25, offset: 2481},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 120, col: 25, offset: 2481},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 37, offset: 2493},
								name: "BlockAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 54, offset: 2510},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 120, col: 64, offset: 2520},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 65, offset: 2521},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 124, col: 1, offset: 2567},
			expr: &actionExpr{
				pos: position{line: 124, col: 35, offset: 2601},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 124, col: 35, offset: 2601},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 124, col: 35, offset: 2601},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 43, offset: 2609},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 55, offset: 2621},
								name: "BlockAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 124, col: 72, offset: 2638},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 124, col: 82, offset: 2648},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 83, offset: 2649},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 128, col: 1, offset: 2695},
			expr: &actionExpr{
				pos: position{line: 128, col: 26, offset: 2720},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 128, col: 26, offset: 2720},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 128, col: 26, offset: 2720},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 37, offset: 2731},
								name: "BlockElementAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 60, offset: 2754},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 128, col: 81, offset: 2775},
								expr: &ruleRefExpr{
									pos:  position{line: 128, col: 82, offset: 2776},
									name: "BlockElementAdditionalAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 116, offset: 2810},
							name: "EndOfLine",
						},
						&zeroOrMoreExpr{
							pos: position{line: 128, col: 126, offset: 2820},
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 126, offset: 2820},
								name: "EmptyLine",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 136, col: 1, offset: 3037},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 3060},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 3060},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 136, col: 24, offset: 3060},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 35, offset: 3071},
								name: "BlockElementAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 58, offset: 3094},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 136, col: 79, offset: 3115},
								expr: &ruleRefExpr{
									pos:  position{line: 136, col: 80, offset: 3116},
									name: "BlockElementAdditionalAttribute",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 148, col: 1, offset: 3458},
			expr: &actionExpr{
				pos: position{line: 149, col: 5, offset: 3481},
				run: (*parser).callonBlockDelimiters1,
				expr: &seqExpr{
					pos: position{line: 149, col: 5, offset: 3481},
					exprs: []any{
						&notExpr{
							pos: position{line: 149, col: 5, offset: 3481},
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 6, offset: 3482},
								name: "Alphanumeric",
							},
						},
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 3499},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 151, col: 9, offset: 3519},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 151, col: 9, offset: 3519},
										name: "MultiLineCommentForwardSlashes",
									},
									&ruleRefExpr{
										pos:  position{line: 152, col: 11, offset: 3560},
										name: "ExampleEquals",
									},
									&ruleRefExpr{
										pos:  position{line: 153, col: 11, offset: 3584},
										name: "FencedBackticks",
									},
									&ruleRefExpr{
										pos:  position{line: 154, col: 11, offset: 3610},
										name: "ListingHyphens",
									},
									&ruleRefExpr{
										pos:  position{line: 155, col: 11, offset: 3635},
										name: "LiteralDots",
									},
									&ruleRefExpr{
										pos:  position{line: 156, col: 11, offset: 3657},
										name: "StemPluses",
									},
									&ruleRefExpr{
										pos:  position{line: 157, col: 11, offset: 3678},
										name: "QuoteUnderlines",
									},
									&ruleRefExpr{
										pos:  position{line: 158, col: 11, offset: 3704},
										name: "SidebarAsterisks",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 162, col: 1, offset: 3769},
			expr: &actionExpr{
				pos: position{line: 162, col: 11, offset: 3779},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 162, col: 11, offset: 3779},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 162, col: 11, offset: 3779},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 162, col: 18, offset: 3786},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 162, col: 18, offset: 3786},
									expr: &charClassMatcher{
										pos:             position{line: 162, col: 18, offset: 3786},
										val:             "[=]",
										chars:           []rune{'='},
										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
										ignoreCase:      false,
										inverted:        false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 165, col: 5, offset: 3845},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:  position{line: 168, col: 5, offset: 3902},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 8, offset: 3905},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 15, offset: 3912},
								name: "SectionTitle",
							},
						},
						&andExpr{
							pos: position{line: 168, col: 29, offset: 3926},
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 30, offset: 3927},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 172, col: 1, offset: 4042},
			expr: &oneOrMoreExpr{
				pos: position{line: 172, col: 16, offset: 4057},
				expr: &ruleRefExpr{
					pos:  position{line: 172, col: 17, offset: 4058},
					name: "SectionTitleValue",
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 174, col: 1, offset: 4079},
			expr: &actionExpr{
				pos: position{line: 174, col: 21, offset: 4099},
				run: (*parser).callonSectionTitleValue1,
				expr: &seqExpr{
					pos: position{line: 174, col: 21, offset: 4099},
					exprs: []any{
						&notExpr{
							pos: position{line: 174, col: 21, offset: 4099},
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 22, offset: 4100},
								name: "EndOfLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 174, col: 32, offset: 4110},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 175, col: 5, offset: 4124},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 175, col: 5, offset: 4124},
										name: "UnbrokenText",
									},
									&ruleRefExpr{
										pos:  position{line: 176, col: 7, offset: 4144},
										name: "__",
									},
									&ruleRefExpr{
										pos:  position{line: 177, col: 7, offset: 4154},
										name: "Apostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 7, offset: 4172},
										name: "Punctuation",
									},
									&ruleRefExpr{
										pos:  position{line: 179, col: 7, offset: 4192},
										name: "FormattedText",
									},
									&ruleRefExpr{
										pos:  position{line: 181, col: 7, offset: 4237},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 182, col: 7, offset: 4249},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 183, col: 7, offset: 4273},
										name: "Icon",
									},
									&ruleRefExpr{
										pos:  position{line: 184, col: 7, offset: 4285},
										name: "AttributeReference",
									},
									&ruleRefExpr{
										pos:  position{line: 185, col: 7, offset: 4311},
										name: "Anchor",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 7, offset: 4340},
										name: "CharacterClassInline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 192, col: 1, offset: 4392},
			expr: &actionExpr{
				pos: position{line: 192, col: 18, offset: 4409},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 192, col: 18, offset: 4409},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 192, col: 18, offset: 4409},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 22, offset: 4413},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 28, offset: 4419},
								name: "AttributeEntryName",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 48, offset: 4439},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 52, offset: 4443},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 62, offset: 4453},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 69, offset: 4460},
								name: "AttributeEntryElements",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 196, col: 1, offset: 4604},
			expr: &actionExpr{
				pos: position{line: 196, col: 22, offset: 4625},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 196, col: 22, offset: 4625},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 196, col: 22, offset: 4625},
							name: "CharacterGroupWord",
						},
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 41, offset: 4644},
							expr: &choiceExpr{
								pos: position{line: 196, col: 42, offset: 4645},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 196, col: 42, offset: 4645},
										name: "CharacterGroupWord",
									},
									&litMatcher{
										pos:        position{line: 196, col: 63, offset: 4666},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 200, col: 1, offset: 4712},
			expr: &actionExpr{
				pos: position{line: 200, col: 26, offset: 4737},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 200, col: 26, offset: 4737},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 200, col: 32, offset: 4743},
						expr: &ruleRefExpr{
							pos:  position{line: 200, col: 32, offset: 4743},
							name: "AttributeEntryElement",
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 204, col: 1, offset: 4837},
			expr: &choiceExpr{
				pos: position{line: 204, col: 26, offset: 4862},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 204, col: 26, offset: 4862},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 204, col: 26, offset: 4862},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 204, col: 36, offset: 4872},
								name: "EndOfLine",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 48, offset: 4884},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 206, col: 1, offset: 4908},
			expr: &choiceExpr{
				pos: position{line: 206, col: 18, offset: 4925},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 206, col: 18, offset: 4925},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 206, col: 18, offset: 4925},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 206, col: 18, offset: 4925},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 206, col: 23, offset: 4930},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 29, offset: 4936},
										name: "AttributeEntryName",
									},
								},
								&litMatcher{
									pos:        position{line: 206, col: 49, offset: 4956},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 206, col: 53, offset: 4960},
									name: "AnySpaces",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 5042},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 208, col: 5, offset: 5042},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 208, col: 5, offset: 5042},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 208, col: 9, offset: 5046},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 15, offset: 5052},
										name: "AttributeEntryName",
									},
								},
								&litMatcher{
									pos:        position{line: 208, col: 35, offset: 5072},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:  position{line: 208, col: 40, offset: 5077},
									name: "AnySpaces",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 213, col: 1, offset: 5237},
			expr: &actionExpr{
				pos: position{line: 213, col: 14, offset: 5250},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 213, col: 14, offset: 5250},
					exprs: []any{
						&notExpr{
							pos: position{line: 213, col: 14, offset: 5250},
							expr: &litMatcher{
								pos:        position{line: 213, col: 15, offset: 5251},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 20, offset: 5256},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 213, col: 24, offset: 5260},
							expr: &litMatcher{
								pos:        position{line: 213, col: 25, offset: 5261},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 29, offset: 5265},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 41, offset: 5277},
								name: "AttributeList",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 56, offset: 5292},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 218, col: 1, offset: 5334},
			expr: &actionExpr{
				pos: position{line: 218, col: 17, offset: 5350},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 218, col: 17, offset: 5350},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 218, col: 28, offset: 5361},
						expr: &ruleRefExpr{
							pos:  position{line: 218, col: 29, offset: 5362},
							name: "AttributeListItem",
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 222, col: 1, offset: 5447},
			expr: &actionExpr{
				pos: position{line: 222, col: 21, offset: 5467},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 222, col: 21, offset: 5467},
					exprs: []any{
						&notExpr{
							pos: position{line: 222, col: 21, offset: 5467},
							expr: &litMatcher{
								pos:        position{line: 222, col: 22, offset: 5468},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 26, offset: 5472},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 36, offset: 5482},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 47, offset: 5493},
								name: "Attribute",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 58, offset: 5504},
							name: "AnySpaces",
						},
						&zeroOrOneExpr{
							pos: position{line: 222, col: 68, offset: 5514},
							expr: &litMatcher{
								pos:        position{line: 222, col: 68, offset: 5514},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 226, col: 1, offset: 5550},
			expr: &actionExpr{
				pos: position{line: 226, col: 13, offset: 5562},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 13, offset: 5562},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 226, col: 13, offset: 5562},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 226, col: 18, offset: 5567},
								expr: &actionExpr{
									pos: position{line: 226, col: 20, offset: 5569},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 226, col: 21, offset: 5570},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 226, col: 21, offset: 5570},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 27, offset: 5576},
													name: "NamedAttributeName",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 47, offset: 5596},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 226, col: 57, offset: 5606},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 61, offset: 5610},
												name: "AnySpaces",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 95, offset: 5644},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 226, col: 102, offset: 5651},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 226, col: 102, offset: 5651},
										name: "SingleQuoteAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 130, offset: 5679},
										name: "DoubleQuoteAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 158, offset: 5707},
										name: "NakedAttributeValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 233, col: 1, offset: 5963},
			expr: &actionExpr{
				pos: position{line: 233, col: 23, offset: 5985},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 233, col: 23, offset: 5985},
					exprs: []any{
						&notExpr{
							pos: position{line: 233, col: 23, offset: 5985},
							expr: &litMatcher{
								pos:        position{line: 233, col: 24, offset: 5986},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 29, offset: 5991},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 233, col: 33, offset: 5995},
							expr: &litMatcher{
								pos:        position{line: 233, col: 34, offset: 5996},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 38, offset: 6000},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 49, offset: 6011},
								name: "ShorthandAttribute",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 69, offset: 6031},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 237, col: 1, offset: 6071},
			expr: &actionExpr{
				pos: position{line: 237, col: 22, offset: 6092},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 22, offset: 6092},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 22, offset: 6092},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 28, offset: 6098},
								expr: &ruleRefExpr{
									pos:  position{line: 237, col: 29, offset: 6099},
									name: "ShorthandAttributeValue",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 55, offset: 6125},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 237, col: 62, offset: 6132},
								expr: &choiceExpr{
									pos: position{line: 237, col: 63, offset: 6133},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 237, col: 63, offset: 6133},
											name: "ShorthandID",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 77, offset: 6147},
											name: "ShorthandRole",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 93, offset: 6163},
											name: "ShorthandOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 241, col: 1, offset: 6251},
			expr: &actionExpr{
				pos: position{line: 241, col: 18, offset: 6268},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 241, col: 18, offset: 6268},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 241, col: 24, offset: 6274},
						name: "ShorthandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 245, col: 1, offset: 6365},
			expr: &actionExpr{
				pos: position{line: 245, col: 15, offset: 6379},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 245, col: 15, offset: 6379},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 15, offset: 6379},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 19, offset: 6383},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 25, offset: 6389},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 249, col: 1, offset: 6480},
			expr: &actionExpr{
				pos: position{line: 249, col: 17, offset: 6496},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 249, col: 17, offset: 6496},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 249, col: 17, offset: 6496},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 21, offset: 6500},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 27, offset: 6506},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 253, col: 1, offset: 6599},
			expr: &actionExpr{
				pos: position{line: 253, col: 19, offset: 6617},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 253, col: 19, offset: 6617},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 253, col: 19, offset: 6617},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 23, offset: 6621},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 29, offset: 6627},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 257, col: 1, offset: 6722},
			expr: &actionExpr{
				pos: position{line: 257, col: 27, offset: 6748},
				run: (*parser).callonShorthandAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 257, col: 27, offset: 6748},
					label: "value",
					expr: &choiceExpr{
						pos: position{line: 257, col: 34, offset: 6755},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 257, col: 34, offset: 6755},
								exprs: []any{
									&notExpr{
										pos: position{line: 257, col: 34, offset: 6755},
										expr: &litMatcher{
											pos:        position{line: 257, col: 35, offset: 6756},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 39, offset: 6760},
										expr: &litMatcher{
											pos:        position{line: 257, col: 40, offset: 6761},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 44, offset: 6765},
										expr: &litMatcher{
											pos:        position{line: 257, col: 45, offset: 6766},
											val:        "%",
											ignoreCase: false,
											want:       "\"%\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 257, col: 49, offset: 6770},
										name: "SingleQuoteAttributeValue",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 257, col: 77, offset: 6798},
								name: "DoubleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 257, col: 105, offset: 6826},
								name: "NakedAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 261, col: 1, offset: 6874},
			expr: &actionExpr{
				pos: position{line: 261, col: 29, offset: 6902},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 261, col: 29, offset: 6902},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 261, col: 29, offset: 6902},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 33, offset: 6906},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 39, offset: 6912},
								expr: &ruleRefExpr{
									pos:  position{line: 261, col: 40, offset: 6913},
									name: "SingleQuoteAttributeValueElement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 75, offset: 6948},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 265, col: 1, offset: 7057},
			expr: &choiceExpr{
				pos: position{line: 266, col: 5, offset: 7098},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7098},
						run: (*parser).callonSingleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 7098},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7151},
						name: "Alphanumeric",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7171},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7180},
						name: "CurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7199},
						name: "AttributeReference",
					},
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 7224},
						run: (*parser).callonSingleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 271, col: 5, offset: 7224},
							expr: &charClassMatcher{
								pos:             position{line: 271, col: 5, offset: 7224},
								val:             "[^\\r\\n\\\\' ]",
								chars:           []rune{'\r', '\n', '\\', '\'', ' '},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 276, col: 1, offset: 7303},
			expr: &actionExpr{
				pos: position{line: 276, col: 29, offset: 7331},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 29, offset: 7331},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 276, col: 29, offset: 7331},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 34, offset: 7336},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 276, col: 40, offset: 7342},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 41, offset: 7343},
									name: "DoubleQuoteAttributeValueElement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 76, offset: 7378},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 280, col: 1, offset: 7488},
			expr: &choiceExpr{
				pos: position{line: 281, col: 5, offset: 7529},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 7529},
						run: (*parser).callonDoubleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 281, col: 5, offset: 7529},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7585},
						name: "Alphanumeric",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7605},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7614},
						name: "CurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 7632},
						name: "AttributeReference",
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 7657},
						run: (*parser).callonDoubleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 286, col: 5, offset: 7657},
							expr: &charClassMatcher{
								pos:             position{line: 286, col: 5, offset: 7657},
								val:             "[^\\r\\n\\\\\" ]",
								chars:           []rune{'\r', '\n', '\\', '"', ' '},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 291, col: 1, offset: 7736},
			expr: &actionExpr{
				pos: position{line: 291, col: 23, offset: 7758},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 291, col: 23, offset: 7758},
					exprs: []any{
						&notExpr{
							pos: position{line: 291, col: 23, offset: 7758},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 24, offset: 7759},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 26, offset: 7761},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 291, col: 32, offset: 7767},
								expr: &choiceExpr{
									pos: position{line: 292, col: 5, offset: 7773},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 292, col: 5, offset: 7773},
											name: "AttributeReference",
										},
										&ruleRefExpr{
											pos:  position{line: 293, col: 5, offset: 7799},
											name: "_",
										},
										&actionExpr{
											pos: position{line: 294, col: 5, offset: 7808},
											run: (*parser).callonNakedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 294, col: 5, offset: 7808},
												expr: &charClassMatcher{
													pos:             position{line: 294, col: 5, offset: 7808},
													val:             "[^=\\], ]",
													chars:           []rune{'=', ']', ',', ' '},
													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
													ignoreCase:      false,
													inverted:        true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 301, col: 1, offset: 8021},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 8040},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 8040},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 8040},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 24, offset: 8044},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 36, offset: 8056},
								name: "AttributeList",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 51, offset: 8071},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 305, col: 1, offset: 8111},
			expr: &actionExpr{
				pos: position{line: 305, col: 22, offset: 8132},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 305, col: 22, offset: 8132},
					exprs: []any{
						&charClassMatcher{
							pos:             position{line: 305, col: 22, offset: 8132},
							val:             "[A-Za-z0-9_]",
							chars:           []rune{'_'},
							ranges:          []rune{'A', 'Z', 'a', 'z', '0', '9'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 35, offset: 8145},
							expr: &charClassMatcher{
								pos:             position{line: 305, col: 35, offset: 8145},
								val:             "[A-Za-z0-9_-]",
								chars:           []rune{'_', '-'},
								ranges:          []rune{'A', 'Z', 'a', 'z', '0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 309, col: 1, offset: 8200},
			expr: &actionExpr{
				pos: position{line: 309, col: 22, offset: 8221},
				run: (*parser).callonAttributeReference1,
				expr: &labeledExpr{
					pos:   position{line: 309, col: 22, offset: 8221},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 309, col: 33, offset: 8232},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 309, col: 33, offset: 8232},
								name: "AttributeReferenceValue",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 59, offset: 8258},
								name: "Counter",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 313, col: 1, offset: 8298},
			expr: &actionExpr{
				pos: position{line: 313, col: 27, offset: 8324},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 313, col: 27, offset: 8324},
					exprs: []any{
						&notExpr{
							pos: position{line: 313, col: 27, offset: 8324},
							expr: &litMatcher{
								pos:        position{line: 313, col: 28, offset: 8325},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 33, offset: 8330},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 37, offset: 8334},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 42, offset: 8339},
								name: "AttributeEntryName",
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 61, offset: 8358},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 321, col: 1, offset: 8454},
			expr: &choiceExpr{
				pos: position{line: 321, col: 13, offset: 8466},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 321, col: 13, offset: 8466},
						name: "SingleBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 30, offset: 8483},
						name: "DoubleBoldText",
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 323, col: 1, offset: 8500},
			expr: &actionExpr{
				pos: position{line: 323, col: 18, offset: 8517},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 323, col: 18, offset: 8517},
					exprs: []any{
						&notExpr{
							pos: position{line: 323, col: 18, offset: 8517},
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 19, offset: 8518},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 26, offset: 8525},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 323, col: 30, offset: 8529},
							expr: &notExpr{
								pos: position{line: 323, col: 32, offset: 8531},
								expr: &litMatcher{
									pos:        position{line: 323, col: 33, offset: 8532},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 38, offset: 8537},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 45, offset: 8544},
								name: "SingleBoldTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 66, offset: 8565},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 323, col: 70, offset: 8569},
							expr: &litMatcher{
								pos:        position{line: 323, col: 71, offset: 8570},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 323, col: 75, offset: 8574},
							expr: &notExpr{
								pos: position{line: 323, col: 77, offset: 8576},
								expr: &ruleRefExpr{
									pos:  position{line: 323, col: 78, offset: 8577},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 327, col: 1, offset: 8622},
			expr: &actionExpr{
				pos: position{line: 327, col: 23, offset: 8644},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 327, col: 23, offset: 8644},
					exprs: []any{
						&notExpr{
							pos: position{line: 327, col: 23, offset: 8644},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 24, offset: 8645},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 26, offset: 8647},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 327, col: 32, offset: 8653},
								expr: &actionExpr{
									pos: position{line: 327, col: 33, offset: 8654},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 327, col: 33, offset: 8654},
										exprs: []any{
											&notExpr{
												pos: position{line: 327, col: 33, offset: 8654},
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 34, offset: 8655},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 327, col: 36, offset: 8657},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 327, col: 42, offset: 8663},
													expr: &ruleRefExpr{
														pos:  position{line: 327, col: 43, offset: 8664},
														name: "SingleBoldTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 331, col: 1, offset: 8812},
			expr: &actionExpr{
				pos: position{line: 331, col: 25, offset: 8836},
				run: (*parser).callonSingleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 331, col: 25, offset: 8836},
					exprs: []any{
						&notExpr{
							pos: position{line: 331, col: 25, offset: 8836},
							expr: &seqExpr{
								pos: position{line: 331, col: 27, offset: 8838},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 331, col: 27, offset: 8838},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&notExpr{
										pos: position{line: 331, col: 31, offset: 8842},
										expr: &litMatcher{
											pos:        position{line: 331, col: 32, offset: 8843},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 37, offset: 8848},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 46, offset: 8857},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 335, col: 1, offset: 8912},
			expr: &actionExpr{
				pos: position{line: 335, col: 18, offset: 8929},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 335, col: 18, offset: 8929},
					exprs: []any{
						&notExpr{
							pos: position{line: 335, col: 18, offset: 8929},
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 19, offset: 8930},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 32, offset: 8943},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 37, offset: 8948},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 44, offset: 8955},
								name: "DoubleBoldTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 65, offset: 8976},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 339, col: 1, offset: 9013},
			expr: &actionExpr{
				pos: position{line: 339, col: 23, offset: 9035},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 339, col: 23, offset: 9035},
					exprs: []any{
						&notExpr{
							pos: position{line: 339, col: 23, offset: 9035},
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 24, offset: 9036},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 26, offset: 9038},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 339, col: 32, offset: 9044},
								expr: &actionExpr{
									pos: position{line: 339, col: 33, offset: 9045},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 339, col: 33, offset: 9045},
										exprs: []any{
											&notExpr{
												pos: position{line: 339, col: 33, offset: 9045},
												expr: &ruleRefExpr{
													pos:  position{line: 339, col: 34, offset: 9046},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 339, col: 36, offset: 9048},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 339, col: 42, offset: 9054},
													expr: &ruleRefExpr{
														pos:  position{line: 339, col: 43, offset: 9055},
														name: "DoubleBoldTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 343, col: 1, offset: 9215},
			expr: &actionExpr{
				pos: position{line: 343, col: 25, offset: 9239},
				run: (*parser).callonDoubleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 343, col: 25, offset: 9239},
					exprs: []any{
						&notExpr{
							pos: position{line: 343, col: 25, offset: 9239},
							expr: &litMatcher{
								pos:        position{line: 343, col: 27, offset: 9241},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 33, offset: 9247},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 42, offset: 9256},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 349, col: 1, offset: 9313},
			expr: &choiceExpr{
				pos: position{line: 349, col: 15, offset: 9327},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 349, col: 15, offset: 9327},
						name: "SingleItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 34, offset: 9346},
						name: "DoubleItalicText",
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 351, col: 1, offset: 9365},
			expr: &actionExpr{
				pos: position{line: 351, col: 20, offset: 9384},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 351, col: 20, offset: 9384},
					exprs: []any{
						&notExpr{
							pos: position{line: 351, col: 20, offset: 9384},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 21, offset: 9385},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 28, offset: 9392},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 351, col: 32, offset: 9396},
							expr: &notExpr{
								pos: position{line: 351, col: 34, offset: 9398},
								expr: &litMatcher{
									pos:        position{line: 351, col: 35, offset: 9399},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 40, offset: 9404},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 47, offset: 9411},
								name: "SingleItalicTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 70, offset: 9434},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 351, col: 74, offset: 9438},
							expr: &litMatcher{
								pos:        position{line: 351, col: 75, offset: 9439},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 79, offset: 9443},
							expr: &notExpr{
								pos: position{line: 351, col: 81, offset: 9445},
								expr: &ruleRefExpr{
									pos:  position{line: 351, col: 82, offset: 9446},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 355, col: 1, offset: 9491},
			expr: &actionExpr{
				pos: position{line: 355, col: 25, offset: 9515},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 355, col: 25, offset: 9515},
					exprs: []any{
						&notExpr{
							pos: position{line: 355, col: 25, offset: 9515},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 26, offset: 9516},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 28, offset: 9518},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 355, col: 34, offset: 9524},
								expr: &actionExpr{
									pos: position{line: 355, col: 35, offset: 9525},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 355, col: 35, offset: 9525},
										exprs: []any{
											&notExpr{
												pos: position{line: 355, col: 35, offset: 9525},
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 36, offset: 9526},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 355, col: 38, offset: 9528},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 355, col: 44, offset: 9534},
													expr: &ruleRefExpr{
														pos:  position{line: 355, col: 45, offset: 9535},
														name: "SingleItalicTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 359, col: 1, offset: 9649},
			expr: &actionExpr{
				pos: position{line: 359, col: 27, offset: 9675},
				run: (*parser).callonSingleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 359, col: 27, offset: 9675},
					exprs: []any{
						&notExpr{
							pos: position{line: 359, col: 27, offset: 9675},
							expr: &seqExpr{
								pos: position{line: 359, col: 29, offset: 9677},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 359, col: 29, offset: 9677},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
									&notExpr{
										pos: position{line: 359, col: 33, offset: 9681},
										expr: &litMatcher{
											pos:        position{line: 359, col: 34, offset: 9682},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 39, offset: 9687},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 48, offset: 9696},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 363, col: 1, offset: 9751},
			expr: &actionExpr{
				pos: position{line: 363, col: 20, offset: 9770},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 363, col: 20, offset: 9770},
					exprs: []any{
						&notExpr{
							pos: position{line: 363, col: 20, offset: 9770},
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 21, offset: 9771},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 34, offset: 9784},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 39, offset: 9789},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 46, offset: 9796},
								name: "DoubleItalicTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 69, offset: 9819},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 367, col: 1, offset: 9856},
			expr: &actionExpr{
				pos: position{line: 367, col: 25, offset: 9880},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 367, col: 25, offset: 9880},
					exprs: []any{
						&notExpr{
							pos: position{line: 367, col: 25, offset: 9880},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 26, offset: 9881},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 28, offset: 9883},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 34, offset: 9889},
								expr: &actionExpr{
									pos: position{line: 367, col: 35, offset: 9890},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 367, col: 35, offset: 9890},
										exprs: []any{
											&notExpr{
												pos: position{line: 367, col: 35, offset: 9890},
												expr: &ruleRefExpr{
													pos:  position{line: 367, col: 36, offset: 9891},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 367, col: 38, offset: 9893},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 367, col: 44, offset: 9899},
													expr: &ruleRefExpr{
														pos:  position{line: 367, col: 45, offset: 9900},
														name: "DoubleItalicTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 371, col: 1, offset: 10020},
			expr: &actionExpr{
				pos: position{line: 371, col: 27, offset: 10046},
				run: (*parser).callonDoubleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 371, col: 27, offset: 10046},
					exprs: []any{
						&notExpr{
							pos: position{line: 371, col: 27, offset: 10046},
							expr: &litMatcher{
								pos:        position{line: 371, col: 29, offset: 10048},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 35, offset: 10054},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 44, offset: 10063},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 378, col: 1, offset: 10121},
			expr: &actionExpr{
				pos: position{line: 378, col: 17, offset: 10137},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 378, col: 17, offset: 10137},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 378, col: 17, offset: 10137},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 22, offset: 10142},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 29, offset: 10149},
								name: "SubscriptTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 49, offset: 10169},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 382, col: 1, offset: 10204},
			expr: &actionExpr{
				pos: position{line: 382, col: 22, offset: 10225},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 22, offset: 10225},
					exprs: []any{
						&notExpr{
							pos: position{line: 382, col: 22, offset: 10225},
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 23, offset: 10226},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 382, col: 25, offset: 10228},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 382, col: 31, offset: 10234},
								expr: &actionExpr{
									pos: position{line: 382, col: 32, offset: 10235},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 382, col: 32, offset: 10235},
										exprs: []any{
											&notExpr{
												pos: position{line: 382, col: 32, offset: 10235},
												expr: &ruleRefExpr{
													pos:  position{line: 382, col: 33, offset: 10236},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 382, col: 35, offset: 10238},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 382, col: 41, offset: 10244},
													expr: &ruleRefExpr{
														pos:  position{line: 382, col: 42, offset: 10245},
														name: "SubscriptTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 386, col: 1, offset: 10402},
			expr: &actionExpr{
				pos: position{line: 386, col: 24, offset: 10425},
				run: (*parser).callonSubscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 386, col: 24, offset: 10425},
					exprs: []any{
						&notExpr{
							pos: position{line: 386, col: 24, offset: 10425},
							expr: &litMatcher{
								pos:        position{line: 386, col: 26, offset: 10427},
								val:        "~",
								ignoreCase: false,
								want:       "\"~\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 31, offset: 10432},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 40, offset: 10441},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 390, col: 1, offset: 10496},
			expr: &actionExpr{
				pos: position{line: 390, col: 20, offset: 10515},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 390, col: 21, offset: 10516},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 390, col: 21, offset: 10516},
							name: "Escape",
						},
						&litMatcher{
							pos:        position{line: 390, col: 28, offset: 10523},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 32, offset: 10527},
							name: "SubscriptTextValue",
						},
						&litMatcher{
							pos:        position{line: 390, col: 51, offset: 10546},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 396, col: 1, offset: 10609},
			expr: &actionExpr{
				pos: position{line: 396, col: 19, offset: 10627},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 396, col: 19, offset: 10627},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 396, col: 19, offset: 10627},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 24, offset: 10632},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 31, offset: 10639},
								name: "SuperscriptTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 53, offset: 10661},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 400, col: 1, offset: 10696},
			expr: &actionExpr{
				pos: position{line: 400, col: 24, offset: 10719},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 400, col: 24, offset: 10719},
					exprs: []any{
						&notExpr{
							pos: position{line: 400, col: 24, offset: 10719},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 25, offset: 10720},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 27, offset: 10722},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 33, offset: 10728},
								expr: &actionExpr{
									pos: position{line: 400, col: 34, offset: 10729},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 400, col: 34, offset: 10729},
										exprs: []any{
											&notExpr{
												pos: position{line: 400, col: 34, offset: 10729},
												expr: &ruleRefExpr{
													pos:  position{line: 400, col: 35, offset: 10730},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 400, col: 37, offset: 10732},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 400, col: 43, offset: 10738},
													expr: &ruleRefExpr{
														pos:  position{line: 400, col: 44, offset: 10739},
														name: "SuperscriptTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 404, col: 1, offset: 10902},
			expr: &actionExpr{
				pos: position{line: 404, col: 26, offset: 10927},
				run: (*parser).callonSuperscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 404, col: 26, offset: 10927},
					exprs: []any{
						&notExpr{
							pos: position{line: 404, col: 26, offset: 10927},
							expr: &litMatcher{
								pos:        position{line: 404, col: 28, offset: 10929},
								val:        "^",
								ignoreCase: false,
								want:       "\"^\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 33, offset: 10934},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 42, offset: 10943},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 408, col: 1, offset: 10998},
			expr: &actionExpr{
				pos: position{line: 408, col: 22, offset: 11019},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 408, col: 23, offset: 11020},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 408, col: 23, offset: 11020},
							name: "Escape",
						},
						&litMatcher{
							pos:        position{line: 408, col: 30, offset: 11027},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 34, offset: 11031},
							name: "SuperscriptTextValue",
						},
						&litMatcher{
							pos:        position{line: 408, col: 55, offset: 11052},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 413, col: 1, offset: 11114},
			expr: &choiceExpr{
				pos: position{line: 413, col: 18, offset: 11131},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 413, col: 18, offset: 11131},
						name: "SingleMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 413, col: 40, offset: 11153},
						name: "DoubleMonospaceText",
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 415, col: 1, offset: 11175},
			expr: &actionExpr{
				pos: position{line: 415, col: 22, offset: 11196},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 415, col: 22, offset: 11196},
					exprs: []any{
						&notExpr{
							pos: position{line: 415, col: 22, offset: 11196},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 23, offset: 11197},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 30, offset: 11204},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 415, col: 34, offset: 11208},
							expr: &notExpr{
								pos: position{line: 415, col: 36, offset: 11210},
								expr: &litMatcher{
									pos:        position{line: 415, col: 37, offset: 11211},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 42, offset: 11216},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 49, offset: 11223},
								name: "SingleMonospaceTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 75, offset: 11249},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 415, col: 79, offset: 11253},
							expr: &litMatcher{
								pos:        position{line: 415, col: 80, offset: 11254},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 415, col: 84, offset: 11258},
							expr: &notExpr{
								pos: position{line: 415, col: 86, offset: 11260},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 87, offset: 11261},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 419, col: 1, offset: 11306},
			expr: &actionExpr{
				pos: position{line: 419, col: 28, offset: 11333},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 419, col: 28, offset: 11333},
					exprs: []any{
						&notExpr{
							pos: position{line: 419, col: 28, offset: 11333},
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 29, offset: 11334},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 31, offset: 11336},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 419, col: 37, offset: 11342},
								expr: &actionExpr{
									pos: position{line: 419, col: 38, offset: 11343},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 419, col: 38, offset: 11343},
										exprs: []any{
											&notExpr{
												pos: position{line: 419, col: 38, offset: 11343},
												expr: &ruleRefExpr{
													pos:  position{line: 419, col: 39, offset: 11344},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 419, col: 41, offset: 11346},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 419, col: 47, offset: 11352},
													expr: &ruleRefExpr{
														pos:  position{line: 419, col: 48, offset: 11353},
														name: "SingleMonospaceTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 423, col: 1, offset: 11473},
			expr: &actionExpr{
				pos: position{line: 423, col: 30, offset: 11502},
				run: (*parser).callonSingleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 423, col: 30, offset: 11502},
					exprs: []any{
						&notExpr{
							pos: position{line: 423, col: 30, offset: 11502},
							expr: &seqExpr{
								pos: position{line: 423, col: 32, offset: 11504},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 423, col: 32, offset: 11504},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
									&notExpr{
										pos: position{line: 423, col: 36, offset: 11508},
										expr: &litMatcher{
											pos:        position{line: 423, col: 37, offset: 11509},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 42, offset: 11514},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 51, offset: 11523},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 427, col: 1, offset: 11578},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 11599},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 11599},
					exprs: []any{
						&notExpr{
							pos: position{line: 427, col: 22, offset: 11599},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 23, offset: 11600},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 36, offset: 11613},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 41, offset: 11618},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 48, offset: 11625},
								name: "DoubleMonospaceTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 74, offset: 11651},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 431, col: 1, offset: 11688},
			expr: &actionExpr{
				pos: position{line: 431, col: 28, offset: 11715},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 431, col: 28, offset: 11715},
					exprs: []any{
						&notExpr{
							pos: position{line: 431, col: 28, offset: 11715},
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 29, offset: 11716},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 31, offset: 11718},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 431, col: 37, offset: 11724},
								expr: &actionExpr{
									pos: position{line: 431, col: 38, offset: 11725},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 431, col: 38, offset: 11725},
										exprs: []any{
											&notExpr{
												pos: position{line: 431, col: 38, offset: 11725},
												expr: &ruleRefExpr{
													pos:  position{line: 431, col: 39, offset: 11726},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 431, col: 41, offset: 11728},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 431, col: 47, offset: 11734},
													expr: &ruleRefExpr{
														pos:  position{line: 431, col: 48, offset: 11735},
														name: "DoubleMonospaceTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 435, col: 1, offset: 11861},
			expr: &actionExpr{
				pos: position{line: 435, col: 30, offset: 11890},
				run: (*parser).callonDoubleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 435, col: 30, offset: 11890},
					exprs: []any{
						&notExpr{
							pos: position{line: 435, col: 30, offset: 11890},
							expr: &litMatcher{
								pos:        position{line: 435, col: 32, offset: 11892},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 38, offset: 11898},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 47, offset: 11907},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 441, col: 1, offset: 11964},
			expr: &actionExpr{
				pos: position{line: 441, col: 10, offset: 11973},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 441, col: 10, offset: 11973},
					exprs: []any{
						&notExpr{
							pos: position{line: 441, col: 10, offset: 11973},
							expr: &litMatcher{
								pos:        position{line: 441, col: 11, offset: 11974},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 16, offset: 11979},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 21, offset: 11984},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 25, offset: 11988},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 43, offset: 12006},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 49, offset: 12012},
								expr: &actionExpr{
									pos: position{line: 441, col: 50, offset: 12013},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 441, col: 50, offset: 12013},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 441, col: 50, offset: 12013},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 441, col: 60, offset: 12023},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 441, col: 64, offset: 12027},
												label: "label",
												expr: &ruleRefExpr{
													pos:  position{line: 441, col: 71, offset: 12034},
													name: "AnchorLabel",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 107, offset: 12070},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 449, col: 1, offset: 12231},
			expr: &actionExpr{
				pos: position{line: 449, col: 19, offset: 12249},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 449, col: 19, offset: 12249},
					exprs: []any{
						&notExpr{
							pos: position{line: 449, col: 19, offset: 12249},
							expr: &litMatcher{
								pos:        position{line: 449, col: 20, offset: 12250},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 25, offset: 12255},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 30, offset: 12260},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 34, offset: 12264},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 52, offset: 12282},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 58, offset: 12288},
								expr: &actionExpr{
									pos: position{line: 449, col: 59, offset: 12289},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 449, col: 59, offset: 12289},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 449, col: 59, offset: 12289},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 449, col: 69, offset: 12299},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 73, offset: 12303},
												label: "label",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 80, offset: 12310},
													name: "AnchorLabel",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 116, offset: 12346},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 457, col: 1, offset: 12550},
			expr: &oneOrMoreExpr{
				pos: position{line: 457, col: 15, offset: 12564},
				expr: &choiceExpr{
					pos: position{line: 457, col: 17, offset: 12566},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 457, col: 17, offset: 12566},
							exprs: []any{
								&notExpr{
									pos: position{line: 457, col: 17, offset: 12566},
									expr: &litMatcher{
										pos:        position{line: 457, col: 18, offset: 12567},
										val:        "]]",
										ignoreCase: false,
										want:       "\"]]\"",
									},
								},
								&actionExpr{
									pos: position{line: 458, col: 6, offset: 12577},
									run: (*parser).callonAnchorLabel6,
									expr: &oneOrMoreExpr{
										pos: position{line: 458, col: 6, offset: 12577},
										expr: &charClassMatcher{
											pos:             position{line: 458, col: 6, offset: 12577},
											val:             "[^\\r\\n{\\]]",
											chars:           []rune{'\r', '\n', '{', ']'},
											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
											ignoreCase:      false,
											inverted:        true,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 461, col: 7, offset: 12659},
							run: (*parser).callonAnchorLabel9,
							expr: &labeledExpr{
								pos:   position{line: 461, col: 7, offset: 12659},
								label: "arv",
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 11, offset: 12663},
									name: "AttributeReference",
								},
							},
						},
						&actionExpr{
							pos: position{line: 464, col: 8, offset: 12721},
							run: (*parser).callonAnchorLabel12,
							expr: &litMatcher{
								pos:        position{line: 464, col: 8, offset: 12721},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 470, col: 1, offset: 12783},
			expr: &actionExpr{
				pos: position{line: 470, col: 14, offset: 12796},
				run: (*parser).callonAdmonition1,
				expr: &seqExpr{
					pos: position{line: 470, col: 14, offset: 12796},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 470, col: 14, offset: 12796},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 30, offset: 12812},
							label: "admonition",
							expr: &choiceExpr{
								pos: position{line: 471, col: 5, offset: 12829},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 471, col: 5, offset: 12829},
										run: (*parser).callonAdmonition6,
										expr: &litMatcher{
											pos:        position{line: 471, col: 5, offset: 12829},
											val:        "NOTE: ",
											ignoreCase: false,
											want:       "\"NOTE: \"",
										},
									},
									&actionExpr{
										pos: position{line: 472, col: 7, offset: 12912},
										run: (*parser).callonAdmonition8,
										expr: &litMatcher{
											pos:        position{line: 472, col: 7, offset: 12912},
											val:        "TIP: ",
											ignoreCase: false,
											want:       "\"TIP: \"",
										},
									},
									&actionExpr{
										pos: position{line: 473, col: 7, offset: 12993},
										run: (*parser).callonAdmonition10,
										expr: &litMatcher{
											pos:        position{line: 473, col: 7, offset: 12993},
											val:        "IMPORTANT: ",
											ignoreCase: false,
											want:       "\"IMPORTANT: \"",
										},
									},
									&actionExpr{
										pos: position{line: 474, col: 7, offset: 13086},
										run: (*parser).callonAdmonition12,
										expr: &litMatcher{
											pos:        position{line: 474, col: 7, offset: 13086},
											val:        "CAUTON: ",
											ignoreCase: false,
											want:       "\"CAUTON: \"",
										},
									},
									&actionExpr{
										pos: position{line: 475, col: 7, offset: 13174},
										run: (*parser).callonAdmonition14,
										expr: &litMatcher{
											pos:        position{line: 475, col: 7, offset: 13174},
											val:        "WARNING: ",
											ignoreCase: false,
											want:       "\"WARNING: \"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 482, col: 1, offset: 13300},
			expr: &actionExpr{
				pos: position{line: 482, col: 18, offset: 13317},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 482, col: 18, offset: 13317},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 482, col: 18, offset: 13317},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 482, col: 26, offset: 13325},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 27, offset: 13326},
									name: "InlineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 43, offset: 13342},
							label: "eol",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 47, offset: 13346},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 490, col: 1, offset: 13503},
			expr: &actionExpr{
				pos: position{line: 490, col: 17, offset: 13519},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 17, offset: 13519},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 491, col: 5, offset: 13533},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 491, col: 5, offset: 13533},
								name: "Admonition",
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 5, offset: 13550},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 5, offset: 13574},
								name: "FormattedText",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 5, offset: 13594},
								name: "Icon",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 5, offset: 13606},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 5, offset: 13625},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 5, offset: 13636},
								name: "Anchor",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 5, offset: 13650},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 5, offset: 13672},
								name: "AttributeReference",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 5, offset: 13697},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 5, offset: 13713},
								name: "NakedInlineText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 5, offset: 13735},
								name: "CharacterClassInline",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 507, col: 1, offset: 13797},
			expr: &actionExpr{
				pos: position{line: 507, col: 19, offset: 13815},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 507, col: 19, offset: 13815},
					expr: &seqExpr{
						pos: position{line: 507, col: 20, offset: 13816},
						exprs: []any{
							&notExpr{
								pos: position{line: 507, col: 20, offset: 13816},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 21, offset: 13817},
									name: "URLScheme",
								},
							},
							&notExpr{
								pos: position{line: 507, col: 31, offset: 13827},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 32, offset: 13828},
									name: "InlineImageDelimiter",
								},
							},
							&charClassMatcher{
								pos:             position{line: 507, col: 53, offset: 13849},
								val:             "[A-Za-z ]",
								chars:           []rune{' '},
								ranges:          []rune{'A', 'Z', 'a', 'z'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 512, col: 1, offset: 13923},
			expr: &actionExpr{
				pos: position{line: 512, col: 12, offset: 13934},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 512, col: 12, offset: 13934},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 512, col: 12, offset: 13934},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 24, offset: 13946},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 27, offset: 13949},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 28, offset: 13950},
									name: "FootnoteId",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 41, offset: 13963},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 45, offset: 13967},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 512, col: 51, offset: 13973},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 52, offset: 13974},
									name: "FootnoteValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 68, offset: 13990},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 516, col: 1, offset: 14064},
			expr: &actionExpr{
				pos: position{line: 516, col: 14, offset: 14077},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 516, col: 14, offset: 14077},
					expr: &ruleRefExpr{
						pos:  position{line: 516, col: 14, offset: 14077},
						name: "Alphanumeric",
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 520, col: 1, offset: 14127},
			expr: &actionExpr{
				pos: position{line: 520, col: 17, offset: 14143},
				run: (*parser).callonFootnoteValue1,
				expr: &seqExpr{
					pos: position{line: 520, col: 17, offset: 14143},
					exprs: []any{
						&notExpr{
							pos: position{line: 520, col: 17, offset: 14143},
							expr: &litMatcher{
								pos:        position{line: 520, col: 18, offset: 14144},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 22, offset: 14148},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 520, col: 32, offset: 14158},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 520, col: 32, offset: 14158},
										name: "InlineText",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 45, offset: 14171},
										name: "__",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 50, offset: 14176},
										name: "Apostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 63, offset: 14189},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 71, offset: 14197},
										name: "Punctuation",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 85, offset: 14211},
										name: "Macro",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 93, offset: 14219},
										name: "LineBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 105, offset: 14231},
										name: "AttributeReference",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 126, offset: 14252},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 145, offset: 14271},
										name: "EmptyLine",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 157, offset: 14283},
										name: "CharacterClassInline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 525, col: 1, offset: 14335},
			expr: &actionExpr{
				pos: position{line: 525, col: 17, offset: 14351},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 525, col: 17, offset: 14351},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 525, col: 17, offset: 14351},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 28, offset: 14362},
								expr: &ruleRefExpr{
									pos:  position{line: 525, col: 29, offset: 14363},
									name: "ShorthandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 52, offset: 14386},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 526, col: 5, offset: 14397},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 526, col: 5, offset: 14397},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 7, offset: 14413},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 7, offset: 14431},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 7, offset: 14452},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 7, offset: 14469},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 7, offset: 14491},
										name: "SubscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 536, col: 1, offset: 14640},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 14669},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 537, col: 5, offset: 14669},
						name: "InlineText",
					},
					&ruleRefExpr{
						pos:  position{line: 538, col: 5, offset: 14687},
						name: "__",
					},
					&ruleRefExpr{
						pos:  position{line: 539, col: 5, offset: 14697},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 540, col: 5, offset: 14715},
						name: "Punctuation",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 14734},
						name: "AttributeReference",
					},
					&ruleRefExpr{
						pos:  position{line: 542, col: 5, offset: 14760},
						name: "FormattedText",
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 5, offset: 14781},
						name: "Icon",
					},
					&ruleRefExpr{
						pos:  position{line: 544, col: 5, offset: 14793},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 5, offset: 14812},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 14823},
						name: "Anchor",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 14837},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 14861},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 551, col: 1, offset: 14885},
			expr: &actionExpr{
				pos: position{line: 551, col: 20, offset: 14904},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 551, col: 20, offset: 14904},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 551, col: 20, offset: 14904},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 24, offset: 14908},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 36, offset: 14920},
								name: "ShorthandAttribute",
							},
						},
						&litMatcher{
							pos:        position{line: 551, col: 56, offset: 14940},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 556, col: 1, offset: 14981},
			expr: &actionExpr{
				pos: position{line: 556, col: 14, offset: 14994},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 556, col: 14, offset: 14994},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 556, col: 14, offset: 14994},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 24, offset: 15004},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 30, offset: 15010},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 36, offset: 15016},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 48, offset: 15028},
								name: "InlineAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 556, col: 66, offset: 15046},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 560, col: 1, offset: 15178},
			expr: &actionExpr{
				pos: position{line: 560, col: 15, offset: 15192},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 560, col: 15, offset: 15192},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 560, col: 15, offset: 15192},
							name: "InlineImageDelimiter",
						},
						&notExpr{
							pos: position{line: 560, col: 36, offset: 15213},
							expr: &litMatcher{
								pos:        position{line: 560, col: 37, offset: 15214},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 41, offset: 15218},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 47, offset: 15224},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 53, offset: 15230},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 65, offset: 15242},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 564, col: 1, offset: 15384},
			expr: &litMatcher{
				pos:        position{line: 564, col: 24, offset: 15407},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 568, col: 1, offset: 15419},
			expr: &actionExpr{
				pos: position{line: 568, col: 8, offset: 15426},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 568, col: 8, offset: 15426},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 8, offset: 15426},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 16, offset: 15434},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 568, col: 22, offset: 15440},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 568, col: 22, offset: 15440},
									expr: &choiceExpr{
										pos: position{line: 568, col: 23, offset: 15441},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 568, col: 23, offset: 15441},
												name: "Alphanumeric",
											},
											&litMatcher{
												pos:        position{line: 568, col: 38, offset: 15456},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 568, col: 44, offset: 15462},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 81, offset: 15499},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 93, offset: 15511},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 573, col: 1, offset: 15633},
			expr: &actionExpr{
				pos: position{line: 573, col: 15, offset: 15647},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 573, col: 15, offset: 15647},
					exprs: []any{
						&notExpr{
							pos: position{line: 573, col: 15, offset: 15647},
							expr: &litMatcher{
								pos:        position{line: 573, col: 16, offset: 15648},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 21, offset: 15653},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 33, offset: 15665},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 39, offset: 15671},
								name: "FileIncludePath",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 56, offset: 15688},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 68, offset: 15700},
								name: "InlineAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 86, offset: 15718},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 573, col: 96, offset: 15728},
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 97, offset: 15729},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 578, col: 1, offset: 15886},
			expr: &actionExpr{
				pos: position{line: 578, col: 19, offset: 15904},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 578, col: 19, offset: 15904},
					exprs: []any{
						&notExpr{
							pos: position{line: 578, col: 19, offset: 15904},
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 20, offset: 15905},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 22, offset: 15907},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 27, offset: 15912},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 585, col: 1, offset: 15946},
			expr: &actionExpr{
				pos: position{line: 585, col: 8, offset: 15953},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 585, col: 8, offset: 15953},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 585, col: 14, offset: 15959},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 585, col: 14, offset: 15959},
								name: "HTMLLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 25, offset: 15970},
								name: "PrefixedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 40, offset: 15985},
								name: "ExternalLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 55, offset: 16000},
								name: "Email",
							},
						},
					},
				},
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 589, col: 1, offset: 16041},
			expr: &actionExpr{
				pos: position{line: 589, col: 12, offset: 16052},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 589, col: 12, offset: 16052},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 589, col: 12, offset: 16052},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 16, offset: 16056},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 21, offset: 16061},
								name: "FullURL",
							},
						},
						&litMatcher{
							pos:        position{line: 589, col: 30, offset: 16070},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 593, col: 1, offset: 16136},
			expr: &actionExpr{
				pos: position{line: 593, col: 16, offset: 16151},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 593, col: 16, offset: 16151},
					exprs: []any{
						&notExpr{
							pos: position{line: 593, col: 16, offset: 16151},
							expr: &litMatcher{
								pos:        position{line: 593, col: 17, offset: 16152},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 593, col: 22, offset: 16157},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 30, offset: 16165},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 34, offset: 16169},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 38, offset: 16173},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 50, offset: 16185},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 598, col: 1, offset: 16316},
			expr: &actionExpr{
				pos: position{line: 598, col: 16, offset: 16331},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 598, col: 16, offset: 16331},
					exprs: []any{
						&notExpr{
							pos: position{line: 598, col: 16, offset: 16331},
							expr: &litMatcher{
								pos:        position{line: 598, col: 17, offset: 16332},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 22, offset: 16337},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 27, offset: 16342},
								name: "FullURL",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 36, offset: 16351},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 47, offset: 16362},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 48, offset: 16363},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 604, col: 1, offset: 16496},
			expr: &actionExpr{
				pos: position{line: 604, col: 9, offset: 16504},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 604, col: 9, offset: 16504},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 604, col: 9, offset: 16504},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 604, col: 20, offset: 16515},
								expr: &ruleRefExpr{
									pos:  position{line: 604, col: 21, offset: 16516},
									name: "BlockElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 46, offset: 16541},
							name: "TableStart",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 57, offset: 16552},
							label: "cells",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 64, offset: 16559},
								name: "TableElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 79, offset: 16574},
							name: "TableEnd",
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 612, col: 1, offset: 16731},
			expr: &zeroOrMoreExpr{
				pos: position{line: 612, col: 17, offset: 16747},
				expr: &ruleRefExpr{
					pos:  position{line: 612, col: 18, offset: 16748},
					name: "TableElement",
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 614, col: 1, offset: 16765},
			expr: &choiceExpr{
				pos: position{line: 615, col: 9, offset: 16790},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 615, col: 9, offset: 16790},
						name: "TableEmptyLine",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 11, offset: 16816},
						name: "TableMacros",
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 11, offset: 16838},
						name: "TableRow",
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 620, col: 1, offset: 16859},
			expr: &actionExpr{
				pos: position{line: 620, col: 14, offset: 16872},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 620, col: 14, offset: 16872},
					exprs: []any{
						&notExpr{
							pos: position{line: 620, col: 14, offset: 16872},
							expr: &litMatcher{
								pos:        position{line: 620, col: 15, offset: 16873},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 620, col: 20, offset: 16878},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 620, col: 27, offset: 16885},
							expr: &litMatcher{
								pos:        position{line: 620, col: 27, offset: 16885},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 32, offset: 16890},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 620, col: 42, offset: 16900},
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 43, offset: 16901},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 624, col: 1, offset: 16972},
			expr: &actionExpr{
				pos: position{line: 624, col: 18, offset: 16989},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 624, col: 18, offset: 16989},
					exprs: []any{
						&notExpr{
							pos: position{line: 624, col: 18, offset: 16989},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 19, offset: 16990},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 28, offset: 16999},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 36, offset: 17007},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 624, col: 46, offset: 17017},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 48, offset: 17019},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 628, col: 1, offset: 17100},
			expr: &choiceExpr{
				pos: position{line: 628, col: 16, offset: 17115},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 628, col: 16, offset: 17115},
						name: "TableIfDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 29, offset: 17128},
						name: "TableIfNDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 43, offset: 17142},
						name: "TableEndIfDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 59, offset: 17158},
						name: "TableComment",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 74, offset: 17173},
						name: "TableMultiLineComment",
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 630, col: 1, offset: 17197},
			expr: &actionExpr{
				pos: position{line: 630, col: 14, offset: 17210},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 630, col: 14, offset: 17210},
					exprs: []any{
						&notExpr{
							pos: position{line: 630, col: 14, offset: 17210},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 15, offset: 17211},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 24, offset: 17220},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 32, offset: 17228},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 42, offset: 17238},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 48, offset: 17244},
								name: "IfDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 634, col: 1, offset: 17307},
			expr: &actionExpr{
				pos: position{line: 634, col: 15, offset: 17321},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 634, col: 15, offset: 17321},
					exprs: []any{
						&notExpr{
							pos: position{line: 634, col: 15, offset: 17321},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 16, offset: 17322},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 25, offset: 17331},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 33, offset: 17339},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 634, col: 43, offset: 17349},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 50, offset: 17356},
								name: "IfNDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 638, col: 1, offset: 17423},
			expr: &actionExpr{
				pos: position{line: 638, col: 17, offset: 17439},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 638, col: 17, offset: 17439},
					exprs: []any{
						&notExpr{
							pos: position{line: 638, col: 17, offset: 17439},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 18, offset: 17440},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 638, col: 27, offset: 17449},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 638, col: 35, offset: 17457},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 638, col: 45, offset: 17467},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 54, offset: 17476},
								name: "EndIfDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 642, col: 1, offset: 17546},
			expr: &actionExpr{
				pos: position{line: 642, col: 16, offset: 17561},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 642, col: 16, offset: 17561},
					exprs: []any{
						&notExpr{
							pos: position{line: 642, col: 16, offset: 17561},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 17, offset: 17562},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 26, offset: 17571},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 34, offset: 17579},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 43, offset: 17588},
								name: "SingleLineComment",
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 646, col: 1, offset: 17679},
			expr: &actionExpr{
				pos: position{line: 646, col: 25, offset: 17703},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 646, col: 25, offset: 17703},
					exprs: []any{
						&notExpr{
							pos: position{line: 646, col: 25, offset: 17703},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 26, offset: 17704},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 35, offset: 17713},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 646, col: 43, offset: 17721},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 52, offset: 17730},
								name: "MultiLineComment",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 650, col: 1, offset: 17819},
			expr: &oneOrMoreExpr{
				pos: position{line: 650, col: 19, offset: 17837},
				expr: &ruleRefExpr{
					pos:  position{line: 650, col: 19, offset: 17837},
					name: "TableEmptyLine",
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 652, col: 1, offset: 17854},
			expr: &actionExpr{
				pos: position{line: 652, col: 26, offset: 17879},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 652, col: 26, offset: 17879},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 652, col: 26, offset: 17879},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 652, col: 34, offset: 17887},
								expr: &ruleRefExpr{
									pos:  position{line: 652, col: 35, offset: 17888},
									name: "TableCellInlineContentElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 67, offset: 17920},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 656, col: 1, offset: 17998},
			expr: &actionExpr{
				pos: position{line: 656, col: 33, offset: 18030},
				run: (*parser).callonTableCellInlineContentElement1,
				expr: &labeledExpr{
					pos:   position{line: 656, col: 33, offset: 18030},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 657, col: 5, offset: 18044},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 657, col: 5, offset: 18044},
								name: "FormattedText",
							},
							&ruleRefExpr{
								pos:  position{line: 658, col: 5, offset: 18064},
								name: "Icon",
							},
							&ruleRefExpr{
								pos:  position{line: 659, col: 5, offset: 18076},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 660, col: 5, offset: 18095},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 661, col: 5, offset: 18106},
								name: "Anchor",
							},
							&ruleRefExpr{
								pos:  position{line: 662, col: 5, offset: 18121},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 663, col: 5, offset: 18142},
								name: "AttributeReference",
							},
							&ruleRefExpr{
								pos:  position{line: 664, col: 5, offset: 18167},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 665, col: 5, offset: 18183},
								name: "NakedInlineTableCellText",
							},
							&ruleRefExpr{
								pos:  position{line: 666, col: 5, offset: 18214},
								name: "CharacterClassInline",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 5, offset: 18241},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 672, col: 1, offset: 18290},
			expr: &actionExpr{
				pos: position{line: 672, col: 12, offset: 18301},
				run: (*parser).callonTableEnd1,
				expr: &seqExpr{
					pos: position{line: 672, col: 12, offset: 18301},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 672, col: 12, offset: 18301},
							name: "NewLine",
						},
						&notExpr{
							pos: position{line: 672, col: 20, offset: 18309},
							expr: &litMatcher{
								pos:        position{line: 672, col: 21, offset: 18310},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 672, col: 26, offset: 18315},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 672, col: 33, offset: 18322},
							expr: &litMatcher{
								pos:        position{line: 672, col: 33, offset: 18322},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 672, col: 38, offset: 18327},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 672, col: 48, offset: 18337},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 49, offset: 18338},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 676, col: 1, offset: 18410},
			expr: &actionExpr{
				pos: position{line: 676, col: 12, offset: 18421},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 676, col: 12, offset: 18421},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 676, col: 12, offset: 18421},
							label: "initial",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 21, offset: 18430},
								name: "InitialInlineTableCell",
							},
						},
						&labeledExpr{
							pos:   position{line: 676, col: 46, offset: 18455},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 676, col: 57, offset: 18466},
								expr: &ruleRefExpr{
									pos:  position{line: 676, col: 58, offset: 18467},
									name: "AdditionalInlineTableCell",
								},
							},
						},
						&andExpr{
							pos: position{line: 676, col: 86, offset: 18495},
							expr: &choiceExpr{
								pos: position{line: 676, col: 88, offset: 18497},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 676, col: 88, offset: 18497},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 99, offset: 18508},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 121, offset: 18530},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 685, col: 1, offset: 18770},
			expr: &choiceExpr{
				pos: position{line: 685, col: 23, offset: 18792},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 685, col: 23, offset: 18792},
						name: "AdditionalTableCellDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 685, col: 54, offset: 18823},
						name: "InitialTableCellDelimiter",
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 687, col: 1, offset: 18851},
			expr: &actionExpr{
				pos: position{line: 687, col: 26, offset: 18876},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 687, col: 26, offset: 18876},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 687, col: 26, offset: 18876},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 34, offset: 18884},
								name: "InitialTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 61, offset: 18911},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 70, offset: 18920},
								name: "InlineTableLines",
							},
						},
						&andExpr{
							pos: position{line: 687, col: 88, offset: 18938},
							expr: &choiceExpr{
								pos: position{line: 687, col: 90, offset: 18940},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 687, col: 90, offset: 18940},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 101, offset: 18951},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 119, offset: 18969},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 133, offset: 18983},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 155, offset: 19005},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 692, col: 1, offset: 19132},
			expr: &actionExpr{
				pos: position{line: 692, col: 30, offset: 19161},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 692, col: 30, offset: 19161},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 692, col: 30, offset: 19161},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 38, offset: 19169},
								name: "AdditionalTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 68, offset: 19199},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 77, offset: 19208},
								name: "InlineTableLines",
							},
						},
						&andExpr{
							pos: position{line: 692, col: 95, offset: 19226},
							expr: &choiceExpr{
								pos: position{line: 692, col: 97, offset: 19228},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 692, col: 97, offset: 19228},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 108, offset: 19239},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 126, offset: 19257},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 140, offset: 19271},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 162, offset: 19293},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialBlockTableCell",
			pos:  position{line: 696, col: 1, offset: 19415},
			expr: &actionExpr{
				pos: position{line: 696, col: 25, offset: 19439},
				run: (*parser).callonInitialBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 696, col: 25, offset: 19439},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 696, col: 25, offset: 19439},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 33, offset: 19447},
								name: "InitialTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 60, offset: 19474},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 68, offset: 19482},
								expr: &choiceExpr{
									pos: position{line: 696, col: 69, offset: 19483},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 696, col: 69, offset: 19483},
											name: "BlockTableElement",
										},
										&ruleRefExpr{
											pos:  position{line: 696, col: 89, offset: 19503},
											name: "InlineTableElements",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 696, col: 111, offset: 19525},
							expr: &choiceExpr{
								pos: position{line: 696, col: 113, offset: 19527},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 696, col: 113, offset: 19527},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 124, offset: 19538},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 142, offset: 19556},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 156, offset: 19570},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 178, offset: 19592},
										name: "NewLine",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 696, col: 189, offset: 19603},
							run: (*parser).callonInitialBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "AdditionalBlockTableCell",
			pos:  position{line: 703, col: 1, offset: 19883},
			expr: &actionExpr{
				pos: position{line: 703, col: 28, offset: 19910},
				run: (*parser).callonAdditionalBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 703, col: 28, offset: 19910},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 703, col: 28, offset: 19910},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 36, offset: 19918},
								name: "AdditionalTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 66, offset: 19948},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 703, col: 74, offset: 19956},
								expr: &choiceExpr{
									pos: position{line: 703, col: 75, offset: 19957},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 703, col: 75, offset: 19957},
											name: "BlockTableElement",
										},
										&ruleRefExpr{
											pos:  position{line: 703, col: 95, offset: 19977},
											name: "InlineTableElements",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 703, col: 117, offset: 19999},
							expr: &choiceExpr{
								pos: position{line: 703, col: 119, offset: 20001},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 703, col: 119, offset: 20001},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 130, offset: 20012},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 148, offset: 20030},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 162, offset: 20044},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 184, offset: 20066},
										name: "NewLine",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 703, col: 195, offset: 20077},
							run: (*parser).callonAdditionalBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 710, col: 1, offset: 20357},
			expr: &actionExpr{
				pos: position{line: 710, col: 20, offset: 20376},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 710, col: 20, offset: 20376},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 710, col: 29, offset: 20385},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 710, col: 29, offset: 20385},
								name: "MultiLineTableCell",
							},
							&ruleRefExpr{
								pos:  position{line: 710, col: 50, offset: 20406},
								name: "InlineTableElements",
							},
							&ruleRefExpr{
								pos:  position{line: 710, col: 72, offset: 20428},
								name: "EmptyCell",
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 714, col: 1, offset: 20472},
			expr: &actionExpr{
				pos: position{line: 714, col: 13, offset: 20484},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 714, col: 13, offset: 20484},
					expr: &choiceExpr{
						pos: position{line: 714, col: 15, offset: 20486},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 714, col: 15, offset: 20486},
								name: "TableEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 26, offset: 20497},
								name: "TableCellDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 48, offset: 20519},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 718, col: 1, offset: 20602},
			expr: &seqExpr{
				pos: position{line: 718, col: 24, offset: 20625},
				exprs: []any{
					&notExpr{
						pos: position{line: 718, col: 24, offset: 20625},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 25, offset: 20626},
							name: "TableEnd",
						},
					},
					&notExpr{
						pos: position{line: 718, col: 34, offset: 20635},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 35, offset: 20636},
							name: "TableCellDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 720, col: 1, offset: 20657},
			expr: &seqExpr{
				pos: position{line: 720, col: 33, offset: 20689},
				exprs: []any{
					&notExpr{
						pos: position{line: 720, col: 33, offset: 20689},
						expr: &ruleRefExpr{
							pos:  position{line: 720, col: 34, offset: 20690},
							name: "MultiLineComment",
						},
					},
					&notExpr{
						pos: position{line: 720, col: 51, offset: 20707},
						expr: &ruleRefExpr{
							pos:  position{line: 720, col: 52, offset: 20708},
							name: "SingleLineComment",
						},
					},
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 722, col: 1, offset: 20727},
			expr: &actionExpr{
				pos: position{line: 722, col: 22, offset: 20748},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 722, col: 22, offset: 20748},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 722, col: 22, offset: 20748},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 722, col: 28, offset: 20754},
								expr: &ruleRefExpr{
									pos:  position{line: 722, col: 29, offset: 20755},
									name: "InlineTableCellLine",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 51, offset: 20777},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 60, offset: 20786},
								name: "InlineTableCellLastLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 732, col: 1, offset: 21044},
			expr: &choiceExpr{
				pos: position{line: 732, col: 23, offset: 21066},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 732, col: 23, offset: 21066},
						name: "InlineTableCellEmptyLine",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 50, offset: 21093},
						name: "InlineTableCellIntermediateLine",
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 734, col: 1, offset: 21127},
			expr: &actionExpr{
				pos: position{line: 734, col: 35, offset: 21161},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 734, col: 35, offset: 21161},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 734, col: 35, offset: 21161},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 56, offset: 21182},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 64, offset: 21190},
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 64, offset: 21190},
									name: "NewLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 73, offset: 21199},
							name: "ValidMultilineTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 103, offset: 21229},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 734, col: 111, offset: 21237},
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 112, offset: 21238},
									name: "InlineTableElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 133, offset: 21259},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 156, offset: 21282},
								expr: &actionExpr{
									pos: position{line: 734, col: 157, offset: 21283},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 734, col: 157, offset: 21283},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 734, col: 157, offset: 21283},
												label: "nl",
												expr: &ruleRefExpr{
													pos:  position{line: 734, col: 160, offset: 21286},
													name: "NewLine",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 734, col: 168, offset: 21294},
												name: "AnySpaces",
											},
											&andExpr{
												pos: position{line: 734, col: 178, offset: 21304},
												expr: &ruleRefExpr{
													pos:  position{line: 734, col: 180, offset: 21306},
													name: "NewLine",
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 209, offset: 21335},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 210, offset: 21336},
								name: "NewLine",
							},
						},
						&notExpr{
							pos: position{line: 734, col: 218, offset: 21344},
							expr: &choiceExpr{
								pos: position{line: 734, col: 220, offset: 21346},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 734, col: 220, offset: 21346},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 234, offset: 21360},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 245, offset: 21371},
										name: "TableCellDelimiter",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 267, offset: 21393},
							expr: &choiceExpr{
								pos: position{line: 734, col: 269, offset: 21395},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 734, col: 269, offset: 21395},
										name: "InlineTableCellLine",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 291, offset: 21417},
										name: "InlineTableCellLastLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 747, col: 1, offset: 21774},
			expr: &actionExpr{
				pos: position{line: 747, col: 28, offset: 21801},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 747, col: 28, offset: 21801},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 747, col: 28, offset: 21801},
							name: "ValidTableCellPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 49, offset: 21822},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 57, offset: 21830},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 747, col: 67, offset: 21840},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 69, offset: 21842},
								name: "NewLine",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 78, offset: 21851},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 79, offset: 21852},
								name: "TableEnd",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 88, offset: 21861},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 89, offset: 21862},
								name: "TableCellDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 108, offset: 21881},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 109, offset: 21882},
								name: "TableMacros",
							},
						},
						&andExpr{
							pos: position{line: 747, col: 121, offset: 21894},
							expr: &choiceExpr{
								pos: position{line: 747, col: 123, offset: 21896},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 747, col: 123, offset: 21896},
										name: "InlineTableCellLine",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 145, offset: 21918},
										name: "InlineTableCellLastLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 752, col: 1, offset: 22005},
			expr: &actionExpr{
				pos: position{line: 752, col: 27, offset: 22031},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 752, col: 27, offset: 22031},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 752, col: 27, offset: 22031},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 48, offset: 22052},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 51, offset: 22055},
								name: "NewLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 59, offset: 22063},
							name: "ValidMultilineTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 89, offset: 22093},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 752, col: 97, offset: 22101},
								expr: &ruleRefExpr{
									pos:  position{line: 752, col: 98, offset: 22102},
									name: "InlineTableElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 752, col: 119, offset: 22123},
							expr: &choiceExpr{
								pos: position{line: 752, col: 121, offset: 22125},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 752, col: 121, offset: 22125},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 132, offset: 22136},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 150, offset: 22154},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 164, offset: 22168},
										name: "TableCellDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLine",
			pos:  position{line: 759, col: 1, offset: 22343},
			expr: &actionExpr{
				pos: position{line: 759, col: 22, offset: 22364},
				run: (*parser).callonBlockTableCellLine1,
				expr: &labeledExpr{
					pos:   position{line: 759, col: 22, offset: 22364},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 759, col: 31, offset: 22373},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 759, col: 31, offset: 22373},
								name: "BlockTableElement",
							},
							&ruleRefExpr{
								pos:  position{line: 759, col: 51, offset: 22393},
								name: "InlineTableCellIntermediateLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLastLine",
			pos:  position{line: 763, col: 1, offset: 22460},
			expr: &actionExpr{
				pos: position{line: 763, col: 26, offset: 22485},
				run: (*parser).callonBlockTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 763, col: 26, offset: 22485},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 763, col: 26, offset: 22485},
							name: "ValidTableCellPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 47, offset: 22506},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 763, col: 55, offset: 22514},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 763, col: 63, offset: 22522},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 64, offset: 22523},
									name: "InlineTableElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 763, col: 85, offset: 22544},
							expr: &choiceExpr{
								pos: position{line: 763, col: 87, offset: 22546},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 763, col: 87, offset: 22546},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 763, col: 98, offset: 22557},
										name: "TableCellDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 768, col: 1, offset: 22645},
			expr: &actionExpr{
				pos: position{line: 768, col: 23, offset: 22667},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 768, col: 23, offset: 22667},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 768, col: 23, offset: 22667},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 44, offset: 22688},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 768, col: 52, offset: 22696},
								expr: &ruleRefExpr{
									pos:  position{line: 768, col: 53, offset: 22697},
									name: "InlineTableElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 773, col: 1, offset: 22790},
			expr: &actionExpr{
				pos: position{line: 773, col: 22, offset: 22811},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 773, col: 22, offset: 22811},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 773, col: 22, offset: 22811},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 44, offset: 22833},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 774, col: 5, offset: 22847},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 774, col: 5, offset: 22847},
										name: "NakedInlineTableCellText",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 5, offset: 22878},
										name: "CharacterClassTableCell",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 780, col: 1, offset: 22943},
			expr: &actionExpr{
				pos: position{line: 780, col: 21, offset: 22963},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 780, col: 21, offset: 22963},
					exprs: []any{
						&notExpr{
							pos: position{line: 780, col: 21, offset: 22963},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 22, offset: 22964},
								name: "InitialTableCellDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 48, offset: 22990},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 59, offset: 23001},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 68, offset: 23010},
								name: "BlockElement",
							},
						},
						&notExpr{
							pos: position{line: 780, col: 82, offset: 23024},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 83, offset: 23025},
								name: "TableCellDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 780, col: 103, offset: 23045},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 104, offset: 23046},
								name: "TableEnd",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 785, col: 1, offset: 23091},
			expr: &actionExpr{
				pos: position{line: 785, col: 28, offset: 23118},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 785, col: 28, offset: 23118},
					expr: &seqExpr{
						pos: position{line: 785, col: 29, offset: 23119},
						exprs: []any{
							&charClassMatcher{
								pos:             position{line: 785, col: 29, offset: 23119},
								val:             "[A-Za-z ]",
								chars:           []rune{' '},
								ranges:          []rune{'A', 'Z', 'a', 'z'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
							&notExpr{
								pos: position{line: 785, col: 39, offset: 23129},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 40, offset: 23130},
									name: "TableCellDelimiter",
								},
							},
							&notExpr{
								pos: position{line: 785, col: 59, offset: 23149},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 60, offset: 23150},
									name: "TableEnd",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 789, col: 1, offset: 23222},
			expr: &actionExpr{
				pos: position{line: 789, col: 27, offset: 23248},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &choiceExpr{
					pos: position{line: 789, col: 28, offset: 23249},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 789, col: 28, offset: 23249},
							val:        "\\|",
							ignoreCase: false,
							want:       "\"\\\\|\"",
						},
						&charClassMatcher{
							pos:             position{line: 789, col: 36, offset: 23257},
							val:             "[^|\\r\\n]",
							chars:           []rune{'|', '\r', '\n'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false},
							ignoreCase:      false,
							inverted:        true,
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 794, col: 1, offset: 23376},
			expr: &actionExpr{
				pos: position{line: 794, col: 29, offset: 23404},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 794, col: 29, offset: 23404},
					exprs: []any{
						&notExpr{
							pos: position{line: 794, col: 29, offset: 23404},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 30, offset: 23405},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 39, offset: 23414},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 47, offset: 23422},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 57, offset: 23432},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 794, col: 64, offset: 23439},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 65, offset: 23440},
									name: "TableCellFormat",
								},
							},
						},
						&notExpr{
							pos: position{line: 794, col: 83, offset: 23458},
							expr: &litMatcher{
								pos:        position{line: 794, col: 84, offset: 23459},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 794, col: 89, offset: 23464},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 801, col: 1, offset: 23580},
			expr: &actionExpr{
				pos: position{line: 801, col: 32, offset: 23611},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 801, col: 32, offset: 23611},
					exprs: []any{
						&notExpr{
							pos: position{line: 801, col: 32, offset: 23611},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 33, offset: 23612},
								name: "TableEnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 42, offset: 23621},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 49, offset: 23628},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 50, offset: 23629},
									name: "AdditionalTableCellFormat",
								},
							},
						},
						&notExpr{
							pos: position{line: 801, col: 78, offset: 23657},
							expr: &litMatcher{
								pos:        position{line: 801, col: 79, offset: 23658},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 801, col: 84, offset: 23663},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 806, col: 1, offset: 23768},
			expr: &actionExpr{
				pos: position{line: 806, col: 26, offset: 23793},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 806, col: 26, offset: 23793},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 806, col: 26, offset: 23793},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 36, offset: 23803},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 44, offset: 23811},
								name: "TableCellFormat",
							},
						},
						&andCodeExpr{
							pos: position{line: 806, col: 61, offset: 23828},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 813, col: 1, offset: 23954},
			expr: &actionExpr{
				pos: position{line: 813, col: 29, offset: 23982},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 813, col: 29, offset: 23982},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 813, col: 29, offset: 23982},
							label: "lead",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 35, offset: 23988},
								name: "__",
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 39, offset: 23992},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 47, offset: 24000},
								name: "TableCellFormat",
							},
						},
						&andCodeExpr{
							pos: position{line: 813, col: 64, offset: 24017},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 819, col: 1, offset: 24103},
			expr: &actionExpr{
				pos: position{line: 819, col: 17, offset: 24119},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 819, col: 17, offset: 24119},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 819, col: 17, offset: 24119},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 819, col: 24, offset: 24126},
								expr: &actionExpr{
									pos: position{line: 819, col: 25, offset: 24127},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 819, col: 25, offset: 24127},
										label: "n",
										expr: &ruleRefExpr{
											pos:  position{line: 819, col: 27, offset: 24129},
											name: "PositiveInteger",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 12, offset: 24200},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 821, col: 17, offset: 24205},
								expr: &actionExpr{
									pos: position{line: 821, col: 18, offset: 24206},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 821, col: 18, offset: 24206},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 821, col: 18, offset: 24206},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 821, col: 22, offset: 24210},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 821, col: 24, offset: 24212},
													name: "PositiveInteger",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 824, col: 11, offset: 24290},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 832, col: 1, offset: 24528},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 24552},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 24552},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 833, col: 5, offset: 24552},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 833, col: 16, offset: 24563},
								expr: &actionExpr{
									pos: position{line: 834, col: 9, offset: 24573},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 834, col: 9, offset: 24573},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 834, col: 9, offset: 24573},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 834, col: 21, offset: 24585},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 834, col: 21, offset: 24585},
														exprs: []any{
															&charClassMatcher{
																pos:             position{line: 834, col: 21, offset: 24585},
																val:             "[1-9]",
																ranges:          []rune{'1', '9'},
																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																ignoreCase:      false,
																inverted:        false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 834, col: 26, offset: 24590},
																expr: &charClassMatcher{
																	pos:             position{line: 834, col: 26, offset: 24590},
																	val:             "[0-9]",
																	ranges:          []rune{'0', '9'},
																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																	ignoreCase:      false,
																	inverted:        false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 834, col: 63, offset: 24627},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 24709},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 838, col: 10, offset: 24714},
								expr: &actionExpr{
									pos: position{line: 839, col: 9, offset: 24724},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 839, col: 9, offset: 24724},
										label: "span",
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 15, offset: 24730},
											name: "TableCellSpan",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 5, offset: 24801},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 843, col: 21, offset: 24817},
								expr: &choiceExpr{
									pos: position{line: 844, col: 9, offset: 24827},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 844, col: 9, offset: 24827},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 844, col: 9, offset: 24827},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 845, col: 11, offset: 24895},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 845, col: 11, offset: 24895},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 846, col: 11, offset: 24964},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 846, col: 11, offset: 24964},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 25036},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 19, offset: 25050},
								expr: &choiceExpr{
									pos: position{line: 849, col: 9, offset: 25060},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 849, col: 9, offset: 25060},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 849, col: 9, offset: 25060},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 850, col: 11, offset: 25126},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 850, col: 11, offset: 25126},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 851, col: 11, offset: 25195},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 851, col: 11, offset: 25195},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 25265},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 853, col: 11, offset: 25271},
								expr: &choiceExpr{
									pos: position{line: 854, col: 9, offset: 25281},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 854, col: 9, offset: 25281},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 854, col: 9, offset: 25281},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 855, col: 11, offset: 25343},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 855, col: 11, offset: 25343},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 856, col: 11, offset: 25404},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 856, col: 11, offset: 25404},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 857, col: 11, offset: 25467},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 857, col: 11, offset: 25467},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 858, col: 11, offset: 25528},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 858, col: 11, offset: 25528},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 859, col: 11, offset: 25590},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 859, col: 11, offset: 25590},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 860, col: 11, offset: 25654},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 860, col: 11, offset: 25654},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 862, col: 6, offset: 25717},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 879, col: 1, offset: 26420},
			expr: &actionExpr{
				pos: position{line: 879, col: 13, offset: 26432},
				run: (*parser).callonURLScheme1,
				expr: &choiceExpr{
					pos: position{line: 879, col: 14, offset: 26433},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 879, col: 14, offset: 26433},
							val:        "https://",
							ignoreCase: false,
							want:       "\"https://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 27, offset: 26446},
							val:        "http://",
							ignoreCase: false,
							want:       "\"http://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 39, offset: 26458},
							val:        "ftp://",
							ignoreCase: false,
							want:       "\"ftp://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 50, offset: 26469},
							val:        "irc://",
							ignoreCase: false,
							want:       "\"irc://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 61, offset: 26480},
							val:        "mailto:",
							ignoreCase: false,
							want:       "\"mailto:\"",
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 883, col: 1, offset: 26531},
			expr: &actionExpr{
				pos: position{line: 883, col: 7, offset: 26537},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 883, col: 7, offset: 26537},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 883, col: 7, offset: 26537},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 14, offset: 26544},
								expr: &ruleRefExpr{
									pos:  position{line: 883, col: 15, offset: 26545},
									name: "URLScheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 27, offset: 26557},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 33, offset: 26563},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 888, col: 1, offset: 26669},
			expr: &actionExpr{
				pos: position{line: 888, col: 11, offset: 26679},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 888, col: 11, offset: 26679},
					exprs: []any{
						&notExpr{
							pos: position{line: 888, col: 11, offset: 26679},
							expr: &litMatcher{
								pos:        position{line: 888, col: 12, offset: 26680},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 16, offset: 26684},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 24, offset: 26692},
								name: "URLScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 35, offset: 26703},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 41, offset: 26709},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 895, col: 1, offset: 26804},
			expr: &actionExpr{
				pos: position{line: 895, col: 8, offset: 26811},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 895, col: 8, offset: 26811},
					exprs: []any{
						&notExpr{
							pos: position{line: 895, col: 8, offset: 26811},
							expr: &litMatcher{
								pos:        position{line: 895, col: 9, offset: 26812},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 13, offset: 26816},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 895, col: 24, offset: 26827},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 24, offset: 26827},
									name: "PathElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 899, col: 1, offset: 26898},
			expr: &choiceExpr{
				pos: position{line: 899, col: 16, offset: 26913},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 899, col: 16, offset: 26913},
						run: (*parser).callonPathElement2,
						expr: &oneOrMoreExpr{
							pos: position{line: 899, col: 16, offset: 26913},
							expr: &charClassMatcher{
								pos:             position{line: 899, col: 17, offset: 26914},
								val:             "[^\\r\\n{.<>!?,;[\\] ]",
								chars:           []rune{'\r', '\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 26993},
						run: (*parser).callonPathElement5,
						expr: &seqExpr{
							pos: position{line: 901, col: 6, offset: 26994},
							exprs: []any{
								&charClassMatcher{
									pos:             position{line: 901, col: 6, offset: 26994},
									val:             "[.?!;,]",
									chars:           []rune{'.', '?', '!', ';', ','},
									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
									ignoreCase:      false,
									inverted:        false,
								},
								&andExpr{
									pos: position{line: 901, col: 14, offset: 27002},
									expr: &seqExpr{
										pos: position{line: 901, col: 16, offset: 27004},
										exprs: []any{
											&notExpr{
												pos: position{line: 901, col: 16, offset: 27004},
												expr: &ruleRefExpr{
													pos:  position{line: 901, col: 17, offset: 27005},
													name: "_",
												},
											},
											&notExpr{
												pos: position{line: 901, col: 19, offset: 27007},
												expr: &ruleRefExpr{
													pos:  position{line: 901, col: 20, offset: 27008},
													name: "EndOfFile",
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 903, col: 5, offset: 27077},
						name: "AttributeReference",
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 907, col: 1, offset: 27101},
			expr: &actionExpr{
				pos: position{line: 907, col: 9, offset: 27109},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 907, col: 9, offset: 27109},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 907, col: 9, offset: 27109},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 15, offset: 27115},
								name: "EmailName",
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 26, offset: 27126},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 30, offset: 27130},
							label: "domain",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 38, offset: 27138},
								name: "EmailDomain",
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 911, col: 1, offset: 27236},
			expr: &actionExpr{
				pos: position{line: 911, col: 13, offset: 27248},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 911, col: 13, offset: 27248},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 911, col: 13, offset: 27248},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 911, col: 19, offset: 27254},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 911, col: 19, offset: 27254},
									expr: &choiceExpr{
										pos: position{line: 911, col: 20, offset: 27255},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 911, col: 20, offset: 27255},
												name: "Alphanumeric",
											},
											&charClassMatcher{
												pos:             position{line: 911, col: 35, offset: 27270},
												val:             "[!#$%&'*+-/=?^_`{|}~.]",
												chars:           []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:          []rune{'+', '/'},
												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false},
												ignoreCase:      false,
												inverted:        false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 913, col: 4, offset: 27398},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 920, col: 1, offset: 27564},
			expr: &actionExpr{
				pos: position{line: 920, col: 15, offset: 27578},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 920, col: 15, offset: 27578},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 920, col: 15, offset: 27578},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 920, col: 23, offset: 27586},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 920, col: 24, offset: 27587},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 920, col: 24, offset: 27587},
											expr: &ruleRefExpr{
												pos:  position{line: 920, col: 25, offset: 27588},
												name: "Alphanumeric",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 920, col: 40, offset: 27603},
											expr: &seqExpr{
												pos: position{line: 920, col: 41, offset: 27604},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 920, col: 41, offset: 27604},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 920, col: 45, offset: 27608},
														expr: &choiceExpr{
															pos: position{line: 920, col: 46, offset: 27609},
															alternatives: []any{
																&ruleRefExpr{
																	pos:  position{line: 920, col: 46, offset: 27609},
																	name: "Alphanumeric",
																},
																&litMatcher{
																	pos:        position{line: 920, col: 61, offset: 27624},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 922, col: 4, offset: 27669},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 930, col: 1, offset: 27811},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 27825},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 27825},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 931, col: 5, offset: 27825},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 12, offset: 27832},
								name: "ListingStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 5, offset: 27850},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 932, col: 11, offset: 27856},
								expr: &ruleRefExpr{
									pos:  position{line: 932, col: 12, offset: 27857},
									name: "ListingLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 5, offset: 27875},
							name: "ListingEnd",
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 937, col: 1, offset: 28033},
			expr: &actionExpr{
				pos: position{line: 937, col: 16, offset: 28048},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 937, col: 16, offset: 28048},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 937, col: 16, offset: 28048},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 937, col: 32, offset: 28064},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 42, offset: 28074},
								name: "ListingDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 937, col: 59, offset: 28091},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 937, col: 69, offset: 28101},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 944, col: 1, offset: 28278},
			expr: &seqExpr{
				pos: position{line: 944, col: 14, offset: 28291},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 944, col: 14, offset: 28291},
						name: "BeginningOfLine",
					},
					&labeledExpr{
						pos:   position{line: 944, col: 30, offset: 28307},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 40, offset: 28317},
							name: "ListingDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 944, col: 57, offset: 28334},
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 58, offset: 28335},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 944, col: 68, offset: 28345},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 953, col: 1, offset: 28605},
			expr: &actionExpr{
				pos: position{line: 953, col: 18, offset: 28622},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 953, col: 18, offset: 28622},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 953, col: 18, offset: 28622},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 953, col: 27, offset: 28631},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 953, col: 27, offset: 28631},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 953, col: 34, offset: 28638},
										expr: &litMatcher{
											pos:        position{line: 953, col: 34, offset: 28638},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 953, col: 40, offset: 28644},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 960, col: 1, offset: 28763},
			expr: &actionExpr{
				pos: position{line: 960, col: 20, offset: 28782},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 960, col: 20, offset: 28782},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 960, col: 20, offset: 28782},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 29, offset: 28791},
								name: "ListingHyphens",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 5, offset: 28812},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 966, col: 1, offset: 28939},
			expr: &actionExpr{
				pos: position{line: 966, col: 15, offset: 28953},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 966, col: 16, offset: 28954},
					exprs: []any{
						&notExpr{
							pos: position{line: 966, col: 16, offset: 28954},
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 17, offset: 28955},
								name: "ListingDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 34, offset: 28972},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 966, col: 47, offset: 28985},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 52, offset: 28990},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 60, offset: 28998},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 970, col: 1, offset: 29048},
			expr: &actionExpr{
				pos: position{line: 971, col: 5, offset: 29059},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 971, col: 5, offset: 29059},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 971, col: 5, offset: 29059},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 971, col: 12, offset: 29066},
								name: "OpenStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 972, col: 5, offset: 29081},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 972, col: 11, offset: 29087},
								expr: &seqExpr{
									pos: position{line: 972, col: 12, offset: 29088},
									exprs: []any{
										&notExpr{
											pos: position{line: 972, col: 12, offset: 29088},
											expr: &ruleRefExpr{
												pos:  position{line: 972, col: 13, offset: 29089},
												name: "OpenDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 972, col: 27, offset: 29103},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 5, offset: 29117},
							name: "OpenEnd",
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 977, col: 1, offset: 29266},
			expr: &actionExpr{
				pos: position{line: 977, col: 13, offset: 29278},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 977, col: 13, offset: 29278},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 977, col: 13, offset: 29278},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 23, offset: 29288},
								name: "OpenDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 977, col: 37, offset: 29302},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 977, col: 47, offset: 29312},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 984, col: 1, offset: 29486},
			expr: &seqExpr{
				pos: position{line: 984, col: 11, offset: 29496},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 984, col: 11, offset: 29496},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 984, col: 21, offset: 29506},
							name: "OpenDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 984, col: 35, offset: 29520},
						expr: &ruleRefExpr{
							pos:  position{line: 984, col: 36, offset: 29521},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 984, col: 46, offset: 29531},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 993, col: 1, offset: 29785},
			expr: &actionExpr{
				pos: position{line: 993, col: 14, offset: 29798},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 993, col: 14, offset: 29798},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 993, col: 23, offset: 29807},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 998, col: 1, offset: 29863},
			expr: &actionExpr{
				pos: position{line: 998, col: 17, offset: 29879},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 998, col: 17, offset: 29879},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 998, col: 17, offset: 29879},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 26, offset: 29888},
								name: "OpenEquals",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 5, offset: 29905},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1005, col: 1, offset: 30038},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 15, offset: 30052},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 15, offset: 30052},
						name: "SingleMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 34, offset: 30071},
						name: "DoubleMarkedText",
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1007, col: 1, offset: 30090},
			expr: &actionExpr{
				pos: position{line: 1007, col: 20, offset: 30109},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1007, col: 20, offset: 30109},
					exprs: []any{
						&notExpr{
							pos: position{line: 1007, col: 20, offset: 30109},
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 21, offset: 30110},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 28, offset: 30117},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1007, col: 32, offset: 30121},
							expr: &notExpr{
								pos: position{line: 1007, col: 34, offset: 30123},
								expr: &litMatcher{
									pos:        position{line: 1007, col: 35, offset: 30124},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1007, col: 40, offset: 30129},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 47, offset: 30136},
								name: "SingleMarkedTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 70, offset: 30159},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1007, col: 74, offset: 30163},
							expr: &litMatcher{
								pos:        position{line: 1007, col: 75, offset: 30164},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1007, col: 79, offset: 30168},
							expr: &notExpr{
								pos: position{line: 1007, col: 81, offset: 30170},
								expr: &ruleRefExpr{
									pos:  position{line: 1007, col: 82, offset: 30171},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1011, col: 1, offset: 30216},
			expr: &actionExpr{
				pos: position{line: 1011, col: 25, offset: 30240},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 25, offset: 30240},
					exprs: []any{
						&notExpr{
							pos: position{line: 1011, col: 25, offset: 30240},
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 26, offset: 30241},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 28, offset: 30243},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1011, col: 34, offset: 30249},
								expr: &actionExpr{
									pos: position{line: 1011, col: 35, offset: 30250},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1011, col: 35, offset: 30250},
										exprs: []any{
											&notExpr{
												pos: position{line: 1011, col: 35, offset: 30250},
												expr: &ruleRefExpr{
													pos:  position{line: 1011, col: 36, offset: 30251},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1011, col: 38, offset: 30253},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1011, col: 44, offset: 30259},
													expr: &ruleRefExpr{
														pos:  position{line: 1011, col: 45, offset: 30260},
														name: "SingleMarkedTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1015, col: 1, offset: 30414},
			expr: &actionExpr{
				pos: position{line: 1015, col: 27, offset: 30440},
				run: (*parser).callonSingleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 27, offset: 30440},
					exprs: []any{
						&notExpr{
							pos: position{line: 1015, col: 27, offset: 30440},
							expr: &seqExpr{
								pos: position{line: 1015, col: 29, offset: 30442},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1015, col: 29, offset: 30442},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
									&notExpr{
										pos: position{line: 1015, col: 33, offset: 30446},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 34, offset: 30447},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1015, col: 39, offset: 30452},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1015, col: 48, offset: 30461},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1019, col: 1, offset: 30516},
			expr: &actionExpr{
				pos: position{line: 1019, col: 20, offset: 30535},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1019, col: 20, offset: 30535},
					exprs: []any{
						&notExpr{
							pos: position{line: 1019, col: 20, offset: 30535},
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 21, offset: 30536},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 34, offset: 30549},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1019, col: 39, offset: 30554},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 46, offset: 30561},
								name: "DoubleMarkedTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 69, offset: 30584},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1023, col: 1, offset: 30621},
			expr: &actionExpr{
				pos: position{line: 1023, col: 25, offset: 30645},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 25, offset: 30645},
					exprs: []any{
						&notExpr{
							pos: position{line: 1023, col: 25, offset: 30645},
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 26, offset: 30646},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 28, offset: 30648},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1023, col: 34, offset: 30654},
								expr: &actionExpr{
									pos: position{line: 1023, col: 35, offset: 30655},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1023, col: 35, offset: 30655},
										exprs: []any{
											&notExpr{
												pos: position{line: 1023, col: 35, offset: 30655},
												expr: &ruleRefExpr{
													pos:  position{line: 1023, col: 36, offset: 30656},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1023, col: 38, offset: 30658},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1023, col: 44, offset: 30664},
													expr: &ruleRefExpr{
														pos:  position{line: 1023, col: 45, offset: 30665},
														name: "DoubleMarkedTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1027, col: 1, offset: 30831},
			expr: &actionExpr{
				pos: position{line: 1027, col: 27, offset: 30857},
				run: (*parser).callonDoubleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 27, offset: 30857},
					exprs: []any{
						&notExpr{
							pos: position{line: 1027, col: 27, offset: 30857},
							expr: &litMatcher{
								pos:        position{line: 1027, col: 29, offset: 30859},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 35, offset: 30865},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 44, offset: 30874},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1033, col: 1, offset: 30931},
			expr: &actionExpr{
				pos: position{line: 1034, col: 5, offset: 30945},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 5, offset: 30945},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1034, col: 5, offset: 30945},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 12, offset: 30952},
								name: "ExampleStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 5, offset: 30970},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1035, col: 11, offset: 30976},
								expr: &seqExpr{
									pos: position{line: 1035, col: 12, offset: 30977},
									exprs: []any{
										&notExpr{
											pos: position{line: 1035, col: 12, offset: 30977},
											expr: &ruleRefExpr{
												pos:  position{line: 1035, col: 13, offset: 30978},
												name: "ExampleDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1035, col: 30, offset: 30995},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1036, col: 5, offset: 31009},
							name: "ExampleEnd",
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1040, col: 1, offset: 31167},
			expr: &actionExpr{
				pos: position{line: 1040, col: 16, offset: 31182},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 16, offset: 31182},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1040, col: 16, offset: 31182},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1040, col: 26, offset: 31192},
								name: "ExampleDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1040, col: 43, offset: 31209},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1040, col: 53, offset: 31219},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1047, col: 1, offset: 31404},
			expr: &seqExpr{
				pos: position{line: 1047, col: 14, offset: 31417},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1047, col: 14, offset: 31417},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1047, col: 24, offset: 31427},
							name: "ExampleDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1047, col: 41, offset: 31444},
						expr: &ruleRefExpr{
							pos:  position{line: 1047, col: 42, offset: 31445},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1047, col: 52, offset: 31455},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1056, col: 1, offset: 31723},
			expr: &actionExpr{
				pos: position{line: 1056, col: 17, offset: 31739},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1056, col: 17, offset: 31739},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1056, col: 17, offset: 31739},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1056, col: 26, offset: 31748},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1056, col: 26, offset: 31748},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1056, col: 33, offset: 31755},
										expr: &litMatcher{
											pos:        position{line: 1056, col: 33, offset: 31755},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1056, col: 39, offset: 31761},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1063, col: 1, offset: 31884},
			expr: &actionExpr{
				pos: position{line: 1063, col: 20, offset: 31903},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 20, offset: 31903},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1063, col: 20, offset: 31903},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 1063, col: 29, offset: 31912},
								name: "ExampleEquals",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1064, col: 5, offset: 31932},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1069, col: 1, offset: 32063},
			expr: &actionExpr{
				pos: position{line: 1069, col: 15, offset: 32077},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 16, offset: 32078},
					exprs: []any{
						&notExpr{
							pos: position{line: 1069, col: 16, offset: 32078},
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 17, offset: 32079},
								name: "ExampleDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 34, offset: 32096},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 47, offset: 32109},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 52, offset: 32114},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 60, offset: 32122},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1075, col: 1, offset: 32170},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 32184},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 32184},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1076, col: 5, offset: 32184},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 12, offset: 32191},
								name: "LiteralStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 5, offset: 32209},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1077, col: 11, offset: 32215},
								expr: &ruleRefExpr{
									pos:  position{line: 1077, col: 12, offset: 32216},
									name: "LiteralLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1078, col: 5, offset: 32234},
							name: "LiteralEnd",
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1082, col: 1, offset: 32401},
			expr: &actionExpr{
				pos: position{line: 1082, col: 16, offset: 32416},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 16, offset: 32416},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1082, col: 16, offset: 32416},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 32, offset: 32432},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 42, offset: 32442},
								name: "LiteralDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1082, col: 59, offset: 32459},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1082, col: 69, offset: 32469},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1089, col: 1, offset: 32646},
			expr: &seqExpr{
				pos: position{line: 1089, col: 14, offset: 32659},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1089, col: 14, offset: 32659},
						name: "BeginningOfLine",
					},
					&labeledExpr{
						pos:   position{line: 1089, col: 30, offset: 32675},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1089, col: 40, offset: 32685},
							name: "LiteralDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1089, col: 57, offset: 32702},
						expr: &ruleRefExpr{
							pos:  position{line: 1089, col: 58, offset: 32703},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1089, col: 68, offset: 32713},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1098, col: 1, offset: 32973},
			expr: &actionExpr{
				pos: position{line: 1098, col: 15, offset: 32987},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 15, offset: 32987},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1098, col: 15, offset: 32987},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1098, col: 21, offset: 32993},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1098, col: 21, offset: 32993},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1098, col: 28, offset: 33000},
										expr: &litMatcher{
											pos:        position{line: 1098, col: 28, offset: 33000},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1098, col: 34, offset: 33006},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1105, col: 1, offset: 33119},
			expr: &actionExpr{
				pos: position{line: 1105, col: 20, offset: 33138},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 20, offset: 33138},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1105, col: 20, offset: 33138},
							label: "dots",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 26, offset: 33144},
								name: "LiteralDots",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1106, col: 5, offset: 33162},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1111, col: 1, offset: 33286},
			expr: &actionExpr{
				pos: position{line: 1111, col: 15, offset: 33300},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 16, offset: 33301},
					exprs: []any{
						&notExpr{
							pos: position{line: 1111, col: 16, offset: 33301},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 17, offset: 33302},
								name: "LiteralDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 34, offset: 33319},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 47, offset: 33332},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 52, offset: 33337},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 60, offset: 33345},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1115, col: 1, offset: 33391},
			expr: &actionExpr{
				pos: position{line: 1116, col: 5, offset: 33405},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 5, offset: 33405},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1116, col: 5, offset: 33405},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 12, offset: 33412},
								name: "SidebarStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 5, offset: 33430},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1117, col: 11, offset: 33436},
								expr: &seqExpr{
									pos: position{line: 1117, col: 12, offset: 33437},
									exprs: []any{
										&notExpr{
											pos: position{line: 1117, col: 12, offset: 33437},
											expr: &ruleRefExpr{
												pos:  position{line: 1117, col: 13, offset: 33438},
												name: "SidebarDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1117, col: 30, offset: 33455},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1118, col: 5, offset: 33469},
							name: "SidebarEnd",
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1122, col: 1, offset: 33627},
			expr: &actionExpr{
				pos: position{line: 1122, col: 16, offset: 33642},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 16, offset: 33642},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1122, col: 16, offset: 33642},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 26, offset: 33652},
								name: "SidebarDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1122, col: 43, offset: 33669},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1122, col: 53, offset: 33679},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1129, col: 1, offset: 33856},
			expr: &seqExpr{
				pos: position{line: 1129, col: 14, offset: 33869},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1129, col: 14, offset: 33869},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1129, col: 24, offset: 33879},
							name: "SidebarDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1129, col: 41, offset: 33896},
						expr: &ruleRefExpr{
							pos:  position{line: 1129, col: 42, offset: 33897},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1129, col: 52, offset: 33907},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1138, col: 1, offset: 34167},
			expr: &actionExpr{
				pos: position{line: 1138, col: 20, offset: 34186},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 20, offset: 34186},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1138, col: 20, offset: 34186},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1138, col: 31, offset: 34197},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1138, col: 31, offset: 34197},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1138, col: 38, offset: 34204},
										expr: &litMatcher{
											pos:        position{line: 1138, col: 38, offset: 34204},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1138, col: 44, offset: 34210},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1145, col: 1, offset: 34333},
			expr: &actionExpr{
				pos: position{line: 1145, col: 20, offset: 34352},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 20, offset: 34352},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1145, col: 20, offset: 34352},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 31, offset: 34363},
								name: "SidebarAsterisks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1146, col: 5, offset: 34386},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1152, col: 1, offset: 34516},
			expr: &actionExpr{
				pos: position{line: 1152, col: 12, offset: 34527},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 12, offset: 34527},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1152, col: 12, offset: 34527},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1152, col: 20, offset: 34535},
								expr: &ruleRefExpr{
									pos:  position{line: 1152, col: 21, offset: 34536},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1152, col: 39, offset: 34554},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1156, col: 1, offset: 34611},
			expr: &actionExpr{
				pos: position{line: 1156, col: 19, offset: 34629},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 19, offset: 34629},
					exprs: []any{
						&notExpr{
							pos: position{line: 1156, col: 19, offset: 34629},
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 20, offset: 34630},
								name: "EndOfFile",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 30, offset: 34640},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 46, offset: 34656},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1156, col: 55, offset: 34665},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1156, col: 55, offset: 34665},
										name: "IfDefBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 68, offset: 34678},
										name: "IfNDefBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 82, offset: 34692},
										name: "IfEvalBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 96, offset: 34706},
										name: "AttributeEntry",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 113, offset: 34723},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 130, offset: 34740},
										name: "PreParseLine",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 144, offset: 34754},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1160, col: 1, offset: 34793},
			expr: &actionExpr{
				pos: position{line: 1160, col: 16, offset: 34808},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 16, offset: 34808},
					exprs: []any{
						&notExpr{
							pos: position{line: 1160, col: 16, offset: 34808},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 17, offset: 34809},
								name: "EndIfDefStatement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 35, offset: 34827},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1160, col: 43, offset: 34835},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 43, offset: 34835},
									name: "PreParseLineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1160, col: 64, offset: 34856},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 65, offset: 34857},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1164, col: 1, offset: 34944},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 34972},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 34972},
						run: (*parser).callonPreParseLineElement2,
						expr: &labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 34972},
							label: "arv",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 9, offset: 34976},
								name: "AttributeReference",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 6, offset: 35038},
						run: (*parser).callonPreParseLineElement5,
						expr: &oneOrMoreExpr{
							pos: position{line: 1169, col: 6, offset: 35038},
							expr: &charClassMatcher{
								pos:             position{line: 1169, col: 6, offset: 35038},
								val:             "[^\\r\\n{]",
								chars:           []rune{'\r', '\n', '{'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 8, offset: 35119},
						run: (*parser).callonPreParseLineElement8,
						expr: &litMatcher{
							pos:        position{line: 1172, col: 8, offset: 35119},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1175, col: 1, offset: 35157},
			expr: &actionExpr{
				pos: position{line: 1175, col: 14, offset: 35170},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 14, offset: 35170},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1175, col: 14, offset: 35170},
							name: "IfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 29, offset: 35185},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 41, offset: 35197},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1175, col: 64, offset: 35220},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 69, offset: 35225},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 80, offset: 35236},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 90, offset: 35246},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1175, col: 96, offset: 35252},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 97, offset: 35253},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 116, offset: 35272},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1180, col: 1, offset: 35460},
			expr: &actionExpr{
				pos: position{line: 1180, col: 15, offset: 35474},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 15, offset: 35474},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1180, col: 15, offset: 35474},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 26, offset: 35485},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 38, offset: 35497},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1180, col: 61, offset: 35520},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 66, offset: 35525},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 77, offset: 35536},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 87, offset: 35546},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1180, col: 93, offset: 35552},
								expr: &ruleRefExpr{
									pos:  position{line: 1180, col: 94, offset: 35553},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 113, offset: 35572},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1185, col: 1, offset: 35762},
			expr: &actionExpr{
				pos: position{line: 1185, col: 15, offset: 35776},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 15, offset: 35776},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1185, col: 15, offset: 35776},
							name: "IfEvalStatement",
						},
						&litMatcher{
							pos:        position{line: 1185, col: 31, offset: 35792},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 35, offset: 35796},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 45, offset: 35806},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 51, offset: 35812},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 64, offset: 35825},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 75, offset: 35836},
							label: "operand",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 84, offset: 35845},
								name: "IfEvalOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 100, offset: 35861},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 110, offset: 35871},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 117, offset: 35878},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 130, offset: 35891},
							name: "AnySpaces",
						},
						&litMatcher{
							pos:        position{line: 1185, col: 140, offset: 35901},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 144, offset: 35905},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 155, offset: 35916},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 165, offset: 35926},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1185, col: 171, offset: 35932},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 172, offset: 35933},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 191, offset: 35952},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1192, col: 1, offset: 36173},
			expr: &actionExpr{
				pos: position{line: 1193, col: 5, offset: 36185},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 5, offset: 36185},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1193, col: 5, offset: 36185},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1193, col: 12, offset: 36192},
								name: "QuoteStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 5, offset: 36208},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1194, col: 11, offset: 36214},
								expr: &seqExpr{
									pos: position{line: 1194, col: 12, offset: 36215},
									exprs: []any{
										&notExpr{
											pos: position{line: 1194, col: 12, offset: 36215},
											expr: &ruleRefExpr{
												pos:  position{line: 1194, col: 13, offset: 36216},
												name: "QuoteDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1194, col: 28, offset: 36231},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 5, offset: 36245},
							name: "QuoteEnd",
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1199, col: 1, offset: 36397},
			expr: &actionExpr{
				pos: position{line: 1199, col: 14, offset: 36410},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 14, offset: 36410},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1199, col: 14, offset: 36410},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 24, offset: 36420},
								name: "QuoteDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1199, col: 39, offset: 36435},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1199, col: 49, offset: 36445},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1206, col: 1, offset: 36620},
			expr: &seqExpr{
				pos: position{line: 1206, col: 12, offset: 36631},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1206, col: 12, offset: 36631},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 22, offset: 36641},
							name: "QuoteDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1206, col: 37, offset: 36656},
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 38, offset: 36657},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1206, col: 48, offset: 36667},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1215, col: 1, offset: 36919},
			expr: &actionExpr{
				pos: position{line: 1215, col: 19, offset: 36937},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 19, offset: 36937},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1215, col: 19, offset: 36937},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1215, col: 31, offset: 36949},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1215, col: 31, offset: 36949},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1215, col: 38, offset: 36956},
										expr: &litMatcher{
											pos:        position{line: 1215, col: 38, offset: 36956},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1215, col: 44, offset: 36962},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1222, col: 1, offset: 37087},
			expr: &actionExpr{
				pos: position{line: 1222, col: 18, offset: 37104},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 18, offset: 37104},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1222, col: 18, offset: 37104},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 30, offset: 37116},
								name: "QuoteUnderlines",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1223, col: 5, offset: 37138},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1229, col: 1, offset: 37267},
			expr: &actionExpr{
				pos: position{line: 1229, col: 17, offset: 37283},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 17, offset: 37283},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1229, col: 17, offset: 37283},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1229, col: 22, offset: 37288},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 22, offset: 37288},
									name: "InlineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1229, col: 37, offset: 37303},
							expr: &ruleRefExpr{
								pos:  position{line: 1229, col: 38, offset: 37304},
								name: "EndOfLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 48, offset: 37314},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1229, col: 54, offset: 37320},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 55, offset: 37321},
									name: "ListItemLine",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 70, offset: 37336},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1229, col: 85, offset: 37351},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 86, offset: 37352},
									name: "AttachedBlocks",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlock",
			pos:  position{line: 1240, col: 1, offset: 37584},
			expr: &actionExpr{
				pos: position{line: 1240, col: 17, offset: 37600},
				run: (*parser).callonAttachedBlock1,
				expr: &seqExpr{
					pos: position{line: 1240, col: 17, offset: 37600},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1240, col: 17, offset: 37600},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1240, col: 26, offset: 37609},
								name: "AttachedBlockElement",
							},
						},
						&andExpr{
							pos: position{line: 1240, col: 48, offset: 37631},
							expr: &ruleRefExpr{
								pos:  position{line: 1240, col: 49, offset: 37632},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1244, col: 1, offset: 37671},
			expr: &actionExpr{
				pos: position{line: 1244, col: 24, offset: 37694},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 24, offset: 37694},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1244, col: 24, offset: 37694},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 28, offset: 37698},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 38, offset: 37708},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 46, offset: 37716},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 53, offset: 37723},
								name: "BlockElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1248, col: 1, offset: 37811},
			expr: &actionExpr{
				pos: position{line: 1248, col: 20, offset: 37830},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 20, offset: 37830},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1248, col: 20, offset: 37830},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1248, col: 24, offset: 37834},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1248, col: 34, offset: 37844},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 42, offset: 37852},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 48, offset: 37858},
								name: "BlockElement",
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1252, col: 1, offset: 37954},
			expr: &actionExpr{
				pos: position{line: 1252, col: 16, offset: 37969},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 16, offset: 37969},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1252, col: 16, offset: 37969},
							name: "EndOfLine",
						},
						&notExpr{
							pos: position{line: 1252, col: 26, offset: 37979},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 27, offset: 37980},
								name: "OrderedListMarker",
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 45, offset: 37998},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 46, offset: 37999},
								name: "UnorderedListMarker",
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 66, offset: 38019},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 67, offset: 38020},
								name: "BlockDelimiters",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 84, offset: 38037},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1252, col: 92, offset: 38045},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 92, offset: 38045},
									name: "InlineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1252, col: 107, offset: 38060},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 108, offset: 38061},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1256, col: 1, offset: 38128},
			expr: &actionExpr{
				pos: position{line: 1256, col: 18, offset: 38145},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 18, offset: 38145},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1256, col: 18, offset: 38145},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1256, col: 25, offset: 38152},
								expr: &ruleRefExpr{
									pos:  position{line: 1256, col: 26, offset: 38153},
									name: "AttachedBlockElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1256, col: 49, offset: 38176},
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 50, offset: 38177},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1261, col: 1, offset: 38216},
			expr: &actionExpr{
				pos: position{line: 1261, col: 17, offset: 38232},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 17, offset: 38232},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1261, col: 18, offset: 38233},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1261, col: 18, offset: 38233},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1261, col: 26, offset: 38241},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 26, offset: 38241},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 30, offset: 38245},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 30, offset: 38245},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 33, offset: 38248},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 37, offset: 38252},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 37, offset: 38252},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 40, offset: 38255},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 46, offset: 38261},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 46, offset: 38261},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 50, offset: 38265},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 50, offset: 38265},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 53, offset: 38268},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 57, offset: 38272},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 57, offset: 38272},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 60, offset: 38275},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 66, offset: 38281},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 66, offset: 38281},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 70, offset: 38285},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 70, offset: 38285},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 73, offset: 38288},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 77, offset: 38292},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 77, offset: 38292},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 80, offset: 38295},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1261, col: 85, offset: 38300},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1261, col: 95, offset: 38310},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 96, offset: 38311},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1266, col: 1, offset: 38382},
			expr: &actionExpr{
				pos: position{line: 1266, col: 13, offset: 38394},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 13, offset: 38394},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1266, col: 14, offset: 38395},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 21, offset: 38402},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1266, col: 31, offset: 38412},
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 32, offset: 38413},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1271, col: 1, offset: 38480},
			expr: &actionExpr{
				pos: position{line: 1272, col: 5, offset: 38493},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 5, offset: 38493},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1272, col: 5, offset: 38493},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 12, offset: 38500},
								name: "FencedStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 5, offset: 38517},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1273, col: 11, offset: 38523},
								expr: &seqExpr{
									pos: position{line: 1273, col: 12, offset: 38524},
									exprs: []any{
										&notExpr{
											pos: position{line: 1273, col: 12, offset: 38524},
											expr: &ruleRefExpr{
												pos:  position{line: 1273, col: 13, offset: 38525},
												name: "FencedDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1273, col: 29, offset: 38541},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1274, col: 5, offset: 38555},
							name: "FencedEnd",
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1278, col: 1, offset: 38710},
			expr: &actionExpr{
				pos: position{line: 1278, col: 15, offset: 38724},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 15, offset: 38724},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1278, col: 15, offset: 38724},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 25, offset: 38734},
								name: "FencedDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1278, col: 41, offset: 38750},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1278, col: 51, offset: 38760},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1285, col: 1, offset: 38944},
			expr: &seqExpr{
				pos: position{line: 1285, col: 13, offset: 38956},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1285, col: 13, offset: 38956},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1285, col: 23, offset: 38966},
							name: "FencedDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1285, col: 39, offset: 38982},
						expr: &ruleRefExpr{
							pos:  position{line: 1285, col: 40, offset: 38983},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1285, col: 50, offset: 38993},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1294, col: 1, offset: 39259},
			expr: &actionExpr{
				pos: position{line: 1294, col: 19, offset: 39277},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 19, offset: 39277},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1294, col: 19, offset: 39277},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1294, col: 30, offset: 39288},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1294, col: 30, offset: 39288},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1294, col: 36, offset: 39294},
										expr: &litMatcher{
											pos:        position{line: 1294, col: 36, offset: 39294},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1294, col: 42, offset: 39300},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1301, col: 1, offset: 39427},
			expr: &actionExpr{
				pos: position{line: 1301, col: 19, offset: 39445},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 19, offset: 39445},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1301, col: 19, offset: 39445},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 28, offset: 39454},
								name: "FencedBackticks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1302, col: 5, offset: 39476},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1307, col: 1, offset: 39606},
			expr: &actionExpr{
				pos: position{line: 1307, col: 14, offset: 39619},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 15, offset: 39620},
					exprs: []any{
						&notExpr{
							pos: position{line: 1307, col: 15, offset: 39620},
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 16, offset: 39621},
								name: "FencedDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 32, offset: 39637},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 45, offset: 39650},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 50, offset: 39655},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 58, offset: 39663},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1313, col: 1, offset: 39711},
			expr: &actionExpr{
				pos: position{line: 1314, col: 5, offset: 39722},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 5, offset: 39722},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1314, col: 5, offset: 39722},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 12, offset: 39729},
								name: "StemStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 5, offset: 39744},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1315, col: 11, offset: 39750},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 12, offset: 39751},
									name: "StemLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1316, col: 5, offset: 39766},
							name: "StemEnd",
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1320, col: 1, offset: 39925},
			expr: &actionExpr{
				pos: position{line: 1320, col: 13, offset: 39937},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 13, offset: 39937},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1320, col: 13, offset: 39937},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 23, offset: 39947},
								name: "StemDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1320, col: 37, offset: 39961},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1320, col: 47, offset: 39971},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1327, col: 1, offset: 40145},
			expr: &seqExpr{
				pos: position{line: 1327, col: 11, offset: 40155},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1327, col: 11, offset: 40155},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 21, offset: 40165},
							name: "StemDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1327, col: 35, offset: 40179},
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 36, offset: 40180},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1327, col: 46, offset: 40190},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1336, col: 1, offset: 40444},
			expr: &actionExpr{
				pos: position{line: 1336, col: 14, offset: 40457},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 14, offset: 40457},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1336, col: 14, offset: 40457},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1336, col: 22, offset: 40465},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1336, col: 22, offset: 40465},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1336, col: 29, offset: 40472},
										expr: &litMatcher{
											pos:        position{line: 1336, col: 29, offset: 40472},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1336, col: 35, offset: 40478},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1343, col: 1, offset: 40595},
			expr: &actionExpr{
				pos: position{line: 1343, col: 17, offset: 40611},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 17, offset: 40611},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1343, col: 17, offset: 40611},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:  position{line: 1343, col: 25, offset: 40619},
								name: "StemPluses",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1344, col: 5, offset: 40636},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1349, col: 1, offset: 40759},
			expr: &actionExpr{
				pos: position{line: 1349, col: 12, offset: 40770},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 13, offset: 40771},
					exprs: []any{
						&notExpr{
							pos: position{line: 1349, col: 13, offset: 40771},
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 14, offset: 40772},
								name: "StemDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 28, offset: 40786},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 41, offset: 40799},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 46, offset: 40804},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 54, offset: 40812},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1357, col: 1, offset: 40862},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 18, offset: 40879},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1357, col: 18, offset: 40879},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 43, offset: 40904},
						name: "DocumentCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1359, col: 1, offset: 40928},
			expr: &actionExpr{
				pos: position{line: 1359, col: 26, offset: 40953},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1359, col: 26, offset: 40953},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1359, col: 26, offset: 40953},
							name: "CrossReferenceStart",
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 46, offset: 40973},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 50, offset: 40977},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 68, offset: 40995},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1359, col: 74, offset: 41001},
								expr: &actionExpr{
									pos: position{line: 1359, col: 75, offset: 41002},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1359, col: 75, offset: 41002},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1359, col: 75, offset: 41002},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 1359, col: 85, offset: 41012},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1359, col: 89, offset: 41016},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1359, col: 96, offset: 41023},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 1359, col: 96, offset: 41023},
															name: "AnySpaces",
														},
														&ruleRefExpr{
															pos:  position{line: 1359, col: 106, offset: 41033},
															name: "CrossReferenceLabel",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1359, col: 150, offset: 41077},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1367, col: 1, offset: 41281},
			expr: &litMatcher{
				pos:        position{line: 1367, col: 23, offset: 41303},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1369, col: 1, offset: 41310},
			expr: &actionExpr{
				pos: position{line: 1369, col: 21, offset: 41330},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 21, offset: 41330},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1369, col: 22, offset: 41331},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1369, col: 22, offset: 41331},
									name: "Alpha",
								},
								&charClassMatcher{
									pos:             position{line: 1369, col: 30, offset: 41339},
									val:             "[:_]",
									chars:           []rune{':', '_'},
									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
									ignoreCase:      false,
									inverted:        false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1369, col: 36, offset: 41345},
							expr: &charClassMatcher{
								pos:             position{line: 1369, col: 36, offset: 41345},
								val:             "[\\p{L}\\p{N} _:.-]",
								chars:           []rune{' ', '_', ':', '.', '-'},
								classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1374, col: 1, offset: 41497},
			expr: &oneOrMoreExpr{
				pos: position{line: 1374, col: 23, offset: 41519},
				expr: &choiceExpr{
					pos: position{line: 1375, col: 5, offset: 41525},
					alternatives: []any{
						&actionExpr{
							pos: position{line: 1375, col: 6, offset: 41526},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &oneOrMoreExpr{
								pos: position{line: 1375, col: 6, offset: 41526},
								expr: &charClassMatcher{
									pos:             position{line: 1375, col: 6, offset: 41526},
									val:             "[^<>{[\\]]",
									chars:           []rune{'<', '>', '{', '[', ']'},
									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
									ignoreCase:      false,
									inverted:        true,
								},
							},
						},
						&actionExpr{
							pos: position{line: 1378, col: 7, offset: 41607},
							run: (*parser).callonCrossReferenceLabel6,
							expr: &labeledExpr{
								pos:   position{line: 1378, col: 7, offset: 41607},
								label: "arv",
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 11, offset: 41611},
									name: "AttributeReference",
								},
							},
						},
						&actionExpr{
							pos: position{line: 1381, col: 8, offset: 41669},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1381, col: 8, offset: 41669},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentCrossReference",
			pos:  position{line: 1384, col: 1, offset: 41708},
			expr: &actionExpr{
				pos: position{line: 1384, col: 26, offset: 41733},
				run: (*parser).callonDocumentCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 26, offset: 41733},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1384, col: 26, offset: 41733},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 34, offset: 41741},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 40, offset: 41747},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 46, offset: 41753},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 58, offset: 41765},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1391, col: 1, offset: 41931},
			expr: &actionExpr{
				pos: position{line: 1391, col: 18, offset: 41948},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 18, offset: 41948},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1391, col: 18, offset: 41948},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1391, col: 28, offset: 41958},
								expr: &litMatcher{
									pos:        position{line: 1391, col: 28, offset: 41958},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 33, offset: 41963},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 42, offset: 41972},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 42, offset: 41972},
									name: "UppercaseRomanHundreds",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 66, offset: 41996},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 71, offset: 42001},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 72, offset: 42002},
									name: "UppercaseRomanTens",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 93, offset: 42023},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 98, offset: 42028},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 99, offset: 42029},
									name: "UppercaseRomanOnes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1391, col: 120, offset: 42050},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1398, col: 1, offset: 42174},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 5, offset: 42205},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 42205},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1400, col: 7, offset: 42216},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1401, col: 8, offset: 42228},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1401, col: 8, offset: 42228},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1401, col: 12, offset: 42232},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1401, col: 21, offset: 42241},
									expr: &litMatcher{
										pos:        position{line: 1401, col: 21, offset: 42241},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1401, col: 26, offset: 42246},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1404, col: 1, offset: 42292},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 5, offset: 42319},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 42319},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1406, col: 7, offset: 42330},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1407, col: 8, offset: 42342},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1407, col: 8, offset: 42342},
								expr: &litMatcher{
									pos:        position{line: 1407, col: 8, offset: 42342},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1407, col: 13, offset: 42347},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1407, col: 18, offset: 42352},
									expr: &litMatcher{
										pos:        position{line: 1407, col: 18, offset: 42352},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1407, col: 23, offset: 42357},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1410, col: 1, offset: 42399},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 42426},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1411, col: 5, offset: 42426},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1412, col: 7, offset: 42437},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1413, col: 8, offset: 42449},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1413, col: 8, offset: 42449},
								expr: &litMatcher{
									pos:        position{line: 1413, col: 8, offset: 42449},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1413, col: 13, offset: 42454},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1413, col: 18, offset: 42459},
									expr: &litMatcher{
										pos:        position{line: 1413, col: 18, offset: 42459},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1413, col: 23, offset: 42464},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1416, col: 1, offset: 42506},
			expr: &actionExpr{
				pos: position{line: 1416, col: 18, offset: 42523},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1416, col: 18, offset: 42523},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1416, col: 18, offset: 42523},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1416, col: 28, offset: 42533},
								expr: &litMatcher{
									pos:        position{line: 1416, col: 28, offset: 42533},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 33, offset: 42538},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 42, offset: 42547},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 42, offset: 42547},
									name: "LowercaseRomanHundreds",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 66, offset: 42571},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 71, offset: 42576},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 72, offset: 42577},
									name: "LowercaseRomanTens",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 93, offset: 42598},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 98, offset: 42603},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 99, offset: 42604},
									name: "LowercaseRomanOnes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1416, col: 120, offset: 42625},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1423, col: 1, offset: 42749},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 5, offset: 42780},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 42780},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1425, col: 7, offset: 42791},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1426, col: 8, offset: 42803},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1426, col: 8, offset: 42803},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1426, col: 12, offset: 42807},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1426, col: 21, offset: 42816},
									expr: &litMatcher{
										pos:        position{line: 1426, col: 21, offset: 42816},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1426, col: 26, offset: 42821},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1429, col: 1, offset: 42867},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 5, offset: 42894},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1430, col: 5, offset: 42894},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1431, col: 7, offset: 42905},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1432, col: 8, offset: 42917},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1432, col: 8, offset: 42917},
								expr: &litMatcher{
									pos:        position{line: 1432, col: 8, offset: 42917},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1432, col: 13, offset: 42922},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1432, col: 18, offset: 42927},
									expr: &litMatcher{
										pos:        position{line: 1432, col: 18, offset: 42927},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1432, col: 23, offset: 42932},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1435, col: 1, offset: 42974},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 5, offset: 43001},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1436, col: 5, offset: 43001},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1437, col: 7, offset: 43012},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1438, col: 8, offset: 43024},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1438, col: 8, offset: 43024},
								expr: &litMatcher{
									pos:        position{line: 1438, col: 8, offset: 43024},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1438, col: 13, offset: 43029},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1438, col: 18, offset: 43034},
									expr: &litMatcher{
										pos:        position{line: 1438, col: 18, offset: 43034},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1438, col: 23, offset: 43039},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1443, col: 1, offset: 43083},
			expr: &actionExpr{
				pos: position{line: 1443, col: 19, offset: 43101},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 19, offset: 43101},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1443, col: 19, offset: 43101},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 27, offset: 43109},
								name: "OrderedListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 47, offset: 43129},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 54, offset: 43136},
								name: "ListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1449, col: 1, offset: 43325},
			expr: &actionExpr{
				pos: position{line: 1449, col: 21, offset: 43345},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1449, col: 21, offset: 43345},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1449, col: 21, offset: 43345},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 1449, col: 29, offset: 43353},
								name: "AnySpaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 1449, col: 40, offset: 43364},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1449, col: 48, offset: 43372},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1449, col: 48, offset: 43372},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1449, col: 48, offset: 43372},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1449, col: 48, offset: 43372},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1449, col: 57, offset: 43381},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1449, col: 58, offset: 43382},
															expr: &litMatcher{
																pos:        position{line: 1449, col: 58, offset: 43382},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1451, col: 4, offset: 43428},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1457, col: 3, offset: 43522},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1457, col: 3, offset: 43522},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1457, col: 3, offset: 43522},
													expr: &charClassMatcher{
														pos:             position{line: 1457, col: 3, offset: 43522},
														val:             "[0-9]",
														ranges:          []rune{'0', '9'},
														basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
														ignoreCase:      false,
														inverted:        false,
													},
												},
												&litMatcher{
													pos:        position{line: 1457, col: 10, offset: 43529},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1458, col: 3, offset: 43566},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1458, col: 3, offset: 43566},
											exprs: []any{
												&charClassMatcher{
													pos:             position{line: 1458, col: 3, offset: 43566},
													val:             "[a-z]",
													ranges:          []rune{'a', 'z'},
													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
													ignoreCase:      false,
													inverted:        false,
												},
												&litMatcher{
													pos:        position{line: 1458, col: 9, offset: 43572},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1459, col: 3, offset: 43609},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1459, col: 3, offset: 43609},
											exprs: []any{
												&charClassMatcher{
													pos:             position{line: 1459, col: 3, offset: 43609},
													val:             "[A-Z]",
													ranges:          []rune{'A', 'Z'},
													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
													ignoreCase:      false,
													inverted:        false,
												},
												&litMatcher{
													pos:        position{line: 1459, col: 9, offset: 43615},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1460, col: 3, offset: 43652},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1460, col: 3, offset: 43652},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1460, col: 3, offset: 43652},
													name: "LowercaseRoman",
												},
												&litMatcher{
													pos:        position{line: 1460, col: 18, offset: 43667},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1461, col: 3, offset: 43704},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1461, col: 3, offset: 43704},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1461, col: 3, offset: 43704},
													name: "UppercaseRoman",
												},
												&litMatcher{
													pos:        position{line: 1461, col: 18, offset: 43719},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 1, offset: 43756},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1471, col: 1, offset: 43847},
			expr: &actionExpr{
				pos: position{line: 1471, col: 21, offset: 43867},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 21, offset: 43867},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1471, col: 21, offset: 43867},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 29, offset: 43875},
								name: "UnorderedListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 50, offset: 43896},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1471, col: 60, offset: 43906},
								expr: &ruleRefExpr{
									pos:  position{line: 1471, col: 61, offset: 43907},
									name: "Checklist",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 73, offset: 43919},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 80, offset: 43926},
								name: "ListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1478, col: 1, offset: 44165},
			expr: &actionExpr{
				pos: position{line: 1478, col: 23, offset: 44187},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 23, offset: 44187},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1478, col: 23, offset: 44187},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 31, offset: 44195},
								name: "AnySpaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 42, offset: 44206},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1478, col: 50, offset: 44214},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1478, col: 51, offset: 44215},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 51, offset: 44215},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 51, offset: 44215},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 58, offset: 44222},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 58, offset: 44222},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1480, col: 4, offset: 44264},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:  position{line: 1483, col: 1, offset: 44312},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1489, col: 1, offset: 44397},
			expr: &actionExpr{
				pos: position{line: 1489, col: 13, offset: 44409},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 13, offset: 44409},
					exprs: []any{
						&andExpr{
							pos: position{line: 1489, col: 13, offset: 44409},
							expr: &litMatcher{
								pos:        position{line: 1489, col: 14, offset: 44410},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 1, offset: 44415},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1491, col: 7, offset: 44433},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1491, col: 7, offset: 44433},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1491, col: 7, offset: 44433},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1492, col: 7, offset: 44490},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1492, col: 7, offset: 44490},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1493, col: 7, offset: 44545},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1493, col: 7, offset: 44545},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 7, offset: 44599},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1499, col: 1, offset: 44642},
			expr: &actionExpr{
				pos: position{line: 1499, col: 23, offset: 44664},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 23, offset: 44664},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1499, col: 23, offset: 44664},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1499, col: 36, offset: 44677},
								expr: &ruleRefExpr{
									pos:  position{line: 1499, col: 37, offset: 44678},
									name: "AnchorAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 55, offset: 44696},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 61, offset: 44702},
								name: "DescriptionListTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 82, offset: 44723},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 90, offset: 44731},
								name: "DescriptionListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 113, offset: 44754},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1499, col: 124, offset: 44765},
								expr: &choiceExpr{
									pos: position{line: 1499, col: 125, offset: 44766},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1499, col: 125, offset: 44766},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:  position{line: 1499, col: 125, offset: 44766},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1499, col: 180, offset: 44821},
											name: "NewLine",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 190, offset: 44831},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 197, offset: 44838},
								name: "DescriptionListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1510, col: 1, offset: 45350},
			expr: &actionExpr{
				pos: position{line: 1510, col: 23, offset: 45372},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1510, col: 23, offset: 45372},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1510, col: 28, offset: 45377},
						expr: &seqExpr{
							pos: position{line: 1510, col: 29, offset: 45378},
							exprs: []any{
								&notExpr{
									pos: position{line: 1510, col: 29, offset: 45378},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 30, offset: 45379},
										name: "DescriptionListMarker",
									},
								},
								&notExpr{
									pos: position{line: 1510, col: 52, offset: 45401},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 53, offset: 45402},
										name: "EndOfLine",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1510, col: 63, offset: 45412},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1514, col: 1, offset: 45468},
			expr: &actionExpr{
				pos: position{line: 1514, col: 25, offset: 45492},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 25, offset: 45492},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1514, col: 25, offset: 45492},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 35, offset: 45502},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1514, col: 43, offset: 45510},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1514, col: 43, offset: 45510},
									expr: &choiceExpr{
										pos: position{line: 1514, col: 44, offset: 45511},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1514, col: 44, offset: 45511},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1514, col: 50, offset: 45517},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1516, col: 4, offset: 45559},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:  position{line: 1523, col: 1, offset: 45686},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1528, col: 1, offset: 45733},
			expr: &actionExpr{
				pos: position{line: 1528, col: 28, offset: 45760},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 28, offset: 45760},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1528, col: 28, offset: 45760},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1528, col: 34, offset: 45766},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1528, col: 34, offset: 45766},
										expr: &ruleRefExpr{
											pos:  position{line: 1528, col: 34, offset: 45766},
											name: "InlineElement",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1528, col: 51, offset: 45783},
										name: "BlockElement",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 65, offset: 45797},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1528, col: 80, offset: 45812},
								expr: &ruleRefExpr{
									pos:  position{line: 1528, col: 81, offset: 45813},
									name: "AttachedBlocks",
								},
							},
						},
						&andExpr{
							pos: position{line: 1528, col: 99, offset: 45831},
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 100, offset: 45832},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1537, col: 1, offset: 45993},
			expr: &actionExpr{
				pos: position{line: 1537, col: 21, offset: 46013},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 21, offset: 46013},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1537, col: 21, offset: 46013},
							name: "SingleLineCommentDelimiter",
						},
						&notExpr{
							pos: position{line: 1537, col: 48, offset: 46040},
							expr: &litMatcher{
								pos:        position{line: 1537, col: 49, offset: 46041},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 54, offset: 46046},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 63, offset: 46055},
								name: "SingleLineCommentContent",
							},
						},
						&andExpr{
							pos: position{line: 1537, col: 89, offset: 46081},
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 90, offset: 46082},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1541, col: 1, offset: 46172},
			expr: &actionExpr{
				pos: position{line: 1541, col: 30, offset: 46201},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1541, col: 30, offset: 46201},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1545, col: 1, offset: 46246},
			expr: &actionExpr{
				pos: position{line: 1545, col: 28, offset: 46273},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1545, col: 28, offset: 46273},
					expr: &charClassMatcher{
						pos:             position{line: 1545, col: 28, offset: 46273},
						val:             "[^\\n]",
						chars:           []rune{'\n'},
						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
						ignoreCase:      false,
						inverted:        true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1549, col: 1, offset: 46320},
			expr: &actionExpr{
				pos: position{line: 1550, col: 5, offset: 46343},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 5, offset: 46343},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1550, col: 5, offset: 46343},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 12, offset: 46350},
								name: "MultiLineCommentStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 5, offset: 46377},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1551, col: 11, offset: 46383},
								expr: &ruleRefExpr{
									pos:  position{line: 1551, col: 12, offset: 46384},
									name: "MultiLineCommentLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1552, col: 5, offset: 46411},
							name: "MultiLineCommentEnd",
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1556, col: 1, offset: 46596},
			expr: &actionExpr{
				pos: position{line: 1556, col: 25, offset: 46620},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 25, offset: 46620},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1556, col: 25, offset: 46620},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 35, offset: 46630},
								name: "MultiLineCommentDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1556, col: 61, offset: 46656},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1556, col: 72, offset: 46667},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1563, col: 1, offset: 46857},
			expr: &seqExpr{
				pos: position{line: 1563, col: 23, offset: 46879},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1563, col: 23, offset: 46879},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1563, col: 33, offset: 46889},
							name: "MultiLineCommentDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1563, col: 59, offset: 46915},
						expr: &ruleRefExpr{
							pos:  position{line: 1563, col: 60, offset: 46916},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1563, col: 70, offset: 46926},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1572, col: 1, offset: 47212},
			expr: &actionExpr{
				pos: position{line: 1572, col: 34, offset: 47245},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 34, offset: 47245},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1572, col: 34, offset: 47245},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1572, col: 50, offset: 47261},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1572, col: 50, offset: 47261},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1572, col: 57, offset: 47268},
										expr: &litMatcher{
											pos:        position{line: 1572, col: 57, offset: 47268},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1572, col: 63, offset: 47274},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1579, col: 1, offset: 47419},
			expr: &actionExpr{
				pos: position{line: 1579, col: 29, offset: 47447},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 29, offset: 47447},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1579, col: 29, offset: 47447},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1579, col: 45, offset: 47463},
								name: "MultiLineCommentForwardSlashes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1580, col: 5, offset: 47500},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1585, col: 1, offset: 47651},
			expr: &actionExpr{
				pos: position{line: 1585, col: 24, offset: 47674},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 25, offset: 47675},
					exprs: []any{
						&notExpr{
							pos: position{line: 1585, col: 25, offset: 47675},
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 26, offset: 47676},
								name: "MultiLineCommentDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 52, offset: 47702},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 65, offset: 47715},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 70, offset: 47720},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 78, offset: 47728},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1591, col: 1, offset: 47776},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 11, offset: 47786},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1591, col: 11, offset: 47786},
						name: "CounterIncrement",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 30, offset: 47805},
						name: "CounterSilentIncrement",
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1593, col: 1, offset: 47829},
			expr: &actionExpr{
				pos: position{line: 1593, col: 20, offset: 47848},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 20, offset: 47848},
					exprs: []any{
						&notExpr{
							pos: position{line: 1593, col: 20, offset: 47848},
							expr: &litMatcher{
								pos:        position{line: 1593, col: 21, offset: 47849},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 26, offset: 47854},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 38, offset: 47866},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 43, offset: 47871},
								name: "AttributeEntryName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 62, offset: 47890},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1593, col: 75, offset: 47903},
								expr: &ruleRefExpr{
									pos:  position{line: 1593, col: 76, offset: 47904},
									name: "CounterInitialValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 98, offset: 47926},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1597, col: 1, offset: 48027},
			expr: &actionExpr{
				pos: position{line: 1597, col: 26, offset: 48052},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 26, offset: 48052},
					exprs: []any{
						&notExpr{
							pos: position{line: 1597, col: 26, offset: 48052},
							expr: &litMatcher{
								pos:        position{line: 1597, col: 27, offset: 48053},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 32, offset: 48058},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 45, offset: 48071},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 50, offset: 48076},
								name: "AttributeEntryName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 69, offset: 48095},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1597, col: 82, offset: 48108},
								expr: &ruleRefExpr{
									pos:  position{line: 1597, col: 83, offset: 48109},
									name: "CounterInitialValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 105, offset: 48131},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1601, col: 1, offset: 48233},
			expr: &actionExpr{
				pos: position{line: 1601, col: 23, offset: 48255},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 23, offset: 48255},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1601, col: 23, offset: 48255},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 27, offset: 48259},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 40, offset: 48272},
								name: "CounterInitializer",
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1605, col: 1, offset: 48325},
			expr: &choiceExpr{
				pos: position{line: 1605, col: 23, offset: 48347},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1605, col: 23, offset: 48347},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:             position{line: 1605, col: 23, offset: 48347},
							val:             "[a-zA-Z]",
							ranges:          []rune{'a', 'z', 'A', 'Z'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
					},
					&actionExpr{
						pos: position{line: 1608, col: 7, offset: 48403},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1608, col: 7, offset: 48403},
							expr: &charClassMatcher{
								pos:             position{line: 1608, col: 7, offset: 48403},
								val:             "[0-9]",
								ranges:          []rune{'0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1615, col: 1, offset: 48469},
			expr: &actionExpr{
				pos: position{line: 1615, col: 21, offset: 48489},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 21, offset: 48489},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1615, col: 21, offset: 48489},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 32, offset: 48500},
								expr: &ruleRefExpr{
									pos:  position{line: 1615, col: 33, offset: 48501},
									name: "FormatAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 53, offset: 48521},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1615, col: 59, offset: 48527},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1615, col: 59, offset: 48527},
										name: "InlineSinglePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1615, col: 85, offset: 48553},
										name: "InlineDoublePassthrough",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1619, col: 1, offset: 48699},
			expr: &actionExpr{
				pos: position{line: 1619, col: 27, offset: 48725},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 27, offset: 48725},
					exprs: []any{
						&notExpr{
							pos: position{line: 1619, col: 27, offset: 48725},
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 28, offset: 48726},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 35, offset: 48733},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1619, col: 39, offset: 48737},
							expr: &notExpr{
								pos: position{line: 1619, col: 41, offset: 48739},
								expr: &litMatcher{
									pos:        position{line: 1619, col: 42, offset: 48740},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 47, offset: 48745},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 54, offset: 48752},
								name: "SinglePassthroughTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 82, offset: 48780},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1619, col: 86, offset: 48784},
							expr: &litMatcher{
								pos:        position{line: 1619, col: 87, offset: 48785},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1619, col: 91, offset: 48789},
							expr: &notExpr{
								pos: position{line: 1619, col: 93, offset: 48791},
								expr: &ruleRefExpr{
									pos:  position{line: 1619, col: 94, offset: 48792},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1623, col: 1, offset: 48837},
			expr: &actionExpr{
				pos: position{line: 1623, col: 30, offset: 48866},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 30, offset: 48866},
					exprs: []any{
						&notExpr{
							pos: position{line: 1623, col: 30, offset: 48866},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 31, offset: 48867},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 33, offset: 48869},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1623, col: 39, offset: 48875},
								expr: &actionExpr{
									pos: position{line: 1623, col: 40, offset: 48876},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1623, col: 40, offset: 48876},
										exprs: []any{
											&notExpr{
												pos: position{line: 1623, col: 40, offset: 48876},
												expr: &ruleRefExpr{
													pos:  position{line: 1623, col: 41, offset: 48877},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1623, col: 43, offset: 48879},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1623, col: 49, offset: 48885},
													expr: &ruleRefExpr{
														pos:  position{line: 1623, col: 50, offset: 48886},
														name: "SinglePassthroughTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1627, col: 1, offset: 49067},
			expr: &actionExpr{
				pos: position{line: 1627, col: 32, offset: 49098},
				run: (*parser).callonSinglePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 32, offset: 49098},
					exprs: []any{
						&notExpr{
							pos: position{line: 1627, col: 32, offset: 49098},
							expr: &seqExpr{
								pos: position{line: 1627, col: 34, offset: 49100},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1627, col: 34, offset: 49100},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&notExpr{
										pos: position{line: 1627, col: 38, offset: 49104},
										expr: &litMatcher{
											pos:        position{line: 1627, col: 39, offset: 49105},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 44, offset: 49110},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 53, offset: 49119},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1631, col: 1, offset: 49174},
			expr: &actionExpr{
				pos: position{line: 1631, col: 27, offset: 49200},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 27, offset: 49200},
					exprs: []any{
						&notExpr{
							pos: position{line: 1631, col: 27, offset: 49200},
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 28, offset: 49201},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 41, offset: 49214},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 46, offset: 49219},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 53, offset: 49226},
								name: "DoublePassthroughTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 81, offset: 49254},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1635, col: 1, offset: 49291},
			expr: &actionExpr{
				pos: position{line: 1635, col: 30, offset: 49320},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 30, offset: 49320},
					exprs: []any{
						&notExpr{
							pos: position{line: 1635, col: 30, offset: 49320},
							expr: &ruleRefExpr{
								pos:  position{line: 1635, col: 31, offset: 49321},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1635, col: 33, offset: 49323},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1635, col: 39, offset: 49329},
								expr: &actionExpr{
									pos: position{line: 1635, col: 40, offset: 49330},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1635, col: 40, offset: 49330},
										exprs: []any{
											&notExpr{
												pos: position{line: 1635, col: 40, offset: 49330},
												expr: &ruleRefExpr{
													pos:  position{line: 1635, col: 41, offset: 49331},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1635, col: 43, offset: 49333},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1635, col: 49, offset: 49339},
													expr: &ruleRefExpr{
														pos:  position{line: 1635, col: 50, offset: 49340},
														name: "DoublePassthroughTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1639, col: 1, offset: 49533},
			expr: &actionExpr{
				pos: position{line: 1639, col: 32, offset: 49564},
				run: (*parser).callonDoublePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1639, col: 32, offset: 49564},
					exprs: []any{
						&notExpr{
							pos: position{line: 1639, col: 32, offset: 49564},
							expr: &litMatcher{
								pos:        position{line: 1639, col: 34, offset: 49566},
								val:        "++",
								ignoreCase: false,
								want:       "\"++\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1639, col: 40, offset: 49572},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1639, col: 49, offset: 49581},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1644, col: 1, offset: 49637},
			expr: &actionExpr{
				pos: position{line: 1644, col: 9, offset: 49645},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 9, offset: 49645},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1644, col: 9, offset: 49645},
							name: "IfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 24, offset: 49660},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 36, offset: 49672},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1644, col: 59, offset: 49695},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1644, col: 64, offset: 49700},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1644, col: 75, offset: 49711},
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 76, offset: 49712},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1649, col: 1, offset: 49832},
			expr: &litMatcher{
				pos:        position{line: 1649, col: 18, offset: 49849},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1651, col: 1, offset: 49861},
			expr: &actionExpr{
				pos: position{line: 1651, col: 10, offset: 49870},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 10, offset: 49870},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1651, col: 10, offset: 49870},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 21, offset: 49881},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 33, offset: 49893},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1651, col: 56, offset: 49916},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1651, col: 61, offset: 49921},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1651, col: 72, offset: 49932},
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 73, offset: 49933},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1656, col: 1, offset: 50055},
			expr: &actionExpr{
				pos: position{line: 1656, col: 15, offset: 50069},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1656, col: 15, offset: 50069},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1656, col: 15, offset: 50069},
							val:        "ifdef::",
							ignoreCase: false,
							want:       "\"ifdef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 25, offset: 50079},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 37, offset: 50091},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1656, col: 60, offset: 50114},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 64, offset: 50118},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 73, offset: 50127},
								name: "InlineConditionalContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1656, col: 99, offset: 50153},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1656, col: 103, offset: 50157},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1661, col: 1, offset: 50323},
			expr: &actionExpr{
				pos: position{line: 1661, col: 16, offset: 50338},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1661, col: 16, offset: 50338},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1661, col: 16, offset: 50338},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 27, offset: 50349},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1661, col: 39, offset: 50361},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1661, col: 62, offset: 50384},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 66, offset: 50388},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1661, col: 75, offset: 50397},
								name: "InlineConditionalContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1661, col: 101, offset: 50423},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1661, col: 105, offset: 50427},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1666, col: 1, offset: 50595},
			expr: &actionExpr{
				pos: position{line: 1666, col: 12, offset: 50606},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 12, offset: 50606},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1666, col: 12, offset: 50606},
							name: "EndIfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 30, offset: 50624},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1666, col: 41, offset: 50635},
								expr: &ruleRefExpr{
									pos:  position{line: 1666, col: 42, offset: 50636},
									name: "ConditionalAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1666, col: 66, offset: 50660},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1666, col: 72, offset: 50666},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1666, col: 82, offset: 50676},
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 83, offset: 50677},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1676, col: 1, offset: 50964},
			expr: &actionExpr{
				pos: position{line: 1676, col: 21, offset: 50984},
				run: (*parser).callonEndIfDefStatement1,
				expr: &litMatcher{
					pos:        position{line: 1676, col: 21, offset: 50984},
					val:        "endif::",
					ignoreCase: false,
					want:       "\"endif::\"",
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1680, col: 1, offset: 51034},
			expr: &actionExpr{
				pos: position{line: 1680, col: 25, offset: 51058},
				run: (*parser).callonConditionalAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 1680, col: 25, offset: 51058},
					label: "attr",
					expr: &choiceExpr{
						pos: position{line: 1680, col: 31, offset: 51064},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1680, col: 31, offset: 51064},
								name: "ConditionalAttributesAny",
							},
							&ruleRefExpr{
								pos:  position{line: 1680, col: 58, offset: 51091},
								name: "ConditionalAttributesAll",
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1684, col: 1, offset: 51148},
			expr: &actionExpr{
				pos: position{line: 1684, col: 28, offset: 51175},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1684, col: 28, offset: 51175},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1684, col: 34, offset: 51181},
						expr: &actionExpr{
							pos: position{line: 1685, col: 5, offset: 51187},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1685, col: 5, offset: 51187},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1685, col: 5, offset: 51187},
										label: "name",
										expr: &ruleRefExpr{
											pos:  position{line: 1685, col: 10, offset: 51192},
											name: "AttributeEntryName",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1685, col: 29, offset: 51211},
										name: "AnySpaces",
									},
									&zeroOrOneExpr{
										pos: position{line: 1685, col: 39, offset: 51221},
										expr: &litMatcher{
											pos:        position{line: 1685, col: 39, offset: 51221},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1685, col: 44, offset: 51226},
										name: "AnySpaces",
									},
									&andCodeExpr{
										pos: position{line: 1686, col: 5, offset: 51241},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1696, col: 1, offset: 51502},
			expr: &actionExpr{
				pos: position{line: 1696, col: 28, offset: 51529},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1696, col: 28, offset: 51529},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1696, col: 34, offset: 51535},
						expr: &actionExpr{
							pos: position{line: 1697, col: 5, offset: 51541},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1697, col: 5, offset: 51541},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1697, col: 5, offset: 51541},
										label: "name",
										expr: &ruleRefExpr{
											pos:  position{line: 1697, col: 10, offset: 51546},
											name: "AttributeEntryName",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1697, col: 29, offset: 51565},
										name: "AnySpaces",
									},
									&zeroOrOneExpr{
										pos: position{line: 1697, col: 39, offset: 51575},
										expr: &litMatcher{
											pos:        position{line: 1697, col: 39, offset: 51575},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1697, col: 44, offset: 51580},
										name: "AnySpaces",
									},
									&andCodeExpr{
										pos: position{line: 1698, col: 5, offset: 51595},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1708, col: 1, offset: 51856},
			expr: &actionExpr{
				pos: position{line: 1708, col: 28, offset: 51883},
				run: (*parser).callonInlineConditionalContent1,
				expr: &labeledExpr{
					pos:   position{line: 1708, col: 28, offset: 51883},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 1708, col: 36, offset: 51891},
						expr: &actionExpr{
							pos: position{line: 1708, col: 37, offset: 51892},
							run: (*parser).callonInlineConditionalContent4,
							expr: &seqExpr{
								pos: position{line: 1708, col: 37, offset: 51892},
								exprs: []any{
									&notExpr{
										pos: position{line: 1708, col: 37, offset: 51892},
										expr: &litMatcher{
											pos:        position{line: 1708, col: 38, offset: 51893},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
									&labeledExpr{
										pos:   position{line: 1708, col: 42, offset: 51897},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 1708, col: 50, offset: 51905},
											name: "InlineElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1714, col: 1, offset: 51978},
			expr: &actionExpr{
				pos: position{line: 1714, col: 10, offset: 51987},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1714, col: 10, offset: 51987},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1714, col: 10, offset: 51987},
							name: "IfEvalStatement",
						},
						&litMatcher{
							pos:        position{line: 1714, col: 26, offset: 52003},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 30, offset: 52007},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 40, offset: 52017},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 46, offset: 52023},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 59, offset: 52036},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 70, offset: 52047},
							label: "operand",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 79, offset: 52056},
								name: "IfEvalOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 95, offset: 52072},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 105, offset: 52082},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 112, offset: 52089},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 125, offset: 52102},
							name: "AnySpaces",
						},
						&litMatcher{
							pos:        position{line: 1714, col: 135, offset: 52112},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 139, offset: 52116},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1718, col: 1, offset: 52271},
			expr: &actionExpr{
				pos: position{line: 1718, col: 19, offset: 52289},
				run: (*parser).callonIfEvalStatement1,
				expr: &litMatcher{
					pos:        position{line: 1718, col: 19, offset: 52289},
					val:        "ifeval::",
					ignoreCase: false,
					want:       "\"ifeval::\"",
				},
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1722, col: 1, offset: 52340},
			expr: &actionExpr{
				pos: position{line: 1722, col: 15, offset: 52354},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1722, col: 15, offset: 52354},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1722, col: 20, offset: 52359},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1722, col: 20, offset: 52359},
								name: "SingleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1722, col: 48, offset: 52387},
								name: "DoubleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1722, col: 76, offset: 52415},
								name: "NakedAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1733, col: 1, offset: 52855},
			expr: &choiceExpr{
				pos: position{line: 1734, col: 7, offset: 52879},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1734, col: 8, offset: 52880},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1734, col: 8, offset: 52880},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1735, col: 8, offset: 52943},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1735, col: 8, offset: 52943},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1736, col: 8, offset: 53009},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1736, col: 8, offset: 53009},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1737, col: 8, offset: 53075},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1737, col: 8, offset: 53075},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1738, col: 8, offset: 53148},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1738, col: 8, offset: 53148},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1739, col: 8, offset: 53217},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1739, col: 8, offset: 53217},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1742, col: 1, offset: 53288},
			expr: &actionExpr{
				pos: position{line: 1742, col: 20, offset: 53307},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1742, col: 21, offset: 53308},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1742, col: 21, offset: 53308},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1742, col: 27, offset: 53314},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1742, col: 33, offset: 53320},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1746, col: 1, offset: 53391},
			expr: &seqExpr{
				pos: position{line: 1746, col: 15, offset: 53405},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1746, col: 15, offset: 53405},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1746, col: 19, offset: 53409},
						expr: &notExpr{
							pos: position{line: 1746, col: 21, offset: 53411},
							expr: &litMatcher{
								pos:        position{line: 1746, col: 22, offset: 53412},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1748, col: 1, offset: 53418},
			expr: &choiceExpr{
				pos: position{line: 1748, col: 15, offset: 53432},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1748, col: 15, offset: 53432},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1748, col: 15, offset: 53432},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1748, col: 15, offset: 53432},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1748, col: 21, offset: 53438},
									expr: &charClassMatcher{
										pos:             position{line: 1748, col: 22, offset: 53439},
										val:             "[\\p{L}]",
										classes:         []*unicode.RangeTable{rangeTable("L")},
										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
										ignoreCase:      false,
										inverted:        false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1750, col: 9, offset: 53497},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1750, col: 9, offset: 53497},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1750, col: 9, offset: 53497},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1750, col: 13, offset: 53501},
									expr: &charClassMatcher{
										pos:             position{line: 1750, col: 14, offset: 53502},
										val:             "[\\p{L}]",
										classes:         []*unicode.RangeTable{rangeTable("L")},
										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
										ignoreCase:      false,
										inverted:        false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1755, col: 1, offset: 53565},
			expr: &actionExpr{
				pos: position{line: 1755, col: 15, offset: 53579},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1755, col: 17, offset: 53581},
					alternatives: []any{
						&charClassMatcher{
							pos:             position{line: 1755, col: 18, offset: 53582},
							val:             "[,;.?)/:!=\"'@-[\\]]",
							chars:           []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:          []rune{'@', '['},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
						&seqExpr{
							pos: position{line: 1755, col: 41, offset: 53605},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1755, col: 41, offset: 53605},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1755, col: 45, offset: 53609},
									expr: &litMatcher{
										pos:        position{line: 1755, col: 46, offset: 53610},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1759, col: 1, offset: 53677},
			expr: &actionExpr{
				pos: position{line: 1759, col: 13, offset: 53689},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1759, col: 13, offset: 53689},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1759, col: 13, offset: 53689},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1759, col: 17, offset: 53693},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1759, col: 27, offset: 53703},
							expr: &ruleRefExpr{
								pos:  position{line: 1759, col: 29, offset: 53705},
								name: "EndOfLine",
							},
						},
						&andCodeExpr{
							pos: position{line: 1759, col: 40, offset: 53716},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1765, col: 1, offset: 53817},
			expr: &choiceExpr{
				pos: position{line: 1765, col: 16, offset: 53832},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1765, col: 16, offset: 53832},
						name: "SingleCurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 1765, col: 36, offset: 53852},
						name: "DoubleCurvedQuote",
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1767, col: 1, offset: 53872},
			expr: &actionExpr{
				pos: position{line: 1767, col: 21, offset: 53892},
				run: (*parser).callonDoubleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1767, col: 22, offset: 53893},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1767, col: 22, offset: 53893},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&litMatcher{
							pos:        position{line: 1767, col: 30, offset: 53901},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1769, col: 1, offset: 53939},
			expr: &actionExpr{
				pos: position{line: 1769, col: 21, offset: 53959},
				run: (*parser).callonSingleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1769, col: 22, offset: 53960},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1769, col: 22, offset: 53960},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&litMatcher{
							pos:        position{line: 1769, col: 29, offset: 53967},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1771, col: 1, offset: 54004},
			expr: &actionExpr{
				pos: position{line: 1771, col: 13, offset: 54016},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1771, col: 13, offset: 54016},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1771, col: 13, offset: 54016},
							name: "BeginningOfLine",
						},
						&ruleRefExpr{
							pos:  position{line: 1771, col: 29, offset: 54032},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1771, col: 39, offset: 54042},
							name: "NewLine",
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1775, col: 1, offset: 54132},
			expr: &seqExpr{
				pos: position{line: 1775, col: 15, offset: 54146},
				exprs: []any{
					&notExpr{
						pos: position{line: 1775, col: 15, offset: 54146},
						expr: &litMatcher{
							pos:        position{line: 1775, col: 16, offset: 54147},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1775, col: 21, offset: 54152},
						name: "NewLine",
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1777, col: 1, offset: 54161},
			expr: &actionExpr{
				pos: position{line: 1777, col: 11, offset: 54171},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1777, col: 12, offset: 54172},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1777, col: 12, offset: 54172},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1777, col: 19, offset: 54179},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
						&litMatcher{
							pos:        position{line: 1777, col: 26, offset: 54186},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1781, col: 1, offset: 54248},
			expr: &actionExpr{
				pos: position{line: 1781, col: 15, offset: 54262},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 15, offset: 54262},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1781, col: 15, offset: 54262},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:  position{line: 1781, col: 26, offset: 54273},
								name: "PositiveInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 1781, col: 42, offset: 54289},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1785, col: 1, offset: 54325},
			expr: &actionExpr{
				pos: position{line: 1785, col: 20, offset: 54344},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1785, col: 20, offset: 54344},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1785, col: 21, offset: 54345},
							expr: &charClassMatcher{
								pos:             position{line: 1785, col: 21, offset: 54345},
								val:             "[0-9]",
								ranges:          []rune{'0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1785, col: 29, offset: 54353},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1791, col: 1, offset: 54444},
			expr: &notExpr{
				pos: position{line: 1791, col: 14, offset: 54457},
				expr: &ruleRefExpr{
					pos:  position{line: 1791, col: 15, offset: 54458},
					name: "NewLine",
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1793, col: 1, offset: 54467},
			expr: &notExpr{
				pos: position{line: 1793, col: 12, offset: 54478},
				expr: &ruleRefExpr{
					pos:  position{line: 1793, col: 13, offset: 54479},
					name: "_",
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1795, col: 1, offset: 54482},
			expr: &charClassMatcher{
				pos:             position{line: 1795, col: 9, offset: 54490},
				val:             "[\\p{L}]",
				classes:         []*unicode.RangeTable{rangeTable("L")},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1797, col: 1, offset: 54499},
			expr: &charClassMatcher{
				pos:             position{line: 1797, col: 16, offset: 54514},
				val:             "[\\p{L}\\p{N}]",
				classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1799, col: 1, offset: 54528},
			expr: &actionExpr{
				pos: position{line: 1799, col: 13, offset: 54540},
				run: (*parser).callonEndOfFile1,
				expr: &notExpr{
					pos: position{line: 1799, col: 13, offset: 54540},
					expr: &anyMatcher{
						line: 1799, col: 14, offset: 54541,
					},
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1803, col: 1, offset: 54583},
			expr: &andExpr{
				pos: position{line: 1803, col: 16, offset: 54598},
				expr: &anyMatcher{
					line: 1803, col: 18, offset: 54600,
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1805, col: 1, offset: 54604},
			expr: &notExpr{
				pos: position{line: 1805, col: 19, offset: 54622},
				expr: &ruleRefExpr{
					pos:  position{line: 1805, col: 20, offset: 54623},
					name: "OffsetCharacter",
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1807, col: 1, offset: 54640},
			expr: &seqExpr{
				pos: position{line: 1807, col: 19, offset: 54658},
				exprs: []any{
					&anyMatcher{
						line: 1807, col: 19, offset: 54658,
					},
					&andCodeExpr{
						pos: position{line: 1807, col: 21, offset: 54660},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1811, col: 1, offset: 54708},
			expr: &actionExpr{
				pos: position{line: 1811, col: 10, offset: 54717},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1811, col: 10, offset: 54717},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1811, col: 10, offset: 54717},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1811, col: 20, offset: 54727},
							expr: &notExpr{
								pos: position{line: 1811, col: 22, offset: 54729},
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 23, offset: 54730},
									name: "_",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1811, col: 26, offset: 54733},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1817, col: 1, offset: 54802},
			expr: &choiceExpr{
				pos: position{line: 1817, col: 13, offset: 54814},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1817, col: 13, offset: 54814},
						name: "NewLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 23, offset: 54824},
						name: "EndOfFile",
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1819, col: 1, offset: 54835},
			expr: &labeledExpr{
				pos:   position{line: 1819, col: 14, offset: 54848},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1819, col: 20, offset: 54854},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1819, col: 20, offset: 54854},
						expr: &ruleRefExpr{
							pos:  position{line: 1819, col: 20, offset: 54854},
							name: "Alphanumeric",
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1821, col: 1, offset: 54900},
			expr: &actionExpr{
				pos: position{line: 1821, col: 16, offset: 54915},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1821, col: 16, offset: 54915},
					expr: &ruleRefExpr{
						pos:  position{line: 1821, col: 16, offset: 54915},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1825, col: 1, offset: 54977},
			expr: &actionExpr{
				pos: position{line: 1825, col: 11, offset: 54987},
				run: (*parser).callonAnyText1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1825, col: 11, offset: 54987},
					expr: &ruleRefExpr{
						pos:  position{line: 1825, col: 11, offset: 54987},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1829, col: 1, offset: 55049},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1829, col: 13, offset: 55061},
				expr: &charClassMatcher{
					pos:             position{line: 1829, col: 13, offset: 55061},
					val:             "[ \\t]",
					chars:           []rune{' ', '\t'},
					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
					ignoreCase:      false,
					inverted:        false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1831, col: 1, offset: 55070},
			expr: &actionExpr{
				pos: position{line: 1831, col: 21, offset: 55090},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1831, col: 22, offset: 55091},
					alternatives: []any{
						&anyMatcher{
							line: 1831, col: 22, offset: 55091,
						},
						&ruleRefExpr{
							pos:  position{line: 1831, col: 26, offset: 55095},
							name: "NewLine",
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1835, col: 1, offset: 55144},
			expr: &charClassMatcher{
				pos:             position{line: 1835, col: 24, offset: 55167},
				val:             "[^\\n]",
				chars:           []rune{'\n'},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1837, col: 1, offset: 55175},
			expr: &actionExpr{
				pos: position{line: 1837, col: 22, offset: 55196},
				run: (*parser).callonCharacterGroupWord1,
				expr: &charClassMatcher{
					pos:             position{line: 1837, col: 22, offset: 55196},
					val:             "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
					classes:         []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
					ignoreCase:      false,
					inverted:        false,
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1841, col: 1, offset: 55297},
			expr: &actionExpr{
				pos: position{line: 1841, col: 6, offset: 55302},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1841, col: 6, offset: 55302},
					expr: &charClassMatcher{
						pos:             position{line: 1841, col: 6, offset: 55302},
						val:             "[ \\t]",
						chars:           []rune{' ', '\t'},
						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
						ignoreCase:      false,
						inverted:        false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1845, col: 1, offset: 55349},
			expr: &actionExpr{
				pos: position{line: 1845, col: 5, offset: 55353},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:             position{line: 1845, col: 5, offset: 55353},
					val:             "[ \\t]",
					chars:           []rune{' ', '\t'},
					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
					ignoreCase:      false,
					inverted:        false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1849, col: 1, offset: 55399},
			expr: &actionExpr{
				pos: position{line: 1849, col: 10, offset: 55408},
				run: (*parser).callonEscape1,
				expr: &litMatcher{
					pos:        position{line: 1849, col: 10, offset: 55408},
					val:        "\\",
					ignoreCase: false,
					want:       "\"\\\\\"",
				},
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1851, col: 1, offset: 55445},
			expr: &actionExpr{
				pos: position{line: 1851, col: 16, offset: 55460},
				run: (*parser).callonDoubleEscape1,
				expr: &litMatcher{
					pos:        position{line: 1851, col: 16, offset: 55460},
					val:        "\\\\",
					ignoreCase: false,
					want:       "\"\\\\\\\\\"",
				},
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["element"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onBlockElements1(blockElement any) (any, error) {
	return blockElement, nil
}

func (p *parser) callonBlockElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElements1(stack["blockElement"])
}

func (c *current) onNakedBlocks1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonNakedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlocks1(stack["block"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockAttributes4(anchor any) (any, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes4(stack["anchor"])
}

func (c *current) onBlockAttributes7(title any) (any, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["title"])
}

func (c *current) onBlockAttributes10(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes10(stack["attributes"])
}

func (c *current) onBlockAttributes13(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["attributes"])
}

func (c *current) onBlockAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attribute"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Set))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onBlockDelimiters1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiters1(stack["delimiter"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onSectionTitleValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSectionTitleValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleValue1(stack["element"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join[asciidoc.Element](flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onShorthandAttributeValue1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonShorthandAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement2()
}

func (c *current) onSingleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonSingleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement8()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("\""), nil
}

func (p *parser) callonDoubleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement2()
}

func (c *current) onDoubleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonDoubleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement8()
}

func (c *current) onNakedAttributeValue10() (any, error) {
	// Stop on commas, equals, spaces or end bracket
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonNakedAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue10()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join[asciidoc.Element](flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReference1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReference1(stack["attribute"])
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onSingleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextElement1(stack["element"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextElement1(stack["element"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onSingleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextElement1(stack["element"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextElement1(stack["element"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onSubscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSubscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onSuperscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSuperscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onSingleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextElement1(stack["element"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(string), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(asciidoc.NewString(id.(string)), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAnchorLabel6() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonAnchorLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel6()
}

func (c *current) onAnchorLabel9(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonAnchorLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel9(stack["arv"])
}

func (c *current) onAnchorLabel12() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonAnchorLabel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel12()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onAdmonition14() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition14()
}

func (c *current) onAdmonition1(admonition any) (any, error) {
	return admonition, nil
}

func (p *parser) callonAdmonition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition1(stack["admonition"])
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onInlineElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFootnoteValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonFootnoteValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteValue1(stack["element"])
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Set)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Set)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableCellInlineContentElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonTableCellInlineContentElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContentElement1(stack["element"])
}

func (c *current) onTableEnd1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEnd1()
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonInitialBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonInitialBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonAdditionalBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonAdditionalBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Set{asciidoc.NewString(string(c.text))}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Set
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Set{asciidoc.EmptyLine{}}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onBlockTableCellLine1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonBlockTableCellLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLine1(stack["content"])
}

func (c *current) onBlockTableCellLastLine1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonBlockTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLastLine1(stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe[int](column, span.Column.Value)
	span.Row = asciidoc.Maybe[int](row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe[int](multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe[asciidoc.TableCellHorizontalAlign](horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe[asciidoc.TableCellVerticalAlign](verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe[asciidoc.TableCellStyle](style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURLScheme1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonURLScheme1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURLScheme1()
}

func (c *current) onURL1(scheme, path any) (any, error) {
	s, _ := scheme.(string)
	return compose(c, asciidoc.NewURL(s, path.(asciidoc.Set)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(scheme.(string), path.(asciidoc.Set)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onPathElement2() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement2()
}

func (c *current) onPathElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement5()
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onSingleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextElement1(stack["element"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextElement1(stack["element"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onPreParseLineElement2(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonPreParseLineElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement2(stack["arv"])
}

func (c *current) onPreParseLineElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonPreParseLineElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement5()
}

func (c *current) onPreParseLineElement8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPreParseLineElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement8()
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlock1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonAttachedBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlock1(stack["element"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return []any{&asciidoc.NewLine{}, element}, nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(string)), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceID1() (any, error) {

	// See: https://docs.asciidoctor.org/asciidoc/latest/attributes/id/#valid-id-characters
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1()
}

func (c *current) onCrossReferenceLabel3() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonCrossReferenceLabel3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel6(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonCrossReferenceLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel6(stack["arv"])
}

func (c *current) onCrossReferenceLabel9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onDocumentCrossReference1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewDocumentCrossReference(path.(asciidoc.Set)), setAttributes[*asciidoc.DocumentCrossReference](attributes))
}

func (p *parser) callonDocumentCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentCrossReference1(stack["path"], stack["attributes"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 5, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 5, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Set))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Set)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Set(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onSinglePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSinglePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextElement1(stack["element"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onDoublePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoublePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextElement1(stack["element"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onEndIfDefStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndIfDefStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDefStatement1()
}

func (c *current) onConditionalAttributes1(attr any) (any, error) {
	return attr, nil
}

func (p *parser) callonConditionalAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributes1(stack["attr"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onInlineConditionalContent4(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineConditionalContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent4(stack["element"])
}

func (c *current) onInlineConditionalContent1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineConditionalContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent1(stack["content"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIfEvalStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalStatement1()
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onDoubleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleCurvedQuote1()
}

func (c *current) onSingleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCurvedQuote1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onEndOfFile1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndOfFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfFile1()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onAnyText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAnyText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) onCharacterGroupWord1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCharacterGroupWord1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterGroupWord1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

func (c *current) onEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscape1()
}

func (c *current) onDoubleEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleEscape1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
	delimitedBlockState delimitedBlockState
	parser *parser
	tableColumnsAttribute *asciidoc.TableColumnsAttribute
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
	offset position
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	if cur < 128 {
		if chr.basicLatinChars[cur] != chr.inverted {
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
