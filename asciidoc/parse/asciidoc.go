// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 99},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 110},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 110},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 110},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 118},
								expr: &ruleRefExpr{
									pos:    position{line: 14, col: 21, offset: 119},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 14, col: 31, offset: 129},
							offset: 325,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 184},
			expr: &choiceExpr{
				pos: position{line: 18, col: 12, offset: 195},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 18, col: 12, offset: 195},
						offset: 2,
					},
					&ruleRefExpr{
						pos:    position{line: 18, col: 27, offset: 210},
						offset: 88,
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 21, col: 1, offset: 225},
			expr: &actionExpr{
				pos: position{line: 21, col: 16, offset: 240},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 21, col: 16, offset: 240},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 21, col: 16, offset: 240},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 21, col: 32, offset: 256},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 21, col: 41, offset: 265},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 21, col: 56, offset: 280},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 22, col: 1, offset: 290},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 28, col: 1, offset: 389},
			expr: &choiceExpr{
				pos: position{line: 29, col: 5, offset: 411},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 29, col: 5, offset: 411},
						offset: 15,
					},
					&ruleRefExpr{
						pos:    position{line: 30, col: 5, offset: 431},
						offset: 9,
					},
					&ruleRefExpr{
						pos:    position{line: 31, col: 5, offset: 452},
						offset: 5,
					},
					&ruleRefExpr{
						pos:    position{line: 32, col: 5, offset: 477},
						offset: 113,
					},
					&ruleRefExpr{
						pos:    position{line: 33, col: 5, offset: 489},
						offset: 4,
					},
					&ruleRefExpr{
						pos:    position{line: 34, col: 5, offset: 507},
						offset: 13,
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 37, col: 1, offset: 532},
			expr: &choiceExpr{
				pos: position{line: 38, col: 5, offset: 552},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 38, col: 5, offset: 552},
						offset: 273,
					},
					&ruleRefExpr{
						pos:    position{line: 39, col: 5, offset: 576},
						offset: 270,
					},
					&ruleRefExpr{
						pos:    position{line: 40, col: 5, offset: 600},
						offset: 22,
					},
					&ruleRefExpr{
						pos:    position{line: 41, col: 5, offset: 622},
						offset: 26,
					},
					&ruleRefExpr{
						pos:    position{line: 42, col: 5, offset: 643},
						offset: 292,
					},
					&ruleRefExpr{
						pos:    position{line: 43, col: 5, offset: 655},
						offset: 294,
					},
					&ruleRefExpr{
						pos:    position{line: 44, col: 5, offset: 669},
						offset: 303,
					},
					&ruleRefExpr{
						pos:    position{line: 45, col: 5, offset: 682},
						offset: 298,
					},
					&ruleRefExpr{
						pos:    position{line: 46, col: 5, offset: 697},
						offset: 102,
					},
					&ruleRefExpr{
						pos:    position{line: 47, col: 5, offset: 715},
						offset: 266,
					},
					&ruleRefExpr{
						pos:    position{line: 48, col: 5, offset: 741},
						offset: 318,
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 51, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 51, col: 22, offset: 774},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 51, col: 22, offset: 774},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 51, col: 22, offset: 774},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 51, col: 33, offset: 785},
								expr: &ruleRefExpr{
									pos:    position{line: 51, col: 34, offset: 786},
									offset: 12,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 51, col: 59, offset: 811},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 52, col: 5, offset: 826},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 52, col: 5, offset: 826},
										offset: 170,
									},
									&ruleRefExpr{
										pos:    position{line: 53, col: 5, offset: 841},
										offset: 176,
									},
									&ruleRefExpr{
										pos:    position{line: 54, col: 5, offset: 852},
										offset: 188,
									},
									&ruleRefExpr{
										pos:    position{line: 55, col: 5, offset: 866},
										offset: 200,
									},
									&ruleRefExpr{
										pos:    position{line: 56, col: 5, offset: 880},
										offset: 212,
									},
									&ruleRefExpr{
										pos:    position{line: 57, col: 5, offset: 892},
										offset: 194,
									},
									&ruleRefExpr{
										pos:    position{line: 58, col: 5, offset: 906},
										offset: 233,
									},
									&ruleRefExpr{
										pos:    position{line: 59, col: 5, offset: 917},
										offset: 19,
									},
									&ruleRefExpr{
										pos:    position{line: 60, col: 5, offset: 932},
										offset: 225,
									},
									&ruleRefExpr{
										pos:    position{line: 61, col: 5, offset: 952},
										offset: 226,
									},
									&ruleRefExpr{
										pos:    position{line: 62, col: 5, offset: 968},
										offset: 98,
									},
									&ruleRefExpr{
										pos:    position{line: 63, col: 5, offset: 985},
										offset: 261,
									},
									&ruleRefExpr{
										pos:    position{line: 64, col: 5, offset: 1008},
										offset: 263,
									},
									&ruleRefExpr{
										pos:    position{line: 65, col: 5, offset: 1033},
										offset: 266,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 66, col: 9, offset: 1062},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 79, col: 1, offset: 1461},
			expr: &choiceExpr{
				pos: position{line: 79, col: 19, offset: 1479},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 79, col: 19, offset: 1479},
						offset: 85,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 37, offset: 1497},
						offset: 7,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 50, offset: 1510},
						offset: 27,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 63, offset: 1523},
						offset: 31,
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 81, col: 1, offset: 1544},
			expr: &actionExpr{
				pos: position{line: 81, col: 14, offset: 1557},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 81, col: 14, offset: 1557},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 81, col: 14, offset: 1557},
							offset: 328,
						},
						&litMatcher{
							pos:        position{line: 81, col: 30, offset: 1573},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 81, col: 34, offset: 1577},
							expr: &charClassMatcher{
								pos:        position{line: 81, col: 35, offset: 1578},
								val:        "[ .]",
								chars:      []rune{' ', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 40, offset: 1583},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 81, col: 49, offset: 1592},
								offset: 8,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 89, col: 1, offset: 1772},
			expr: &actionExpr{
				pos: position{line: 89, col: 21, offset: 1792},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 89, col: 21, offset: 1792},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 89, col: 29, offset: 1800},
						expr: &choiceExpr{
							pos: position{line: 89, col: 30, offset: 1801},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 89, col: 30, offset: 1801},
									offset: 91,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 48, offset: 1819},
									offset: 324,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 63, offset: 1834},
									offset: 340,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 67, offset: 1838},
									offset: 311,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 81, offset: 1852},
									offset: 53,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 102, offset: 1873},
									offset: 337,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 93, col: 1, offset: 1940},
			expr: &actionExpr{
				pos: position{line: 93, col: 18, offset: 1957},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 93, col: 18, offset: 1957},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 93, col: 18, offset: 1957},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 93, col: 28, offset: 1967},
							expr: &ruleRefExpr{
								pos:    position{line: 93, col: 29, offset: 1968},
								offset: 318,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 97, col: 1, offset: 2046},
			expr: &actionExpr{
				pos: position{line: 97, col: 25, offset: 2070},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 97, col: 25, offset: 2070},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 97, col: 25, offset: 2070},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 97, col: 37, offset: 2082},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 97, col: 54, offset: 2099},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 97, col: 64, offset: 2109},
							expr: &ruleRefExpr{
								pos:    position{line: 97, col: 65, offset: 2110},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 101, col: 1, offset: 2156},
			expr: &actionExpr{
				pos: position{line: 101, col: 35, offset: 2190},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 101, col: 35, offset: 2190},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 101, col: 35, offset: 2190},
							offset: 318,
						},
						&labeledExpr{
							pos:   position{line: 101, col: 43, offset: 2198},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 101, col: 55, offset: 2210},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 101, col: 72, offset: 2227},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 101, col: 82, offset: 2237},
							expr: &ruleRefExpr{
								pos:    position{line: 101, col: 83, offset: 2238},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 105, col: 1, offset: 2284},
			expr: &actionExpr{
				pos: position{line: 105, col: 26, offset: 2309},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 105, col: 26, offset: 2309},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 105, col: 26, offset: 2309},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 105, col: 37, offset: 2320},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 60, offset: 2343},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 81, offset: 2364},
								expr: &ruleRefExpr{
									pos:    position{line: 105, col: 82, offset: 2365},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 105, col: 116, offset: 2399},
							offset: 331,
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 126, offset: 2409},
							expr: &ruleRefExpr{
								pos:    position{line: 105, col: 126, offset: 2409},
								offset: 316,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 113, col: 1, offset: 2626},
			expr: &actionExpr{
				pos: position{line: 113, col: 24, offset: 2649},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 113, col: 24, offset: 2649},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 113, col: 24, offset: 2649},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 113, col: 35, offset: 2660},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 58, offset: 2683},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 79, offset: 2704},
								expr: &ruleRefExpr{
									pos:    position{line: 113, col: 80, offset: 2705},
									offset: 11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 125, col: 1, offset: 3047},
			expr: &seqExpr{
				pos: position{line: 126, col: 5, offset: 3070},
				exprs: []any{
					&notExpr{
						pos: position{line: 126, col: 5, offset: 3070},
						expr: &ruleRefExpr{
							pos:    position{line: 126, col: 6, offset: 3071},
							offset: 324,
						},
					},
					&choiceExpr{
						pos: position{line: 128, col: 9, offset: 3101},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 128, col: 9, offset: 3101},
								offset: 276,
							},
							&ruleRefExpr{
								pos:    position{line: 129, col: 11, offset: 3142},
								offset: 191,
							},
							&ruleRefExpr{
								pos:    position{line: 130, col: 11, offset: 3166},
								offset: 230,
							},
							&ruleRefExpr{
								pos:    position{line: 131, col: 11, offset: 3192},
								offset: 173,
							},
							&ruleRefExpr{
								pos:    position{line: 132, col: 11, offset: 3217},
								offset: 197,
							},
							&ruleRefExpr{
								pos:    position{line: 133, col: 11, offset: 3239},
								offset: 236,
							},
							&ruleRefExpr{
								pos:    position{line: 134, col: 11, offset: 3260},
								offset: 215,
							},
							&ruleRefExpr{
								pos:    position{line: 135, col: 11, offset: 3286},
								offset: 203,
							},
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscape",
			pos:  position{line: 139, col: 1, offset: 3311},
			expr: &actionExpr{
				pos: position{line: 140, col: 5, offset: 3331},
				run: (*parser).callonAlchemyEscape1,
				expr: &seqExpr{
					pos: position{line: 140, col: 5, offset: 3331},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 140, col: 5, offset: 3331},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 140, col: 12, offset: 3338},
								offset: 16,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 141, col: 5, offset: 3363},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 141, col: 15, offset: 3373},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 141, col: 22, offset: 3380},
								offset: 24,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 141, col: 46, offset: 3404},
							offset: 331,
						},
						&labeledExpr{
							pos:   position{line: 142, col: 5, offset: 3418},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 142, col: 11, offset: 3424},
								expr: &ruleRefExpr{
									pos:    position{line: 142, col: 12, offset: 3425},
									offset: 17,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 143, col: 5, offset: 3449},
							offset: 18,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeStart",
			pos:  position{line: 147, col: 1, offset: 3644},
			expr: &litMatcher{
				pos:        position{line: 147, col: 22, offset: 3665},
				val:        ":alchemy-escape:",
				ignoreCase: false,
				want:       "\":alchemy-escape:\"",
			},
		},
		{
			name: "AlchemyEscapeLine",
			pos:  position{line: 149, col: 1, offset: 3686},
			expr: &actionExpr{
				pos: position{line: 149, col: 21, offset: 3706},
				run: (*parser).callonAlchemyEscapeLine1,
				expr: &seqExpr{
					pos: position{line: 149, col: 22, offset: 3707},
					exprs: []any{
						&notExpr{
							pos: position{line: 149, col: 22, offset: 3707},
							expr: &ruleRefExpr{
								pos:    position{line: 149, col: 23, offset: 3708},
								offset: 18,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 40, offset: 3725},
							offset: 326,
						},
						&labeledExpr{
							pos:   position{line: 149, col: 53, offset: 3738},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 149, col: 58, offset: 3743},
								offset: 334,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 66, offset: 3751},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeEnd",
			pos:  position{line: 153, col: 1, offset: 3798},
			expr: &choiceExpr{
				pos: position{line: 153, col: 20, offset: 3817},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 153, col: 20, offset: 3817},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 153, col: 20, offset: 3817},
								val:        ":!alchemy-escape:",
								ignoreCase: false,
								want:       "\":!alchemy-escape:\"",
							},
							&andExpr{
								pos: position{line: 153, col: 40, offset: 3837},
								expr: &ruleRefExpr{
									pos:    position{line: 153, col: 41, offset: 3838},
									offset: 331,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 153, col: 53, offset: 3850},
						offset: 325,
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 155, col: 1, offset: 3861},
			expr: &actionExpr{
				pos: position{line: 155, col: 11, offset: 3871},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 155, col: 11, offset: 3871},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 155, col: 11, offset: 3871},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 155, col: 18, offset: 3878},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 3878},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 3878},
										val:        "[=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 158, col: 5, offset: 3937},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:    position{line: 161, col: 5, offset: 3994},
							offset: 339,
						},
						&labeledExpr{
							pos:   position{line: 161, col: 8, offset: 3997},
							label: "title",
							expr: &ruleRefExpr{
								pos:    position{line: 161, col: 15, offset: 4004},
								offset: 20,
							},
						},
						&andExpr{
							pos: position{line: 161, col: 29, offset: 4018},
							expr: &ruleRefExpr{
								pos:    position{line: 161, col: 30, offset: 4019},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 165, col: 1, offset: 4134},
			expr: &oneOrMoreExpr{
				pos: position{line: 165, col: 16, offset: 4149},
				expr: &ruleRefExpr{
					pos:    position{line: 165, col: 17, offset: 4150},
					offset: 21,
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 167, col: 1, offset: 4171},
			expr: &seqExpr{
				pos: position{line: 167, col: 21, offset: 4191},
				exprs: []any{
					&notExpr{
						pos: position{line: 167, col: 21, offset: 4191},
						expr: &ruleRefExpr{
							pos:    position{line: 167, col: 22, offset: 4192},
							offset: 331,
						},
					},
					&choiceExpr{
						pos: position{line: 168, col: 5, offset: 4208},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 168, col: 5, offset: 4208},
								offset: 333,
							},
							&ruleRefExpr{
								pos:    position{line: 169, col: 7, offset: 4228},
								offset: 339,
							},
							&ruleRefExpr{
								pos:    position{line: 170, col: 7, offset: 4238},
								offset: 310,
							},
							&ruleRefExpr{
								pos:    position{line: 171, col: 7, offset: 4256},
								offset: 311,
							},
							&ruleRefExpr{
								pos:    position{line: 172, col: 7, offset: 4276},
								offset: 95,
							},
							&ruleRefExpr{
								pos:    position{line: 173, col: 7, offset: 4296},
								offset: 284,
							},
							&ruleRefExpr{
								pos:    position{line: 174, col: 7, offset: 4320},
								offset: 108,
							},
							&ruleRefExpr{
								pos:    position{line: 175, col: 7, offset: 4332},
								offset: 308,
							},
							&ruleRefExpr{
								pos:    position{line: 176, col: 7, offset: 4356},
								offset: 101,
							},
							&ruleRefExpr{
								pos:    position{line: 177, col: 7, offset: 4368},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 178, col: 7, offset: 4394},
								offset: 84,
							},
							&ruleRefExpr{
								pos:    position{line: 180, col: 7, offset: 4423},
								offset: 337,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 183, col: 1, offset: 4448},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 4465},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 4465},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 183, col: 18, offset: 4465},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 22, offset: 4469},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 183, col: 28, offset: 4475},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 48, offset: 4495},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:    position{line: 183, col: 52, offset: 4499},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 62, offset: 4509},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 183, col: 69, offset: 4516},
								offset: 24,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 187, col: 1, offset: 4660},
			expr: &actionExpr{
				pos: position{line: 187, col: 22, offset: 4681},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 187, col: 22, offset: 4681},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 187, col: 22, offset: 4681},
							offset: 338,
						},
						&zeroOrMoreExpr{
							pos: position{line: 187, col: 41, offset: 4700},
							expr: &choiceExpr{
								pos: position{line: 187, col: 42, offset: 4701},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 187, col: 42, offset: 4701},
										offset: 338,
									},
									&litMatcher{
										pos:        position{line: 187, col: 63, offset: 4722},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 191, col: 1, offset: 4768},
			expr: &actionExpr{
				pos: position{line: 191, col: 26, offset: 4793},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 191, col: 26, offset: 4793},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 191, col: 32, offset: 4799},
						expr: &ruleRefExpr{
							pos:    position{line: 191, col: 32, offset: 4799},
							offset: 25,
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 195, col: 1, offset: 4875},
			expr: &choiceExpr{
				pos: position{line: 195, col: 26, offset: 4900},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 195, col: 26, offset: 4900},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 195, col: 26, offset: 4900},
								offset: 312,
							},
							&ruleRefExpr{
								pos:    position{line: 195, col: 36, offset: 4910},
								offset: 331,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 195, col: 48, offset: 4922},
						offset: 337,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 197, col: 1, offset: 4946},
			expr: &choiceExpr{
				pos: position{line: 197, col: 18, offset: 4963},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 197, col: 18, offset: 4963},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 197, col: 18, offset: 4963},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 197, col: 18, offset: 4963},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 197, col: 23, offset: 4968},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 197, col: 29, offset: 4974},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 197, col: 49, offset: 4994},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:    position{line: 197, col: 53, offset: 4998},
									offset: 335,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 199, col: 5, offset: 5080},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 199, col: 5, offset: 5080},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 199, col: 5, offset: 5080},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 9, offset: 5084},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 199, col: 15, offset: 5090},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 35, offset: 5110},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:    position{line: 199, col: 40, offset: 5115},
									offset: 335,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 204, col: 1, offset: 5275},
			expr: &actionExpr{
				pos: position{line: 204, col: 14, offset: 5288},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 204, col: 14, offset: 5288},
					exprs: []any{
						&notExpr{
							pos: position{line: 204, col: 14, offset: 5288},
							expr: &litMatcher{
								pos:        position{line: 204, col: 15, offset: 5289},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 204, col: 20, offset: 5294},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 204, col: 24, offset: 5298},
							expr: &litMatcher{
								pos:        position{line: 204, col: 25, offset: 5299},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 29, offset: 5303},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 204, col: 41, offset: 5315},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 204, col: 56, offset: 5330},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 209, col: 1, offset: 5372},
			expr: &actionExpr{
				pos: position{line: 209, col: 17, offset: 5388},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 209, col: 17, offset: 5388},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 209, col: 28, offset: 5399},
						expr: &ruleRefExpr{
							pos:    position{line: 209, col: 29, offset: 5400},
							offset: 29,
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 213, col: 1, offset: 5485},
			expr: &actionExpr{
				pos: position{line: 213, col: 21, offset: 5505},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 213, col: 21, offset: 5505},
					exprs: []any{
						&notExpr{
							pos: position{line: 213, col: 21, offset: 5505},
							expr: &litMatcher{
								pos:        position{line: 213, col: 22, offset: 5506},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 213, col: 26, offset: 5510},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 36, offset: 5520},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 213, col: 47, offset: 5531},
								offset: 30,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 213, col: 58, offset: 5542},
							offset: 335,
						},
						&zeroOrOneExpr{
							pos: position{line: 213, col: 68, offset: 5552},
							expr: &litMatcher{
								pos:        position{line: 213, col: 68, offset: 5552},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 217, col: 1, offset: 5588},
			expr: &actionExpr{
				pos: position{line: 217, col: 13, offset: 5600},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 217, col: 13, offset: 5600},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 217, col: 13, offset: 5600},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 217, col: 18, offset: 5605},
								expr: &actionExpr{
									pos: position{line: 217, col: 20, offset: 5607},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 217, col: 21, offset: 5608},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 217, col: 21, offset: 5608},
												label: "name",
												expr: &ruleRefExpr{
													pos:    position{line: 217, col: 27, offset: 5614},
													offset: 52,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 217, col: 47, offset: 5634},
												offset: 335,
											},
											&litMatcher{
												pos:        position{line: 217, col: 57, offset: 5644},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:    position{line: 217, col: 61, offset: 5648},
												offset: 335,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 217, col: 95, offset: 5682},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 217, col: 102, offset: 5689},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 217, col: 102, offset: 5689},
										offset: 38,
									},
									&ruleRefExpr{
										pos:    position{line: 217, col: 130, offset: 5717},
										offset: 43,
									},
									&ruleRefExpr{
										pos:    position{line: 217, col: 158, offset: 5745},
										offset: 47,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 224, col: 1, offset: 6001},
			expr: &actionExpr{
				pos: position{line: 224, col: 23, offset: 6023},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 224, col: 23, offset: 6023},
					exprs: []any{
						&notExpr{
							pos: position{line: 224, col: 23, offset: 6023},
							expr: &litMatcher{
								pos:        position{line: 224, col: 24, offset: 6024},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 29, offset: 6029},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 224, col: 33, offset: 6033},
							expr: &litMatcher{
								pos:        position{line: 224, col: 34, offset: 6034},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 224, col: 38, offset: 6038},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 224, col: 49, offset: 6049},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 69, offset: 6069},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 228, col: 1, offset: 6109},
			expr: &actionExpr{
				pos: position{line: 228, col: 22, offset: 6130},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 228, col: 22, offset: 6130},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 228, col: 22, offset: 6130},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 228, col: 28, offset: 6136},
								expr: &ruleRefExpr{
									pos:    position{line: 228, col: 29, offset: 6137},
									offset: 37,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 55, offset: 6163},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 228, col: 62, offset: 6170},
								expr: &choiceExpr{
									pos: position{line: 228, col: 63, offset: 6171},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 228, col: 63, offset: 6171},
											offset: 34,
										},
										&ruleRefExpr{
											pos:    position{line: 228, col: 77, offset: 6185},
											offset: 35,
										},
										&ruleRefExpr{
											pos:    position{line: 228, col: 93, offset: 6201},
											offset: 36,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 232, col: 1, offset: 6289},
			expr: &actionExpr{
				pos: position{line: 232, col: 18, offset: 6306},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 232, col: 18, offset: 6306},
					label: "value",
					expr: &ruleRefExpr{
						pos:    position{line: 232, col: 24, offset: 6312},
						offset: 37,
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 236, col: 1, offset: 6411},
			expr: &actionExpr{
				pos: position{line: 236, col: 15, offset: 6425},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 236, col: 15, offset: 6425},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 236, col: 15, offset: 6425},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 236, col: 19, offset: 6429},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 236, col: 25, offset: 6435},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 240, col: 1, offset: 6534},
			expr: &actionExpr{
				pos: position{line: 240, col: 17, offset: 6550},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 240, col: 17, offset: 6550},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 240, col: 17, offset: 6550},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 21, offset: 6554},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 240, col: 27, offset: 6560},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 244, col: 1, offset: 6661},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 6679},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 6679},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 6679},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 6683},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 244, col: 29, offset: 6689},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 248, col: 1, offset: 6792},
			expr: &choiceExpr{
				pos: position{line: 248, col: 28, offset: 6819},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 248, col: 28, offset: 6819},
						exprs: []any{
							&notExpr{
								pos: position{line: 248, col: 28, offset: 6819},
								expr: &litMatcher{
									pos:        position{line: 248, col: 29, offset: 6820},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
							&notExpr{
								pos: position{line: 248, col: 33, offset: 6824},
								expr: &litMatcher{
									pos:        position{line: 248, col: 34, offset: 6825},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
							},
							&notExpr{
								pos: position{line: 248, col: 38, offset: 6829},
								expr: &litMatcher{
									pos:        position{line: 248, col: 39, offset: 6830},
									val:        "%",
									ignoreCase: false,
									want:       "\"%\"",
								},
							},
							&ruleRefExpr{
								pos:    position{line: 248, col: 43, offset: 6834},
								offset: 38,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 248, col: 71, offset: 6862},
						offset: 43,
					},
					&ruleRefExpr{
						pos:    position{line: 248, col: 99, offset: 6890},
						offset: 47,
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 250, col: 1, offset: 6912},
			expr: &actionExpr{
				pos: position{line: 250, col: 29, offset: 6940},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 250, col: 29, offset: 6940},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 250, col: 29, offset: 6940},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 33, offset: 6944},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 250, col: 39, offset: 6950},
								expr: &ruleRefExpr{
									pos:    position{line: 250, col: 40, offset: 6951},
									offset: 39,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 250, col: 76, offset: 6987},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElements",
			pos:  position{line: 254, col: 1, offset: 7102},
			expr: &labeledExpr{
				pos:   position{line: 254, col: 37, offset: 7138},
				label: "content",
				expr: &oneOrMoreExpr{
					pos: position{line: 254, col: 45, offset: 7146},
					expr: &choiceExpr{
						pos: position{line: 254, col: 46, offset: 7147},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 254, col: 46, offset: 7147},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 254, col: 67, offset: 7168},
								offset: 40,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 256, col: 1, offset: 7204},
			expr: &seqExpr{
				pos: position{line: 256, col: 37, offset: 7240},
				exprs: []any{
					&notExpr{
						pos: position{line: 256, col: 37, offset: 7240},
						expr: &ruleRefExpr{
							pos:    position{line: 256, col: 38, offset: 7241},
							offset: 53,
						},
					},
					&ruleRefExpr{
						pos:    position{line: 256, col: 57, offset: 7260},
						offset: 41,
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueCharacter",
			pos:  position{line: 258, col: 1, offset: 7297},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 7340},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 259, col: 6, offset: 7341},
						run: (*parser).callonSingleQuoteAttributeValueCharacter2,
						expr: &litMatcher{
							pos:        position{line: 259, col: 6, offset: 7341},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 260, col: 5, offset: 7395},
						offset: 324,
					},
					&ruleRefExpr{
						pos:    position{line: 261, col: 5, offset: 7415},
						offset: 340,
					},
					&ruleRefExpr{
						pos:    position{line: 262, col: 5, offset: 7423},
						offset: 313,
					},
					&charClassMatcher{
						pos:        position{line: 263, col: 5, offset: 7442},
						val:        "[^\\r\\n\\\\' ]",
						chars:      []rune{'\r', '\n', '\\', '\'', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElements",
			pos:  position{line: 266, col: 1, offset: 7458},
			expr: &choiceExpr{
				pos: position{line: 266, col: 38, offset: 7495},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 266, col: 38, offset: 7495},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 266, col: 59, offset: 7516},
						offset: 45,
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 268, col: 1, offset: 7551},
			expr: &actionExpr{
				pos: position{line: 268, col: 29, offset: 7579},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 268, col: 29, offset: 7579},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 268, col: 29, offset: 7579},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 34, offset: 7584},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 268, col: 40, offset: 7590},
								expr: &ruleRefExpr{
									pos:    position{line: 268, col: 41, offset: 7591},
									offset: 44,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 77, offset: 7627},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElements",
			pos:  position{line: 272, col: 1, offset: 7743},
			expr: &labeledExpr{
				pos:   position{line: 272, col: 37, offset: 7779},
				label: "content",
				expr: &oneOrMoreExpr{
					pos: position{line: 272, col: 45, offset: 7787},
					expr: &choiceExpr{
						pos: position{line: 272, col: 46, offset: 7788},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 272, col: 46, offset: 7788},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 272, col: 67, offset: 7809},
								offset: 45,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 274, col: 1, offset: 7845},
			expr: &seqExpr{
				pos: position{line: 274, col: 37, offset: 7881},
				exprs: []any{
					&notExpr{
						pos: position{line: 274, col: 37, offset: 7881},
						expr: &ruleRefExpr{
							pos:    position{line: 274, col: 38, offset: 7882},
							offset: 53,
						},
					},
					&ruleRefExpr{
						pos:    position{line: 274, col: 57, offset: 7901},
						offset: 46,
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueCharacter",
			pos:  position{line: 276, col: 1, offset: 7938},
			expr: &choiceExpr{
				pos: position{line: 277, col: 5, offset: 7981},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 277, col: 6, offset: 7982},
						run: (*parser).callonDoubleQuoteAttributeValueCharacter2,
						expr: &litMatcher{
							pos:        position{line: 277, col: 6, offset: 7982},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 278, col: 5, offset: 8037},
						offset: 324,
					},
					&ruleRefExpr{
						pos:    position{line: 279, col: 5, offset: 8057},
						offset: 340,
					},
					&ruleRefExpr{
						pos:    position{line: 280, col: 5, offset: 8065},
						offset: 313,
					},
					&charClassMatcher{
						pos:        position{line: 281, col: 5, offset: 8084},
						val:        "[^\\r\\n\\\\\" ]",
						chars:      []rune{'\r', '\n', '\\', '"', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 284, col: 1, offset: 8099},
			expr: &actionExpr{
				pos: position{line: 284, col: 23, offset: 8121},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 284, col: 23, offset: 8121},
					exprs: []any{
						&notExpr{
							pos: position{line: 284, col: 23, offset: 8121},
							expr: &ruleRefExpr{
								pos:    position{line: 284, col: 24, offset: 8122},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 26, offset: 8124},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 284, col: 33, offset: 8131},
								offset: 48,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValueElements",
			pos:  position{line: 288, col: 1, offset: 8234},
			expr: &labeledExpr{
				pos:   position{line: 288, col: 31, offset: 8264},
				label: "content",
				expr: &oneOrMoreExpr{
					pos: position{line: 288, col: 39, offset: 8272},
					expr: &choiceExpr{
						pos: position{line: 288, col: 40, offset: 8273},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 288, col: 40, offset: 8273},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 288, col: 61, offset: 8294},
								offset: 49,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValueElement",
			pos:  position{line: 290, col: 1, offset: 8324},
			expr: &seqExpr{
				pos: position{line: 290, col: 31, offset: 8354},
				exprs: []any{
					&notExpr{
						pos: position{line: 290, col: 31, offset: 8354},
						expr: &ruleRefExpr{
							pos:    position{line: 290, col: 32, offset: 8355},
							offset: 53,
						},
					},
					&ruleRefExpr{
						pos:    position{line: 290, col: 51, offset: 8374},
						offset: 50,
					},
				},
			},
		},
		{
			name: "NakedAttributeValueCharacter",
			pos:  position{line: 292, col: 1, offset: 8405},
			expr: &choiceExpr{
				pos: position{line: 293, col: 5, offset: 8442},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 293, col: 5, offset: 8442},
						offset: 340,
					},
					&charClassMatcher{
						pos:        position{line: 294, col: 5, offset: 8451},
						val:        "[^=\\], ]",
						chars:      []rune{'=', ']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 297, col: 1, offset: 8463},
			expr: &actionExpr{
				pos: position{line: 297, col: 20, offset: 8482},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 297, col: 20, offset: 8482},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 297, col: 20, offset: 8482},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 24, offset: 8486},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 297, col: 36, offset: 8498},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 297, col: 51, offset: 8513},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 301, col: 1, offset: 8553},
			expr: &actionExpr{
				pos: position{line: 301, col: 22, offset: 8574},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 301, col: 22, offset: 8574},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 301, col: 22, offset: 8574},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 35, offset: 8587},
							expr: &charClassMatcher{
								pos:        position{line: 301, col: 35, offset: 8587},
								val:        "[A-Za-z0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 305, col: 1, offset: 8642},
			expr: &choiceExpr{
				pos: position{line: 305, col: 22, offset: 8663},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 305, col: 22, offset: 8663},
						offset: 54,
					},
					&ruleRefExpr{
						pos:    position{line: 305, col: 48, offset: 8689},
						offset: 279,
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 307, col: 1, offset: 8698},
			expr: &actionExpr{
				pos: position{line: 307, col: 27, offset: 8724},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 307, col: 27, offset: 8724},
					exprs: []any{
						&notExpr{
							pos: position{line: 307, col: 27, offset: 8724},
							expr: &litMatcher{
								pos:        position{line: 307, col: 28, offset: 8725},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 33, offset: 8730},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 307, col: 37, offset: 8734},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 307, col: 42, offset: 8739},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 61, offset: 8758},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 315, col: 1, offset: 8854},
			expr: &choiceExpr{
				pos: position{line: 315, col: 13, offset: 8866},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 315, col: 13, offset: 8866},
						offset: 56,
					},
					&ruleRefExpr{
						pos:    position{line: 315, col: 30, offset: 8883},
						offset: 59,
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 317, col: 1, offset: 8900},
			expr: &actionExpr{
				pos: position{line: 317, col: 18, offset: 8917},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 317, col: 18, offset: 8917},
					exprs: []any{
						&notExpr{
							pos: position{line: 317, col: 18, offset: 8917},
							expr: &ruleRefExpr{
								pos:    position{line: 317, col: 19, offset: 8918},
								offset: 341,
							},
						},
						&litMatcher{
							pos:        position{line: 317, col: 26, offset: 8925},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 317, col: 30, offset: 8929},
							expr: &notExpr{
								pos: position{line: 317, col: 32, offset: 8931},
								expr: &litMatcher{
									pos:        position{line: 317, col: 33, offset: 8932},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 38, offset: 8937},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 317, col: 45, offset: 8944},
								offset: 57,
							},
						},
						&litMatcher{
							pos:        position{line: 317, col: 66, offset: 8965},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 317, col: 70, offset: 8969},
							expr: &litMatcher{
								pos:        position{line: 317, col: 71, offset: 8970},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 317, col: 75, offset: 8974},
							expr: &notExpr{
								pos: position{line: 317, col: 77, offset: 8976},
								expr: &ruleRefExpr{
									pos:    position{line: 317, col: 78, offset: 8977},
									offset: 324,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 321, col: 1, offset: 9022},
			expr: &actionExpr{
				pos: position{line: 321, col: 23, offset: 9044},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 321, col: 23, offset: 9044},
					exprs: []any{
						&notExpr{
							pos: position{line: 321, col: 23, offset: 9044},
							expr: &ruleRefExpr{
								pos:    position{line: 321, col: 24, offset: 9045},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 26, offset: 9047},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 321, col: 32, offset: 9053},
								expr: &actionExpr{
									pos: position{line: 321, col: 33, offset: 9054},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 321, col: 33, offset: 9054},
										exprs: []any{
											&notExpr{
												pos: position{line: 321, col: 33, offset: 9054},
												expr: &ruleRefExpr{
													pos:    position{line: 321, col: 34, offset: 9055},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 321, col: 36, offset: 9057},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 321, col: 42, offset: 9063},
													expr: &ruleRefExpr{
														pos:    position{line: 321, col: 43, offset: 9064},
														offset: 58,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 325, col: 1, offset: 9212},
			expr: &seqExpr{
				pos: position{line: 325, col: 25, offset: 9236},
				exprs: []any{
					&notExpr{
						pos: position{line: 325, col: 25, offset: 9236},
						expr: &seqExpr{
							pos: position{line: 325, col: 27, offset: 9238},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 325, col: 27, offset: 9238},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 325, col: 31, offset: 9242},
									expr: &litMatcher{
										pos:        position{line: 325, col: 32, offset: 9243},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 325, col: 37, offset: 9248},
						offset: 96,
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 327, col: 1, offset: 9270},
			expr: &actionExpr{
				pos: position{line: 327, col: 18, offset: 9287},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 327, col: 18, offset: 9287},
					exprs: []any{
						&notExpr{
							pos: position{line: 327, col: 18, offset: 9287},
							expr: &ruleRefExpr{
								pos:    position{line: 327, col: 19, offset: 9288},
								offset: 342,
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 32, offset: 9301},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 37, offset: 9306},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 327, col: 44, offset: 9313},
								offset: 60,
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 65, offset: 9334},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 331, col: 1, offset: 9371},
			expr: &actionExpr{
				pos: position{line: 331, col: 23, offset: 9393},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 331, col: 23, offset: 9393},
					exprs: []any{
						&notExpr{
							pos: position{line: 331, col: 23, offset: 9393},
							expr: &ruleRefExpr{
								pos:    position{line: 331, col: 24, offset: 9394},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 26, offset: 9396},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 331, col: 32, offset: 9402},
								expr: &actionExpr{
									pos: position{line: 331, col: 33, offset: 9403},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 331, col: 33, offset: 9403},
										exprs: []any{
											&notExpr{
												pos: position{line: 331, col: 33, offset: 9403},
												expr: &ruleRefExpr{
													pos:    position{line: 331, col: 34, offset: 9404},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 331, col: 36, offset: 9406},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 331, col: 42, offset: 9412},
													expr: &ruleRefExpr{
														pos:    position{line: 331, col: 43, offset: 9413},
														offset: 61,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 335, col: 1, offset: 9573},
			expr: &seqExpr{
				pos: position{line: 335, col: 25, offset: 9597},
				exprs: []any{
					&notExpr{
						pos: position{line: 335, col: 25, offset: 9597},
						expr: &litMatcher{
							pos:        position{line: 335, col: 27, offset: 9599},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 335, col: 33, offset: 9605},
						offset: 96,
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 338, col: 1, offset: 9628},
			expr: &choiceExpr{
				pos: position{line: 338, col: 15, offset: 9642},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 338, col: 15, offset: 9642},
						offset: 63,
					},
					&ruleRefExpr{
						pos:    position{line: 338, col: 34, offset: 9661},
						offset: 66,
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 340, col: 1, offset: 9680},
			expr: &actionExpr{
				pos: position{line: 340, col: 20, offset: 9699},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 340, col: 20, offset: 9699},
					exprs: []any{
						&notExpr{
							pos: position{line: 340, col: 20, offset: 9699},
							expr: &ruleRefExpr{
								pos:    position{line: 340, col: 21, offset: 9700},
								offset: 341,
							},
						},
						&litMatcher{
							pos:        position{line: 340, col: 28, offset: 9707},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 340, col: 32, offset: 9711},
							expr: &notExpr{
								pos: position{line: 340, col: 34, offset: 9713},
								expr: &litMatcher{
									pos:        position{line: 340, col: 35, offset: 9714},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 340, col: 40, offset: 9719},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 340, col: 47, offset: 9726},
								offset: 64,
							},
						},
						&litMatcher{
							pos:        position{line: 340, col: 70, offset: 9749},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 340, col: 74, offset: 9753},
							expr: &litMatcher{
								pos:        position{line: 340, col: 75, offset: 9754},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 340, col: 79, offset: 9758},
							expr: &notExpr{
								pos: position{line: 340, col: 81, offset: 9760},
								expr: &ruleRefExpr{
									pos:    position{line: 340, col: 82, offset: 9761},
									offset: 324,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 344, col: 1, offset: 9806},
			expr: &actionExpr{
				pos: position{line: 344, col: 25, offset: 9830},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 344, col: 25, offset: 9830},
					exprs: []any{
						&notExpr{
							pos: position{line: 344, col: 25, offset: 9830},
							expr: &ruleRefExpr{
								pos:    position{line: 344, col: 26, offset: 9831},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 9833},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 344, col: 34, offset: 9839},
								expr: &actionExpr{
									pos: position{line: 344, col: 35, offset: 9840},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 344, col: 35, offset: 9840},
										exprs: []any{
											&notExpr{
												pos: position{line: 344, col: 35, offset: 9840},
												expr: &ruleRefExpr{
													pos:    position{line: 344, col: 36, offset: 9841},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 344, col: 38, offset: 9843},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 344, col: 44, offset: 9849},
													expr: &ruleRefExpr{
														pos:    position{line: 344, col: 45, offset: 9850},
														offset: 65,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 348, col: 1, offset: 9964},
			expr: &seqExpr{
				pos: position{line: 348, col: 27, offset: 9990},
				exprs: []any{
					&notExpr{
						pos: position{line: 348, col: 27, offset: 9990},
						expr: &seqExpr{
							pos: position{line: 348, col: 29, offset: 9992},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 348, col: 29, offset: 9992},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 348, col: 33, offset: 9996},
									expr: &litMatcher{
										pos:        position{line: 348, col: 34, offset: 9997},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 348, col: 39, offset: 10002},
						offset: 96,
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 350, col: 1, offset: 10024},
			expr: &actionExpr{
				pos: position{line: 350, col: 20, offset: 10043},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 350, col: 20, offset: 10043},
					exprs: []any{
						&notExpr{
							pos: position{line: 350, col: 20, offset: 10043},
							expr: &ruleRefExpr{
								pos:    position{line: 350, col: 21, offset: 10044},
								offset: 342,
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 34, offset: 10057},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 39, offset: 10062},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 350, col: 46, offset: 10069},
								offset: 67,
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 69, offset: 10092},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 354, col: 1, offset: 10129},
			expr: &actionExpr{
				pos: position{line: 354, col: 25, offset: 10153},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 354, col: 25, offset: 10153},
					exprs: []any{
						&notExpr{
							pos: position{line: 354, col: 25, offset: 10153},
							expr: &ruleRefExpr{
								pos:    position{line: 354, col: 26, offset: 10154},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 28, offset: 10156},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 354, col: 34, offset: 10162},
								expr: &actionExpr{
									pos: position{line: 354, col: 35, offset: 10163},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 354, col: 35, offset: 10163},
										exprs: []any{
											&notExpr{
												pos: position{line: 354, col: 35, offset: 10163},
												expr: &ruleRefExpr{
													pos:    position{line: 354, col: 36, offset: 10164},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 354, col: 38, offset: 10166},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 354, col: 44, offset: 10172},
													expr: &ruleRefExpr{
														pos:    position{line: 354, col: 45, offset: 10173},
														offset: 68,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 358, col: 1, offset: 10293},
			expr: &seqExpr{
				pos: position{line: 358, col: 27, offset: 10319},
				exprs: []any{
					&notExpr{
						pos: position{line: 358, col: 27, offset: 10319},
						expr: &litMatcher{
							pos:        position{line: 358, col: 29, offset: 10321},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 358, col: 35, offset: 10327},
						offset: 96,
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 363, col: 1, offset: 10352},
			expr: &actionExpr{
				pos: position{line: 363, col: 17, offset: 10368},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 363, col: 17, offset: 10368},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 363, col: 17, offset: 10368},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 22, offset: 10373},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 363, col: 29, offset: 10380},
								offset: 70,
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 49, offset: 10400},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 367, col: 1, offset: 10435},
			expr: &actionExpr{
				pos: position{line: 367, col: 22, offset: 10456},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 367, col: 22, offset: 10456},
					exprs: []any{
						&notExpr{
							pos: position{line: 367, col: 22, offset: 10456},
							expr: &ruleRefExpr{
								pos:    position{line: 367, col: 23, offset: 10457},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 25, offset: 10459},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 31, offset: 10465},
								expr: &actionExpr{
									pos: position{line: 367, col: 32, offset: 10466},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 367, col: 32, offset: 10466},
										exprs: []any{
											&notExpr{
												pos: position{line: 367, col: 32, offset: 10466},
												expr: &ruleRefExpr{
													pos:    position{line: 367, col: 33, offset: 10467},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 367, col: 35, offset: 10469},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 367, col: 41, offset: 10475},
													expr: &ruleRefExpr{
														pos:    position{line: 367, col: 42, offset: 10476},
														offset: 71,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 371, col: 1, offset: 10633},
			expr: &seqExpr{
				pos: position{line: 371, col: 24, offset: 10656},
				exprs: []any{
					&notExpr{
						pos: position{line: 371, col: 24, offset: 10656},
						expr: &litMatcher{
							pos:        position{line: 371, col: 26, offset: 10658},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 371, col: 32, offset: 10664},
						offset: 96,
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 373, col: 1, offset: 10688},
			expr: &actionExpr{
				pos: position{line: 373, col: 20, offset: 10707},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 373, col: 21, offset: 10708},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 373, col: 21, offset: 10708},
							offset: 341,
						},
						&litMatcher{
							pos:        position{line: 373, col: 28, offset: 10715},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:    position{line: 373, col: 32, offset: 10719},
							offset: 70,
						},
						&litMatcher{
							pos:        position{line: 373, col: 51, offset: 10738},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 379, col: 1, offset: 10801},
			expr: &actionExpr{
				pos: position{line: 379, col: 19, offset: 10819},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 379, col: 19, offset: 10819},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 379, col: 19, offset: 10819},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 24, offset: 10824},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 379, col: 31, offset: 10831},
								offset: 74,
							},
						},
						&litMatcher{
							pos:        position{line: 379, col: 53, offset: 10853},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 383, col: 1, offset: 10888},
			expr: &actionExpr{
				pos: position{line: 383, col: 24, offset: 10911},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 383, col: 24, offset: 10911},
					exprs: []any{
						&notExpr{
							pos: position{line: 383, col: 24, offset: 10911},
							expr: &ruleRefExpr{
								pos:    position{line: 383, col: 25, offset: 10912},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 383, col: 27, offset: 10914},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 383, col: 33, offset: 10920},
								expr: &actionExpr{
									pos: position{line: 383, col: 34, offset: 10921},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 383, col: 34, offset: 10921},
										exprs: []any{
											&notExpr{
												pos: position{line: 383, col: 34, offset: 10921},
												expr: &ruleRefExpr{
													pos:    position{line: 383, col: 35, offset: 10922},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 383, col: 37, offset: 10924},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 383, col: 43, offset: 10930},
													expr: &ruleRefExpr{
														pos:    position{line: 383, col: 44, offset: 10931},
														offset: 75,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 387, col: 1, offset: 11094},
			expr: &seqExpr{
				pos: position{line: 387, col: 26, offset: 11119},
				exprs: []any{
					&notExpr{
						pos: position{line: 387, col: 26, offset: 11119},
						expr: &litMatcher{
							pos:        position{line: 387, col: 28, offset: 11121},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 387, col: 34, offset: 11127},
						offset: 96,
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 389, col: 1, offset: 11151},
			expr: &actionExpr{
				pos: position{line: 389, col: 22, offset: 11172},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 389, col: 23, offset: 11173},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 389, col: 23, offset: 11173},
							offset: 341,
						},
						&litMatcher{
							pos:        position{line: 389, col: 30, offset: 11180},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 389, col: 34, offset: 11184},
							offset: 74,
						},
						&litMatcher{
							pos:        position{line: 389, col: 55, offset: 11205},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 394, col: 1, offset: 11267},
			expr: &choiceExpr{
				pos: position{line: 394, col: 18, offset: 11284},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 394, col: 18, offset: 11284},
						offset: 78,
					},
					&ruleRefExpr{
						pos:    position{line: 394, col: 40, offset: 11306},
						offset: 81,
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 396, col: 1, offset: 11328},
			expr: &actionExpr{
				pos: position{line: 396, col: 22, offset: 11349},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 396, col: 22, offset: 11349},
					exprs: []any{
						&notExpr{
							pos: position{line: 396, col: 22, offset: 11349},
							expr: &ruleRefExpr{
								pos:    position{line: 396, col: 23, offset: 11350},
								offset: 341,
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 30, offset: 11357},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 396, col: 34, offset: 11361},
							expr: &notExpr{
								pos: position{line: 396, col: 36, offset: 11363},
								expr: &litMatcher{
									pos:        position{line: 396, col: 37, offset: 11364},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 42, offset: 11369},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 396, col: 49, offset: 11376},
								offset: 79,
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 75, offset: 11402},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 396, col: 79, offset: 11406},
							expr: &litMatcher{
								pos:        position{line: 396, col: 80, offset: 11407},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 396, col: 84, offset: 11411},
							expr: &notExpr{
								pos: position{line: 396, col: 86, offset: 11413},
								expr: &ruleRefExpr{
									pos:    position{line: 396, col: 87, offset: 11414},
									offset: 324,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 400, col: 1, offset: 11459},
			expr: &actionExpr{
				pos: position{line: 400, col: 28, offset: 11486},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 400, col: 28, offset: 11486},
					exprs: []any{
						&notExpr{
							pos: position{line: 400, col: 28, offset: 11486},
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 29, offset: 11487},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 31, offset: 11489},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 37, offset: 11495},
								expr: &actionExpr{
									pos: position{line: 400, col: 38, offset: 11496},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 400, col: 38, offset: 11496},
										exprs: []any{
											&notExpr{
												pos: position{line: 400, col: 38, offset: 11496},
												expr: &ruleRefExpr{
													pos:    position{line: 400, col: 39, offset: 11497},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 400, col: 41, offset: 11499},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 400, col: 47, offset: 11505},
													expr: &ruleRefExpr{
														pos:    position{line: 400, col: 48, offset: 11506},
														offset: 80,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 404, col: 1, offset: 11626},
			expr: &seqExpr{
				pos: position{line: 404, col: 30, offset: 11655},
				exprs: []any{
					&notExpr{
						pos: position{line: 404, col: 30, offset: 11655},
						expr: &seqExpr{
							pos: position{line: 404, col: 32, offset: 11657},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 404, col: 32, offset: 11657},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 404, col: 36, offset: 11661},
									expr: &litMatcher{
										pos:        position{line: 404, col: 37, offset: 11662},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 404, col: 42, offset: 11667},
						offset: 96,
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 406, col: 1, offset: 11689},
			expr: &actionExpr{
				pos: position{line: 406, col: 22, offset: 11710},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 406, col: 22, offset: 11710},
					exprs: []any{
						&notExpr{
							pos: position{line: 406, col: 22, offset: 11710},
							expr: &ruleRefExpr{
								pos:    position{line: 406, col: 23, offset: 11711},
								offset: 342,
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 36, offset: 11724},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 41, offset: 11729},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 406, col: 48, offset: 11736},
								offset: 82,
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 74, offset: 11762},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 410, col: 1, offset: 11799},
			expr: &actionExpr{
				pos: position{line: 410, col: 28, offset: 11826},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 410, col: 28, offset: 11826},
					exprs: []any{
						&notExpr{
							pos: position{line: 410, col: 28, offset: 11826},
							expr: &ruleRefExpr{
								pos:    position{line: 410, col: 29, offset: 11827},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 410, col: 31, offset: 11829},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 410, col: 37, offset: 11835},
								expr: &actionExpr{
									pos: position{line: 410, col: 38, offset: 11836},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 410, col: 38, offset: 11836},
										exprs: []any{
											&notExpr{
												pos: position{line: 410, col: 38, offset: 11836},
												expr: &ruleRefExpr{
													pos:    position{line: 410, col: 39, offset: 11837},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 410, col: 41, offset: 11839},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 410, col: 47, offset: 11845},
													expr: &ruleRefExpr{
														pos:    position{line: 410, col: 48, offset: 11846},
														offset: 83,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 414, col: 1, offset: 11972},
			expr: &seqExpr{
				pos: position{line: 414, col: 30, offset: 12001},
				exprs: []any{
					&notExpr{
						pos: position{line: 414, col: 30, offset: 12001},
						expr: &litMatcher{
							pos:        position{line: 414, col: 32, offset: 12003},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 414, col: 38, offset: 12009},
						offset: 96,
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 417, col: 1, offset: 12032},
			expr: &actionExpr{
				pos: position{line: 417, col: 10, offset: 12041},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 417, col: 10, offset: 12041},
					exprs: []any{
						&notExpr{
							pos: position{line: 417, col: 10, offset: 12041},
							expr: &litMatcher{
								pos:        position{line: 417, col: 11, offset: 12042},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 16, offset: 12047},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 417, col: 21, offset: 12052},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 417, col: 25, offset: 12056},
								offset: 244,
							},
						},
						&labeledExpr{
							pos:   position{line: 417, col: 43, offset: 12074},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 417, col: 49, offset: 12080},
								expr: &actionExpr{
									pos: position{line: 417, col: 50, offset: 12081},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 417, col: 50, offset: 12081},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 417, col: 50, offset: 12081},
												offset: 335,
											},
											&litMatcher{
												pos:        position{line: 417, col: 60, offset: 12091},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 417, col: 64, offset: 12095},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 417, col: 71, offset: 12102},
													offset: 86,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 107, offset: 12138},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 425, col: 1, offset: 12315},
			expr: &actionExpr{
				pos: position{line: 425, col: 19, offset: 12333},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 425, col: 19, offset: 12333},
					exprs: []any{
						&notExpr{
							pos: position{line: 425, col: 19, offset: 12333},
							expr: &litMatcher{
								pos:        position{line: 425, col: 20, offset: 12334},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 425, col: 25, offset: 12339},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 30, offset: 12344},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 425, col: 34, offset: 12348},
								offset: 244,
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 52, offset: 12366},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 58, offset: 12372},
								expr: &actionExpr{
									pos: position{line: 425, col: 59, offset: 12373},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 425, col: 59, offset: 12373},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 425, col: 59, offset: 12373},
												offset: 335,
											},
											&litMatcher{
												pos:        position{line: 425, col: 69, offset: 12383},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 425, col: 73, offset: 12387},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 425, col: 80, offset: 12394},
													offset: 86,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 425, col: 116, offset: 12430},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 433, col: 1, offset: 12630},
			expr: &oneOrMoreExpr{
				pos: position{line: 433, col: 15, offset: 12644},
				expr: &seqExpr{
					pos: position{line: 433, col: 17, offset: 12646},
					exprs: []any{
						&notExpr{
							pos: position{line: 433, col: 17, offset: 12646},
							expr: &litMatcher{
								pos:        position{line: 433, col: 18, offset: 12647},
								val:        "]]",
								ignoreCase: false,
								want:       "\"]]\"",
							},
						},
						&choiceExpr{
							pos: position{line: 434, col: 6, offset: 12657},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 434, col: 6, offset: 12657},
									expr: &charClassMatcher{
										pos:        position{line: 434, col: 6, offset: 12657},
										val:        "[^\\r\\n{\\]]",
										chars:      []rune{'\r', '\n', '{', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 435, col: 7, offset: 12676},
									offset: 53,
								},
								&litMatcher{
									pos:        position{line: 436, col: 7, offset: 12702},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 442, col: 1, offset: 12715},
			expr: &choiceExpr{
				pos: position{line: 442, col: 14, offset: 12728},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 442, col: 14, offset: 12728},
						run: (*parser).callonAdmonition2,
						expr: &seqExpr{
							pos: position{line: 442, col: 14, offset: 12728},
							exprs: []any{
								&ruleRefExpr{
									pos:    position{line: 442, col: 14, offset: 12728},
									offset: 328,
								},
								&litMatcher{
									pos:        position{line: 443, col: 5, offset: 12749},
									val:        "NOTE: ",
									ignoreCase: false,
									want:       "\"NOTE: \"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 444, col: 7, offset: 12832},
						run: (*parser).callonAdmonition6,
						expr: &litMatcher{
							pos:        position{line: 444, col: 7, offset: 12832},
							val:        "TIP: ",
							ignoreCase: false,
							want:       "\"TIP: \"",
						},
					},
					&actionExpr{
						pos: position{line: 445, col: 7, offset: 12913},
						run: (*parser).callonAdmonition8,
						expr: &litMatcher{
							pos:        position{line: 445, col: 7, offset: 12913},
							val:        "IMPORTANT: ",
							ignoreCase: false,
							want:       "\"IMPORTANT: \"",
						},
					},
					&actionExpr{
						pos: position{line: 446, col: 7, offset: 13006},
						run: (*parser).callonAdmonition10,
						expr: &litMatcher{
							pos:        position{line: 446, col: 7, offset: 13006},
							val:        "CAUTON: ",
							ignoreCase: false,
							want:       "\"CAUTON: \"",
						},
					},
					&actionExpr{
						pos: position{line: 447, col: 7, offset: 13094},
						run: (*parser).callonAdmonition12,
						expr: &litMatcher{
							pos:        position{line: 447, col: 7, offset: 13094},
							val:        "WARNING: ",
							ignoreCase: false,
							want:       "\"WARNING: \"",
						},
					},
				},
			},
		},
		{
			name: "InlineBlock",
			pos:  position{line: 450, col: 1, offset: 13182},
			expr: &actionExpr{
				pos: position{line: 450, col: 15, offset: 13196},
				run: (*parser).callonInlineBlock1,
				expr: &seqExpr{
					pos: position{line: 450, col: 15, offset: 13196},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 450, col: 15, offset: 13196},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 450, col: 24, offset: 13205},
								offset: 89,
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 40, offset: 13221},
							label: "eol",
							expr: &ruleRefExpr{
								pos:    position{line: 450, col: 44, offset: 13225},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 458, col: 1, offset: 13388},
			expr: &actionExpr{
				pos: position{line: 458, col: 18, offset: 13405},
				run: (*parser).callonInlineElements1,
				expr: &labeledExpr{
					pos:   position{line: 458, col: 18, offset: 13405},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 458, col: 26, offset: 13413},
						expr: &ruleRefExpr{
							pos:    position{line: 458, col: 27, offset: 13414},
							offset: 90,
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 462, col: 1, offset: 13477},
			expr: &choiceExpr{
				pos: position{line: 463, col: 5, offset: 13499},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 463, col: 5, offset: 13499},
						offset: 87,
					},
					&ruleRefExpr{
						pos:    position{line: 464, col: 5, offset: 13516},
						offset: 284,
					},
					&ruleRefExpr{
						pos:    position{line: 465, col: 5, offset: 13540},
						offset: 95,
					},
					&ruleRefExpr{
						pos:    position{line: 466, col: 5, offset: 13560},
						offset: 101,
					},
					&ruleRefExpr{
						pos:    position{line: 467, col: 5, offset: 13572},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 468, col: 5, offset: 13591},
						offset: 108,
					},
					&ruleRefExpr{
						pos:    position{line: 469, col: 5, offset: 13602},
						offset: 84,
					},
					&ruleRefExpr{
						pos:    position{line: 470, col: 5, offset: 13616},
						offset: 239,
					},
					&ruleRefExpr{
						pos:    position{line: 471, col: 5, offset: 13638},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 472, col: 5, offset: 13663},
						offset: 312,
					},
					&ruleRefExpr{
						pos:    position{line: 473, col: 5, offset: 13679},
						offset: 91,
					},
					&ruleRefExpr{
						pos:    position{line: 474, col: 5, offset: 13701},
						offset: 337,
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 477, col: 1, offset: 13732},
			expr: &actionExpr{
				pos: position{line: 477, col: 19, offset: 13750},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 477, col: 19, offset: 13750},
					expr: &seqExpr{
						pos: position{line: 477, col: 20, offset: 13751},
						exprs: []any{
							&notExpr{
								pos: position{line: 477, col: 20, offset: 13751},
								expr: &ruleRefExpr{
									pos:    position{line: 477, col: 21, offset: 13752},
									offset: 162,
								},
							},
							&notExpr{
								pos: position{line: 477, col: 31, offset: 13762},
								expr: &ruleRefExpr{
									pos:    position{line: 477, col: 32, offset: 13763},
									offset: 109,
								},
							},
							&notExpr{
								pos: position{line: 477, col: 42, offset: 13773},
								expr: &ruleRefExpr{
									pos:    position{line: 477, col: 43, offset: 13774},
									offset: 100,
								},
							},
							&notExpr{
								pos: position{line: 477, col: 64, offset: 13795},
								expr: &ruleRefExpr{
									pos:    position{line: 477, col: 65, offset: 13796},
									offset: 246,
								},
							},
							&charClassMatcher{
								pos:        position{line: 477, col: 90, offset: 13821},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 482, col: 1, offset: 13895},
			expr: &actionExpr{
				pos: position{line: 482, col: 12, offset: 13906},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 482, col: 12, offset: 13906},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 482, col: 12, offset: 13906},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 24, offset: 13918},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 482, col: 27, offset: 13921},
								expr: &ruleRefExpr{
									pos:    position{line: 482, col: 28, offset: 13922},
									offset: 93,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 482, col: 41, offset: 13935},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 45, offset: 13939},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 482, col: 51, offset: 13945},
								expr: &ruleRefExpr{
									pos:    position{line: 482, col: 52, offset: 13946},
									offset: 94,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 482, col: 68, offset: 13962},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 486, col: 1, offset: 14036},
			expr: &actionExpr{
				pos: position{line: 486, col: 14, offset: 14049},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 486, col: 14, offset: 14049},
					expr: &ruleRefExpr{
						pos:    position{line: 486, col: 14, offset: 14049},
						offset: 324,
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 490, col: 1, offset: 14099},
			expr: &seqExpr{
				pos: position{line: 490, col: 17, offset: 14115},
				exprs: []any{
					&notExpr{
						pos: position{line: 490, col: 17, offset: 14115},
						expr: &litMatcher{
							pos:        position{line: 490, col: 18, offset: 14116},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&choiceExpr{
						pos: position{line: 490, col: 24, offset: 14122},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 490, col: 24, offset: 14122},
								offset: 332,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 37, offset: 14135},
								offset: 339,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 42, offset: 14140},
								offset: 310,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 55, offset: 14153},
								offset: 212,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 63, offset: 14161},
								offset: 311,
							},
							&ruleRefExpr{
								pos: position{line: 490, col: 77, offset: 14175},
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 85, offset: 14183},
								offset: 312,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 97, offset: 14195},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 118, offset: 14216},
								offset: 308,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 137, offset: 14235},
								offset: 316,
							},
							&ruleRefExpr{
								pos:    position{line: 490, col: 149, offset: 14247},
								offset: 337,
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 494, col: 1, offset: 14273},
			expr: &actionExpr{
				pos: position{line: 494, col: 17, offset: 14289},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 494, col: 17, offset: 14289},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 494, col: 17, offset: 14289},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 494, col: 28, offset: 14300},
								expr: &ruleRefExpr{
									pos:    position{line: 494, col: 29, offset: 14301},
									offset: 31,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 52, offset: 14324},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 495, col: 5, offset: 14335},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 495, col: 5, offset: 14335},
										offset: 55,
									},
									&ruleRefExpr{
										pos:    position{line: 496, col: 7, offset: 14351},
										offset: 62,
									},
									&ruleRefExpr{
										pos:    position{line: 497, col: 7, offset: 14369},
										offset: 77,
									},
									&ruleRefExpr{
										pos:    position{line: 498, col: 7, offset: 14390},
										offset: 181,
									},
									&ruleRefExpr{
										pos:    position{line: 499, col: 7, offset: 14407},
										offset: 73,
									},
									&ruleRefExpr{
										pos:    position{line: 500, col: 7, offset: 14429},
										offset: 69,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 505, col: 1, offset: 14578},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 14607},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 506, col: 5, offset: 14607},
						offset: 332,
					},
					&ruleRefExpr{
						pos:    position{line: 507, col: 5, offset: 14625},
						offset: 339,
					},
					&ruleRefExpr{
						pos:    position{line: 508, col: 5, offset: 14635},
						offset: 310,
					},
					&ruleRefExpr{
						pos:    position{line: 509, col: 5, offset: 14653},
						offset: 311,
					},
					&ruleRefExpr{
						pos:    position{line: 510, col: 5, offset: 14672},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 511, col: 5, offset: 14698},
						offset: 95,
					},
					&ruleRefExpr{
						pos:    position{line: 512, col: 5, offset: 14719},
						offset: 101,
					},
					&ruleRefExpr{
						pos:    position{line: 513, col: 5, offset: 14731},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 514, col: 5, offset: 14750},
						offset: 108,
					},
					&ruleRefExpr{
						pos:    position{line: 515, col: 5, offset: 14761},
						offset: 84,
					},
					&ruleRefExpr{
						pos:    position{line: 516, col: 5, offset: 14775},
						offset: 239,
					},
					&ruleRefExpr{
						pos:    position{line: 517, col: 5, offset: 14797},
						offset: 308,
					},
					&ruleRefExpr{
						pos:    position{line: 518, col: 5, offset: 14821},
						offset: 337,
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 521, col: 1, offset: 14845},
			expr: &actionExpr{
				pos: position{line: 521, col: 20, offset: 14864},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 521, col: 20, offset: 14864},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 521, col: 20, offset: 14864},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 24, offset: 14868},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 521, col: 36, offset: 14880},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 521, col: 56, offset: 14900},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 526, col: 1, offset: 14941},
			expr: &actionExpr{
				pos: position{line: 526, col: 14, offset: 14954},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 526, col: 14, offset: 14954},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 526, col: 14, offset: 14954},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 24, offset: 14964},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 526, col: 30, offset: 14970},
								offset: 165,
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 36, offset: 14976},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 526, col: 48, offset: 14988},
								offset: 51,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 526, col: 66, offset: 15006},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 530, col: 1, offset: 15143},
			expr: &actionExpr{
				pos: position{line: 530, col: 15, offset: 15157},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 530, col: 15, offset: 15157},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 530, col: 15, offset: 15157},
							offset: 100,
						},
						&notExpr{
							pos: position{line: 530, col: 36, offset: 15178},
							expr: &litMatcher{
								pos:        position{line: 530, col: 37, offset: 15179},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 41, offset: 15183},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 530, col: 47, offset: 15189},
								offset: 165,
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 53, offset: 15195},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 530, col: 65, offset: 15207},
								offset: 51,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 534, col: 1, offset: 15354},
			expr: &litMatcher{
				pos:        position{line: 534, col: 24, offset: 15377},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 538, col: 1, offset: 15389},
			expr: &actionExpr{
				pos: position{line: 538, col: 8, offset: 15396},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 538, col: 8, offset: 15396},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 538, col: 8, offset: 15396},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 16, offset: 15404},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 538, col: 22, offset: 15410},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 538, col: 22, offset: 15410},
									expr: &choiceExpr{
										pos: position{line: 538, col: 23, offset: 15411},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 538, col: 23, offset: 15411},
												offset: 324,
											},
											&litMatcher{
												pos:        position{line: 538, col: 38, offset: 15426},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 538, col: 44, offset: 15432},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 81, offset: 15469},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 538, col: 93, offset: 15481},
								offset: 51,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 543, col: 1, offset: 15603},
			expr: &actionExpr{
				pos: position{line: 543, col: 15, offset: 15617},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 543, col: 15, offset: 15617},
					exprs: []any{
						&notExpr{
							pos: position{line: 543, col: 15, offset: 15617},
							expr: &litMatcher{
								pos:        position{line: 543, col: 16, offset: 15618},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 543, col: 21, offset: 15623},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 33, offset: 15635},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 543, col: 39, offset: 15641},
								offset: 103,
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 56, offset: 15658},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 543, col: 68, offset: 15670},
								offset: 51,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 543, col: 86, offset: 15688},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 543, col: 96, offset: 15698},
							expr: &ruleRefExpr{
								pos:    position{line: 543, col: 97, offset: 15699},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 548, col: 1, offset: 15856},
			expr: &actionExpr{
				pos: position{line: 548, col: 19, offset: 15874},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 548, col: 19, offset: 15874},
					exprs: []any{
						&notExpr{
							pos: position{line: 548, col: 19, offset: 15874},
							expr: &ruleRefExpr{
								pos:    position{line: 548, col: 20, offset: 15875},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 22, offset: 15877},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 548, col: 27, offset: 15882},
								offset: 165,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParse",
			pos:  position{line: 553, col: 1, offset: 15914},
			expr: &actionExpr{
				pos: position{line: 553, col: 16, offset: 15929},
				run: (*parser).callonIncludeParse1,
				expr: &seqExpr{
					pos: position{line: 553, col: 16, offset: 15929},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 553, col: 16, offset: 15929},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 553, col: 24, offset: 15937},
								expr: &ruleRefExpr{
									pos:    position{line: 553, col: 25, offset: 15938},
									offset: 105,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 553, col: 47, offset: 15960},
							offset: 325,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseElement",
			pos:  position{line: 557, col: 1, offset: 16017},
			expr: &actionExpr{
				pos: position{line: 557, col: 23, offset: 16039},
				run: (*parser).callonIncludeParseElement1,
				expr: &seqExpr{
					pos: position{line: 557, col: 23, offset: 16039},
					exprs: []any{
						&notExpr{
							pos: position{line: 557, col: 23, offset: 16039},
							expr: &ruleRefExpr{
								pos:    position{line: 557, col: 24, offset: 16040},
								offset: 325,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 557, col: 34, offset: 16050},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 557, col: 50, offset: 16066},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 557, col: 59, offset: 16075},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 557, col: 59, offset: 16075},
										offset: 102,
									},
									&ruleRefExpr{
										pos:    position{line: 557, col: 73, offset: 16089},
										offset: 106,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 557, col: 91, offset: 16107},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLine",
			pos:  position{line: 561, col: 1, offset: 16146},
			expr: &actionExpr{
				pos: position{line: 561, col: 20, offset: 16165},
				run: (*parser).callonIncludeParseLine1,
				expr: &seqExpr{
					pos: position{line: 561, col: 20, offset: 16165},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 561, col: 20, offset: 16165},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 561, col: 28, offset: 16173},
								expr: &charClassMatcher{
									pos:        position{line: 561, col: 28, offset: 16173},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&andExpr{
							pos: position{line: 561, col: 37, offset: 16182},
							expr: &ruleRefExpr{
								pos:    position{line: 561, col: 38, offset: 16183},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLineElement",
			pos:  position{line: 565, col: 1, offset: 16270},
			expr: &oneOrMoreExpr{
				pos: position{line: 565, col: 28, offset: 16297},
				expr: &charClassMatcher{
					pos:        position{line: 565, col: 28, offset: 16297},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 570, col: 1, offset: 16312},
			expr: &actionExpr{
				pos: position{line: 570, col: 8, offset: 16319},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 570, col: 8, offset: 16319},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 570, col: 14, offset: 16325},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 570, col: 14, offset: 16325},
								offset: 110,
							},
							&ruleRefExpr{
								pos:    position{line: 570, col: 25, offset: 16336},
								offset: 111,
							},
							&ruleRefExpr{
								pos:    position{line: 570, col: 40, offset: 16351},
								offset: 112,
							},
							&ruleRefExpr{
								pos:    position{line: 570, col: 55, offset: 16366},
								offset: 167,
							},
						},
					},
				},
			},
		},
		{
			name: "LinkMacro",
			pos:  position{line: 574, col: 1, offset: 16407},
			expr: &litMatcher{
				pos:        position{line: 574, col: 13, offset: 16419},
				val:        "link:",
				ignoreCase: false,
				want:       "\"link:\"",
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 576, col: 1, offset: 16428},
			expr: &actionExpr{
				pos: position{line: 576, col: 12, offset: 16439},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 576, col: 12, offset: 16439},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 576, col: 12, offset: 16439},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 16, offset: 16443},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 576, col: 21, offset: 16448},
								offset: 164,
							},
						},
						&litMatcher{
							pos:        position{line: 576, col: 30, offset: 16457},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 580, col: 1, offset: 16523},
			expr: &actionExpr{
				pos: position{line: 580, col: 16, offset: 16538},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 580, col: 16, offset: 16538},
					exprs: []any{
						&notExpr{
							pos: position{line: 580, col: 16, offset: 16538},
							expr: &litMatcher{
								pos:        position{line: 580, col: 17, offset: 16539},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 580, col: 22, offset: 16544},
							offset: 109,
						},
						&labeledExpr{
							pos:   position{line: 580, col: 32, offset: 16554},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 580, col: 36, offset: 16558},
								offset: 163,
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 40, offset: 16562},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 580, col: 52, offset: 16574},
								offset: 51,
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 585, col: 1, offset: 16715},
			expr: &actionExpr{
				pos: position{line: 585, col: 16, offset: 16730},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 585, col: 16, offset: 16730},
					exprs: []any{
						&notExpr{
							pos: position{line: 585, col: 16, offset: 16730},
							expr: &litMatcher{
								pos:        position{line: 585, col: 17, offset: 16731},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 22, offset: 16736},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 585, col: 27, offset: 16741},
								offset: 164,
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 36, offset: 16750},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 585, col: 47, offset: 16761},
								expr: &ruleRefExpr{
									pos:    position{line: 585, col: 48, offset: 16762},
									offset: 51,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 591, col: 1, offset: 16895},
			expr: &actionExpr{
				pos: position{line: 591, col: 9, offset: 16903},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 591, col: 9, offset: 16903},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 591, col: 9, offset: 16903},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 591, col: 20, offset: 16914},
								expr: &ruleRefExpr{
									pos:    position{line: 591, col: 21, offset: 16915},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 591, col: 46, offset: 16940},
							offset: 118,
						},
						&labeledExpr{
							pos:   position{line: 591, col: 57, offset: 16951},
							label: "cells",
							expr: &ruleRefExpr{
								pos:    position{line: 591, col: 64, offset: 16958},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 591, col: 79, offset: 16973},
							offset: 135,
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 599, col: 1, offset: 17130},
			expr: &zeroOrMoreExpr{
				pos: position{line: 599, col: 17, offset: 17146},
				expr: &ruleRefExpr{
					pos:    position{line: 599, col: 18, offset: 17147},
					offset: 115,
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 601, col: 1, offset: 17164},
			expr: &choiceExpr{
				pos: position{line: 602, col: 9, offset: 17189},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 602, col: 9, offset: 17189},
						offset: 119,
					},
					&ruleRefExpr{
						pos:    position{line: 603, col: 11, offset: 17215},
						offset: 121,
					},
					&ruleRefExpr{
						pos:    position{line: 604, col: 11, offset: 17237},
						offset: 131,
					},
					&ruleRefExpr{
						pos:    position{line: 605, col: 11, offset: 17264},
						offset: 136,
					},
				},
			},
		},
		{
			name: "IncludedTableElements",
			pos:  position{line: 608, col: 1, offset: 17285},
			expr: &actionExpr{
				pos: position{line: 608, col: 25, offset: 17309},
				run: (*parser).callonIncludedTableElements1,
				expr: &seqExpr{
					pos: position{line: 608, col: 25, offset: 17309},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 608, col: 25, offset: 17309},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 608, col: 33, offset: 17317},
								expr: &ruleRefExpr{
									pos:    position{line: 608, col: 34, offset: 17318},
									offset: 117,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 608, col: 57, offset: 17341},
							offset: 325,
						},
					},
				},
			},
		},
		{
			name: "IncludedTableElement",
			pos:  position{line: 613, col: 1, offset: 17460},
			expr: &choiceExpr{
				pos: position{line: 614, col: 9, offset: 17493},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 614, col: 9, offset: 17493},
						offset: 120,
					},
					&ruleRefExpr{
						pos:    position{line: 615, col: 11, offset: 17527},
						offset: 121,
					},
					&ruleRefExpr{
						pos:    position{line: 616, col: 11, offset: 17549},
						offset: 131,
					},
					&ruleRefExpr{
						pos:    position{line: 617, col: 11, offset: 17576},
						offset: 137,
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 620, col: 1, offset: 17605},
			expr: &actionExpr{
				pos: position{line: 620, col: 14, offset: 17618},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 620, col: 14, offset: 17618},
					exprs: []any{
						&notExpr{
							pos: position{line: 620, col: 14, offset: 17618},
							expr: &litMatcher{
								pos:        position{line: 620, col: 15, offset: 17619},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 620, col: 20, offset: 17624},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 620, col: 27, offset: 17631},
							expr: &litMatcher{
								pos:        position{line: 620, col: 27, offset: 17631},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 620, col: 32, offset: 17636},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 620, col: 42, offset: 17646},
							expr: &ruleRefExpr{
								pos:    position{line: 620, col: 43, offset: 17647},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 624, col: 1, offset: 17718},
			expr: &actionExpr{
				pos: position{line: 624, col: 18, offset: 17735},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 624, col: 18, offset: 17735},
					exprs: []any{
						&notExpr{
							pos: position{line: 624, col: 18, offset: 17735},
							expr: &ruleRefExpr{
								pos:    position{line: 624, col: 19, offset: 17736},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 28, offset: 17745},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 36, offset: 17753},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 624, col: 46, offset: 17763},
							expr: &ruleRefExpr{
								pos:    position{line: 624, col: 48, offset: 17765},
								offset: 318,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableEmptyLine",
			pos:  position{line: 628, col: 1, offset: 17846},
			expr: &actionExpr{
				pos: position{line: 628, col: 26, offset: 17871},
				run: (*parser).callonIncludedTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 628, col: 26, offset: 17871},
					exprs: []any{
						&notExpr{
							pos: position{line: 628, col: 26, offset: 17871},
							expr: &ruleRefExpr{
								pos:    position{line: 628, col: 27, offset: 17872},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 628, col: 36, offset: 17881},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 628, col: 44, offset: 17889},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 628, col: 54, offset: 17899},
							expr: &choiceExpr{
								pos: position{line: 628, col: 56, offset: 17901},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 628, col: 56, offset: 17901},
										offset: 318,
									},
									&ruleRefExpr{
										pos:    position{line: 628, col: 66, offset: 17911},
										offset: 325,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 632, col: 1, offset: 17994},
			expr: &choiceExpr{
				pos: position{line: 632, col: 16, offset: 18009},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 632, col: 16, offset: 18009},
						offset: 123,
					},
					&ruleRefExpr{
						pos:    position{line: 632, col: 35, offset: 18028},
						offset: 125,
					},
					&ruleRefExpr{
						pos:    position{line: 632, col: 55, offset: 18048},
						offset: 122,
					},
					&ruleRefExpr{
						pos:    position{line: 632, col: 68, offset: 18061},
						offset: 124,
					},
					&ruleRefExpr{
						pos:    position{line: 632, col: 82, offset: 18075},
						offset: 128,
					},
					&ruleRefExpr{
						pos:    position{line: 632, col: 98, offset: 18091},
						offset: 129,
					},
					&ruleRefExpr{
						pos:    position{line: 632, col: 113, offset: 18106},
						offset: 130,
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 634, col: 1, offset: 18132},
			expr: &actionExpr{
				pos: position{line: 634, col: 14, offset: 18145},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 634, col: 14, offset: 18145},
					exprs: []any{
						&notExpr{
							pos: position{line: 634, col: 14, offset: 18145},
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 15, offset: 18146},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 634, col: 24, offset: 18155},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 634, col: 32, offset: 18163},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 634, col: 42, offset: 18173},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 48, offset: 18179},
								offset: 292,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfDef",
			pos:  position{line: 638, col: 1, offset: 18242},
			expr: &actionExpr{
				pos: position{line: 638, col: 20, offset: 18261},
				run: (*parser).callonTableInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 638, col: 20, offset: 18261},
					exprs: []any{
						&notExpr{
							pos: position{line: 638, col: 20, offset: 18261},
							expr: &ruleRefExpr{
								pos:    position{line: 638, col: 21, offset: 18262},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 638, col: 30, offset: 18271},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 638, col: 38, offset: 18279},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 638, col: 48, offset: 18289},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 638, col: 54, offset: 18295},
								offset: 292,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 638, col: 60, offset: 18301},
							offset: 318,
						},
						&notExpr{
							pos: position{line: 638, col: 68, offset: 18309},
							expr: &ruleRefExpr{
								pos:    position{line: 638, col: 69, offset: 18310},
								offset: 156,
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 95, offset: 18336},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 638, col: 104, offset: 18345},
								offset: 141,
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 122, offset: 18363},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 638, col: 128, offset: 18369},
								offset: 128,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 652, col: 1, offset: 18720},
			expr: &actionExpr{
				pos: position{line: 652, col: 15, offset: 18734},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 652, col: 15, offset: 18734},
					exprs: []any{
						&notExpr{
							pos: position{line: 652, col: 15, offset: 18734},
							expr: &ruleRefExpr{
								pos:    position{line: 652, col: 16, offset: 18735},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 652, col: 25, offset: 18744},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 652, col: 33, offset: 18752},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 652, col: 43, offset: 18762},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 652, col: 50, offset: 18769},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfNDef",
			pos:  position{line: 656, col: 1, offset: 18836},
			expr: &actionExpr{
				pos: position{line: 656, col: 21, offset: 18856},
				run: (*parser).callonTableInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 656, col: 21, offset: 18856},
					exprs: []any{
						&notExpr{
							pos: position{line: 656, col: 21, offset: 18856},
							expr: &ruleRefExpr{
								pos:    position{line: 656, col: 22, offset: 18857},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 656, col: 31, offset: 18866},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 656, col: 39, offset: 18874},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 656, col: 49, offset: 18884},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 656, col: 56, offset: 18891},
								offset: 294,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 656, col: 63, offset: 18898},
							offset: 318,
						},
						&notExpr{
							pos: position{line: 656, col: 71, offset: 18906},
							expr: &ruleRefExpr{
								pos:    position{line: 656, col: 72, offset: 18907},
								offset: 156,
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 98, offset: 18933},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 656, col: 107, offset: 18942},
								offset: 141,
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 125, offset: 18960},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 656, col: 131, offset: 18966},
								offset: 128,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfEval",
			pos:  position{line: 670, col: 1, offset: 19319},
			expr: &actionExpr{
				pos: position{line: 670, col: 15, offset: 19333},
				run: (*parser).callonTableIfEval1,
				expr: &seqExpr{
					pos: position{line: 670, col: 15, offset: 19333},
					exprs: []any{
						&notExpr{
							pos: position{line: 670, col: 15, offset: 19333},
							expr: &ruleRefExpr{
								pos:    position{line: 670, col: 16, offset: 19334},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 670, col: 25, offset: 19343},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 670, col: 33, offset: 19351},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 670, col: 43, offset: 19361},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 670, col: 50, offset: 19368},
								offset: 303,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfEval",
			pos:  position{line: 674, col: 1, offset: 19435},
			expr: &actionExpr{
				pos: position{line: 674, col: 21, offset: 19455},
				run: (*parser).callonTableInlineIfEval1,
				expr: &seqExpr{
					pos: position{line: 674, col: 21, offset: 19455},
					exprs: []any{
						&notExpr{
							pos: position{line: 674, col: 21, offset: 19455},
							expr: &ruleRefExpr{
								pos:    position{line: 674, col: 22, offset: 19456},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 674, col: 31, offset: 19465},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 674, col: 39, offset: 19473},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 674, col: 49, offset: 19483},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 674, col: 56, offset: 19490},
								offset: 303,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 674, col: 63, offset: 19497},
							offset: 318,
						},
						&notExpr{
							pos: position{line: 674, col: 71, offset: 19505},
							expr: &ruleRefExpr{
								pos:    position{line: 674, col: 72, offset: 19506},
								offset: 156,
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 98, offset: 19532},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 674, col: 107, offset: 19541},
								offset: 141,
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 125, offset: 19559},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 674, col: 131, offset: 19565},
								offset: 128,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 688, col: 1, offset: 19918},
			expr: &actionExpr{
				pos: position{line: 688, col: 17, offset: 19934},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 688, col: 17, offset: 19934},
					exprs: []any{
						&notExpr{
							pos: position{line: 688, col: 17, offset: 19934},
							expr: &ruleRefExpr{
								pos:    position{line: 688, col: 18, offset: 19935},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 688, col: 27, offset: 19944},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 688, col: 35, offset: 19952},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 688, col: 45, offset: 19962},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 688, col: 54, offset: 19971},
								offset: 298,
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 692, col: 1, offset: 20041},
			expr: &actionExpr{
				pos: position{line: 692, col: 16, offset: 20056},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 692, col: 16, offset: 20056},
					exprs: []any{
						&notExpr{
							pos: position{line: 692, col: 16, offset: 20056},
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 17, offset: 20057},
								offset: 135,
							},
						},
						&choiceExpr{
							pos: position{line: 692, col: 27, offset: 20067},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 692, col: 27, offset: 20067},
									offset: 318,
								},
								&ruleRefExpr{
									pos:    position{line: 692, col: 37, offset: 20077},
									offset: 327,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 54, offset: 20094},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 63, offset: 20103},
								offset: 270,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 696, col: 1, offset: 20194},
			expr: &actionExpr{
				pos: position{line: 696, col: 25, offset: 20218},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 696, col: 25, offset: 20218},
					exprs: []any{
						&notExpr{
							pos: position{line: 696, col: 25, offset: 20218},
							expr: &ruleRefExpr{
								pos:    position{line: 696, col: 26, offset: 20219},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 696, col: 35, offset: 20228},
							offset: 318,
						},
						&labeledExpr{
							pos:   position{line: 696, col: 43, offset: 20236},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 696, col: 52, offset: 20245},
								offset: 273,
							},
						},
					},
				},
			},
		},
		{
			name: "TableFileInclude",
			pos:  position{line: 700, col: 1, offset: 20334},
			expr: &actionExpr{
				pos: position{line: 700, col: 20, offset: 20353},
				run: (*parser).callonTableFileInclude1,
				expr: &seqExpr{
					pos: position{line: 700, col: 20, offset: 20353},
					exprs: []any{
						&notExpr{
							pos: position{line: 700, col: 20, offset: 20353},
							expr: &ruleRefExpr{
								pos:    position{line: 700, col: 21, offset: 20354},
								offset: 135,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 700, col: 30, offset: 20363},
							offset: 318,
						},
						&notExpr{
							pos: position{line: 700, col: 38, offset: 20371},
							expr: &litMatcher{
								pos:        position{line: 700, col: 39, offset: 20372},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 700, col: 44, offset: 20377},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 700, col: 56, offset: 20389},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 700, col: 62, offset: 20395},
								offset: 103,
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 79, offset: 20412},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 700, col: 91, offset: 20424},
								offset: 51,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 700, col: 109, offset: 20442},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 700, col: 119, offset: 20452},
							expr: &ruleRefExpr{
								pos:    position{line: 700, col: 120, offset: 20453},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 704, col: 1, offset: 20609},
			expr: &oneOrMoreExpr{
				pos: position{line: 704, col: 19, offset: 20627},
				expr: &ruleRefExpr{
					pos:    position{line: 704, col: 19, offset: 20627},
					offset: 119,
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 706, col: 1, offset: 20644},
			expr: &actionExpr{
				pos: position{line: 706, col: 26, offset: 20669},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 706, col: 26, offset: 20669},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 706, col: 26, offset: 20669},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 706, col: 34, offset: 20677},
								expr: &ruleRefExpr{
									pos:    position{line: 706, col: 35, offset: 20678},
									offset: 134,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 706, col: 67, offset: 20710},
							offset: 325,
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 710, col: 1, offset: 20788},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20826},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 711, col: 5, offset: 20826},
						offset: 95,
					},
					&ruleRefExpr{
						pos:    position{line: 712, col: 5, offset: 20846},
						offset: 101,
					},
					&ruleRefExpr{
						pos:    position{line: 713, col: 5, offset: 20858},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 714, col: 5, offset: 20877},
						offset: 108,
					},
					&ruleRefExpr{
						pos:    position{line: 715, col: 5, offset: 20888},
						offset: 84,
					},
					&ruleRefExpr{
						pos:    position{line: 716, col: 5, offset: 20903},
						offset: 239,
					},
					&ruleRefExpr{
						pos:    position{line: 717, col: 5, offset: 20924},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 718, col: 5, offset: 20949},
						offset: 312,
					},
					&ruleRefExpr{
						pos:    position{line: 719, col: 5, offset: 20965},
						offset: 153,
					},
					&ruleRefExpr{
						pos:    position{line: 720, col: 5, offset: 20996},
						offset: 337,
					},
					&ruleRefExpr{
						pos:    position{line: 721, col: 5, offset: 21023},
						offset: 318,
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 724, col: 1, offset: 21036},
			expr: &seqExpr{
				pos: position{line: 724, col: 12, offset: 21047},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 724, col: 12, offset: 21047},
						offset: 318,
					},
					&notExpr{
						pos: position{line: 724, col: 20, offset: 21055},
						expr: &litMatcher{
							pos:        position{line: 724, col: 21, offset: 21056},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&litMatcher{
						pos:        position{line: 724, col: 26, offset: 21061},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 724, col: 33, offset: 21068},
						expr: &litMatcher{
							pos:        position{line: 724, col: 33, offset: 21068},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 724, col: 38, offset: 21073},
						offset: 335,
					},
					&andExpr{
						pos: position{line: 724, col: 48, offset: 21083},
						expr: &ruleRefExpr{
							pos:    position{line: 724, col: 49, offset: 21084},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 726, col: 1, offset: 21097},
			expr: &actionExpr{
				pos: position{line: 726, col: 12, offset: 21108},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 726, col: 12, offset: 21108},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 726, col: 12, offset: 21108},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 726, col: 21, offset: 21117},
								offset: 139,
							},
						},
						&labeledExpr{
							pos:   position{line: 726, col: 46, offset: 21142},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 726, col: 57, offset: 21153},
								expr: &ruleRefExpr{
									pos:    position{line: 726, col: 58, offset: 21154},
									offset: 140,
								},
							},
						},
						&andExpr{
							pos: position{line: 726, col: 86, offset: 21182},
							expr: &choiceExpr{
								pos: position{line: 726, col: 88, offset: 21184},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 726, col: 88, offset: 21184},
										offset: 135,
									},
									&ruleRefExpr{
										pos:    position{line: 726, col: 99, offset: 21195},
										offset: 138,
									},
									&ruleRefExpr{
										pos:    position{line: 726, col: 121, offset: 21217},
										offset: 318,
									},
									&ruleRefExpr{
										pos:    position{line: 726, col: 131, offset: 21227},
										offset: 325,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableRow",
			pos:  position{line: 735, col: 1, offset: 21468},
			expr: &actionExpr{
				pos: position{line: 735, col: 20, offset: 21487},
				run: (*parser).callonIncludedTableRow1,
				expr: &seqExpr{
					pos: position{line: 735, col: 20, offset: 21487},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 735, col: 20, offset: 21487},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 735, col: 29, offset: 21496},
								offset: 139,
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 54, offset: 21521},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 735, col: 65, offset: 21532},
								expr: &ruleRefExpr{
									pos:    position{line: 735, col: 66, offset: 21533},
									offset: 140,
								},
							},
						},
						&andExpr{
							pos: position{line: 735, col: 94, offset: 21561},
							expr: &choiceExpr{
								pos: position{line: 735, col: 96, offset: 21563},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 735, col: 96, offset: 21563},
										offset: 325,
									},
									&ruleRefExpr{
										pos:    position{line: 735, col: 108, offset: 21575},
										offset: 138,
									},
									&ruleRefExpr{
										pos:    position{line: 735, col: 130, offset: 21597},
										offset: 318,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 744, col: 1, offset: 21837},
			expr: &choiceExpr{
				pos: position{line: 744, col: 23, offset: 21859},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 744, col: 23, offset: 21859},
						offset: 157,
					},
					&ruleRefExpr{
						pos:    position{line: 744, col: 54, offset: 21890},
						offset: 156,
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 746, col: 1, offset: 21918},
			expr: &actionExpr{
				pos: position{line: 746, col: 26, offset: 21943},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 746, col: 26, offset: 21943},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 746, col: 26, offset: 21943},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 746, col: 34, offset: 21951},
								offset: 156,
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 61, offset: 21978},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 746, col: 70, offset: 21987},
								offset: 141,
							},
						},
						&andExpr{
							pos: position{line: 746, col: 88, offset: 22005},
							expr: &choiceExpr{
								pos: position{line: 746, col: 90, offset: 22007},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 746, col: 90, offset: 22007},
										offset: 135,
									},
									&ruleRefExpr{
										pos:    position{line: 746, col: 101, offset: 22018},
										offset: 132,
									},
									&ruleRefExpr{
										pos:    position{line: 746, col: 119, offset: 22036},
										offset: 121,
									},
									&ruleRefExpr{
										pos:    position{line: 746, col: 133, offset: 22050},
										offset: 138,
									},
									&ruleRefExpr{
										pos:    position{line: 746, col: 155, offset: 22072},
										offset: 318,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 751, col: 1, offset: 22204},
			expr: &actionExpr{
				pos: position{line: 751, col: 30, offset: 22233},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 751, col: 30, offset: 22233},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 751, col: 30, offset: 22233},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 751, col: 38, offset: 22241},
								offset: 157,
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 68, offset: 22271},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 751, col: 77, offset: 22280},
								offset: 141,
							},
						},
						&andExpr{
							pos: position{line: 751, col: 95, offset: 22298},
							expr: &choiceExpr{
								pos: position{line: 751, col: 97, offset: 22300},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 751, col: 97, offset: 22300},
										offset: 135,
									},
									&ruleRefExpr{
										pos:    position{line: 751, col: 108, offset: 22311},
										offset: 132,
									},
									&ruleRefExpr{
										pos:    position{line: 751, col: 126, offset: 22329},
										offset: 121,
									},
									&ruleRefExpr{
										pos:    position{line: 751, col: 140, offset: 22343},
										offset: 138,
									},
									&ruleRefExpr{
										pos:    position{line: 751, col: 162, offset: 22365},
										offset: 318,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 756, col: 1, offset: 22493},
			expr: &actionExpr{
				pos: position{line: 756, col: 20, offset: 22512},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 756, col: 20, offset: 22512},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 756, col: 29, offset: 22521},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 756, col: 29, offset: 22521},
								offset: 145,
							},
							&ruleRefExpr{
								pos:    position{line: 756, col: 50, offset: 22542},
								offset: 150,
							},
							&ruleRefExpr{
								pos:    position{line: 756, col: 72, offset: 22564},
								offset: 142,
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 760, col: 1, offset: 22608},
			expr: &actionExpr{
				pos: position{line: 760, col: 13, offset: 22620},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 760, col: 13, offset: 22620},
					expr: &choiceExpr{
						pos: position{line: 760, col: 15, offset: 22622},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 760, col: 15, offset: 22622},
								offset: 135,
							},
							&ruleRefExpr{
								pos:    position{line: 760, col: 26, offset: 22633},
								offset: 138,
							},
							&ruleRefExpr{
								pos:    position{line: 760, col: 48, offset: 22655},
								offset: 318,
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 764, col: 1, offset: 22709},
			expr: &seqExpr{
				pos: position{line: 764, col: 24, offset: 22732},
				exprs: []any{
					&notExpr{
						pos: position{line: 764, col: 24, offset: 22732},
						expr: &ruleRefExpr{
							pos:    position{line: 764, col: 25, offset: 22733},
							offset: 135,
						},
					},
					&notExpr{
						pos: position{line: 764, col: 34, offset: 22742},
						expr: &ruleRefExpr{
							pos:    position{line: 764, col: 35, offset: 22743},
							offset: 138,
						},
					},
					&notExpr{
						pos: position{line: 764, col: 54, offset: 22762},
						expr: &ruleRefExpr{
							pos:    position{line: 764, col: 55, offset: 22763},
							offset: 121,
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 766, col: 1, offset: 22776},
			expr: &notExpr{
				pos: position{line: 766, col: 33, offset: 22808},
				expr: &ruleRefExpr{
					pos:    position{line: 766, col: 34, offset: 22809},
					offset: 121,
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 768, col: 1, offset: 22822},
			expr: &actionExpr{
				pos: position{line: 768, col: 22, offset: 22843},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 768, col: 22, offset: 22843},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 768, col: 22, offset: 22843},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 768, col: 28, offset: 22849},
								expr: &ruleRefExpr{
									pos:    position{line: 768, col: 29, offset: 22850},
									offset: 146,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 768, col: 51, offset: 22872},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 768, col: 60, offset: 22881},
								offset: 149,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 778, col: 1, offset: 23144},
			expr: &choiceExpr{
				pos: position{line: 778, col: 23, offset: 23166},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 778, col: 23, offset: 23166},
						offset: 148,
					},
					&ruleRefExpr{
						pos:    position{line: 778, col: 50, offset: 23193},
						offset: 147,
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 780, col: 1, offset: 23227},
			expr: &actionExpr{
				pos: position{line: 780, col: 35, offset: 23261},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 780, col: 35, offset: 23261},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 780, col: 35, offset: 23261},
							offset: 143,
						},
						&labeledExpr{
							pos:   position{line: 780, col: 56, offset: 23282},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 780, col: 64, offset: 23290},
								expr: &ruleRefExpr{
									pos:    position{line: 780, col: 64, offset: 23290},
									offset: 318,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 780, col: 73, offset: 23299},
							offset: 144,
						},
						&labeledExpr{
							pos:   position{line: 780, col: 103, offset: 23329},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 780, col: 111, offset: 23337},
								expr: &ruleRefExpr{
									pos:    position{line: 780, col: 112, offset: 23338},
									offset: 151,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 133, offset: 23359},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 780, col: 156, offset: 23382},
								expr: &actionExpr{
									pos: position{line: 780, col: 157, offset: 23383},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 780, col: 157, offset: 23383},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 780, col: 157, offset: 23383},
												label: "nl",
												expr: &ruleRefExpr{
													pos:    position{line: 780, col: 160, offset: 23386},
													offset: 318,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 780, col: 168, offset: 23394},
												offset: 335,
											},
											&andExpr{
												pos: position{line: 780, col: 178, offset: 23404},
												expr: &ruleRefExpr{
													pos:    position{line: 780, col: 180, offset: 23406},
													offset: 318,
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 780, col: 209, offset: 23435},
							expr: &ruleRefExpr{
								pos:    position{line: 780, col: 210, offset: 23436},
								offset: 318,
							},
						},
						&notExpr{
							pos: position{line: 780, col: 218, offset: 23444},
							expr: &choiceExpr{
								pos: position{line: 780, col: 220, offset: 23446},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 780, col: 220, offset: 23446},
										offset: 121,
									},
									&ruleRefExpr{
										pos:    position{line: 780, col: 234, offset: 23460},
										offset: 135,
									},
									&ruleRefExpr{
										pos:    position{line: 780, col: 245, offset: 23471},
										offset: 138,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 780, col: 267, offset: 23493},
							expr: &choiceExpr{
								pos: position{line: 780, col: 269, offset: 23495},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 780, col: 269, offset: 23495},
										offset: 146,
									},
									&ruleRefExpr{
										pos:    position{line: 780, col: 291, offset: 23517},
										offset: 149,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 793, col: 1, offset: 23874},
			expr: &actionExpr{
				pos: position{line: 793, col: 28, offset: 23901},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 793, col: 28, offset: 23901},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 793, col: 28, offset: 23901},
							offset: 143,
						},
						&ruleRefExpr{
							pos:    position{line: 793, col: 49, offset: 23922},
							offset: 318,
						},
						&ruleRefExpr{
							pos:    position{line: 793, col: 57, offset: 23930},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 793, col: 67, offset: 23940},
							expr: &ruleRefExpr{
								pos:    position{line: 793, col: 69, offset: 23942},
								offset: 318,
							},
						},
						&notExpr{
							pos: position{line: 793, col: 78, offset: 23951},
							expr: &ruleRefExpr{
								pos:    position{line: 793, col: 79, offset: 23952},
								offset: 135,
							},
						},
						&notExpr{
							pos: position{line: 793, col: 88, offset: 23961},
							expr: &ruleRefExpr{
								pos:    position{line: 793, col: 89, offset: 23962},
								offset: 138,
							},
						},
						&notExpr{
							pos: position{line: 793, col: 108, offset: 23981},
							expr: &ruleRefExpr{
								pos:    position{line: 793, col: 109, offset: 23982},
								offset: 121,
							},
						},
						&andExpr{
							pos: position{line: 793, col: 121, offset: 23994},
							expr: &choiceExpr{
								pos: position{line: 793, col: 123, offset: 23996},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 793, col: 123, offset: 23996},
										offset: 146,
									},
									&ruleRefExpr{
										pos:    position{line: 793, col: 145, offset: 24018},
										offset: 149,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 798, col: 1, offset: 24148},
			expr: &actionExpr{
				pos: position{line: 798, col: 27, offset: 24174},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 798, col: 27, offset: 24174},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 798, col: 27, offset: 24174},
							offset: 143,
						},
						&labeledExpr{
							pos:   position{line: 798, col: 48, offset: 24195},
							label: "nl",
							expr: &ruleRefExpr{
								pos:    position{line: 798, col: 51, offset: 24198},
								offset: 318,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 798, col: 59, offset: 24206},
							offset: 144,
						},
						&labeledExpr{
							pos:   position{line: 798, col: 89, offset: 24236},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 798, col: 97, offset: 24244},
								expr: &ruleRefExpr{
									pos:    position{line: 798, col: 98, offset: 24245},
									offset: 151,
								},
							},
						},
						&andExpr{
							pos: position{line: 798, col: 119, offset: 24266},
							expr: &choiceExpr{
								pos: position{line: 798, col: 121, offset: 24268},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 798, col: 121, offset: 24268},
										offset: 135,
									},
									&ruleRefExpr{
										pos:    position{line: 798, col: 132, offset: 24279},
										offset: 132,
									},
									&ruleRefExpr{
										pos:    position{line: 798, col: 150, offset: 24297},
										offset: 121,
									},
									&ruleRefExpr{
										pos:    position{line: 798, col: 164, offset: 24311},
										offset: 138,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 805, col: 1, offset: 24486},
			expr: &actionExpr{
				pos: position{line: 805, col: 23, offset: 24508},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 805, col: 23, offset: 24508},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 805, col: 23, offset: 24508},
							offset: 143,
						},
						&labeledExpr{
							pos:   position{line: 805, col: 44, offset: 24529},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 805, col: 52, offset: 24537},
								expr: &ruleRefExpr{
									pos:    position{line: 805, col: 53, offset: 24538},
									offset: 151,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 810, col: 1, offset: 24625},
			expr: &actionExpr{
				pos: position{line: 810, col: 22, offset: 24646},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 810, col: 22, offset: 24646},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 810, col: 22, offset: 24646},
							offset: 143,
						},
						&labeledExpr{
							pos:   position{line: 810, col: 44, offset: 24668},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 811, col: 4, offset: 24681},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 811, col: 4, offset: 24681},
										offset: 95,
									},
									&ruleRefExpr{
										pos:    position{line: 812, col: 5, offset: 24701},
										offset: 101,
									},
									&ruleRefExpr{
										pos:    position{line: 813, col: 5, offset: 24713},
										offset: 99,
									},
									&ruleRefExpr{
										pos:    position{line: 814, col: 5, offset: 24732},
										offset: 108,
									},
									&ruleRefExpr{
										pos:    position{line: 815, col: 5, offset: 24743},
										offset: 84,
									},
									&ruleRefExpr{
										pos:    position{line: 816, col: 5, offset: 24758},
										offset: 239,
									},
									&ruleRefExpr{
										pos:    position{line: 817, col: 5, offset: 24779},
										offset: 53,
									},
									&ruleRefExpr{
										pos:    position{line: 818, col: 5, offset: 24804},
										offset: 312,
									},
									&ruleRefExpr{
										pos:    position{line: 819, col: 5, offset: 24820},
										offset: 154,
									},
									&ruleRefExpr{
										pos:    position{line: 820, col: 5, offset: 24849},
										offset: 153,
									},
									&ruleRefExpr{
										pos:    position{line: 821, col: 5, offset: 24880},
										offset: 155,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 826, col: 1, offset: 24945},
			expr: &actionExpr{
				pos: position{line: 826, col: 21, offset: 24965},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 826, col: 21, offset: 24965},
					exprs: []any{
						&notExpr{
							pos: position{line: 826, col: 21, offset: 24965},
							expr: &ruleRefExpr{
								pos:    position{line: 826, col: 22, offset: 24966},
								offset: 156,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 826, col: 48, offset: 24992},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 826, col: 59, offset: 25003},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 826, col: 68, offset: 25012},
								offset: 2,
							},
						},
						&notExpr{
							pos: position{line: 826, col: 82, offset: 25026},
							expr: &ruleRefExpr{
								pos:    position{line: 826, col: 83, offset: 25027},
								offset: 138,
							},
						},
						&notExpr{
							pos: position{line: 826, col: 103, offset: 25047},
							expr: &ruleRefExpr{
								pos:    position{line: 826, col: 104, offset: 25048},
								offset: 135,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 831, col: 1, offset: 25093},
			expr: &actionExpr{
				pos: position{line: 831, col: 28, offset: 25120},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 831, col: 28, offset: 25120},
					expr: &seqExpr{
						pos: position{line: 831, col: 29, offset: 25121},
						exprs: []any{
							&notExpr{
								pos: position{line: 831, col: 29, offset: 25121},
								expr: &ruleRefExpr{
									pos:    position{line: 831, col: 30, offset: 25122},
									offset: 162,
								},
							},
							&notExpr{
								pos: position{line: 831, col: 40, offset: 25132},
								expr: &ruleRefExpr{
									pos:    position{line: 831, col: 41, offset: 25133},
									offset: 109,
								},
							},
							&notExpr{
								pos: position{line: 831, col: 51, offset: 25143},
								expr: &ruleRefExpr{
									pos:    position{line: 831, col: 52, offset: 25144},
									offset: 100,
								},
							},
							&notExpr{
								pos: position{line: 831, col: 73, offset: 25165},
								expr: &ruleRefExpr{
									pos:    position{line: 831, col: 74, offset: 25166},
									offset: 246,
								},
							},
							&charClassMatcher{
								pos:        position{line: 831, col: 99, offset: 25191},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&notExpr{
								pos: position{line: 831, col: 109, offset: 25201},
								expr: &ruleRefExpr{
									pos:    position{line: 831, col: 110, offset: 25202},
									offset: 138,
								},
							},
							&notExpr{
								pos: position{line: 831, col: 129, offset: 25221},
								expr: &ruleRefExpr{
									pos:    position{line: 831, col: 130, offset: 25222},
									offset: 135,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellSpaces",
			pos:  position{line: 835, col: 1, offset: 25294},
			expr: &actionExpr{
				pos: position{line: 835, col: 25, offset: 25318},
				run: (*parser).callonInlineTableCellSpaces1,
				expr: &oneOrMoreExpr{
					pos: position{line: 835, col: 25, offset: 25318},
					expr: &seqExpr{
						pos: position{line: 835, col: 26, offset: 25319},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 835, col: 26, offset: 25319},
								offset: 340,
							},
							&notExpr{
								pos: position{line: 835, col: 28, offset: 25321},
								expr: &ruleRefExpr{
									pos:    position{line: 835, col: 29, offset: 25322},
									offset: 138,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 839, col: 1, offset: 25403},
			expr: &actionExpr{
				pos: position{line: 839, col: 27, offset: 25429},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &seqExpr{
					pos: position{line: 839, col: 27, offset: 25429},
					exprs: []any{
						&notExpr{
							pos: position{line: 839, col: 27, offset: 25429},
							expr: &ruleRefExpr{
								pos:    position{line: 839, col: 28, offset: 25430},
								offset: 138,
							},
						},
						&choiceExpr{
							pos: position{line: 839, col: 48, offset: 25450},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 839, col: 48, offset: 25450},
									val:        "\\|",
									ignoreCase: false,
									want:       "\"\\\\|\"",
								},
								&charClassMatcher{
									pos:        position{line: 839, col: 56, offset: 25458},
									val:        "[^|\\r\\n]",
									chars:      []rune{'|', '\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 845, col: 1, offset: 25578},
			expr: &actionExpr{
				pos: position{line: 845, col: 29, offset: 25606},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 845, col: 29, offset: 25606},
					exprs: []any{
						&notExpr{
							pos: position{line: 845, col: 29, offset: 25606},
							expr: &ruleRefExpr{
								pos:    position{line: 845, col: 30, offset: 25607},
								offset: 135,
							},
						},
						&choiceExpr{
							pos: position{line: 845, col: 40, offset: 25617},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 845, col: 40, offset: 25617},
									offset: 327,
								},
								&ruleRefExpr{
									pos:    position{line: 845, col: 58, offset: 25635},
									offset: 318,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 845, col: 67, offset: 25644},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 845, col: 77, offset: 25654},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 845, col: 84, offset: 25661},
								expr: &ruleRefExpr{
									pos:    position{line: 845, col: 85, offset: 25662},
									offset: 161,
								},
							},
						},
						&notExpr{
							pos: position{line: 845, col: 103, offset: 25680},
							expr: &litMatcher{
								pos:        position{line: 845, col: 104, offset: 25681},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 845, col: 109, offset: 25686},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 852, col: 1, offset: 25802},
			expr: &actionExpr{
				pos: position{line: 852, col: 32, offset: 25833},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 852, col: 32, offset: 25833},
					exprs: []any{
						&notExpr{
							pos: position{line: 852, col: 32, offset: 25833},
							expr: &ruleRefExpr{
								pos:    position{line: 852, col: 33, offset: 25834},
								offset: 135,
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 42, offset: 25843},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 852, col: 49, offset: 25850},
								expr: &ruleRefExpr{
									pos:    position{line: 852, col: 50, offset: 25851},
									offset: 159,
								},
							},
						},
						&notExpr{
							pos: position{line: 852, col: 78, offset: 25879},
							expr: &litMatcher{
								pos:        position{line: 852, col: 79, offset: 25880},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 852, col: 84, offset: 25885},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 857, col: 1, offset: 25990},
			expr: &actionExpr{
				pos: position{line: 857, col: 26, offset: 26015},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 857, col: 26, offset: 26015},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 857, col: 26, offset: 26015},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 857, col: 36, offset: 26025},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 857, col: 44, offset: 26033},
								offset: 161,
							},
						},
						&andCodeExpr{
							pos: position{line: 857, col: 61, offset: 26050},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 864, col: 1, offset: 26176},
			expr: &actionExpr{
				pos: position{line: 864, col: 29, offset: 26204},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 864, col: 29, offset: 26204},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 864, col: 29, offset: 26204},
							label: "lead",
							expr: &ruleRefExpr{
								pos:    position{line: 864, col: 35, offset: 26210},
								offset: 339,
							},
						},
						&labeledExpr{
							pos:   position{line: 864, col: 39, offset: 26214},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 864, col: 47, offset: 26222},
								offset: 161,
							},
						},
						&andCodeExpr{
							pos: position{line: 864, col: 64, offset: 26239},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 870, col: 1, offset: 26325},
			expr: &actionExpr{
				pos: position{line: 870, col: 17, offset: 26341},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 870, col: 17, offset: 26341},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 870, col: 17, offset: 26341},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 870, col: 24, offset: 26348},
								expr: &actionExpr{
									pos: position{line: 870, col: 25, offset: 26349},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 870, col: 25, offset: 26349},
										label: "n",
										expr: &ruleRefExpr{
											pos:    position{line: 870, col: 27, offset: 26351},
											offset: 320,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 872, col: 12, offset: 26422},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 872, col: 17, offset: 26427},
								expr: &actionExpr{
									pos: position{line: 872, col: 18, offset: 26428},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 872, col: 18, offset: 26428},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 872, col: 18, offset: 26428},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 872, col: 22, offset: 26432},
												label: "n",
												expr: &ruleRefExpr{
													pos:    position{line: 872, col: 24, offset: 26434},
													offset: 320,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 875, col: 11, offset: 26512},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 883, col: 1, offset: 26740},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 26764},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 26764},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 26764},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 884, col: 16, offset: 26775},
								expr: &actionExpr{
									pos: position{line: 885, col: 9, offset: 26785},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 885, col: 9, offset: 26785},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 885, col: 9, offset: 26785},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 885, col: 21, offset: 26797},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 885, col: 21, offset: 26797},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 885, col: 21, offset: 26797},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 885, col: 26, offset: 26802},
																expr: &charClassMatcher{
																	pos:        position{line: 885, col: 26, offset: 26802},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 885, col: 63, offset: 26839},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 889, col: 5, offset: 26921},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 889, col: 10, offset: 26926},
								expr: &actionExpr{
									pos: position{line: 890, col: 9, offset: 26936},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 890, col: 9, offset: 26936},
										label: "span",
										expr: &ruleRefExpr{
											pos:    position{line: 890, col: 15, offset: 26942},
											offset: 160,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 27013},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 894, col: 21, offset: 27029},
								expr: &choiceExpr{
									pos: position{line: 895, col: 9, offset: 27039},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 895, col: 9, offset: 27039},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 895, col: 9, offset: 27039},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 896, col: 11, offset: 27107},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 896, col: 11, offset: 27107},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 897, col: 11, offset: 27176},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 897, col: 11, offset: 27176},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 899, col: 5, offset: 27248},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 899, col: 19, offset: 27262},
								expr: &choiceExpr{
									pos: position{line: 900, col: 9, offset: 27272},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 900, col: 9, offset: 27272},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 900, col: 9, offset: 27272},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 901, col: 11, offset: 27338},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 901, col: 11, offset: 27338},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 902, col: 11, offset: 27407},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 902, col: 11, offset: 27407},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 904, col: 5, offset: 27477},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 904, col: 11, offset: 27483},
								expr: &choiceExpr{
									pos: position{line: 905, col: 9, offset: 27493},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 905, col: 9, offset: 27493},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 905, col: 9, offset: 27493},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 906, col: 11, offset: 27555},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 906, col: 11, offset: 27555},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 907, col: 11, offset: 27616},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 907, col: 11, offset: 27616},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 908, col: 11, offset: 27679},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 908, col: 11, offset: 27679},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 909, col: 11, offset: 27740},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 909, col: 11, offset: 27740},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 910, col: 11, offset: 27802},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 910, col: 11, offset: 27802},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 911, col: 11, offset: 27866},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 911, col: 11, offset: 27866},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 913, col: 6, offset: 27929},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 930, col: 1, offset: 28534},
			expr: &choiceExpr{
				pos: position{line: 930, col: 14, offset: 28547},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 930, col: 14, offset: 28547},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 930, col: 27, offset: 28560},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 930, col: 39, offset: 28572},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 930, col: 50, offset: 28583},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 930, col: 61, offset: 28594},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 932, col: 1, offset: 28607},
			expr: &actionExpr{
				pos: position{line: 932, col: 7, offset: 28613},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 932, col: 7, offset: 28613},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 932, col: 7, offset: 28613},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 932, col: 14, offset: 28620},
								expr: &ruleRefExpr{
									pos:    position{line: 932, col: 15, offset: 28621},
									offset: 162,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 27, offset: 28633},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 932, col: 33, offset: 28639},
								offset: 165,
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 936, col: 1, offset: 28737},
			expr: &actionExpr{
				pos: position{line: 936, col: 11, offset: 28747},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 936, col: 11, offset: 28747},
					exprs: []any{
						&notExpr{
							pos: position{line: 936, col: 11, offset: 28747},
							expr: &litMatcher{
								pos:        position{line: 936, col: 12, offset: 28748},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 16, offset: 28752},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:    position{line: 936, col: 24, offset: 28760},
								offset: 162,
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 35, offset: 28771},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 936, col: 41, offset: 28777},
								offset: 165,
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 943, col: 1, offset: 28878},
			expr: &actionExpr{
				pos: position{line: 943, col: 8, offset: 28885},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 943, col: 8, offset: 28885},
					exprs: []any{
						&notExpr{
							pos: position{line: 943, col: 8, offset: 28885},
							expr: &litMatcher{
								pos:        position{line: 943, col: 9, offset: 28886},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 943, col: 13, offset: 28890},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 943, col: 24, offset: 28901},
								expr: &ruleRefExpr{
									pos:    position{line: 943, col: 24, offset: 28901},
									offset: 166,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 947, col: 1, offset: 28972},
			expr: &choiceExpr{
				pos: position{line: 947, col: 16, offset: 28987},
				alternatives: []any{
					&oneOrMoreExpr{
						pos: position{line: 947, col: 16, offset: 28987},
						expr: &charClassMatcher{
							pos:        position{line: 947, col: 17, offset: 28988},
							val:        "[^\\n{.<>!?,;[\\] ]",
							chars:      []rune{'\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 948, col: 5, offset: 29013},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 948, col: 5, offset: 29013},
								val:        "[.?!;,]",
								chars:      []rune{'.', '?', '!', ';', ','},
								ignoreCase: false,
								inverted:   false,
							},
							&andExpr{
								pos: position{line: 948, col: 13, offset: 29021},
								expr: &seqExpr{
									pos: position{line: 948, col: 15, offset: 29023},
									exprs: []any{
										&notExpr{
											pos: position{line: 948, col: 15, offset: 29023},
											expr: &ruleRefExpr{
												pos:    position{line: 948, col: 16, offset: 29024},
												offset: 340,
											},
										},
										&notExpr{
											pos: position{line: 948, col: 18, offset: 29026},
											expr: &ruleRefExpr{
												pos:    position{line: 948, col: 19, offset: 29027},
												offset: 325,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 949, col: 4, offset: 29042},
						offset: 53,
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 953, col: 1, offset: 29066},
			expr: &actionExpr{
				pos: position{line: 953, col: 9, offset: 29074},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 953, col: 9, offset: 29074},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 953, col: 9, offset: 29074},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 953, col: 15, offset: 29080},
								offset: 168,
							},
						},
						&litMatcher{
							pos:        position{line: 953, col: 26, offset: 29091},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 953, col: 30, offset: 29095},
							label: "domain",
							expr: &ruleRefExpr{
								pos:    position{line: 953, col: 38, offset: 29103},
								offset: 169,
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 957, col: 1, offset: 29201},
			expr: &actionExpr{
				pos: position{line: 957, col: 13, offset: 29213},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 957, col: 13, offset: 29213},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 957, col: 13, offset: 29213},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 957, col: 19, offset: 29219},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 957, col: 19, offset: 29219},
									expr: &choiceExpr{
										pos: position{line: 957, col: 20, offset: 29220},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 957, col: 20, offset: 29220},
												offset: 324,
											},
											&charClassMatcher{
												pos:        position{line: 957, col: 35, offset: 29235},
												val:        "[!#$%&'*+-/=?^_`{|}~.]",
												chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:     []rune{'+', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 959, col: 4, offset: 29363},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 966, col: 1, offset: 29529},
			expr: &actionExpr{
				pos: position{line: 966, col: 15, offset: 29543},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 966, col: 15, offset: 29543},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 966, col: 15, offset: 29543},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 966, col: 23, offset: 29551},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 966, col: 24, offset: 29552},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 966, col: 24, offset: 29552},
											expr: &ruleRefExpr{
												pos:    position{line: 966, col: 25, offset: 29553},
												offset: 324,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 966, col: 40, offset: 29568},
											expr: &seqExpr{
												pos: position{line: 966, col: 41, offset: 29569},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 966, col: 41, offset: 29569},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 966, col: 45, offset: 29573},
														expr: &choiceExpr{
															pos: position{line: 966, col: 46, offset: 29574},
															alternatives: []any{
																&ruleRefExpr{
																	pos:    position{line: 966, col: 46, offset: 29574},
																	offset: 324,
																},
																&litMatcher{
																	pos:        position{line: 966, col: 61, offset: 29589},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 968, col: 4, offset: 29634},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 976, col: 1, offset: 29776},
			expr: &actionExpr{
				pos: position{line: 977, col: 5, offset: 29790},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 977, col: 5, offset: 29790},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 977, col: 5, offset: 29790},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 977, col: 12, offset: 29797},
								offset: 171,
							},
						},
						&labeledExpr{
							pos:   position{line: 978, col: 5, offset: 29815},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 978, col: 11, offset: 29821},
								expr: &ruleRefExpr{
									pos:    position{line: 978, col: 12, offset: 29822},
									offset: 175,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 979, col: 5, offset: 29840},
							offset: 172,
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 983, col: 1, offset: 29998},
			expr: &actionExpr{
				pos: position{line: 983, col: 16, offset: 30013},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 983, col: 16, offset: 30013},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 983, col: 16, offset: 30013},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 983, col: 32, offset: 30029},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 983, col: 42, offset: 30039},
								offset: 174,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 983, col: 59, offset: 30056},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 983, col: 69, offset: 30066},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 990, col: 1, offset: 30243},
			expr: &seqExpr{
				pos: position{line: 990, col: 14, offset: 30256},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 990, col: 14, offset: 30256},
						offset: 328,
					},
					&labeledExpr{
						pos:   position{line: 990, col: 30, offset: 30272},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 990, col: 40, offset: 30282},
							offset: 174,
						},
					},
					&andExpr{
						pos: position{line: 990, col: 57, offset: 30299},
						expr: &ruleRefExpr{
							pos:    position{line: 990, col: 58, offset: 30300},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 990, col: 68, offset: 30310},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 999, col: 1, offset: 30570},
			expr: &actionExpr{
				pos: position{line: 999, col: 18, offset: 30587},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 999, col: 18, offset: 30587},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 999, col: 18, offset: 30587},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 999, col: 27, offset: 30596},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 999, col: 27, offset: 30596},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 999, col: 34, offset: 30603},
										expr: &litMatcher{
											pos:        position{line: 999, col: 34, offset: 30603},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 999, col: 40, offset: 30609},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 1006, col: 1, offset: 30728},
			expr: &actionExpr{
				pos: position{line: 1006, col: 20, offset: 30747},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1006, col: 20, offset: 30747},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1006, col: 20, offset: 30747},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1006, col: 29, offset: 30756},
								offset: 173,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1007, col: 5, offset: 30777},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 1012, col: 1, offset: 30904},
			expr: &actionExpr{
				pos: position{line: 1012, col: 15, offset: 30918},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 1012, col: 16, offset: 30919},
					exprs: []any{
						&notExpr{
							pos: position{line: 1012, col: 16, offset: 30919},
							expr: &ruleRefExpr{
								pos:    position{line: 1012, col: 17, offset: 30920},
								offset: 174,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1012, col: 34, offset: 30937},
							offset: 326,
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 47, offset: 30950},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1012, col: 52, offset: 30955},
								offset: 334,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1012, col: 60, offset: 30963},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 1016, col: 1, offset: 31014},
			expr: &actionExpr{
				pos: position{line: 1017, col: 5, offset: 31025},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 5, offset: 31025},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1017, col: 5, offset: 31025},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1017, col: 12, offset: 31032},
								offset: 177,
							},
						},
						&labeledExpr{
							pos:   position{line: 1018, col: 5, offset: 31047},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1018, col: 11, offset: 31053},
								expr: &seqExpr{
									pos: position{line: 1018, col: 12, offset: 31054},
									exprs: []any{
										&notExpr{
											pos: position{line: 1018, col: 12, offset: 31054},
											expr: &ruleRefExpr{
												pos:    position{line: 1018, col: 13, offset: 31055},
												offset: 180,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1018, col: 27, offset: 31069},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1019, col: 5, offset: 31083},
							offset: 178,
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 1023, col: 1, offset: 31232},
			expr: &actionExpr{
				pos: position{line: 1023, col: 13, offset: 31244},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 13, offset: 31244},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1023, col: 13, offset: 31244},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1023, col: 23, offset: 31254},
								offset: 180,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1023, col: 37, offset: 31268},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1023, col: 47, offset: 31278},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 1030, col: 1, offset: 31452},
			expr: &seqExpr{
				pos: position{line: 1030, col: 11, offset: 31462},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1030, col: 11, offset: 31462},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1030, col: 21, offset: 31472},
							offset: 180,
						},
					},
					&andExpr{
						pos: position{line: 1030, col: 35, offset: 31486},
						expr: &ruleRefExpr{
							pos:    position{line: 1030, col: 36, offset: 31487},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1030, col: 46, offset: 31497},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 1039, col: 1, offset: 31751},
			expr: &actionExpr{
				pos: position{line: 1039, col: 14, offset: 31764},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 1039, col: 14, offset: 31764},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 1039, col: 23, offset: 31773},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 1044, col: 1, offset: 31829},
			expr: &actionExpr{
				pos: position{line: 1044, col: 17, offset: 31845},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 17, offset: 31845},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1044, col: 17, offset: 31845},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1044, col: 26, offset: 31854},
								offset: 179,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1045, col: 5, offset: 31871},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1051, col: 1, offset: 32004},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 15, offset: 32018},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1051, col: 15, offset: 32018},
						offset: 182,
					},
					&ruleRefExpr{
						pos:    position{line: 1051, col: 34, offset: 32037},
						offset: 185,
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1053, col: 1, offset: 32056},
			expr: &actionExpr{
				pos: position{line: 1053, col: 20, offset: 32075},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 20, offset: 32075},
					exprs: []any{
						&notExpr{
							pos: position{line: 1053, col: 20, offset: 32075},
							expr: &ruleRefExpr{
								pos:    position{line: 1053, col: 21, offset: 32076},
								offset: 341,
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 28, offset: 32083},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1053, col: 32, offset: 32087},
							expr: &notExpr{
								pos: position{line: 1053, col: 34, offset: 32089},
								expr: &litMatcher{
									pos:        position{line: 1053, col: 35, offset: 32090},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 40, offset: 32095},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1053, col: 47, offset: 32102},
								offset: 183,
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 70, offset: 32125},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1053, col: 74, offset: 32129},
							expr: &litMatcher{
								pos:        position{line: 1053, col: 75, offset: 32130},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1053, col: 79, offset: 32134},
							expr: &notExpr{
								pos: position{line: 1053, col: 81, offset: 32136},
								expr: &ruleRefExpr{
									pos:    position{line: 1053, col: 82, offset: 32137},
									offset: 324,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1057, col: 1, offset: 32182},
			expr: &actionExpr{
				pos: position{line: 1057, col: 25, offset: 32206},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1057, col: 25, offset: 32206},
					exprs: []any{
						&notExpr{
							pos: position{line: 1057, col: 25, offset: 32206},
							expr: &ruleRefExpr{
								pos:    position{line: 1057, col: 26, offset: 32207},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 1057, col: 28, offset: 32209},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1057, col: 34, offset: 32215},
								expr: &actionExpr{
									pos: position{line: 1057, col: 35, offset: 32216},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1057, col: 35, offset: 32216},
										exprs: []any{
											&notExpr{
												pos: position{line: 1057, col: 35, offset: 32216},
												expr: &ruleRefExpr{
													pos:    position{line: 1057, col: 36, offset: 32217},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 1057, col: 38, offset: 32219},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1057, col: 44, offset: 32225},
													expr: &ruleRefExpr{
														pos:    position{line: 1057, col: 45, offset: 32226},
														offset: 184,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1061, col: 1, offset: 32380},
			expr: &seqExpr{
				pos: position{line: 1061, col: 27, offset: 32406},
				exprs: []any{
					&notExpr{
						pos: position{line: 1061, col: 27, offset: 32406},
						expr: &seqExpr{
							pos: position{line: 1061, col: 29, offset: 32408},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1061, col: 29, offset: 32408},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&notExpr{
									pos: position{line: 1061, col: 33, offset: 32412},
									expr: &litMatcher{
										pos:        position{line: 1061, col: 34, offset: 32413},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1061, col: 39, offset: 32418},
						offset: 96,
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1063, col: 1, offset: 32440},
			expr: &actionExpr{
				pos: position{line: 1063, col: 20, offset: 32459},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 20, offset: 32459},
					exprs: []any{
						&notExpr{
							pos: position{line: 1063, col: 20, offset: 32459},
							expr: &ruleRefExpr{
								pos:    position{line: 1063, col: 21, offset: 32460},
								offset: 342,
							},
						},
						&litMatcher{
							pos:        position{line: 1063, col: 34, offset: 32473},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1063, col: 39, offset: 32478},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1063, col: 46, offset: 32485},
								offset: 186,
							},
						},
						&litMatcher{
							pos:        position{line: 1063, col: 69, offset: 32508},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1067, col: 1, offset: 32545},
			expr: &actionExpr{
				pos: position{line: 1067, col: 25, offset: 32569},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1067, col: 25, offset: 32569},
					exprs: []any{
						&notExpr{
							pos: position{line: 1067, col: 25, offset: 32569},
							expr: &ruleRefExpr{
								pos:    position{line: 1067, col: 26, offset: 32570},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 1067, col: 28, offset: 32572},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1067, col: 34, offset: 32578},
								expr: &actionExpr{
									pos: position{line: 1067, col: 35, offset: 32579},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1067, col: 35, offset: 32579},
										exprs: []any{
											&notExpr{
												pos: position{line: 1067, col: 35, offset: 32579},
												expr: &ruleRefExpr{
													pos:    position{line: 1067, col: 36, offset: 32580},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 1067, col: 38, offset: 32582},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1067, col: 44, offset: 32588},
													expr: &ruleRefExpr{
														pos:    position{line: 1067, col: 45, offset: 32589},
														offset: 187,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1071, col: 1, offset: 32755},
			expr: &seqExpr{
				pos: position{line: 1071, col: 27, offset: 32781},
				exprs: []any{
					&notExpr{
						pos: position{line: 1071, col: 27, offset: 32781},
						expr: &litMatcher{
							pos:        position{line: 1071, col: 29, offset: 32783},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1071, col: 35, offset: 32789},
						offset: 96,
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1074, col: 1, offset: 32812},
			expr: &actionExpr{
				pos: position{line: 1075, col: 5, offset: 32826},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1075, col: 5, offset: 32826},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1075, col: 5, offset: 32826},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1075, col: 12, offset: 32833},
								offset: 189,
							},
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 5, offset: 32851},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1076, col: 11, offset: 32857},
								expr: &seqExpr{
									pos: position{line: 1076, col: 12, offset: 32858},
									exprs: []any{
										&notExpr{
											pos: position{line: 1076, col: 12, offset: 32858},
											expr: &ruleRefExpr{
												pos:    position{line: 1076, col: 13, offset: 32859},
												offset: 192,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1076, col: 30, offset: 32876},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1077, col: 5, offset: 32890},
							offset: 190,
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1081, col: 1, offset: 33048},
			expr: &actionExpr{
				pos: position{line: 1081, col: 16, offset: 33063},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 16, offset: 33063},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1081, col: 16, offset: 33063},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1081, col: 26, offset: 33073},
								offset: 192,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1081, col: 43, offset: 33090},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1081, col: 53, offset: 33100},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1088, col: 1, offset: 33285},
			expr: &seqExpr{
				pos: position{line: 1088, col: 14, offset: 33298},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1088, col: 14, offset: 33298},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1088, col: 24, offset: 33308},
							offset: 192,
						},
					},
					&andExpr{
						pos: position{line: 1088, col: 41, offset: 33325},
						expr: &ruleRefExpr{
							pos:    position{line: 1088, col: 42, offset: 33326},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1088, col: 52, offset: 33336},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1097, col: 1, offset: 33604},
			expr: &actionExpr{
				pos: position{line: 1097, col: 17, offset: 33620},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1097, col: 17, offset: 33620},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1097, col: 17, offset: 33620},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1097, col: 26, offset: 33629},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1097, col: 26, offset: 33629},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1097, col: 33, offset: 33636},
										expr: &litMatcher{
											pos:        position{line: 1097, col: 33, offset: 33636},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1097, col: 39, offset: 33642},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1104, col: 1, offset: 33765},
			expr: &actionExpr{
				pos: position{line: 1104, col: 20, offset: 33784},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1104, col: 20, offset: 33784},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1104, col: 20, offset: 33784},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1104, col: 29, offset: 33793},
								offset: 191,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1105, col: 5, offset: 33813},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1110, col: 1, offset: 33944},
			expr: &actionExpr{
				pos: position{line: 1110, col: 15, offset: 33958},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1110, col: 16, offset: 33959},
					exprs: []any{
						&notExpr{
							pos: position{line: 1110, col: 16, offset: 33959},
							expr: &ruleRefExpr{
								pos:    position{line: 1110, col: 17, offset: 33960},
								offset: 192,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1110, col: 34, offset: 33977},
							offset: 326,
						},
						&labeledExpr{
							pos:   position{line: 1110, col: 47, offset: 33990},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1110, col: 52, offset: 33995},
								offset: 334,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1110, col: 60, offset: 34003},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1116, col: 1, offset: 34052},
			expr: &actionExpr{
				pos: position{line: 1117, col: 5, offset: 34066},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 5, offset: 34066},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1117, col: 5, offset: 34066},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1117, col: 12, offset: 34073},
								offset: 195,
							},
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 5, offset: 34091},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1118, col: 11, offset: 34097},
								expr: &ruleRefExpr{
									pos:    position{line: 1118, col: 12, offset: 34098},
									offset: 199,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1119, col: 5, offset: 34116},
							offset: 196,
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1123, col: 1, offset: 34283},
			expr: &actionExpr{
				pos: position{line: 1123, col: 16, offset: 34298},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 16, offset: 34298},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1123, col: 16, offset: 34298},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1123, col: 32, offset: 34314},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1123, col: 42, offset: 34324},
								offset: 198,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1123, col: 59, offset: 34341},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1123, col: 69, offset: 34351},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1130, col: 1, offset: 34528},
			expr: &seqExpr{
				pos: position{line: 1130, col: 14, offset: 34541},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 1130, col: 14, offset: 34541},
						offset: 328,
					},
					&labeledExpr{
						pos:   position{line: 1130, col: 30, offset: 34557},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1130, col: 40, offset: 34567},
							offset: 198,
						},
					},
					&andExpr{
						pos: position{line: 1130, col: 57, offset: 34584},
						expr: &ruleRefExpr{
							pos:    position{line: 1130, col: 58, offset: 34585},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1130, col: 68, offset: 34595},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1139, col: 1, offset: 34855},
			expr: &actionExpr{
				pos: position{line: 1139, col: 15, offset: 34869},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 15, offset: 34869},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1139, col: 15, offset: 34869},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1139, col: 21, offset: 34875},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1139, col: 21, offset: 34875},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1139, col: 28, offset: 34882},
										expr: &litMatcher{
											pos:        position{line: 1139, col: 28, offset: 34882},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1139, col: 34, offset: 34888},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1146, col: 1, offset: 35001},
			expr: &actionExpr{
				pos: position{line: 1146, col: 20, offset: 35020},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1146, col: 20, offset: 35020},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1146, col: 20, offset: 35020},
							label: "dots",
							expr: &ruleRefExpr{
								pos:    position{line: 1146, col: 26, offset: 35026},
								offset: 197,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1147, col: 5, offset: 35044},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1152, col: 1, offset: 35168},
			expr: &actionExpr{
				pos: position{line: 1152, col: 15, offset: 35182},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 16, offset: 35183},
					exprs: []any{
						&notExpr{
							pos: position{line: 1152, col: 16, offset: 35183},
							expr: &ruleRefExpr{
								pos:    position{line: 1152, col: 17, offset: 35184},
								offset: 198,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1152, col: 34, offset: 35201},
							offset: 326,
						},
						&labeledExpr{
							pos:   position{line: 1152, col: 47, offset: 35214},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1152, col: 52, offset: 35219},
								offset: 334,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1152, col: 60, offset: 35227},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1156, col: 1, offset: 35274},
			expr: &actionExpr{
				pos: position{line: 1157, col: 5, offset: 35288},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 5, offset: 35288},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1157, col: 5, offset: 35288},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1157, col: 12, offset: 35295},
								offset: 201,
							},
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 5, offset: 35313},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1158, col: 11, offset: 35319},
								expr: &seqExpr{
									pos: position{line: 1158, col: 12, offset: 35320},
									exprs: []any{
										&notExpr{
											pos: position{line: 1158, col: 12, offset: 35320},
											expr: &ruleRefExpr{
												pos:    position{line: 1158, col: 13, offset: 35321},
												offset: 204,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1158, col: 30, offset: 35338},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1159, col: 5, offset: 35352},
							offset: 202,
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1163, col: 1, offset: 35510},
			expr: &actionExpr{
				pos: position{line: 1163, col: 16, offset: 35525},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 16, offset: 35525},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1163, col: 16, offset: 35525},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1163, col: 26, offset: 35535},
								offset: 204,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1163, col: 43, offset: 35552},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1163, col: 53, offset: 35562},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1170, col: 1, offset: 35739},
			expr: &seqExpr{
				pos: position{line: 1170, col: 14, offset: 35752},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1170, col: 14, offset: 35752},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1170, col: 24, offset: 35762},
							offset: 204,
						},
					},
					&andExpr{
						pos: position{line: 1170, col: 41, offset: 35779},
						expr: &ruleRefExpr{
							pos:    position{line: 1170, col: 42, offset: 35780},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1170, col: 52, offset: 35790},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1179, col: 1, offset: 36050},
			expr: &actionExpr{
				pos: position{line: 1179, col: 20, offset: 36069},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 20, offset: 36069},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1179, col: 20, offset: 36069},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1179, col: 31, offset: 36080},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1179, col: 31, offset: 36080},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1179, col: 38, offset: 36087},
										expr: &litMatcher{
											pos:        position{line: 1179, col: 38, offset: 36087},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1179, col: 44, offset: 36093},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1186, col: 1, offset: 36216},
			expr: &actionExpr{
				pos: position{line: 1186, col: 20, offset: 36235},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 20, offset: 36235},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1186, col: 20, offset: 36235},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:    position{line: 1186, col: 31, offset: 36246},
								offset: 203,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1187, col: 5, offset: 36269},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1193, col: 1, offset: 36399},
			expr: &actionExpr{
				pos: position{line: 1193, col: 12, offset: 36410},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 12, offset: 36410},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1193, col: 12, offset: 36410},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1193, col: 20, offset: 36418},
								expr: &ruleRefExpr{
									pos:    position{line: 1193, col: 21, offset: 36419},
									offset: 206,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1193, col: 39, offset: 36437},
							offset: 325,
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1197, col: 1, offset: 36494},
			expr: &actionExpr{
				pos: position{line: 1197, col: 19, offset: 36512},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 19, offset: 36512},
					exprs: []any{
						&notExpr{
							pos: position{line: 1197, col: 19, offset: 36512},
							expr: &ruleRefExpr{
								pos:    position{line: 1197, col: 20, offset: 36513},
								offset: 325,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1197, col: 30, offset: 36523},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 46, offset: 36539},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1197, col: 55, offset: 36548},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1197, col: 55, offset: 36548},
										offset: 209,
									},
									&ruleRefExpr{
										pos:    position{line: 1197, col: 68, offset: 36561},
										offset: 210,
									},
									&ruleRefExpr{
										pos:    position{line: 1197, col: 82, offset: 36575},
										offset: 211,
									},
									&ruleRefExpr{
										pos:    position{line: 1197, col: 96, offset: 36589},
										offset: 22,
									},
									&ruleRefExpr{
										pos:    position{line: 1197, col: 113, offset: 36606},
										offset: 26,
									},
									&ruleRefExpr{
										pos:    position{line: 1197, col: 130, offset: 36623},
										offset: 102,
									},
									&ruleRefExpr{
										pos:    position{line: 1197, col: 144, offset: 36637},
										offset: 207,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1197, col: 158, offset: 36651},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1201, col: 1, offset: 36690},
			expr: &actionExpr{
				pos: position{line: 1201, col: 16, offset: 36705},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 16, offset: 36705},
					exprs: []any{
						&notExpr{
							pos: position{line: 1201, col: 16, offset: 36705},
							expr: &ruleRefExpr{
								pos:    position{line: 1201, col: 17, offset: 36706},
								offset: 297,
							},
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 35, offset: 36724},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1201, col: 43, offset: 36732},
								expr: &ruleRefExpr{
									pos:    position{line: 1201, col: 43, offset: 36732},
									offset: 208,
								},
							},
						},
						&andExpr{
							pos: position{line: 1201, col: 64, offset: 36753},
							expr: &ruleRefExpr{
								pos:    position{line: 1201, col: 65, offset: 36754},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1205, col: 1, offset: 36841},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 4, offset: 36868},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1206, col: 4, offset: 36868},
						offset: 53,
					},
					&oneOrMoreExpr{
						pos: position{line: 1208, col: 6, offset: 36899},
						expr: &charClassMatcher{
							pos:        position{line: 1208, col: 6, offset: 36899},
							val:        "[^\\r\\n{]",
							chars:      []rune{'\r', '\n', '{'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&litMatcher{
						pos:        position{line: 1209, col: 7, offset: 36917},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1212, col: 1, offset: 36925},
			expr: &actionExpr{
				pos: position{line: 1212, col: 14, offset: 36938},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 14, offset: 36938},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1212, col: 14, offset: 36938},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 29, offset: 36953},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1212, col: 41, offset: 36965},
								offset: 299,
							},
						},
						&litMatcher{
							pos:        position{line: 1212, col: 64, offset: 36988},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1212, col: 69, offset: 36993},
							offset: 335,
						},
						&ruleRefExpr{
							pos:    position{line: 1212, col: 80, offset: 37004},
							offset: 331,
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 90, offset: 37014},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1212, col: 96, offset: 37020},
								expr: &ruleRefExpr{
									pos:    position{line: 1212, col: 97, offset: 37021},
									offset: 206,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1212, col: 116, offset: 37040},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1217, col: 1, offset: 37228},
			expr: &actionExpr{
				pos: position{line: 1217, col: 15, offset: 37242},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 15, offset: 37242},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1217, col: 15, offset: 37242},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 26, offset: 37253},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1217, col: 38, offset: 37265},
								offset: 299,
							},
						},
						&litMatcher{
							pos:        position{line: 1217, col: 61, offset: 37288},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1217, col: 66, offset: 37293},
							offset: 335,
						},
						&ruleRefExpr{
							pos:    position{line: 1217, col: 77, offset: 37304},
							offset: 331,
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 87, offset: 37314},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1217, col: 93, offset: 37320},
								expr: &ruleRefExpr{
									pos:    position{line: 1217, col: 94, offset: 37321},
									offset: 206,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1217, col: 113, offset: 37340},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1222, col: 1, offset: 37530},
			expr: &actionExpr{
				pos: position{line: 1222, col: 15, offset: 37544},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 15, offset: 37544},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1222, col: 15, offset: 37544},
							offset: 304,
						},
						&litMatcher{
							pos:        position{line: 1222, col: 31, offset: 37560},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1222, col: 35, offset: 37564},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 45, offset: 37574},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1222, col: 51, offset: 37580},
								offset: 305,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1222, col: 64, offset: 37593},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 75, offset: 37604},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1222, col: 84, offset: 37613},
								offset: 306,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1222, col: 100, offset: 37629},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 110, offset: 37639},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1222, col: 117, offset: 37646},
								offset: 305,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1222, col: 130, offset: 37659},
							offset: 335,
						},
						&litMatcher{
							pos:        position{line: 1222, col: 140, offset: 37669},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1222, col: 144, offset: 37673},
							offset: 335,
						},
						&ruleRefExpr{
							pos:    position{line: 1222, col: 155, offset: 37684},
							offset: 331,
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 165, offset: 37694},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1222, col: 171, offset: 37700},
								expr: &ruleRefExpr{
									pos:    position{line: 1222, col: 172, offset: 37701},
									offset: 206,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1222, col: 191, offset: 37720},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1229, col: 1, offset: 37941},
			expr: &actionExpr{
				pos: position{line: 1230, col: 5, offset: 37953},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1230, col: 5, offset: 37953},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1230, col: 5, offset: 37953},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1230, col: 12, offset: 37960},
								offset: 213,
							},
						},
						&labeledExpr{
							pos:   position{line: 1231, col: 5, offset: 37976},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1231, col: 11, offset: 37982},
								expr: &seqExpr{
									pos: position{line: 1231, col: 12, offset: 37983},
									exprs: []any{
										&notExpr{
											pos: position{line: 1231, col: 12, offset: 37983},
											expr: &ruleRefExpr{
												pos:    position{line: 1231, col: 13, offset: 37984},
												offset: 216,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1231, col: 28, offset: 37999},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1232, col: 5, offset: 38013},
							offset: 214,
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1236, col: 1, offset: 38165},
			expr: &actionExpr{
				pos: position{line: 1236, col: 14, offset: 38178},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 14, offset: 38178},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1236, col: 14, offset: 38178},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1236, col: 24, offset: 38188},
								offset: 216,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1236, col: 39, offset: 38203},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1236, col: 49, offset: 38213},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1243, col: 1, offset: 38388},
			expr: &seqExpr{
				pos: position{line: 1243, col: 12, offset: 38399},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1243, col: 12, offset: 38399},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1243, col: 22, offset: 38409},
							offset: 216,
						},
					},
					&andExpr{
						pos: position{line: 1243, col: 37, offset: 38424},
						expr: &ruleRefExpr{
							pos:    position{line: 1243, col: 38, offset: 38425},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1243, col: 48, offset: 38435},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1252, col: 1, offset: 38687},
			expr: &actionExpr{
				pos: position{line: 1252, col: 19, offset: 38705},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 19, offset: 38705},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1252, col: 19, offset: 38705},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1252, col: 31, offset: 38717},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1252, col: 31, offset: 38717},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1252, col: 38, offset: 38724},
										expr: &litMatcher{
											pos:        position{line: 1252, col: 38, offset: 38724},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1252, col: 44, offset: 38730},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1259, col: 1, offset: 38855},
			expr: &actionExpr{
				pos: position{line: 1259, col: 18, offset: 38872},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 18, offset: 38872},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1259, col: 18, offset: 38872},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:    position{line: 1259, col: 30, offset: 38884},
								offset: 215,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1260, col: 5, offset: 38906},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1267, col: 1, offset: 39036},
			expr: &actionExpr{
				pos: position{line: 1267, col: 17, offset: 39052},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 17, offset: 39052},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1267, col: 17, offset: 39052},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1267, col: 22, offset: 39057},
								expr: &ruleRefExpr{
									pos:    position{line: 1267, col: 22, offset: 39057},
									offset: 90,
								},
							},
						},
						&andExpr{
							pos: position{line: 1267, col: 37, offset: 39072},
							expr: &ruleRefExpr{
								pos:    position{line: 1267, col: 38, offset: 39073},
								offset: 331,
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 48, offset: 39083},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1267, col: 54, offset: 39089},
								expr: &ruleRefExpr{
									pos:    position{line: 1267, col: 55, offset: 39090},
									offset: 221,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 70, offset: 39105},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1267, col: 85, offset: 39120},
								expr: &ruleRefExpr{
									pos:    position{line: 1267, col: 86, offset: 39121},
									offset: 222,
								},
							},
						},
						&andExpr{
							pos: position{line: 1267, col: 104, offset: 39139},
							expr: &ruleRefExpr{
								pos:    position{line: 1267, col: 105, offset: 39140},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1278, col: 1, offset: 39376},
			expr: &actionExpr{
				pos: position{line: 1278, col: 24, offset: 39399},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 24, offset: 39399},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1278, col: 24, offset: 39399},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1278, col: 28, offset: 39403},
							offset: 335,
						},
						&ruleRefExpr{
							pos:    position{line: 1278, col: 38, offset: 39413},
							offset: 318,
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 46, offset: 39421},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1278, col: 53, offset: 39428},
								offset: 3,
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuationMarker",
			pos:  position{line: 1282, col: 1, offset: 39516},
			expr: &actionExpr{
				pos: position{line: 1282, col: 26, offset: 39541},
				run: (*parser).callonListContinuationMarker1,
				expr: &labeledExpr{
					pos:   position{line: 1282, col: 26, offset: 39541},
					label: "marker",
					expr: &seqExpr{
						pos: position{line: 1282, col: 34, offset: 39549},
						exprs: []any{
							&zeroOrMoreExpr{
								pos: position{line: 1282, col: 34, offset: 39549},
								expr: &ruleRefExpr{
									pos:    position{line: 1282, col: 34, offset: 39549},
									offset: 316,
								},
							},
							&ruleRefExpr{
								pos:    position{line: 1282, col: 45, offset: 39560},
								offset: 328,
							},
							&litMatcher{
								pos:        position{line: 1282, col: 61, offset: 39576},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1286, col: 1, offset: 39613},
			expr: &actionExpr{
				pos: position{line: 1286, col: 20, offset: 39632},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 20, offset: 39632},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1286, col: 20, offset: 39632},
							offset: 219,
						},
						&ruleRefExpr{
							pos:    position{line: 1286, col: 43, offset: 39655},
							offset: 335,
						},
						&ruleRefExpr{
							pos:    position{line: 1286, col: 53, offset: 39665},
							offset: 318,
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 61, offset: 39673},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1286, col: 67, offset: 39679},
								offset: 223,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1290, col: 1, offset: 39791},
			expr: &actionExpr{
				pos: position{line: 1290, col: 16, offset: 39806},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 16, offset: 39806},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1290, col: 16, offset: 39806},
							offset: 331,
						},
						&notExpr{
							pos: position{line: 1290, col: 26, offset: 39816},
							expr: &ruleRefExpr{
								pos:    position{line: 1290, col: 27, offset: 39817},
								offset: 262,
							},
						},
						&notExpr{
							pos: position{line: 1290, col: 45, offset: 39835},
							expr: &ruleRefExpr{
								pos:    position{line: 1290, col: 46, offset: 39836},
								offset: 264,
							},
						},
						&notExpr{
							pos: position{line: 1290, col: 66, offset: 39856},
							expr: &ruleRefExpr{
								pos:    position{line: 1290, col: 67, offset: 39857},
								offset: 14,
							},
						},
						&notExpr{
							pos: position{line: 1290, col: 83, offset: 39873},
							expr: &ruleRefExpr{
								pos:    position{line: 1290, col: 84, offset: 39874},
								offset: 307,
							},
						},
						&notExpr{
							pos: position{line: 1290, col: 105, offset: 39895},
							expr: &ruleRefExpr{
								pos:    position{line: 1290, col: 106, offset: 39896},
								offset: 219,
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 129, offset: 39919},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1290, col: 137, offset: 39927},
								expr: &ruleRefExpr{
									pos:    position{line: 1290, col: 138, offset: 39928},
									offset: 90,
								},
							},
						},
						&andExpr{
							pos: position{line: 1290, col: 154, offset: 39944},
							expr: &ruleRefExpr{
								pos:    position{line: 1290, col: 155, offset: 39945},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1294, col: 1, offset: 40031},
			expr: &actionExpr{
				pos: position{line: 1294, col: 18, offset: 40048},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 18, offset: 40048},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1294, col: 18, offset: 40048},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1294, col: 25, offset: 40055},
								expr: &ruleRefExpr{
									pos:    position{line: 1294, col: 26, offset: 40056},
									offset: 220,
								},
							},
						},
						&andExpr{
							pos: position{line: 1294, col: 45, offset: 40075},
							expr: &ruleRefExpr{
								pos:    position{line: 1294, col: 46, offset: 40076},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuationBlockElement",
			pos:  position{line: 1299, col: 1, offset: 40115},
			expr: &actionExpr{
				pos: position{line: 1299, col: 29, offset: 40143},
				run: (*parser).callonContinuationBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 29, offset: 40143},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1299, col: 29, offset: 40143},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1299, col: 38, offset: 40152},
								offset: 224,
							},
						},
						&andExpr{
							pos: position{line: 1299, col: 65, offset: 40179},
							expr: &ruleRefExpr{
								pos:    position{line: 1299, col: 66, offset: 40180},
								offset: 331,
							},
						},
						&andCodeExpr{
							pos: position{line: 1300, col: 1, offset: 40191},
							run: (*parser).callonContinuationBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "ContinuationBlockElements",
			pos:  position{line: 1306, col: 1, offset: 40263},
			expr: &choiceExpr{
				pos: position{line: 1307, col: 5, offset: 40297},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1307, col: 5, offset: 40297},
						offset: 15,
					},
					&ruleRefExpr{
						pos:    position{line: 1308, col: 5, offset: 40317},
						offset: 5,
					},
					&ruleRefExpr{
						pos:    position{line: 1309, col: 5, offset: 40342},
						offset: 113,
					},
					&ruleRefExpr{
						pos:    position{line: 1310, col: 5, offset: 40354},
						offset: 4,
					},
					&actionExpr{
						pos: position{line: 1310, col: 19, offset: 40368},
						run: (*parser).callonContinuationBlockElements6,
						expr: &labeledExpr{
							pos:   position{line: 1310, col: 19, offset: 40368},
							label: "els",
							expr: &ruleRefExpr{
								pos:    position{line: 1310, col: 23, offset: 40372},
								offset: 89,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1316, col: 1, offset: 40513},
			expr: &actionExpr{
				pos: position{line: 1316, col: 17, offset: 40529},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 17, offset: 40529},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1316, col: 18, offset: 40530},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1316, col: 18, offset: 40530},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1316, col: 26, offset: 40538},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1316, col: 26, offset: 40538},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1316, col: 30, offset: 40542},
											expr: &ruleRefExpr{
												pos:    position{line: 1316, col: 30, offset: 40542},
												offset: 340,
											},
										},
										&litMatcher{
											pos:        position{line: 1316, col: 33, offset: 40545},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1316, col: 37, offset: 40549},
											expr: &ruleRefExpr{
												pos:    position{line: 1316, col: 37, offset: 40549},
												offset: 340,
											},
										},
										&litMatcher{
											pos:        position{line: 1316, col: 40, offset: 40552},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1316, col: 46, offset: 40558},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1316, col: 46, offset: 40558},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1316, col: 50, offset: 40562},
											expr: &ruleRefExpr{
												pos:    position{line: 1316, col: 50, offset: 40562},
												offset: 340,
											},
										},
										&litMatcher{
											pos:        position{line: 1316, col: 53, offset: 40565},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1316, col: 57, offset: 40569},
											expr: &ruleRefExpr{
												pos:    position{line: 1316, col: 57, offset: 40569},
												offset: 340,
											},
										},
										&litMatcher{
											pos:        position{line: 1316, col: 60, offset: 40572},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1316, col: 66, offset: 40578},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1316, col: 66, offset: 40578},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1316, col: 70, offset: 40582},
											expr: &ruleRefExpr{
												pos:    position{line: 1316, col: 70, offset: 40582},
												offset: 340,
											},
										},
										&litMatcher{
											pos:        position{line: 1316, col: 73, offset: 40585},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1316, col: 77, offset: 40589},
											expr: &ruleRefExpr{
												pos:    position{line: 1316, col: 77, offset: 40589},
												offset: 340,
											},
										},
										&litMatcher{
											pos:        position{line: 1316, col: 80, offset: 40592},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1316, col: 85, offset: 40597},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 1316, col: 95, offset: 40607},
							expr: &ruleRefExpr{
								pos:    position{line: 1316, col: 96, offset: 40608},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1321, col: 1, offset: 40679},
			expr: &actionExpr{
				pos: position{line: 1321, col: 13, offset: 40691},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 13, offset: 40691},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1321, col: 14, offset: 40692},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1321, col: 21, offset: 40699},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 1321, col: 31, offset: 40709},
							expr: &ruleRefExpr{
								pos:    position{line: 1321, col: 32, offset: 40710},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1326, col: 1, offset: 40777},
			expr: &actionExpr{
				pos: position{line: 1327, col: 5, offset: 40790},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 5, offset: 40790},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1327, col: 5, offset: 40790},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1327, col: 12, offset: 40797},
								offset: 228,
							},
						},
						&labeledExpr{
							pos:   position{line: 1328, col: 5, offset: 40814},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1328, col: 11, offset: 40820},
								expr: &seqExpr{
									pos: position{line: 1328, col: 12, offset: 40821},
									exprs: []any{
										&notExpr{
											pos: position{line: 1328, col: 12, offset: 40821},
											expr: &ruleRefExpr{
												pos:    position{line: 1328, col: 13, offset: 40822},
												offset: 231,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1328, col: 29, offset: 40838},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1329, col: 5, offset: 40852},
							offset: 229,
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1333, col: 1, offset: 41007},
			expr: &actionExpr{
				pos: position{line: 1333, col: 15, offset: 41021},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1333, col: 15, offset: 41021},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1333, col: 15, offset: 41021},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1333, col: 25, offset: 41031},
								offset: 231,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1333, col: 41, offset: 41047},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1333, col: 51, offset: 41057},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1340, col: 1, offset: 41241},
			expr: &seqExpr{
				pos: position{line: 1340, col: 13, offset: 41253},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1340, col: 13, offset: 41253},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1340, col: 23, offset: 41263},
							offset: 231,
						},
					},
					&andExpr{
						pos: position{line: 1340, col: 39, offset: 41279},
						expr: &ruleRefExpr{
							pos:    position{line: 1340, col: 40, offset: 41280},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1340, col: 50, offset: 41290},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1349, col: 1, offset: 41556},
			expr: &actionExpr{
				pos: position{line: 1349, col: 19, offset: 41574},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 19, offset: 41574},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1349, col: 19, offset: 41574},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1349, col: 30, offset: 41585},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1349, col: 30, offset: 41585},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1349, col: 36, offset: 41591},
										expr: &litMatcher{
											pos:        position{line: 1349, col: 36, offset: 41591},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1349, col: 42, offset: 41597},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1356, col: 1, offset: 41724},
			expr: &actionExpr{
				pos: position{line: 1356, col: 19, offset: 41742},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1356, col: 19, offset: 41742},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1356, col: 19, offset: 41742},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1356, col: 28, offset: 41751},
								offset: 230,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1357, col: 5, offset: 41773},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1362, col: 1, offset: 41903},
			expr: &actionExpr{
				pos: position{line: 1362, col: 14, offset: 41916},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1362, col: 15, offset: 41917},
					exprs: []any{
						&notExpr{
							pos: position{line: 1362, col: 15, offset: 41917},
							expr: &ruleRefExpr{
								pos:    position{line: 1362, col: 16, offset: 41918},
								offset: 231,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1362, col: 32, offset: 41934},
							offset: 326,
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 45, offset: 41947},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1362, col: 50, offset: 41952},
								offset: 334,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1362, col: 58, offset: 41960},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1368, col: 1, offset: 42009},
			expr: &actionExpr{
				pos: position{line: 1369, col: 5, offset: 42020},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 5, offset: 42020},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1369, col: 5, offset: 42020},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1369, col: 12, offset: 42027},
								offset: 234,
							},
						},
						&labeledExpr{
							pos:   position{line: 1370, col: 5, offset: 42042},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1370, col: 11, offset: 42048},
								expr: &ruleRefExpr{
									pos:    position{line: 1370, col: 12, offset: 42049},
									offset: 238,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1371, col: 5, offset: 42064},
							offset: 235,
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1375, col: 1, offset: 42223},
			expr: &actionExpr{
				pos: position{line: 1375, col: 13, offset: 42235},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 13, offset: 42235},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1375, col: 13, offset: 42235},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1375, col: 23, offset: 42245},
								offset: 237,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1375, col: 37, offset: 42259},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1375, col: 47, offset: 42269},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1382, col: 1, offset: 42443},
			expr: &seqExpr{
				pos: position{line: 1382, col: 11, offset: 42453},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1382, col: 11, offset: 42453},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1382, col: 21, offset: 42463},
							offset: 237,
						},
					},
					&andExpr{
						pos: position{line: 1382, col: 35, offset: 42477},
						expr: &ruleRefExpr{
							pos:    position{line: 1382, col: 36, offset: 42478},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1382, col: 46, offset: 42488},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1391, col: 1, offset: 42742},
			expr: &actionExpr{
				pos: position{line: 1391, col: 14, offset: 42755},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 14, offset: 42755},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1391, col: 14, offset: 42755},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1391, col: 22, offset: 42763},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1391, col: 22, offset: 42763},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1391, col: 29, offset: 42770},
										expr: &litMatcher{
											pos:        position{line: 1391, col: 29, offset: 42770},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1391, col: 35, offset: 42776},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1398, col: 1, offset: 42893},
			expr: &actionExpr{
				pos: position{line: 1398, col: 17, offset: 42909},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 17, offset: 42909},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1398, col: 17, offset: 42909},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:    position{line: 1398, col: 25, offset: 42917},
								offset: 236,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1399, col: 5, offset: 42934},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1404, col: 1, offset: 43057},
			expr: &actionExpr{
				pos: position{line: 1404, col: 12, offset: 43068},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1404, col: 13, offset: 43069},
					exprs: []any{
						&notExpr{
							pos: position{line: 1404, col: 13, offset: 43069},
							expr: &ruleRefExpr{
								pos:    position{line: 1404, col: 14, offset: 43070},
								offset: 237,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1404, col: 28, offset: 43084},
							offset: 326,
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 41, offset: 43097},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1404, col: 46, offset: 43102},
								offset: 334,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1404, col: 54, offset: 43110},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1412, col: 1, offset: 43161},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 18, offset: 43178},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1412, col: 18, offset: 43178},
						offset: 240,
					},
					&ruleRefExpr{
						pos:    position{line: 1412, col: 43, offset: 43203},
						offset: 252,
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1414, col: 1, offset: 43224},
			expr: &actionExpr{
				pos: position{line: 1414, col: 26, offset: 43249},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1414, col: 26, offset: 43249},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1414, col: 26, offset: 43249},
							offset: 241,
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 46, offset: 43269},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 1414, col: 50, offset: 43273},
								offset: 244,
							},
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 68, offset: 43291},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1414, col: 74, offset: 43297},
								expr: &actionExpr{
									pos: position{line: 1414, col: 75, offset: 43298},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1414, col: 75, offset: 43298},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 1414, col: 75, offset: 43298},
												offset: 335,
											},
											&litMatcher{
												pos:        position{line: 1414, col: 85, offset: 43308},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1414, col: 89, offset: 43312},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1414, col: 96, offset: 43319},
													exprs: []any{
														&ruleRefExpr{
															pos:    position{line: 1414, col: 96, offset: 43319},
															offset: 335,
														},
														&ruleRefExpr{
															pos:    position{line: 1414, col: 106, offset: 43329},
															offset: 245,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1414, col: 150, offset: 43373},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1422, col: 1, offset: 43631},
			expr: &litMatcher{
				pos:        position{line: 1422, col: 23, offset: 43653},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceInitialCharacter",
			pos:  position{line: 1424, col: 1, offset: 43660},
			expr: &actionExpr{
				pos: position{line: 1424, col: 34, offset: 43693},
				run: (*parser).callonCrossReferenceInitialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1424, col: 35, offset: 43694},
					alternatives: []any{
						&ruleRefExpr{
							pos:    position{line: 1424, col: 35, offset: 43694},
							offset: 323,
						},
						&charClassMatcher{
							pos:        position{line: 1424, col: 43, offset: 43702},
							val:        "[:_]",
							chars:      []rune{':', '_'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceCharacters",
			pos:  position{line: 1429, col: 1, offset: 43852},
			expr: &actionExpr{
				pos: position{line: 1429, col: 28, offset: 43879},
				run: (*parser).callonCrossReferenceCharacters1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1429, col: 28, offset: 43879},
					expr: &seqExpr{
						pos: position{line: 1429, col: 29, offset: 43880},
						exprs: []any{
							&notExpr{
								pos: position{line: 1429, col: 29, offset: 43880},
								expr: &ruleRefExpr{
									pos:    position{line: 1429, col: 30, offset: 43881},
									offset: 53,
								},
							},
							&charClassMatcher{
								pos:        position{line: 1429, col: 50, offset: 43901},
								val:        "[\\p{L}\\p{N} _:.-]",
								chars:      []rune{' ', '_', ':', '.', '-'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1434, col: 1, offset: 43979},
			expr: &actionExpr{
				pos: position{line: 1434, col: 21, offset: 43999},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1434, col: 21, offset: 43999},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1434, col: 21, offset: 43999},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 1434, col: 28, offset: 44006},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1434, col: 28, offset: 44006},
										offset: 53,
									},
									&ruleRefExpr{
										pos:    position{line: 1434, col: 49, offset: 44027},
										offset: 242,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1434, col: 81, offset: 44059},
							label: "end",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1434, col: 85, offset: 44063},
								expr: &choiceExpr{
									pos: position{line: 1434, col: 86, offset: 44064},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 1434, col: 86, offset: 44064},
											offset: 53,
										},
										&ruleRefExpr{
											pos:    position{line: 1434, col: 107, offset: 44085},
											offset: 243,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1443, col: 1, offset: 44259},
			expr: &oneOrMoreExpr{
				pos: position{line: 1443, col: 23, offset: 44281},
				expr: &choiceExpr{
					pos: position{line: 1444, col: 5, offset: 44287},
					alternatives: []any{
						&oneOrMoreExpr{
							pos: position{line: 1444, col: 6, offset: 44288},
							expr: &charClassMatcher{
								pos:        position{line: 1444, col: 6, offset: 44288},
								val:        "[^<>{[\\]]",
								chars:      []rune{'<', '>', '{', '[', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1445, col: 7, offset: 44306},
							offset: 53,
						},
						&litMatcher{
							pos:        position{line: 1446, col: 7, offset: 44332},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceMacroStart",
			pos:  position{line: 1449, col: 1, offset: 44341},
			expr: &litMatcher{
				pos:        position{line: 1449, col: 28, offset: 44368},
				val:        "xref:",
				ignoreCase: false,
				want:       "\"xref:\"",
			},
		},
		{
			name: "CrossReferenceMacroLabelElement",
			pos:  position{line: 1451, col: 1, offset: 44377},
			expr: &choiceExpr{
				pos: position{line: 1451, col: 36, offset: 44412},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1451, col: 36, offset: 44412},
						val:        "\\]",
						ignoreCase: false,
						want:       "\"\\\\]\"",
					},
					&ruleRefExpr{
						pos:    position{line: 1451, col: 44, offset: 44420},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 1451, col: 60, offset: 44436},
						offset: 318,
					},
				},
			},
		},
		{
			name: "CrossReferenceMacroLabelContent",
			pos:  position{line: 1453, col: 1, offset: 44447},
			expr: &oneOrMoreExpr{
				pos: position{line: 1453, col: 35, offset: 44481},
				expr: &seqExpr{
					pos: position{line: 1453, col: 36, offset: 44482},
					exprs: []any{
						&notExpr{
							pos: position{line: 1453, col: 36, offset: 44482},
							expr: &ruleRefExpr{
								pos:    position{line: 1453, col: 37, offset: 44483},
								offset: 251,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1453, col: 65, offset: 44511},
							offset: 247,
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceMacroLabel",
			pos:  position{line: 1455, col: 1, offset: 44547},
			expr: &actionExpr{
				pos: position{line: 1455, col: 28, offset: 44574},
				run: (*parser).callonCrossReferenceMacroLabel1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 28, offset: 44574},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1455, col: 28, offset: 44574},
							offset: 250,
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 58, offset: 44604},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1455, col: 66, offset: 44612},
								expr: &ruleRefExpr{
									pos:    position{line: 1455, col: 67, offset: 44613},
									offset: 248,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1455, col: 101, offset: 44647},
							offset: 251,
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceMacroLabelStart",
			pos:  position{line: 1459, col: 1, offset: 44708},
			expr: &litMatcher{
				pos:        position{line: 1459, col: 33, offset: 44740},
				val:        "[",
				ignoreCase: false,
				want:       "\"[\"",
			},
		},
		{
			name: "CrossReferenceMacroLabelEnd",
			pos:  position{line: 1461, col: 1, offset: 44745},
			expr: &seqExpr{
				pos: position{line: 1461, col: 31, offset: 44775},
				exprs: []any{
					&notExpr{
						pos: position{line: 1461, col: 31, offset: 44775},
						expr: &litMatcher{
							pos:        position{line: 1461, col: 32, offset: 44776},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&litMatcher{
						pos:        position{line: 1461, col: 37, offset: 44781},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "CrossReferenceMacro",
			pos:  position{line: 1463, col: 1, offset: 44786},
			expr: &actionExpr{
				pos: position{line: 1463, col: 23, offset: 44808},
				run: (*parser).callonCrossReferenceMacro1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 23, offset: 44808},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1463, col: 23, offset: 44808},
							offset: 246,
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 48, offset: 44833},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 1463, col: 54, offset: 44839},
								offset: 165,
							},
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 60, offset: 44845},
							label: "label",
							expr: &ruleRefExpr{
								pos:    position{line: 1463, col: 67, offset: 44852},
								offset: 249,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1474, col: 1, offset: 45138},
			expr: &actionExpr{
				pos: position{line: 1474, col: 18, offset: 45155},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 18, offset: 45155},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1474, col: 18, offset: 45155},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1474, col: 28, offset: 45165},
								expr: &litMatcher{
									pos:        position{line: 1474, col: 28, offset: 45165},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 33, offset: 45170},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1474, col: 42, offset: 45179},
								expr: &ruleRefExpr{
									pos:    position{line: 1474, col: 42, offset: 45179},
									offset: 254,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 66, offset: 45203},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1474, col: 71, offset: 45208},
								expr: &ruleRefExpr{
									pos:    position{line: 1474, col: 72, offset: 45209},
									offset: 255,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 93, offset: 45230},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1474, col: 98, offset: 45235},
								expr: &ruleRefExpr{
									pos:    position{line: 1474, col: 99, offset: 45236},
									offset: 256,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1474, col: 120, offset: 45257},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1481, col: 1, offset: 45381},
			expr: &choiceExpr{
				pos: position{line: 1482, col: 5, offset: 45412},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1482, col: 5, offset: 45412},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1483, col: 7, offset: 45423},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1484, col: 8, offset: 45435},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1484, col: 8, offset: 45435},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1484, col: 12, offset: 45439},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1484, col: 21, offset: 45448},
									expr: &litMatcher{
										pos:        position{line: 1484, col: 21, offset: 45448},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1484, col: 26, offset: 45453},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1487, col: 1, offset: 45499},
			expr: &choiceExpr{
				pos: position{line: 1488, col: 5, offset: 45526},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1488, col: 5, offset: 45526},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1489, col: 7, offset: 45537},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1490, col: 8, offset: 45549},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1490, col: 8, offset: 45549},
								expr: &litMatcher{
									pos:        position{line: 1490, col: 8, offset: 45549},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1490, col: 13, offset: 45554},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1490, col: 18, offset: 45559},
									expr: &litMatcher{
										pos:        position{line: 1490, col: 18, offset: 45559},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1490, col: 23, offset: 45564},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1493, col: 1, offset: 45606},
			expr: &choiceExpr{
				pos: position{line: 1494, col: 5, offset: 45633},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1494, col: 5, offset: 45633},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1495, col: 7, offset: 45644},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1496, col: 8, offset: 45656},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1496, col: 8, offset: 45656},
								expr: &litMatcher{
									pos:        position{line: 1496, col: 8, offset: 45656},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1496, col: 13, offset: 45661},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1496, col: 18, offset: 45666},
									expr: &litMatcher{
										pos:        position{line: 1496, col: 18, offset: 45666},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1496, col: 23, offset: 45671},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1499, col: 1, offset: 45713},
			expr: &actionExpr{
				pos: position{line: 1499, col: 18, offset: 45730},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 18, offset: 45730},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1499, col: 18, offset: 45730},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1499, col: 28, offset: 45740},
								expr: &litMatcher{
									pos:        position{line: 1499, col: 28, offset: 45740},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 33, offset: 45745},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1499, col: 42, offset: 45754},
								expr: &ruleRefExpr{
									pos:    position{line: 1499, col: 42, offset: 45754},
									offset: 258,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 66, offset: 45778},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1499, col: 71, offset: 45783},
								expr: &ruleRefExpr{
									pos:    position{line: 1499, col: 72, offset: 45784},
									offset: 259,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 93, offset: 45805},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1499, col: 98, offset: 45810},
								expr: &ruleRefExpr{
									pos:    position{line: 1499, col: 99, offset: 45811},
									offset: 260,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1499, col: 120, offset: 45832},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1506, col: 1, offset: 45956},
			expr: &choiceExpr{
				pos: position{line: 1507, col: 5, offset: 45987},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1507, col: 5, offset: 45987},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1508, col: 7, offset: 45998},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1509, col: 8, offset: 46010},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1509, col: 8, offset: 46010},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1509, col: 12, offset: 46014},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1509, col: 21, offset: 46023},
									expr: &litMatcher{
										pos:        position{line: 1509, col: 21, offset: 46023},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1509, col: 26, offset: 46028},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1512, col: 1, offset: 46074},
			expr: &choiceExpr{
				pos: position{line: 1513, col: 5, offset: 46101},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1513, col: 5, offset: 46101},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1514, col: 7, offset: 46112},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1515, col: 8, offset: 46124},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1515, col: 8, offset: 46124},
								expr: &litMatcher{
									pos:        position{line: 1515, col: 8, offset: 46124},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1515, col: 13, offset: 46129},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1515, col: 18, offset: 46134},
									expr: &litMatcher{
										pos:        position{line: 1515, col: 18, offset: 46134},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1515, col: 23, offset: 46139},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1518, col: 1, offset: 46181},
			expr: &choiceExpr{
				pos: position{line: 1519, col: 5, offset: 46208},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1519, col: 5, offset: 46208},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1520, col: 7, offset: 46219},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1521, col: 8, offset: 46231},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1521, col: 8, offset: 46231},
								expr: &litMatcher{
									pos:        position{line: 1521, col: 8, offset: 46231},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1521, col: 13, offset: 46236},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1521, col: 18, offset: 46241},
									expr: &litMatcher{
										pos:        position{line: 1521, col: 18, offset: 46241},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1521, col: 23, offset: 46246},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1526, col: 1, offset: 46290},
			expr: &actionExpr{
				pos: position{line: 1526, col: 19, offset: 46308},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 19, offset: 46308},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1526, col: 19, offset: 46308},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1526, col: 27, offset: 46316},
								offset: 262,
							},
						},
						&labeledExpr{
							pos:   position{line: 1526, col: 47, offset: 46336},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1526, col: 54, offset: 46343},
								offset: 217,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1532, col: 1, offset: 46537},
			expr: &actionExpr{
				pos: position{line: 1532, col: 21, offset: 46557},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 21, offset: 46557},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1532, col: 21, offset: 46557},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1532, col: 29, offset: 46565},
								offset: 335,
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 40, offset: 46576},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1532, col: 48, offset: 46584},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1532, col: 48, offset: 46584},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1532, col: 48, offset: 46584},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1532, col: 48, offset: 46584},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1532, col: 57, offset: 46593},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1532, col: 58, offset: 46594},
															expr: &litMatcher{
																pos:        position{line: 1532, col: 58, offset: 46594},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1534, col: 4, offset: 46640},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1540, col: 3, offset: 46735},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1540, col: 3, offset: 46735},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1540, col: 3, offset: 46735},
													expr: &charClassMatcher{
														pos:        position{line: 1540, col: 3, offset: 46735},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1540, col: 10, offset: 46742},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1541, col: 3, offset: 46779},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1541, col: 3, offset: 46779},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1541, col: 3, offset: 46779},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1541, col: 9, offset: 46785},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1542, col: 3, offset: 46822},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1542, col: 3, offset: 46822},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1542, col: 3, offset: 46822},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1542, col: 9, offset: 46828},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1543, col: 3, offset: 46865},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1543, col: 3, offset: 46865},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1543, col: 3, offset: 46865},
													offset: 257,
												},
												&litMatcher{
													pos:        position{line: 1543, col: 18, offset: 46880},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1544, col: 3, offset: 46917},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1544, col: 3, offset: 46917},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1544, col: 3, offset: 46917},
													offset: 253,
												},
												&litMatcher{
													pos:        position{line: 1544, col: 18, offset: 46932},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1546, col: 1, offset: 46969},
							offset: 339,
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1554, col: 1, offset: 47060},
			expr: &actionExpr{
				pos: position{line: 1554, col: 21, offset: 47080},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 21, offset: 47080},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1554, col: 21, offset: 47080},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1554, col: 29, offset: 47088},
								offset: 264,
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 50, offset: 47109},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1554, col: 60, offset: 47119},
								expr: &ruleRefExpr{
									pos:    position{line: 1554, col: 61, offset: 47120},
									offset: 265,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 73, offset: 47132},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1554, col: 80, offset: 47139},
								offset: 217,
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1561, col: 1, offset: 47383},
			expr: &actionExpr{
				pos: position{line: 1561, col: 23, offset: 47405},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 23, offset: 47405},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1561, col: 23, offset: 47405},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1561, col: 31, offset: 47413},
								offset: 335,
							},
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 42, offset: 47424},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1561, col: 50, offset: 47432},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1561, col: 51, offset: 47433},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1561, col: 51, offset: 47433},
											expr: &litMatcher{
												pos:        position{line: 1561, col: 51, offset: 47433},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1561, col: 58, offset: 47440},
											expr: &litMatcher{
												pos:        position{line: 1561, col: 58, offset: 47440},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1563, col: 4, offset: 47482},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:    position{line: 1566, col: 1, offset: 47531},
							offset: 339,
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1572, col: 1, offset: 47616},
			expr: &actionExpr{
				pos: position{line: 1572, col: 13, offset: 47628},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 13, offset: 47628},
					exprs: []any{
						&andExpr{
							pos: position{line: 1572, col: 13, offset: 47628},
							expr: &litMatcher{
								pos:        position{line: 1572, col: 14, offset: 47629},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 1, offset: 47634},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1574, col: 7, offset: 47652},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1574, col: 7, offset: 47652},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1574, col: 7, offset: 47652},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1575, col: 7, offset: 47709},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1575, col: 7, offset: 47709},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1576, col: 7, offset: 47764},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1576, col: 7, offset: 47764},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1577, col: 7, offset: 47818},
							offset: 339,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1582, col: 1, offset: 47861},
			expr: &actionExpr{
				pos: position{line: 1582, col: 23, offset: 47883},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1582, col: 23, offset: 47883},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1582, col: 23, offset: 47883},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1582, col: 36, offset: 47896},
								expr: &ruleRefExpr{
									pos:    position{line: 1582, col: 37, offset: 47897},
									offset: 85,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 55, offset: 47915},
							label: "term",
							expr: &ruleRefExpr{
								pos:    position{line: 1582, col: 61, offset: 47921},
								offset: 267,
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 82, offset: 47942},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1582, col: 90, offset: 47950},
								offset: 268,
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 113, offset: 47973},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1582, col: 124, offset: 47984},
								expr: &choiceExpr{
									pos: position{line: 1582, col: 125, offset: 47985},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1582, col: 125, offset: 47985},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:    position{line: 1582, col: 125, offset: 47985},
												offset: 340,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1582, col: 180, offset: 48040},
											offset: 318,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 190, offset: 48050},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1582, col: 197, offset: 48057},
								offset: 269,
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1593, col: 1, offset: 48584},
			expr: &actionExpr{
				pos: position{line: 1593, col: 23, offset: 48606},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1593, col: 23, offset: 48606},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1593, col: 28, offset: 48611},
						expr: &seqExpr{
							pos: position{line: 1593, col: 29, offset: 48612},
							exprs: []any{
								&notExpr{
									pos: position{line: 1593, col: 29, offset: 48612},
									expr: &ruleRefExpr{
										pos:    position{line: 1593, col: 30, offset: 48613},
										offset: 268,
									},
								},
								&notExpr{
									pos: position{line: 1593, col: 52, offset: 48635},
									expr: &ruleRefExpr{
										pos:    position{line: 1593, col: 53, offset: 48636},
										offset: 331,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 1593, col: 63, offset: 48646},
									offset: 90,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1597, col: 1, offset: 48702},
			expr: &actionExpr{
				pos: position{line: 1597, col: 25, offset: 48726},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 25, offset: 48726},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1597, col: 25, offset: 48726},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 35, offset: 48736},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1597, col: 43, offset: 48744},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1597, col: 43, offset: 48744},
									expr: &choiceExpr{
										pos: position{line: 1597, col: 44, offset: 48745},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1597, col: 44, offset: 48745},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1597, col: 50, offset: 48751},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1599, col: 4, offset: 48793},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:    position{line: 1606, col: 1, offset: 48920},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1611, col: 1, offset: 48967},
			expr: &actionExpr{
				pos: position{line: 1611, col: 28, offset: 48994},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 28, offset: 48994},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1611, col: 28, offset: 48994},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1611, col: 34, offset: 49000},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1611, col: 34, offset: 49000},
										expr: &ruleRefExpr{
											pos:    position{line: 1611, col: 34, offset: 49000},
											offset: 90,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1611, col: 51, offset: 49017},
										offset: 2,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 65, offset: 49031},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1611, col: 80, offset: 49046},
								expr: &ruleRefExpr{
									pos:    position{line: 1611, col: 81, offset: 49047},
									offset: 222,
								},
							},
						},
						&andExpr{
							pos: position{line: 1611, col: 99, offset: 49065},
							expr: &ruleRefExpr{
								pos:    position{line: 1611, col: 100, offset: 49066},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1620, col: 1, offset: 49227},
			expr: &actionExpr{
				pos: position{line: 1620, col: 21, offset: 49247},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1620, col: 21, offset: 49247},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1620, col: 21, offset: 49247},
							offset: 271,
						},
						&notExpr{
							pos: position{line: 1620, col: 48, offset: 49274},
							expr: &litMatcher{
								pos:        position{line: 1620, col: 49, offset: 49275},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1620, col: 54, offset: 49280},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 1620, col: 63, offset: 49289},
								offset: 272,
							},
						},
						&andExpr{
							pos: position{line: 1620, col: 89, offset: 49315},
							expr: &ruleRefExpr{
								pos:    position{line: 1620, col: 90, offset: 49316},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1624, col: 1, offset: 49406},
			expr: &actionExpr{
				pos: position{line: 1624, col: 30, offset: 49435},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1624, col: 30, offset: 49435},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1628, col: 1, offset: 49480},
			expr: &actionExpr{
				pos: position{line: 1628, col: 28, offset: 49507},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1628, col: 28, offset: 49507},
					expr: &charClassMatcher{
						pos:        position{line: 1628, col: 28, offset: 49507},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1632, col: 1, offset: 49556},
			expr: &actionExpr{
				pos: position{line: 1633, col: 5, offset: 49579},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1633, col: 5, offset: 49579},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1633, col: 5, offset: 49579},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1633, col: 12, offset: 49586},
								offset: 274,
							},
						},
						&labeledExpr{
							pos:   position{line: 1634, col: 5, offset: 49613},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1634, col: 11, offset: 49619},
								expr: &ruleRefExpr{
									pos:    position{line: 1634, col: 12, offset: 49620},
									offset: 278,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1635, col: 5, offset: 49647},
							offset: 275,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1639, col: 1, offset: 49832},
			expr: &actionExpr{
				pos: position{line: 1639, col: 25, offset: 49856},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1639, col: 25, offset: 49856},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1639, col: 25, offset: 49856},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1639, col: 35, offset: 49866},
								offset: 277,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1639, col: 61, offset: 49892},
							offset: 331,
						},
						&andCodeExpr{
							pos: position{line: 1639, col: 72, offset: 49903},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1646, col: 1, offset: 50093},
			expr: &seqExpr{
				pos: position{line: 1646, col: 23, offset: 50115},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1646, col: 23, offset: 50115},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1646, col: 33, offset: 50125},
							offset: 277,
						},
					},
					&andExpr{
						pos: position{line: 1646, col: 59, offset: 50151},
						expr: &ruleRefExpr{
							pos:    position{line: 1646, col: 60, offset: 50152},
							offset: 331,
						},
					},
					&andCodeExpr{
						pos: position{line: 1646, col: 70, offset: 50162},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1655, col: 1, offset: 50448},
			expr: &actionExpr{
				pos: position{line: 1655, col: 34, offset: 50481},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1655, col: 34, offset: 50481},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1655, col: 34, offset: 50481},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1655, col: 50, offset: 50497},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1655, col: 50, offset: 50497},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1655, col: 57, offset: 50504},
										expr: &litMatcher{
											pos:        position{line: 1655, col: 57, offset: 50504},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1655, col: 63, offset: 50510},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1662, col: 1, offset: 50655},
			expr: &actionExpr{
				pos: position{line: 1662, col: 29, offset: 50683},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1662, col: 29, offset: 50683},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1662, col: 29, offset: 50683},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:    position{line: 1662, col: 45, offset: 50699},
								offset: 276,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1663, col: 5, offset: 50736},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1668, col: 1, offset: 50887},
			expr: &actionExpr{
				pos: position{line: 1668, col: 24, offset: 50910},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 25, offset: 50911},
					exprs: []any{
						&notExpr{
							pos: position{line: 1668, col: 25, offset: 50911},
							expr: &ruleRefExpr{
								pos:    position{line: 1668, col: 26, offset: 50912},
								offset: 277,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1668, col: 52, offset: 50938},
							offset: 326,
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 65, offset: 50951},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1668, col: 70, offset: 50956},
								offset: 334,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1668, col: 78, offset: 50964},
							offset: 331,
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1674, col: 1, offset: 51013},
			expr: &choiceExpr{
				pos: position{line: 1674, col: 11, offset: 51023},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1674, col: 11, offset: 51023},
						offset: 280,
					},
					&ruleRefExpr{
						pos:    position{line: 1674, col: 30, offset: 51042},
						offset: 281,
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1676, col: 1, offset: 51066},
			expr: &actionExpr{
				pos: position{line: 1676, col: 20, offset: 51085},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 20, offset: 51085},
					exprs: []any{
						&notExpr{
							pos: position{line: 1676, col: 20, offset: 51085},
							expr: &litMatcher{
								pos:        position{line: 1676, col: 21, offset: 51086},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1676, col: 26, offset: 51091},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 38, offset: 51103},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1676, col: 43, offset: 51108},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 62, offset: 51127},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1676, col: 75, offset: 51140},
								expr: &ruleRefExpr{
									pos:    position{line: 1676, col: 76, offset: 51141},
									offset: 282,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1676, col: 98, offset: 51163},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1680, col: 1, offset: 51264},
			expr: &actionExpr{
				pos: position{line: 1680, col: 26, offset: 51289},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1680, col: 26, offset: 51289},
					exprs: []any{
						&notExpr{
							pos: position{line: 1680, col: 26, offset: 51289},
							expr: &litMatcher{
								pos:        position{line: 1680, col: 27, offset: 51290},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1680, col: 32, offset: 51295},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1680, col: 45, offset: 51308},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1680, col: 50, offset: 51313},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1680, col: 69, offset: 51332},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1680, col: 82, offset: 51345},
								expr: &ruleRefExpr{
									pos:    position{line: 1680, col: 83, offset: 51346},
									offset: 282,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1680, col: 105, offset: 51368},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1684, col: 1, offset: 51470},
			expr: &actionExpr{
				pos: position{line: 1684, col: 23, offset: 51492},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1684, col: 23, offset: 51492},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1684, col: 23, offset: 51492},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1684, col: 27, offset: 51496},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:    position{line: 1684, col: 40, offset: 51509},
								offset: 283,
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1688, col: 1, offset: 51562},
			expr: &choiceExpr{
				pos: position{line: 1688, col: 23, offset: 51584},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1688, col: 23, offset: 51584},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:        position{line: 1688, col: 23, offset: 51584},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1691, col: 7, offset: 51640},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1691, col: 7, offset: 51640},
							expr: &charClassMatcher{
								pos:        position{line: 1691, col: 7, offset: 51640},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1698, col: 1, offset: 51706},
			expr: &actionExpr{
				pos: position{line: 1698, col: 21, offset: 51726},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1698, col: 21, offset: 51726},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1698, col: 21, offset: 51726},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1698, col: 32, offset: 51737},
								expr: &ruleRefExpr{
									pos:    position{line: 1698, col: 33, offset: 51738},
									offset: 97,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1698, col: 53, offset: 51758},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1698, col: 59, offset: 51764},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1698, col: 59, offset: 51764},
										offset: 285,
									},
									&ruleRefExpr{
										pos:    position{line: 1698, col: 85, offset: 51790},
										offset: 288,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1702, col: 1, offset: 51936},
			expr: &actionExpr{
				pos: position{line: 1702, col: 27, offset: 51962},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1702, col: 27, offset: 51962},
					exprs: []any{
						&notExpr{
							pos: position{line: 1702, col: 27, offset: 51962},
							expr: &ruleRefExpr{
								pos:    position{line: 1702, col: 28, offset: 51963},
								offset: 341,
							},
						},
						&litMatcher{
							pos:        position{line: 1702, col: 35, offset: 51970},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1702, col: 39, offset: 51974},
							expr: &notExpr{
								pos: position{line: 1702, col: 41, offset: 51976},
								expr: &litMatcher{
									pos:        position{line: 1702, col: 42, offset: 51977},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1702, col: 47, offset: 51982},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1702, col: 54, offset: 51989},
								offset: 286,
							},
						},
						&litMatcher{
							pos:        position{line: 1702, col: 82, offset: 52017},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1702, col: 86, offset: 52021},
							expr: &litMatcher{
								pos:        position{line: 1702, col: 87, offset: 52022},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1702, col: 91, offset: 52026},
							expr: &notExpr{
								pos: position{line: 1702, col: 93, offset: 52028},
								expr: &ruleRefExpr{
									pos:    position{line: 1702, col: 94, offset: 52029},
									offset: 324,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1706, col: 1, offset: 52074},
			expr: &actionExpr{
				pos: position{line: 1706, col: 30, offset: 52103},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1706, col: 30, offset: 52103},
					exprs: []any{
						&notExpr{
							pos: position{line: 1706, col: 30, offset: 52103},
							expr: &ruleRefExpr{
								pos:    position{line: 1706, col: 31, offset: 52104},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 33, offset: 52106},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1706, col: 39, offset: 52112},
								expr: &actionExpr{
									pos: position{line: 1706, col: 40, offset: 52113},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1706, col: 40, offset: 52113},
										exprs: []any{
											&notExpr{
												pos: position{line: 1706, col: 40, offset: 52113},
												expr: &ruleRefExpr{
													pos:    position{line: 1706, col: 41, offset: 52114},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 1706, col: 43, offset: 52116},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1706, col: 49, offset: 52122},
													expr: &ruleRefExpr{
														pos:    position{line: 1706, col: 50, offset: 52123},
														offset: 287,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1710, col: 1, offset: 52304},
			expr: &seqExpr{
				pos: position{line: 1710, col: 32, offset: 52335},
				exprs: []any{
					&notExpr{
						pos: position{line: 1710, col: 32, offset: 52335},
						expr: &seqExpr{
							pos: position{line: 1710, col: 34, offset: 52337},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1710, col: 34, offset: 52337},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&notExpr{
									pos: position{line: 1710, col: 38, offset: 52341},
									expr: &litMatcher{
										pos:        position{line: 1710, col: 39, offset: 52342},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1710, col: 44, offset: 52347},
						offset: 96,
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1712, col: 1, offset: 52369},
			expr: &actionExpr{
				pos: position{line: 1712, col: 27, offset: 52395},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1712, col: 27, offset: 52395},
					exprs: []any{
						&notExpr{
							pos: position{line: 1712, col: 27, offset: 52395},
							expr: &ruleRefExpr{
								pos:    position{line: 1712, col: 28, offset: 52396},
								offset: 342,
							},
						},
						&litMatcher{
							pos:        position{line: 1712, col: 41, offset: 52409},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 46, offset: 52414},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1712, col: 53, offset: 52421},
								offset: 289,
							},
						},
						&litMatcher{
							pos:        position{line: 1712, col: 81, offset: 52449},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1716, col: 1, offset: 52486},
			expr: &actionExpr{
				pos: position{line: 1716, col: 30, offset: 52515},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 30, offset: 52515},
					exprs: []any{
						&notExpr{
							pos: position{line: 1716, col: 30, offset: 52515},
							expr: &ruleRefExpr{
								pos:    position{line: 1716, col: 31, offset: 52516},
								offset: 340,
							},
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 33, offset: 52518},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1716, col: 39, offset: 52524},
								expr: &actionExpr{
									pos: position{line: 1716, col: 40, offset: 52525},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1716, col: 40, offset: 52525},
										exprs: []any{
											&notExpr{
												pos: position{line: 1716, col: 40, offset: 52525},
												expr: &ruleRefExpr{
													pos:    position{line: 1716, col: 41, offset: 52526},
													offset: 340,
												},
											},
											&labeledExpr{
												pos:   position{line: 1716, col: 43, offset: 52528},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1716, col: 49, offset: 52534},
													expr: &ruleRefExpr{
														pos:    position{line: 1716, col: 50, offset: 52535},
														offset: 290,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1720, col: 1, offset: 52728},
			expr: &seqExpr{
				pos: position{line: 1720, col: 32, offset: 52759},
				exprs: []any{
					&notExpr{
						pos: position{line: 1720, col: 32, offset: 52759},
						expr: &litMatcher{
							pos:        position{line: 1720, col: 34, offset: 52761},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1720, col: 40, offset: 52767},
						offset: 96,
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1723, col: 1, offset: 52790},
			expr: &litMatcher{
				pos:        position{line: 1723, col: 18, offset: 52807},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1725, col: 1, offset: 52819},
			expr: &actionExpr{
				pos: position{line: 1725, col: 9, offset: 52827},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1725, col: 9, offset: 52827},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1725, col: 9, offset: 52827},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 1725, col: 24, offset: 52842},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1725, col: 36, offset: 52854},
								offset: 299,
							},
						},
						&litMatcher{
							pos:        position{line: 1725, col: 59, offset: 52877},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1725, col: 64, offset: 52882},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 1725, col: 75, offset: 52893},
							expr: &ruleRefExpr{
								pos:    position{line: 1725, col: 76, offset: 52894},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "IfNDefStatement",
			pos:  position{line: 1730, col: 1, offset: 53014},
			expr: &litMatcher{
				pos:        position{line: 1730, col: 19, offset: 53032},
				val:        "ifndef::",
				ignoreCase: false,
				want:       "\"ifndef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1733, col: 1, offset: 53046},
			expr: &actionExpr{
				pos: position{line: 1733, col: 10, offset: 53055},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1733, col: 10, offset: 53055},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1733, col: 10, offset: 53055},
							offset: 293,
						},
						&labeledExpr{
							pos:   position{line: 1733, col: 26, offset: 53071},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1733, col: 38, offset: 53083},
								offset: 299,
							},
						},
						&litMatcher{
							pos:        position{line: 1733, col: 61, offset: 53106},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1733, col: 66, offset: 53111},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 1733, col: 77, offset: 53122},
							expr: &ruleRefExpr{
								pos:    position{line: 1733, col: 78, offset: 53123},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1738, col: 1, offset: 53245},
			expr: &actionExpr{
				pos: position{line: 1738, col: 15, offset: 53259},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1738, col: 15, offset: 53259},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1738, col: 15, offset: 53259},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 1738, col: 30, offset: 53274},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1738, col: 42, offset: 53286},
								offset: 299,
							},
						},
						&litMatcher{
							pos:        position{line: 1738, col: 65, offset: 53309},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1738, col: 69, offset: 53313},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1738, col: 78, offset: 53322},
								offset: 302,
							},
						},
						&litMatcher{
							pos:        position{line: 1738, col: 104, offset: 53348},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1738, col: 108, offset: 53352},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1743, col: 1, offset: 53530},
			expr: &actionExpr{
				pos: position{line: 1743, col: 16, offset: 53545},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1743, col: 16, offset: 53545},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1743, col: 16, offset: 53545},
							offset: 293,
						},
						&labeledExpr{
							pos:   position{line: 1743, col: 32, offset: 53561},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1743, col: 44, offset: 53573},
								offset: 299,
							},
						},
						&litMatcher{
							pos:        position{line: 1743, col: 67, offset: 53596},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1743, col: 71, offset: 53600},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1743, col: 80, offset: 53609},
								offset: 302,
							},
						},
						&litMatcher{
							pos:        position{line: 1743, col: 106, offset: 53635},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1743, col: 110, offset: 53639},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1748, col: 1, offset: 53819},
			expr: &litMatcher{
				pos:        position{line: 1748, col: 21, offset: 53839},
				val:        "endif::",
				ignoreCase: false,
				want:       "\"endif::\"",
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1750, col: 1, offset: 53851},
			expr: &actionExpr{
				pos: position{line: 1750, col: 12, offset: 53862},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1750, col: 12, offset: 53862},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1750, col: 12, offset: 53862},
							offset: 297,
						},
						&labeledExpr{
							pos:   position{line: 1750, col: 30, offset: 53880},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1750, col: 41, offset: 53891},
								expr: &ruleRefExpr{
									pos:    position{line: 1750, col: 42, offset: 53892},
									offset: 299,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1750, col: 66, offset: 53916},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1750, col: 72, offset: 53922},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 1750, col: 82, offset: 53932},
							expr: &ruleRefExpr{
								pos:    position{line: 1750, col: 83, offset: 53933},
								offset: 331,
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1760, col: 1, offset: 54220},
			expr: &choiceExpr{
				pos: position{line: 1760, col: 25, offset: 54244},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1760, col: 25, offset: 54244},
						offset: 300,
					},
					&ruleRefExpr{
						pos:    position{line: 1760, col: 52, offset: 54271},
						offset: 301,
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1762, col: 1, offset: 54297},
			expr: &actionExpr{
				pos: position{line: 1762, col: 28, offset: 54324},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1762, col: 28, offset: 54324},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1762, col: 34, offset: 54330},
						expr: &actionExpr{
							pos: position{line: 1763, col: 5, offset: 54336},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1763, col: 5, offset: 54336},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1763, col: 5, offset: 54336},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1763, col: 10, offset: 54341},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1763, col: 29, offset: 54360},
										offset: 335,
									},
									&zeroOrOneExpr{
										pos: position{line: 1763, col: 39, offset: 54370},
										expr: &litMatcher{
											pos:        position{line: 1763, col: 39, offset: 54370},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1763, col: 44, offset: 54375},
										offset: 335,
									},
									&andCodeExpr{
										pos: position{line: 1764, col: 5, offset: 54390},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1774, col: 1, offset: 54651},
			expr: &actionExpr{
				pos: position{line: 1774, col: 28, offset: 54678},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1774, col: 28, offset: 54678},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1774, col: 34, offset: 54684},
						expr: &actionExpr{
							pos: position{line: 1775, col: 5, offset: 54690},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1775, col: 5, offset: 54690},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1775, col: 5, offset: 54690},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1775, col: 10, offset: 54695},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1775, col: 29, offset: 54714},
										offset: 335,
									},
									&zeroOrOneExpr{
										pos: position{line: 1775, col: 39, offset: 54724},
										expr: &litMatcher{
											pos:        position{line: 1775, col: 39, offset: 54724},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1775, col: 44, offset: 54729},
										offset: 335,
									},
									&andCodeExpr{
										pos: position{line: 1776, col: 5, offset: 54744},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1786, col: 1, offset: 55005},
			expr: &seqExpr{
				pos: position{line: 1786, col: 28, offset: 55032},
				exprs: []any{
					&notExpr{
						pos: position{line: 1786, col: 28, offset: 55032},
						expr: &litMatcher{
							pos:        position{line: 1786, col: 29, offset: 55033},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1786, col: 33, offset: 55037},
						expr: &ruleRefExpr{
							pos:    position{line: 1786, col: 33, offset: 55037},
							offset: 90,
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1788, col: 1, offset: 55054},
			expr: &actionExpr{
				pos: position{line: 1788, col: 10, offset: 55063},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1788, col: 10, offset: 55063},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1788, col: 10, offset: 55063},
							offset: 304,
						},
						&litMatcher{
							pos:        position{line: 1788, col: 26, offset: 55079},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1788, col: 30, offset: 55083},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 1788, col: 40, offset: 55093},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1788, col: 46, offset: 55099},
								offset: 305,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1788, col: 59, offset: 55112},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 1788, col: 70, offset: 55123},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1788, col: 79, offset: 55132},
								offset: 306,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1788, col: 95, offset: 55148},
							offset: 335,
						},
						&labeledExpr{
							pos:   position{line: 1788, col: 105, offset: 55158},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1788, col: 112, offset: 55165},
								offset: 305,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1788, col: 125, offset: 55178},
							offset: 335,
						},
						&litMatcher{
							pos:        position{line: 1788, col: 135, offset: 55188},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1788, col: 139, offset: 55192},
							offset: 335,
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1792, col: 1, offset: 55347},
			expr: &litMatcher{
				pos:        position{line: 1792, col: 19, offset: 55365},
				val:        "ifeval::",
				ignoreCase: false,
				want:       "\"ifeval::\"",
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1794, col: 1, offset: 55378},
			expr: &actionExpr{
				pos: position{line: 1794, col: 15, offset: 55392},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1794, col: 15, offset: 55392},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1794, col: 20, offset: 55397},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 1794, col: 20, offset: 55397},
								offset: 38,
							},
							&ruleRefExpr{
								pos:    position{line: 1794, col: 48, offset: 55425},
								offset: 43,
							},
							&ruleRefExpr{
								pos:    position{line: 1794, col: 76, offset: 55453},
								offset: 47,
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1798, col: 1, offset: 55586},
			expr: &choiceExpr{
				pos: position{line: 1799, col: 7, offset: 55610},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1799, col: 8, offset: 55611},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1799, col: 8, offset: 55611},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1800, col: 8, offset: 55674},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1800, col: 8, offset: 55674},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1801, col: 8, offset: 55740},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1801, col: 8, offset: 55740},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1802, col: 8, offset: 55806},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1802, col: 8, offset: 55806},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1803, col: 8, offset: 55879},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1803, col: 8, offset: 55879},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1804, col: 8, offset: 55948},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1804, col: 8, offset: 55948},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "ConditionalStatement",
			pos:  position{line: 1806, col: 1, offset: 56018},
			expr: &choiceExpr{
				pos: position{line: 1806, col: 25, offset: 56042},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1806, col: 25, offset: 56042},
						offset: 291,
					},
					&ruleRefExpr{
						pos:    position{line: 1806, col: 42, offset: 56059},
						offset: 293,
					},
					&ruleRefExpr{
						pos:    position{line: 1806, col: 60, offset: 56077},
						offset: 304,
					},
					&ruleRefExpr{
						pos:    position{line: 1806, col: 78, offset: 56095},
						offset: 297,
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1809, col: 1, offset: 56116},
			expr: &actionExpr{
				pos: position{line: 1809, col: 20, offset: 56135},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1809, col: 21, offset: 56136},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1809, col: 21, offset: 56136},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1809, col: 27, offset: 56142},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1809, col: 33, offset: 56148},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1813, col: 1, offset: 56219},
			expr: &seqExpr{
				pos: position{line: 1813, col: 15, offset: 56233},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1813, col: 15, offset: 56233},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1813, col: 19, offset: 56237},
						expr: &notExpr{
							pos: position{line: 1813, col: 21, offset: 56239},
							expr: &litMatcher{
								pos:        position{line: 1813, col: 22, offset: 56240},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1815, col: 1, offset: 56246},
			expr: &choiceExpr{
				pos: position{line: 1815, col: 15, offset: 56260},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1815, col: 15, offset: 56260},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1815, col: 15, offset: 56260},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1815, col: 15, offset: 56260},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1815, col: 21, offset: 56266},
									expr: &charClassMatcher{
										pos:        position{line: 1815, col: 22, offset: 56267},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1817, col: 9, offset: 56325},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1817, col: 9, offset: 56325},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1817, col: 9, offset: 56325},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1817, col: 13, offset: 56329},
									expr: &charClassMatcher{
										pos:        position{line: 1817, col: 14, offset: 56330},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1822, col: 1, offset: 56393},
			expr: &actionExpr{
				pos: position{line: 1822, col: 15, offset: 56407},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1822, col: 17, offset: 56409},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 1822, col: 18, offset: 56410},
							val:        "[,;.?)/:!=\"'@-[\\]]",
							chars:      []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:     []rune{'@', '['},
							ignoreCase: false,
							inverted:   false,
						},
						&seqExpr{
							pos: position{line: 1822, col: 41, offset: 56433},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1822, col: 41, offset: 56433},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1822, col: 45, offset: 56437},
									expr: &litMatcher{
										pos:        position{line: 1822, col: 46, offset: 56438},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1826, col: 1, offset: 56505},
			expr: &actionExpr{
				pos: position{line: 1826, col: 13, offset: 56517},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1826, col: 13, offset: 56517},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1826, col: 13, offset: 56517},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1826, col: 17, offset: 56521},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 1826, col: 27, offset: 56531},
							expr: &ruleRefExpr{
								pos:    position{line: 1826, col: 29, offset: 56533},
								offset: 331,
							},
						},
						&andCodeExpr{
							pos: position{line: 1826, col: 40, offset: 56544},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1832, col: 1, offset: 56645},
			expr: &choiceExpr{
				pos: position{line: 1832, col: 16, offset: 56660},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1832, col: 16, offset: 56660},
						offset: 315,
					},
					&ruleRefExpr{
						pos:    position{line: 1832, col: 36, offset: 56680},
						offset: 314,
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1834, col: 1, offset: 56700},
			expr: &choiceExpr{
				pos: position{line: 1834, col: 22, offset: 56721},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1834, col: 22, offset: 56721},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&litMatcher{
						pos:        position{line: 1834, col: 30, offset: 56729},
						val:        "`\"",
						ignoreCase: false,
						want:       "\"`\\\"\"",
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1836, col: 1, offset: 56738},
			expr: &choiceExpr{
				pos: position{line: 1836, col: 22, offset: 56759},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1836, col: 22, offset: 56759},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&litMatcher{
						pos:        position{line: 1836, col: 29, offset: 56766},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1838, col: 1, offset: 56774},
			expr: &actionExpr{
				pos: position{line: 1838, col: 13, offset: 56786},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1838, col: 13, offset: 56786},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1838, col: 13, offset: 56786},
							offset: 328,
						},
						&ruleRefExpr{
							pos:    position{line: 1838, col: 29, offset: 56802},
							offset: 335,
						},
						&ruleRefExpr{
							pos:    position{line: 1838, col: 39, offset: 56812},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1842, col: 1, offset: 56902},
			expr: &seqExpr{
				pos: position{line: 1842, col: 15, offset: 56916},
				exprs: []any{
					&notExpr{
						pos: position{line: 1842, col: 15, offset: 56916},
						expr: &litMatcher{
							pos:        position{line: 1842, col: 16, offset: 56917},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1842, col: 21, offset: 56922},
						offset: 318,
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1844, col: 1, offset: 56931},
			expr: &actionExpr{
				pos: position{line: 1844, col: 11, offset: 56941},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1844, col: 12, offset: 56942},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1844, col: 12, offset: 56942},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1844, col: 19, offset: 56949},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1848, col: 1, offset: 57009},
			expr: &actionExpr{
				pos: position{line: 1848, col: 15, offset: 57023},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1848, col: 15, offset: 57023},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1848, col: 15, offset: 57023},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:    position{line: 1848, col: 26, offset: 57034},
								offset: 320,
							},
						},
						&litMatcher{
							pos:        position{line: 1848, col: 42, offset: 57050},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1852, col: 1, offset: 57086},
			expr: &actionExpr{
				pos: position{line: 1852, col: 20, offset: 57105},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1852, col: 20, offset: 57105},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1852, col: 21, offset: 57106},
							expr: &charClassMatcher{
								pos:        position{line: 1852, col: 21, offset: 57106},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1852, col: 29, offset: 57114},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1858, col: 1, offset: 57205},
			expr: &notExpr{
				pos: position{line: 1858, col: 14, offset: 57218},
				expr: &ruleRefExpr{
					pos:    position{line: 1858, col: 15, offset: 57219},
					offset: 318,
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1860, col: 1, offset: 57228},
			expr: &notExpr{
				pos: position{line: 1860, col: 12, offset: 57239},
				expr: &ruleRefExpr{
					pos:    position{line: 1860, col: 13, offset: 57240},
					offset: 340,
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1862, col: 1, offset: 57243},
			expr: &charClassMatcher{
				pos:        position{line: 1862, col: 9, offset: 57251},
				val:        "[\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1864, col: 1, offset: 57260},
			expr: &charClassMatcher{
				pos:        position{line: 1864, col: 16, offset: 57275},
				val:        "[\\p{L}\\p{N}]",
				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1866, col: 1, offset: 57289},
			expr: &notExpr{
				pos: position{line: 1866, col: 13, offset: 57301},
				expr: &anyMatcher{
					line: 1866, col: 14, offset: 57302,
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1868, col: 1, offset: 57306},
			expr: &andExpr{
				pos: position{line: 1868, col: 16, offset: 57321},
				expr: &anyMatcher{
					line: 1868, col: 18, offset: 57323,
				},
			},
		},
		{
			name: "BeginningOfFile",
			pos:  position{line: 1870, col: 1, offset: 57327},
			expr: &seqExpr{
				pos: position{line: 1870, col: 19, offset: 57345},
				exprs: []any{
					&andExpr{
						pos: position{line: 1870, col: 19, offset: 57345},
						expr: &anyMatcher{
							line: 1870, col: 21, offset: 57347,
						},
					},
					&andCodeExpr{
						pos: position{line: 1870, col: 24, offset: 57350},
						run: (*parser).callonBeginningOfFile4,
					},
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1876, col: 1, offset: 57465},
			expr: &notExpr{
				pos: position{line: 1876, col: 19, offset: 57483},
				expr: &ruleRefExpr{
					pos:    position{line: 1876, col: 20, offset: 57484},
					offset: 329,
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1878, col: 1, offset: 57501},
			expr: &seqExpr{
				pos: position{line: 1878, col: 19, offset: 57519},
				exprs: []any{
					&anyMatcher{
						line: 1878, col: 19, offset: 57519,
					},
					&andCodeExpr{
						pos: position{line: 1878, col: 21, offset: 57521},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1882, col: 1, offset: 57569},
			expr: &actionExpr{
				pos: position{line: 1882, col: 10, offset: 57578},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1882, col: 10, offset: 57578},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1882, col: 10, offset: 57578},
							offset: 335,
						},
						&andExpr{
							pos: position{line: 1882, col: 20, offset: 57588},
							expr: &notExpr{
								pos: position{line: 1882, col: 22, offset: 57590},
								expr: &ruleRefExpr{
									pos:    position{line: 1882, col: 23, offset: 57591},
									offset: 340,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1882, col: 26, offset: 57594},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1888, col: 1, offset: 57663},
			expr: &choiceExpr{
				pos: position{line: 1888, col: 13, offset: 57675},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1888, col: 13, offset: 57675},
						offset: 318,
					},
					&ruleRefExpr{
						pos:    position{line: 1888, col: 23, offset: 57685},
						offset: 325,
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1890, col: 1, offset: 57696},
			expr: &labeledExpr{
				pos:   position{line: 1890, col: 14, offset: 57709},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1890, col: 20, offset: 57715},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1890, col: 20, offset: 57715},
						expr: &ruleRefExpr{
							pos:    position{line: 1890, col: 20, offset: 57715},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1892, col: 1, offset: 57761},
			expr: &actionExpr{
				pos: position{line: 1892, col: 16, offset: 57776},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1892, col: 16, offset: 57776},
					expr: &ruleRefExpr{
						pos:    position{line: 1892, col: 16, offset: 57776},
						offset: 337,
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1896, col: 1, offset: 57838},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1896, col: 11, offset: 57848},
				expr: &charClassMatcher{
					pos:        position{line: 1896, col: 11, offset: 57848},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1898, col: 1, offset: 57859},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1898, col: 13, offset: 57871},
				expr: &charClassMatcher{
					pos:        position{line: 1898, col: 13, offset: 57871},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1900, col: 1, offset: 57880},
			expr: &actionExpr{
				pos: position{line: 1900, col: 21, offset: 57900},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1900, col: 22, offset: 57901},
					alternatives: []any{
						&anyMatcher{
							line: 1900, col: 22, offset: 57901,
						},
						&ruleRefExpr{
							pos:    position{line: 1900, col: 26, offset: 57905},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1904, col: 1, offset: 57954},
			expr: &charClassMatcher{
				pos:        position{line: 1904, col: 24, offset: 57977},
				val:        "[^\\r\\n]",
				chars:      []rune{'\r', '\n'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1906, col: 1, offset: 57987},
			expr: &charClassMatcher{
				pos:        position{line: 1906, col: 22, offset: 58008},
				val:        "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "__",
			pos:  position{line: 1908, col: 1, offset: 58051},
			expr: &actionExpr{
				pos: position{line: 1908, col: 6, offset: 58056},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1908, col: 6, offset: 58056},
					expr: &charClassMatcher{
						pos:        position{line: 1908, col: 6, offset: 58056},
						val:        "[ \\t]",
						chars:      []rune{' ', '\t'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1912, col: 1, offset: 58103},
			expr: &actionExpr{
				pos: position{line: 1912, col: 5, offset: 58107},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:        position{line: 1912, col: 5, offset: 58107},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1916, col: 1, offset: 58153},
			expr: &litMatcher{
				pos:        position{line: 1916, col: 10, offset: 58162},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1918, col: 1, offset: 58169},
			expr: &litMatcher{
				pos:        position{line: 1918, col: 16, offset: 58184},
				val:        "\\\\",
				ignoreCase: false,
				want:       "\"\\\\\\\\\"",
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Elements))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onAlchemyEscape1(start, value, lines any) (any, error) {
	return compose(c, asciidoc.NewAlchemyEscape(), setLines[*asciidoc.AlchemyEscape](cast[any, string](lines.([]any))), setElements[*asciidoc.AlchemyEscape](value))

}

func (p *parser) callonAlchemyEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscape1(stack["start"], stack["value"], stack["lines"])
}

func (c *current) onAlchemyEscapeLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonAlchemyEscapeLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscapeLine1(stack["line"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join(flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(flat(value.([]any))), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueCharacter2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueCharacter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueCharacter2()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(flat(value.([]any))), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueCharacter2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonDoubleQuoteAttributeValueCharacter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueCharacter2()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(asciidoc.Elements), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(id.(asciidoc.Elements), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAdmonition2() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition2()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onInlineBlock1(content, eol any) (any, error) {
	els := content.(asciidoc.Elements)
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock1(stack["content"], stack["eol"])
}

func (c *current) onInlineElements1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Elements)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Elements)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onIncludeParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonIncludeParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParse1(stack["content"])
}

func (c *current) onIncludeParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonIncludeParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseElement1(stack["element"])
}

func (c *current) onIncludeParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonIncludeParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseLine1(stack["content"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLinkMacro(url.(asciidoc.URL)), setAttributes[*asciidoc.LinkMacro](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onIncludedTableElements1(content any) (any, error) {
	table := c.globalStore["table"].(*asciidoc.Table)
	return parseTableRows(table, content.([]any))
}

func (p *parser) callonIncludedTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableElements1(stack["content"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onIncludedTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonIncludedTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableInlineIfDef1(ifdef, content, endif any) (any, error) {
	id, err := compose(c, ifdef.(*asciidoc.IfDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Elements{id}, content.(asciidoc.Elements)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfDef1(stack["ifdef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableInlineIfNDef1(ifndef, content, endif any) (any, error) {
	id, err := compose(c, ifndef.(*asciidoc.IfNDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Elements{id}, content.(asciidoc.Elements)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfNDef1(stack["ifndef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfEval1(ifeval any) (any, error) {
	return compose(c, ifeval.(*asciidoc.IfEval))
}

func (p *parser) callonTableIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfEval1(stack["ifeval"])
}

func (c *current) onTableInlineIfEval1(ifeval, content, endif any) (any, error) {
	id, err := compose(c, ifeval.(*asciidoc.IfEval))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Elements{id}, content.(asciidoc.Elements)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfEval1(stack["ifeval"], stack["content"], stack["endif"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonTableFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onIncludedTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonIncludedTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Elements)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Elements)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Elements{}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Elements
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Elements{populatePosition(c, asciidoc.NewEmptyLine(string(c.text)))}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return mergeStrings(flat(content.([]any))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onInlineTableCellSpaces1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonInlineTableCellSpaces1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellSpaces1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe(column, span.Column.Value)
	span.Row = asciidoc.Maybe(row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe(multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe(horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe(verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe(style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Elements)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Elements)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines.([]any)...)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuationMarker1(marker any) (any, error) {
	return marker, nil
}

func (p *parser) callonListContinuationMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationMarker1(stack["marker"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return append([]any{&asciidoc.NewLine{}}, element.([]any)...), nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onContinuationBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonContinuationBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuationBlockElement7(stack["element"])
}

func (c *current) onContinuationBlockElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonContinuationBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuationBlockElement1(stack["element"])
}

func (c *current) onContinuationBlockElements6(els any) (any, error) {
	return compose(c, asciidoc.NewParagraph(), setElements[*asciidoc.Paragraph](els.(asciidoc.Elements)))

}

func (p *parser) callonContinuationBlockElements6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuationBlockElements6(stack["els"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(asciidoc.Elements), asciidoc.CrossReferenceFormatNatural), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceInitialCharacter1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCrossReferenceInitialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceInitialCharacter1()
}

func (c *current) onCrossReferenceCharacters1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCrossReferenceCharacters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceCharacters1()
}

func (c *current) onCrossReferenceID1(start, end any) (any, error) {

	var id []any
	id = append(id, start)
	if end != nil {
		id = append(id, end.([]any)...)
	}
	return join(id), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1(stack["start"], stack["end"])
}

func (c *current) onCrossReferenceMacroLabel1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonCrossReferenceMacroLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceMacroLabel1(stack["content"])
}

func (c *current) onCrossReferenceMacro1(path, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(path.(asciidoc.Elements), asciidoc.CrossReferenceFormatMacro), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonCrossReferenceMacro1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceMacro1(stack["path"], stack["label"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Elements)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 10, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Elements)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 10, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Elements))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Elements)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Elements(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names, attr.union), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names, attr.union), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onBeginningOfFile4() (bool, error) {
	if c.pos.line == 0 && c.pos.col == 0 {
	}
	return c.pos.line == 0 && c.pos.col == 0, nil
}

func (p *parser) callonBeginningOfFile4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeginningOfFile4()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict

	parser                *parser                         // Alchemy patch: we keep a reference to the parent parser here, so inline code can access it
	delimitedBlockState   delimitedBlockState             // Alchemy patch: we keep track of levels of delimited blocks here
	tableColumnsAttribute *asciidoc.TableColumnsAttribute // Alchemy patch: we keep track of explicit table columns here to aid in allocating columns
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos position
	val string
	// Alchemy patch: we don't use this optimization, so don't allocate the array
	//basicLatinChars [128]bool
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore:         make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	offset position // Alchemy patch: we add an offset field to track element positions in the doc
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any // Alchemy patch: we lazily allocate this array, as it's infrequently populated

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
