// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 99},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 110},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 110},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 110},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 118},
								expr: &ruleRefExpr{
									pos:    position{line: 14, col: 21, offset: 119},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 14, col: 31, offset: 129},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 184},
			expr: &choiceExpr{
				pos: position{line: 18, col: 12, offset: 195},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 18, col: 12, offset: 195},
						offset: 2,
					},
					&ruleRefExpr{
						pos:    position{line: 18, col: 27, offset: 210},
						offset: 88,
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 21, col: 1, offset: 228},
			expr: &actionExpr{
				pos: position{line: 21, col: 16, offset: 243},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 21, col: 16, offset: 243},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 21, col: 16, offset: 243},
							offset: 321,
						},
						&labeledExpr{
							pos:   position{line: 21, col: 32, offset: 259},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 21, col: 41, offset: 268},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 21, col: 56, offset: 283},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 22, col: 1, offset: 293},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 28, col: 1, offset: 392},
			expr: &choiceExpr{
				pos: position{line: 29, col: 5, offset: 414},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 29, col: 5, offset: 414},
						offset: 15,
					},
					&ruleRefExpr{
						pos:    position{line: 30, col: 5, offset: 434},
						offset: 9,
					},
					&ruleRefExpr{
						pos:    position{line: 31, col: 5, offset: 455},
						offset: 5,
					},
					&ruleRefExpr{
						pos:    position{line: 32, col: 5, offset: 480},
						offset: 112,
					},
					&ruleRefExpr{
						pos:    position{line: 33, col: 5, offset: 492},
						offset: 4,
					},
					&ruleRefExpr{
						pos:    position{line: 34, col: 5, offset: 510},
						offset: 13,
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 37, col: 1, offset: 535},
			expr: &choiceExpr{
				pos: position{line: 38, col: 5, offset: 555},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 38, col: 5, offset: 555},
						offset: 266,
					},
					&ruleRefExpr{
						pos:    position{line: 39, col: 5, offset: 579},
						offset: 263,
					},
					&ruleRefExpr{
						pos:    position{line: 40, col: 5, offset: 603},
						offset: 22,
					},
					&ruleRefExpr{
						pos:    position{line: 41, col: 5, offset: 625},
						offset: 26,
					},
					&ruleRefExpr{
						pos:    position{line: 42, col: 5, offset: 646},
						offset: 285,
					},
					&ruleRefExpr{
						pos:    position{line: 43, col: 5, offset: 658},
						offset: 287,
					},
					&ruleRefExpr{
						pos:    position{line: 44, col: 5, offset: 672},
						offset: 296,
					},
					&ruleRefExpr{
						pos:    position{line: 45, col: 5, offset: 685},
						offset: 291,
					},
					&ruleRefExpr{
						pos:    position{line: 46, col: 5, offset: 700},
						offset: 101,
					},
					&ruleRefExpr{
						pos:    position{line: 47, col: 5, offset: 718},
						offset: 259,
					},
					&ruleRefExpr{
						pos:    position{line: 48, col: 5, offset: 744},
						offset: 311,
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 51, col: 1, offset: 756},
			expr: &actionExpr{
				pos: position{line: 51, col: 22, offset: 777},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 51, col: 22, offset: 777},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 51, col: 22, offset: 777},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 51, col: 33, offset: 788},
								expr: &ruleRefExpr{
									pos:    position{line: 51, col: 34, offset: 789},
									offset: 12,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 51, col: 59, offset: 814},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 52, col: 5, offset: 829},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 52, col: 5, offset: 829},
										offset: 169,
									},
									&ruleRefExpr{
										pos:    position{line: 53, col: 5, offset: 844},
										offset: 175,
									},
									&ruleRefExpr{
										pos:    position{line: 54, col: 5, offset: 855},
										offset: 187,
									},
									&ruleRefExpr{
										pos:    position{line: 55, col: 5, offset: 869},
										offset: 199,
									},
									&ruleRefExpr{
										pos:    position{line: 56, col: 5, offset: 883},
										offset: 211,
									},
									&ruleRefExpr{
										pos:    position{line: 57, col: 5, offset: 895},
										offset: 193,
									},
									&ruleRefExpr{
										pos:    position{line: 58, col: 5, offset: 909},
										offset: 229,
									},
									&ruleRefExpr{
										pos:    position{line: 59, col: 5, offset: 920},
										offset: 19,
									},
									&ruleRefExpr{
										pos:    position{line: 60, col: 5, offset: 935},
										offset: 221,
									},
									&ruleRefExpr{
										pos:    position{line: 61, col: 5, offset: 955},
										offset: 222,
									},
									&ruleRefExpr{
										pos:    position{line: 62, col: 5, offset: 971},
										offset: 97,
									},
									&ruleRefExpr{
										pos:    position{line: 63, col: 5, offset: 988},
										offset: 254,
									},
									&ruleRefExpr{
										pos:    position{line: 64, col: 5, offset: 1011},
										offset: 256,
									},
									&ruleRefExpr{
										pos:    position{line: 65, col: 5, offset: 1036},
										offset: 259,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 66, col: 9, offset: 1065},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 79, col: 1, offset: 1464},
			expr: &choiceExpr{
				pos: position{line: 79, col: 19, offset: 1482},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 79, col: 19, offset: 1482},
						offset: 85,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 37, offset: 1500},
						offset: 7,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 50, offset: 1513},
						offset: 27,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 63, offset: 1526},
						offset: 31,
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 81, col: 1, offset: 1547},
			expr: &actionExpr{
				pos: position{line: 81, col: 14, offset: 1560},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 81, col: 14, offset: 1560},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 81, col: 14, offset: 1560},
							offset: 321,
						},
						&litMatcher{
							pos:        position{line: 81, col: 30, offset: 1576},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 81, col: 34, offset: 1580},
							expr: &charClassMatcher{
								pos:        position{line: 81, col: 35, offset: 1581},
								val:        "[ .]",
								chars:      []rune{' ', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 40, offset: 1586},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 81, col: 49, offset: 1595},
								offset: 8,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 89, col: 1, offset: 1775},
			expr: &actionExpr{
				pos: position{line: 89, col: 21, offset: 1795},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 89, col: 21, offset: 1795},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 89, col: 29, offset: 1803},
						expr: &choiceExpr{
							pos: position{line: 89, col: 30, offset: 1804},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 89, col: 30, offset: 1804},
									offset: 90,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 48, offset: 1822},
									offset: 317,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 63, offset: 1837},
									offset: 333,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 67, offset: 1841},
									offset: 304,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 81, offset: 1855},
									offset: 53,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 102, offset: 1876},
									offset: 330,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 93, col: 1, offset: 1943},
			expr: &actionExpr{
				pos: position{line: 93, col: 18, offset: 1960},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 93, col: 18, offset: 1960},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 93, col: 18, offset: 1960},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 93, col: 28, offset: 1970},
							expr: &ruleRefExpr{
								pos:    position{line: 93, col: 29, offset: 1971},
								offset: 311,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 97, col: 1, offset: 2049},
			expr: &actionExpr{
				pos: position{line: 97, col: 25, offset: 2073},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 97, col: 25, offset: 2073},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 97, col: 25, offset: 2073},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 97, col: 37, offset: 2085},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 97, col: 54, offset: 2102},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 97, col: 64, offset: 2112},
							expr: &ruleRefExpr{
								pos:    position{line: 97, col: 65, offset: 2113},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 101, col: 1, offset: 2159},
			expr: &actionExpr{
				pos: position{line: 101, col: 35, offset: 2193},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 101, col: 35, offset: 2193},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 101, col: 35, offset: 2193},
							offset: 311,
						},
						&labeledExpr{
							pos:   position{line: 101, col: 43, offset: 2201},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 101, col: 55, offset: 2213},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 101, col: 72, offset: 2230},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 101, col: 82, offset: 2240},
							expr: &ruleRefExpr{
								pos:    position{line: 101, col: 83, offset: 2241},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 105, col: 1, offset: 2287},
			expr: &actionExpr{
				pos: position{line: 105, col: 26, offset: 2312},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 105, col: 26, offset: 2312},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 105, col: 26, offset: 2312},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 105, col: 37, offset: 2323},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 60, offset: 2346},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 81, offset: 2367},
								expr: &ruleRefExpr{
									pos:    position{line: 105, col: 82, offset: 2368},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 105, col: 116, offset: 2402},
							offset: 324,
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 126, offset: 2412},
							expr: &ruleRefExpr{
								pos:    position{line: 105, col: 126, offset: 2412},
								offset: 309,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 113, col: 1, offset: 2629},
			expr: &actionExpr{
				pos: position{line: 113, col: 24, offset: 2652},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 113, col: 24, offset: 2652},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 113, col: 24, offset: 2652},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 113, col: 35, offset: 2663},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 58, offset: 2686},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 79, offset: 2707},
								expr: &ruleRefExpr{
									pos:    position{line: 113, col: 80, offset: 2708},
									offset: 11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 125, col: 1, offset: 3050},
			expr: &seqExpr{
				pos: position{line: 126, col: 5, offset: 3073},
				exprs: []any{
					&notExpr{
						pos: position{line: 126, col: 5, offset: 3073},
						expr: &ruleRefExpr{
							pos:    position{line: 126, col: 6, offset: 3074},
							offset: 317,
						},
					},
					&choiceExpr{
						pos: position{line: 128, col: 9, offset: 3104},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 128, col: 9, offset: 3104},
								offset: 269,
							},
							&ruleRefExpr{
								pos:    position{line: 129, col: 11, offset: 3145},
								offset: 190,
							},
							&ruleRefExpr{
								pos:    position{line: 130, col: 11, offset: 3169},
								offset: 226,
							},
							&ruleRefExpr{
								pos:    position{line: 131, col: 11, offset: 3195},
								offset: 172,
							},
							&ruleRefExpr{
								pos:    position{line: 132, col: 11, offset: 3220},
								offset: 196,
							},
							&ruleRefExpr{
								pos:    position{line: 133, col: 11, offset: 3242},
								offset: 232,
							},
							&ruleRefExpr{
								pos:    position{line: 134, col: 11, offset: 3263},
								offset: 214,
							},
							&ruleRefExpr{
								pos:    position{line: 135, col: 11, offset: 3289},
								offset: 202,
							},
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscape",
			pos:  position{line: 139, col: 1, offset: 3314},
			expr: &actionExpr{
				pos: position{line: 140, col: 5, offset: 3334},
				run: (*parser).callonAlchemyEscape1,
				expr: &seqExpr{
					pos: position{line: 140, col: 5, offset: 3334},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 140, col: 5, offset: 3334},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 140, col: 12, offset: 3341},
								offset: 16,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 141, col: 5, offset: 3366},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 141, col: 15, offset: 3376},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 141, col: 22, offset: 3383},
								offset: 24,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 141, col: 46, offset: 3407},
							offset: 324,
						},
						&labeledExpr{
							pos:   position{line: 142, col: 5, offset: 3421},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 142, col: 11, offset: 3427},
								expr: &ruleRefExpr{
									pos:    position{line: 142, col: 12, offset: 3428},
									offset: 17,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 143, col: 5, offset: 3452},
							offset: 18,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeStart",
			pos:  position{line: 147, col: 1, offset: 3647},
			expr: &litMatcher{
				pos:        position{line: 147, col: 22, offset: 3668},
				val:        ":alchemy-escape:",
				ignoreCase: false,
				want:       "\":alchemy-escape:\"",
			},
		},
		{
			name: "AlchemyEscapeLine",
			pos:  position{line: 149, col: 1, offset: 3689},
			expr: &actionExpr{
				pos: position{line: 149, col: 21, offset: 3709},
				run: (*parser).callonAlchemyEscapeLine1,
				expr: &seqExpr{
					pos: position{line: 149, col: 22, offset: 3710},
					exprs: []any{
						&notExpr{
							pos: position{line: 149, col: 22, offset: 3710},
							expr: &ruleRefExpr{
								pos:    position{line: 149, col: 23, offset: 3711},
								offset: 18,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 40, offset: 3728},
							offset: 319,
						},
						&labeledExpr{
							pos:   position{line: 149, col: 53, offset: 3741},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 149, col: 58, offset: 3746},
								offset: 327,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 149, col: 66, offset: 3754},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeEnd",
			pos:  position{line: 153, col: 1, offset: 3801},
			expr: &choiceExpr{
				pos: position{line: 153, col: 20, offset: 3820},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 153, col: 20, offset: 3820},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 153, col: 20, offset: 3820},
								val:        ":!alchemy-escape:",
								ignoreCase: false,
								want:       "\":!alchemy-escape:\"",
							},
							&andExpr{
								pos: position{line: 153, col: 40, offset: 3840},
								expr: &ruleRefExpr{
									pos:    position{line: 153, col: 41, offset: 3841},
									offset: 324,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 153, col: 53, offset: 3853},
						offset: 318,
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 155, col: 1, offset: 3864},
			expr: &actionExpr{
				pos: position{line: 155, col: 11, offset: 3874},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 155, col: 11, offset: 3874},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 155, col: 11, offset: 3874},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 155, col: 18, offset: 3881},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 3881},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 3881},
										val:        "[=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 158, col: 5, offset: 3940},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:    position{line: 161, col: 5, offset: 3997},
							offset: 332,
						},
						&labeledExpr{
							pos:   position{line: 161, col: 8, offset: 4000},
							label: "title",
							expr: &ruleRefExpr{
								pos:    position{line: 161, col: 15, offset: 4007},
								offset: 20,
							},
						},
						&andExpr{
							pos: position{line: 161, col: 29, offset: 4021},
							expr: &ruleRefExpr{
								pos:    position{line: 161, col: 30, offset: 4022},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 165, col: 1, offset: 4137},
			expr: &oneOrMoreExpr{
				pos: position{line: 165, col: 16, offset: 4152},
				expr: &ruleRefExpr{
					pos:    position{line: 165, col: 17, offset: 4153},
					offset: 21,
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 167, col: 1, offset: 4174},
			expr: &seqExpr{
				pos: position{line: 167, col: 21, offset: 4194},
				exprs: []any{
					&notExpr{
						pos: position{line: 167, col: 21, offset: 4194},
						expr: &ruleRefExpr{
							pos:    position{line: 167, col: 22, offset: 4195},
							offset: 324,
						},
					},
					&choiceExpr{
						pos: position{line: 168, col: 5, offset: 4211},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 168, col: 5, offset: 4211},
								offset: 326,
							},
							&ruleRefExpr{
								pos:    position{line: 169, col: 7, offset: 4231},
								offset: 332,
							},
							&ruleRefExpr{
								pos:    position{line: 170, col: 7, offset: 4241},
								offset: 303,
							},
							&ruleRefExpr{
								pos:    position{line: 171, col: 7, offset: 4259},
								offset: 304,
							},
							&ruleRefExpr{
								pos:    position{line: 172, col: 7, offset: 4279},
								offset: 94,
							},
							&ruleRefExpr{
								pos:    position{line: 173, col: 7, offset: 4299},
								offset: 277,
							},
							&ruleRefExpr{
								pos:    position{line: 174, col: 7, offset: 4323},
								offset: 107,
							},
							&ruleRefExpr{
								pos:    position{line: 175, col: 7, offset: 4335},
								offset: 301,
							},
							&ruleRefExpr{
								pos:    position{line: 176, col: 7, offset: 4359},
								offset: 100,
							},
							&ruleRefExpr{
								pos:    position{line: 177, col: 7, offset: 4371},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 178, col: 7, offset: 4397},
								offset: 84,
							},
							&ruleRefExpr{
								pos:    position{line: 180, col: 7, offset: 4426},
								offset: 330,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 183, col: 1, offset: 4451},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 4468},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 4468},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 183, col: 18, offset: 4468},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 22, offset: 4472},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 183, col: 28, offset: 4478},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 48, offset: 4498},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:    position{line: 183, col: 52, offset: 4502},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 62, offset: 4512},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 183, col: 69, offset: 4519},
								offset: 24,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 187, col: 1, offset: 4663},
			expr: &actionExpr{
				pos: position{line: 187, col: 22, offset: 4684},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 187, col: 22, offset: 4684},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 187, col: 22, offset: 4684},
							offset: 331,
						},
						&zeroOrMoreExpr{
							pos: position{line: 187, col: 41, offset: 4703},
							expr: &choiceExpr{
								pos: position{line: 187, col: 42, offset: 4704},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 187, col: 42, offset: 4704},
										offset: 331,
									},
									&litMatcher{
										pos:        position{line: 187, col: 63, offset: 4725},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 191, col: 1, offset: 4771},
			expr: &actionExpr{
				pos: position{line: 191, col: 26, offset: 4796},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 191, col: 26, offset: 4796},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 191, col: 32, offset: 4802},
						expr: &ruleRefExpr{
							pos:    position{line: 191, col: 32, offset: 4802},
							offset: 25,
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 195, col: 1, offset: 4878},
			expr: &choiceExpr{
				pos: position{line: 195, col: 26, offset: 4903},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 195, col: 26, offset: 4903},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 195, col: 26, offset: 4903},
								offset: 305,
							},
							&ruleRefExpr{
								pos:    position{line: 195, col: 36, offset: 4913},
								offset: 324,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 195, col: 48, offset: 4925},
						offset: 330,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 197, col: 1, offset: 4949},
			expr: &choiceExpr{
				pos: position{line: 197, col: 18, offset: 4966},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 197, col: 18, offset: 4966},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 197, col: 18, offset: 4966},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 197, col: 18, offset: 4966},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 197, col: 23, offset: 4971},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 197, col: 29, offset: 4977},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 197, col: 49, offset: 4997},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:    position{line: 197, col: 53, offset: 5001},
									offset: 328,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 199, col: 5, offset: 5083},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 199, col: 5, offset: 5083},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 199, col: 5, offset: 5083},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 9, offset: 5087},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 199, col: 15, offset: 5093},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 35, offset: 5113},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:    position{line: 199, col: 40, offset: 5118},
									offset: 328,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 204, col: 1, offset: 5278},
			expr: &actionExpr{
				pos: position{line: 204, col: 14, offset: 5291},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 204, col: 14, offset: 5291},
					exprs: []any{
						&notExpr{
							pos: position{line: 204, col: 14, offset: 5291},
							expr: &litMatcher{
								pos:        position{line: 204, col: 15, offset: 5292},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 204, col: 20, offset: 5297},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 204, col: 24, offset: 5301},
							expr: &litMatcher{
								pos:        position{line: 204, col: 25, offset: 5302},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 29, offset: 5306},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 204, col: 41, offset: 5318},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 204, col: 56, offset: 5333},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 209, col: 1, offset: 5375},
			expr: &actionExpr{
				pos: position{line: 209, col: 17, offset: 5391},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 209, col: 17, offset: 5391},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 209, col: 28, offset: 5402},
						expr: &ruleRefExpr{
							pos:    position{line: 209, col: 29, offset: 5403},
							offset: 29,
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 213, col: 1, offset: 5488},
			expr: &actionExpr{
				pos: position{line: 213, col: 21, offset: 5508},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 213, col: 21, offset: 5508},
					exprs: []any{
						&notExpr{
							pos: position{line: 213, col: 21, offset: 5508},
							expr: &litMatcher{
								pos:        position{line: 213, col: 22, offset: 5509},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 213, col: 26, offset: 5513},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 36, offset: 5523},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 213, col: 47, offset: 5534},
								offset: 30,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 213, col: 58, offset: 5545},
							offset: 328,
						},
						&zeroOrOneExpr{
							pos: position{line: 213, col: 68, offset: 5555},
							expr: &litMatcher{
								pos:        position{line: 213, col: 68, offset: 5555},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 217, col: 1, offset: 5591},
			expr: &actionExpr{
				pos: position{line: 217, col: 13, offset: 5603},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 217, col: 13, offset: 5603},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 217, col: 13, offset: 5603},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 217, col: 18, offset: 5608},
								expr: &actionExpr{
									pos: position{line: 217, col: 20, offset: 5610},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 217, col: 21, offset: 5611},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 217, col: 21, offset: 5611},
												label: "name",
												expr: &ruleRefExpr{
													pos:    position{line: 217, col: 27, offset: 5617},
													offset: 52,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 217, col: 47, offset: 5637},
												offset: 328,
											},
											&litMatcher{
												pos:        position{line: 217, col: 57, offset: 5647},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:    position{line: 217, col: 61, offset: 5651},
												offset: 328,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 217, col: 95, offset: 5685},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 217, col: 102, offset: 5692},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 217, col: 102, offset: 5692},
										offset: 38,
									},
									&ruleRefExpr{
										pos:    position{line: 217, col: 130, offset: 5720},
										offset: 43,
									},
									&ruleRefExpr{
										pos:    position{line: 217, col: 158, offset: 5748},
										offset: 47,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 224, col: 1, offset: 6004},
			expr: &actionExpr{
				pos: position{line: 224, col: 23, offset: 6026},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 224, col: 23, offset: 6026},
					exprs: []any{
						&notExpr{
							pos: position{line: 224, col: 23, offset: 6026},
							expr: &litMatcher{
								pos:        position{line: 224, col: 24, offset: 6027},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 29, offset: 6032},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 224, col: 33, offset: 6036},
							expr: &litMatcher{
								pos:        position{line: 224, col: 34, offset: 6037},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 224, col: 38, offset: 6041},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 224, col: 49, offset: 6052},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 69, offset: 6072},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 228, col: 1, offset: 6112},
			expr: &actionExpr{
				pos: position{line: 228, col: 22, offset: 6133},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 228, col: 22, offset: 6133},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 228, col: 22, offset: 6133},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 228, col: 28, offset: 6139},
								expr: &ruleRefExpr{
									pos:    position{line: 228, col: 29, offset: 6140},
									offset: 37,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 55, offset: 6166},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 228, col: 62, offset: 6173},
								expr: &choiceExpr{
									pos: position{line: 228, col: 63, offset: 6174},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 228, col: 63, offset: 6174},
											offset: 34,
										},
										&ruleRefExpr{
											pos:    position{line: 228, col: 77, offset: 6188},
											offset: 35,
										},
										&ruleRefExpr{
											pos:    position{line: 228, col: 93, offset: 6204},
											offset: 36,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 232, col: 1, offset: 6292},
			expr: &actionExpr{
				pos: position{line: 232, col: 18, offset: 6309},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 232, col: 18, offset: 6309},
					label: "value",
					expr: &ruleRefExpr{
						pos:    position{line: 232, col: 24, offset: 6315},
						offset: 37,
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 236, col: 1, offset: 6414},
			expr: &actionExpr{
				pos: position{line: 236, col: 15, offset: 6428},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 236, col: 15, offset: 6428},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 236, col: 15, offset: 6428},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 236, col: 19, offset: 6432},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 236, col: 25, offset: 6438},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 240, col: 1, offset: 6537},
			expr: &actionExpr{
				pos: position{line: 240, col: 17, offset: 6553},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 240, col: 17, offset: 6553},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 240, col: 17, offset: 6553},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 21, offset: 6557},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 240, col: 27, offset: 6563},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 244, col: 1, offset: 6664},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 6682},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 6682},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 6682},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 6686},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 244, col: 29, offset: 6692},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 248, col: 1, offset: 6795},
			expr: &choiceExpr{
				pos: position{line: 248, col: 28, offset: 6822},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 248, col: 28, offset: 6822},
						exprs: []any{
							&notExpr{
								pos: position{line: 248, col: 28, offset: 6822},
								expr: &litMatcher{
									pos:        position{line: 248, col: 29, offset: 6823},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
							&notExpr{
								pos: position{line: 248, col: 33, offset: 6827},
								expr: &litMatcher{
									pos:        position{line: 248, col: 34, offset: 6828},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
							},
							&notExpr{
								pos: position{line: 248, col: 38, offset: 6832},
								expr: &litMatcher{
									pos:        position{line: 248, col: 39, offset: 6833},
									val:        "%",
									ignoreCase: false,
									want:       "\"%\"",
								},
							},
							&ruleRefExpr{
								pos:    position{line: 248, col: 43, offset: 6837},
								offset: 38,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 248, col: 71, offset: 6865},
						offset: 43,
					},
					&ruleRefExpr{
						pos:    position{line: 248, col: 99, offset: 6893},
						offset: 47,
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 250, col: 1, offset: 6915},
			expr: &actionExpr{
				pos: position{line: 250, col: 29, offset: 6943},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 250, col: 29, offset: 6943},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 250, col: 29, offset: 6943},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 33, offset: 6947},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 250, col: 39, offset: 6953},
								expr: &ruleRefExpr{
									pos:    position{line: 250, col: 40, offset: 6954},
									offset: 39,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 250, col: 76, offset: 6990},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElements",
			pos:  position{line: 254, col: 1, offset: 7099},
			expr: &oneOrMoreExpr{
				pos: position{line: 254, col: 37, offset: 7135},
				expr: &choiceExpr{
					pos: position{line: 254, col: 38, offset: 7136},
					alternatives: []any{
						&ruleRefExpr{
							pos:    position{line: 254, col: 38, offset: 7136},
							offset: 53,
						},
						&ruleRefExpr{
							pos:    position{line: 254, col: 59, offset: 7157},
							offset: 40,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 256, col: 1, offset: 7193},
			expr: &seqExpr{
				pos: position{line: 256, col: 37, offset: 7229},
				exprs: []any{
					&notExpr{
						pos: position{line: 256, col: 37, offset: 7229},
						expr: &ruleRefExpr{
							pos:    position{line: 256, col: 38, offset: 7230},
							offset: 53,
						},
					},
					&ruleRefExpr{
						pos:    position{line: 256, col: 57, offset: 7249},
						offset: 41,
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueCharacter",
			pos:  position{line: 258, col: 1, offset: 7286},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 7329},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 259, col: 6, offset: 7330},
						run: (*parser).callonSingleQuoteAttributeValueCharacter2,
						expr: &litMatcher{
							pos:        position{line: 259, col: 6, offset: 7330},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 260, col: 5, offset: 7384},
						offset: 317,
					},
					&ruleRefExpr{
						pos:    position{line: 261, col: 5, offset: 7404},
						offset: 306,
					},
					&charClassMatcher{
						pos:        position{line: 262, col: 5, offset: 7423},
						val:        "[^\\r\\n\\\\' ]",
						chars:      []rune{'\r', '\n', '\\', '\'', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElements",
			pos:  position{line: 265, col: 1, offset: 7438},
			expr: &choiceExpr{
				pos: position{line: 265, col: 38, offset: 7475},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 265, col: 38, offset: 7475},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 265, col: 59, offset: 7496},
						offset: 45,
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 267, col: 1, offset: 7531},
			expr: &actionExpr{
				pos: position{line: 267, col: 29, offset: 7559},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 267, col: 29, offset: 7559},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 267, col: 29, offset: 7559},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 267, col: 34, offset: 7564},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 40, offset: 7570},
								expr: &ruleRefExpr{
									pos:    position{line: 267, col: 41, offset: 7571},
									offset: 44,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 267, col: 77, offset: 7607},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElements",
			pos:  position{line: 271, col: 1, offset: 7717},
			expr: &oneOrMoreExpr{
				pos: position{line: 271, col: 37, offset: 7753},
				expr: &choiceExpr{
					pos: position{line: 271, col: 38, offset: 7754},
					alternatives: []any{
						&ruleRefExpr{
							pos:    position{line: 271, col: 38, offset: 7754},
							offset: 53,
						},
						&ruleRefExpr{
							pos:    position{line: 271, col: 59, offset: 7775},
							offset: 45,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 273, col: 1, offset: 7811},
			expr: &seqExpr{
				pos: position{line: 273, col: 37, offset: 7847},
				exprs: []any{
					&notExpr{
						pos: position{line: 273, col: 37, offset: 7847},
						expr: &ruleRefExpr{
							pos:    position{line: 273, col: 38, offset: 7848},
							offset: 53,
						},
					},
					&ruleRefExpr{
						pos:    position{line: 273, col: 57, offset: 7867},
						offset: 46,
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueCharacter",
			pos:  position{line: 275, col: 1, offset: 7904},
			expr: &choiceExpr{
				pos: position{line: 276, col: 5, offset: 7947},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 276, col: 6, offset: 7948},
						run: (*parser).callonDoubleQuoteAttributeValueCharacter2,
						expr: &litMatcher{
							pos:        position{line: 276, col: 6, offset: 7948},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 277, col: 5, offset: 8003},
						offset: 317,
					},
					&ruleRefExpr{
						pos:    position{line: 278, col: 5, offset: 8023},
						offset: 306,
					},
					&charClassMatcher{
						pos:        position{line: 279, col: 5, offset: 8042},
						val:        "[^\\r\\n\\\\\" ]",
						chars:      []rune{'\r', '\n', '\\', '"', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 282, col: 1, offset: 8057},
			expr: &actionExpr{
				pos: position{line: 282, col: 23, offset: 8079},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 282, col: 23, offset: 8079},
					exprs: []any{
						&notExpr{
							pos: position{line: 282, col: 23, offset: 8079},
							expr: &ruleRefExpr{
								pos:    position{line: 282, col: 24, offset: 8080},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 26, offset: 8082},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 282, col: 33, offset: 8089},
								offset: 48,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValueElements",
			pos:  position{line: 286, col: 1, offset: 8192},
			expr: &oneOrMoreExpr{
				pos: position{line: 286, col: 31, offset: 8222},
				expr: &choiceExpr{
					pos: position{line: 286, col: 32, offset: 8223},
					alternatives: []any{
						&ruleRefExpr{
							pos:    position{line: 286, col: 32, offset: 8223},
							offset: 53,
						},
						&ruleRefExpr{
							pos:    position{line: 286, col: 53, offset: 8244},
							offset: 49,
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValueElement",
			pos:  position{line: 288, col: 1, offset: 8274},
			expr: &seqExpr{
				pos: position{line: 288, col: 31, offset: 8304},
				exprs: []any{
					&notExpr{
						pos: position{line: 288, col: 31, offset: 8304},
						expr: &ruleRefExpr{
							pos:    position{line: 288, col: 32, offset: 8305},
							offset: 53,
						},
					},
					&ruleRefExpr{
						pos:    position{line: 288, col: 51, offset: 8324},
						offset: 50,
					},
				},
			},
		},
		{
			name: "NakedAttributeValueCharacter",
			pos:  position{line: 290, col: 1, offset: 8355},
			expr: &choiceExpr{
				pos: position{line: 291, col: 5, offset: 8392},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 291, col: 5, offset: 8392},
						offset: 333,
					},
					&charClassMatcher{
						pos:        position{line: 292, col: 5, offset: 8401},
						val:        "[^=\\], ]",
						chars:      []rune{'=', ']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 295, col: 1, offset: 8413},
			expr: &actionExpr{
				pos: position{line: 295, col: 20, offset: 8432},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 295, col: 20, offset: 8432},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 295, col: 20, offset: 8432},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 295, col: 24, offset: 8436},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 295, col: 36, offset: 8448},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 295, col: 51, offset: 8463},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 299, col: 1, offset: 8503},
			expr: &actionExpr{
				pos: position{line: 299, col: 22, offset: 8524},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 299, col: 22, offset: 8524},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 299, col: 22, offset: 8524},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 35, offset: 8537},
							expr: &charClassMatcher{
								pos:        position{line: 299, col: 35, offset: 8537},
								val:        "[A-Za-z0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 303, col: 1, offset: 8592},
			expr: &choiceExpr{
				pos: position{line: 303, col: 22, offset: 8613},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 303, col: 22, offset: 8613},
						offset: 54,
					},
					&ruleRefExpr{
						pos:    position{line: 303, col: 48, offset: 8639},
						offset: 272,
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 305, col: 1, offset: 8648},
			expr: &actionExpr{
				pos: position{line: 305, col: 27, offset: 8674},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 305, col: 27, offset: 8674},
					exprs: []any{
						&notExpr{
							pos: position{line: 305, col: 27, offset: 8674},
							expr: &litMatcher{
								pos:        position{line: 305, col: 28, offset: 8675},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 33, offset: 8680},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 305, col: 37, offset: 8684},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 305, col: 42, offset: 8689},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 61, offset: 8708},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 313, col: 1, offset: 8804},
			expr: &choiceExpr{
				pos: position{line: 313, col: 13, offset: 8816},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 313, col: 13, offset: 8816},
						offset: 56,
					},
					&ruleRefExpr{
						pos:    position{line: 313, col: 30, offset: 8833},
						offset: 59,
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 315, col: 1, offset: 8850},
			expr: &actionExpr{
				pos: position{line: 315, col: 18, offset: 8867},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 315, col: 18, offset: 8867},
					exprs: []any{
						&notExpr{
							pos: position{line: 315, col: 18, offset: 8867},
							expr: &ruleRefExpr{
								pos:    position{line: 315, col: 19, offset: 8868},
								offset: 334,
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 26, offset: 8875},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 315, col: 30, offset: 8879},
							expr: &notExpr{
								pos: position{line: 315, col: 32, offset: 8881},
								expr: &litMatcher{
									pos:        position{line: 315, col: 33, offset: 8882},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 315, col: 38, offset: 8887},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 315, col: 45, offset: 8894},
								offset: 57,
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 66, offset: 8915},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 315, col: 70, offset: 8919},
							expr: &litMatcher{
								pos:        position{line: 315, col: 71, offset: 8920},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 315, col: 75, offset: 8924},
							expr: &notExpr{
								pos: position{line: 315, col: 77, offset: 8926},
								expr: &ruleRefExpr{
									pos:    position{line: 315, col: 78, offset: 8927},
									offset: 317,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 319, col: 1, offset: 8972},
			expr: &actionExpr{
				pos: position{line: 319, col: 23, offset: 8994},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 319, col: 23, offset: 8994},
					exprs: []any{
						&notExpr{
							pos: position{line: 319, col: 23, offset: 8994},
							expr: &ruleRefExpr{
								pos:    position{line: 319, col: 24, offset: 8995},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 319, col: 26, offset: 8997},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 319, col: 32, offset: 9003},
								expr: &actionExpr{
									pos: position{line: 319, col: 33, offset: 9004},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 319, col: 33, offset: 9004},
										exprs: []any{
											&notExpr{
												pos: position{line: 319, col: 33, offset: 9004},
												expr: &ruleRefExpr{
													pos:    position{line: 319, col: 34, offset: 9005},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 319, col: 36, offset: 9007},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 319, col: 42, offset: 9013},
													expr: &ruleRefExpr{
														pos:    position{line: 319, col: 43, offset: 9014},
														offset: 58,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 323, col: 1, offset: 9162},
			expr: &seqExpr{
				pos: position{line: 323, col: 25, offset: 9186},
				exprs: []any{
					&notExpr{
						pos: position{line: 323, col: 25, offset: 9186},
						expr: &seqExpr{
							pos: position{line: 323, col: 27, offset: 9188},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 323, col: 27, offset: 9188},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 323, col: 31, offset: 9192},
									expr: &litMatcher{
										pos:        position{line: 323, col: 32, offset: 9193},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 323, col: 37, offset: 9198},
						offset: 95,
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 325, col: 1, offset: 9220},
			expr: &actionExpr{
				pos: position{line: 325, col: 18, offset: 9237},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 325, col: 18, offset: 9237},
					exprs: []any{
						&notExpr{
							pos: position{line: 325, col: 18, offset: 9237},
							expr: &ruleRefExpr{
								pos:    position{line: 325, col: 19, offset: 9238},
								offset: 335,
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 32, offset: 9251},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 37, offset: 9256},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 325, col: 44, offset: 9263},
								offset: 60,
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 65, offset: 9284},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 329, col: 1, offset: 9321},
			expr: &actionExpr{
				pos: position{line: 329, col: 23, offset: 9343},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 329, col: 23, offset: 9343},
					exprs: []any{
						&notExpr{
							pos: position{line: 329, col: 23, offset: 9343},
							expr: &ruleRefExpr{
								pos:    position{line: 329, col: 24, offset: 9344},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 26, offset: 9346},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 329, col: 32, offset: 9352},
								expr: &actionExpr{
									pos: position{line: 329, col: 33, offset: 9353},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 329, col: 33, offset: 9353},
										exprs: []any{
											&notExpr{
												pos: position{line: 329, col: 33, offset: 9353},
												expr: &ruleRefExpr{
													pos:    position{line: 329, col: 34, offset: 9354},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 329, col: 36, offset: 9356},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 329, col: 42, offset: 9362},
													expr: &ruleRefExpr{
														pos:    position{line: 329, col: 43, offset: 9363},
														offset: 61,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 333, col: 1, offset: 9523},
			expr: &seqExpr{
				pos: position{line: 333, col: 25, offset: 9547},
				exprs: []any{
					&notExpr{
						pos: position{line: 333, col: 25, offset: 9547},
						expr: &litMatcher{
							pos:        position{line: 333, col: 27, offset: 9549},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 333, col: 33, offset: 9555},
						offset: 95,
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 336, col: 1, offset: 9578},
			expr: &choiceExpr{
				pos: position{line: 336, col: 15, offset: 9592},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 336, col: 15, offset: 9592},
						offset: 63,
					},
					&ruleRefExpr{
						pos:    position{line: 336, col: 34, offset: 9611},
						offset: 66,
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 338, col: 1, offset: 9630},
			expr: &actionExpr{
				pos: position{line: 338, col: 20, offset: 9649},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 338, col: 20, offset: 9649},
					exprs: []any{
						&notExpr{
							pos: position{line: 338, col: 20, offset: 9649},
							expr: &ruleRefExpr{
								pos:    position{line: 338, col: 21, offset: 9650},
								offset: 334,
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 28, offset: 9657},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 338, col: 32, offset: 9661},
							expr: &notExpr{
								pos: position{line: 338, col: 34, offset: 9663},
								expr: &litMatcher{
									pos:        position{line: 338, col: 35, offset: 9664},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 40, offset: 9669},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 338, col: 47, offset: 9676},
								offset: 64,
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 70, offset: 9699},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 338, col: 74, offset: 9703},
							expr: &litMatcher{
								pos:        position{line: 338, col: 75, offset: 9704},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 338, col: 79, offset: 9708},
							expr: &notExpr{
								pos: position{line: 338, col: 81, offset: 9710},
								expr: &ruleRefExpr{
									pos:    position{line: 338, col: 82, offset: 9711},
									offset: 317,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 342, col: 1, offset: 9756},
			expr: &actionExpr{
				pos: position{line: 342, col: 25, offset: 9780},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 342, col: 25, offset: 9780},
					exprs: []any{
						&notExpr{
							pos: position{line: 342, col: 25, offset: 9780},
							expr: &ruleRefExpr{
								pos:    position{line: 342, col: 26, offset: 9781},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 28, offset: 9783},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 342, col: 34, offset: 9789},
								expr: &actionExpr{
									pos: position{line: 342, col: 35, offset: 9790},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 342, col: 35, offset: 9790},
										exprs: []any{
											&notExpr{
												pos: position{line: 342, col: 35, offset: 9790},
												expr: &ruleRefExpr{
													pos:    position{line: 342, col: 36, offset: 9791},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 342, col: 38, offset: 9793},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 342, col: 44, offset: 9799},
													expr: &ruleRefExpr{
														pos:    position{line: 342, col: 45, offset: 9800},
														offset: 65,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 346, col: 1, offset: 9914},
			expr: &seqExpr{
				pos: position{line: 346, col: 27, offset: 9940},
				exprs: []any{
					&notExpr{
						pos: position{line: 346, col: 27, offset: 9940},
						expr: &seqExpr{
							pos: position{line: 346, col: 29, offset: 9942},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 346, col: 29, offset: 9942},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 346, col: 33, offset: 9946},
									expr: &litMatcher{
										pos:        position{line: 346, col: 34, offset: 9947},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 346, col: 39, offset: 9952},
						offset: 95,
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 348, col: 1, offset: 9974},
			expr: &actionExpr{
				pos: position{line: 348, col: 20, offset: 9993},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 348, col: 20, offset: 9993},
					exprs: []any{
						&notExpr{
							pos: position{line: 348, col: 20, offset: 9993},
							expr: &ruleRefExpr{
								pos:    position{line: 348, col: 21, offset: 9994},
								offset: 335,
							},
						},
						&litMatcher{
							pos:        position{line: 348, col: 34, offset: 10007},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 39, offset: 10012},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 348, col: 46, offset: 10019},
								offset: 67,
							},
						},
						&litMatcher{
							pos:        position{line: 348, col: 69, offset: 10042},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 352, col: 1, offset: 10079},
			expr: &actionExpr{
				pos: position{line: 352, col: 25, offset: 10103},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 352, col: 25, offset: 10103},
					exprs: []any{
						&notExpr{
							pos: position{line: 352, col: 25, offset: 10103},
							expr: &ruleRefExpr{
								pos:    position{line: 352, col: 26, offset: 10104},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 352, col: 28, offset: 10106},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 352, col: 34, offset: 10112},
								expr: &actionExpr{
									pos: position{line: 352, col: 35, offset: 10113},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 352, col: 35, offset: 10113},
										exprs: []any{
											&notExpr{
												pos: position{line: 352, col: 35, offset: 10113},
												expr: &ruleRefExpr{
													pos:    position{line: 352, col: 36, offset: 10114},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 352, col: 38, offset: 10116},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 352, col: 44, offset: 10122},
													expr: &ruleRefExpr{
														pos:    position{line: 352, col: 45, offset: 10123},
														offset: 68,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 356, col: 1, offset: 10243},
			expr: &seqExpr{
				pos: position{line: 356, col: 27, offset: 10269},
				exprs: []any{
					&notExpr{
						pos: position{line: 356, col: 27, offset: 10269},
						expr: &litMatcher{
							pos:        position{line: 356, col: 29, offset: 10271},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 356, col: 35, offset: 10277},
						offset: 95,
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 361, col: 1, offset: 10302},
			expr: &actionExpr{
				pos: position{line: 361, col: 17, offset: 10318},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 361, col: 17, offset: 10318},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 361, col: 17, offset: 10318},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 22, offset: 10323},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 361, col: 29, offset: 10330},
								offset: 70,
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 49, offset: 10350},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 365, col: 1, offset: 10385},
			expr: &actionExpr{
				pos: position{line: 365, col: 22, offset: 10406},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 365, col: 22, offset: 10406},
					exprs: []any{
						&notExpr{
							pos: position{line: 365, col: 22, offset: 10406},
							expr: &ruleRefExpr{
								pos:    position{line: 365, col: 23, offset: 10407},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 365, col: 25, offset: 10409},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 365, col: 31, offset: 10415},
								expr: &actionExpr{
									pos: position{line: 365, col: 32, offset: 10416},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 365, col: 32, offset: 10416},
										exprs: []any{
											&notExpr{
												pos: position{line: 365, col: 32, offset: 10416},
												expr: &ruleRefExpr{
													pos:    position{line: 365, col: 33, offset: 10417},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 365, col: 35, offset: 10419},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 365, col: 41, offset: 10425},
													expr: &ruleRefExpr{
														pos:    position{line: 365, col: 42, offset: 10426},
														offset: 71,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 369, col: 1, offset: 10583},
			expr: &seqExpr{
				pos: position{line: 369, col: 24, offset: 10606},
				exprs: []any{
					&notExpr{
						pos: position{line: 369, col: 24, offset: 10606},
						expr: &litMatcher{
							pos:        position{line: 369, col: 26, offset: 10608},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 369, col: 32, offset: 10614},
						offset: 95,
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 371, col: 1, offset: 10638},
			expr: &actionExpr{
				pos: position{line: 371, col: 20, offset: 10657},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 371, col: 21, offset: 10658},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 371, col: 21, offset: 10658},
							offset: 334,
						},
						&litMatcher{
							pos:        position{line: 371, col: 28, offset: 10665},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:    position{line: 371, col: 32, offset: 10669},
							offset: 70,
						},
						&litMatcher{
							pos:        position{line: 371, col: 51, offset: 10688},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 377, col: 1, offset: 10751},
			expr: &actionExpr{
				pos: position{line: 377, col: 19, offset: 10769},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 377, col: 19, offset: 10769},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 377, col: 19, offset: 10769},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 24, offset: 10774},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 377, col: 31, offset: 10781},
								offset: 74,
							},
						},
						&litMatcher{
							pos:        position{line: 377, col: 53, offset: 10803},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 381, col: 1, offset: 10838},
			expr: &actionExpr{
				pos: position{line: 381, col: 24, offset: 10861},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 381, col: 24, offset: 10861},
					exprs: []any{
						&notExpr{
							pos: position{line: 381, col: 24, offset: 10861},
							expr: &ruleRefExpr{
								pos:    position{line: 381, col: 25, offset: 10862},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 27, offset: 10864},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 381, col: 33, offset: 10870},
								expr: &actionExpr{
									pos: position{line: 381, col: 34, offset: 10871},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 381, col: 34, offset: 10871},
										exprs: []any{
											&notExpr{
												pos: position{line: 381, col: 34, offset: 10871},
												expr: &ruleRefExpr{
													pos:    position{line: 381, col: 35, offset: 10872},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 381, col: 37, offset: 10874},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 381, col: 43, offset: 10880},
													expr: &ruleRefExpr{
														pos:    position{line: 381, col: 44, offset: 10881},
														offset: 75,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 385, col: 1, offset: 11044},
			expr: &seqExpr{
				pos: position{line: 385, col: 26, offset: 11069},
				exprs: []any{
					&notExpr{
						pos: position{line: 385, col: 26, offset: 11069},
						expr: &litMatcher{
							pos:        position{line: 385, col: 28, offset: 11071},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 385, col: 34, offset: 11077},
						offset: 95,
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 387, col: 1, offset: 11101},
			expr: &actionExpr{
				pos: position{line: 387, col: 22, offset: 11122},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 387, col: 23, offset: 11123},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 387, col: 23, offset: 11123},
							offset: 334,
						},
						&litMatcher{
							pos:        position{line: 387, col: 30, offset: 11130},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 387, col: 34, offset: 11134},
							offset: 74,
						},
						&litMatcher{
							pos:        position{line: 387, col: 55, offset: 11155},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 392, col: 1, offset: 11217},
			expr: &choiceExpr{
				pos: position{line: 392, col: 18, offset: 11234},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 392, col: 18, offset: 11234},
						offset: 78,
					},
					&ruleRefExpr{
						pos:    position{line: 392, col: 40, offset: 11256},
						offset: 81,
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 394, col: 1, offset: 11278},
			expr: &actionExpr{
				pos: position{line: 394, col: 22, offset: 11299},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 394, col: 22, offset: 11299},
					exprs: []any{
						&notExpr{
							pos: position{line: 394, col: 22, offset: 11299},
							expr: &ruleRefExpr{
								pos:    position{line: 394, col: 23, offset: 11300},
								offset: 334,
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 30, offset: 11307},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 394, col: 34, offset: 11311},
							expr: &notExpr{
								pos: position{line: 394, col: 36, offset: 11313},
								expr: &litMatcher{
									pos:        position{line: 394, col: 37, offset: 11314},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 394, col: 42, offset: 11319},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 394, col: 49, offset: 11326},
								offset: 79,
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 75, offset: 11352},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 394, col: 79, offset: 11356},
							expr: &litMatcher{
								pos:        position{line: 394, col: 80, offset: 11357},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 394, col: 84, offset: 11361},
							expr: &notExpr{
								pos: position{line: 394, col: 86, offset: 11363},
								expr: &ruleRefExpr{
									pos:    position{line: 394, col: 87, offset: 11364},
									offset: 317,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 398, col: 1, offset: 11409},
			expr: &actionExpr{
				pos: position{line: 398, col: 28, offset: 11436},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 398, col: 28, offset: 11436},
					exprs: []any{
						&notExpr{
							pos: position{line: 398, col: 28, offset: 11436},
							expr: &ruleRefExpr{
								pos:    position{line: 398, col: 29, offset: 11437},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 398, col: 31, offset: 11439},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 398, col: 37, offset: 11445},
								expr: &actionExpr{
									pos: position{line: 398, col: 38, offset: 11446},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 398, col: 38, offset: 11446},
										exprs: []any{
											&notExpr{
												pos: position{line: 398, col: 38, offset: 11446},
												expr: &ruleRefExpr{
													pos:    position{line: 398, col: 39, offset: 11447},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 398, col: 41, offset: 11449},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 398, col: 47, offset: 11455},
													expr: &ruleRefExpr{
														pos:    position{line: 398, col: 48, offset: 11456},
														offset: 80,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 402, col: 1, offset: 11576},
			expr: &seqExpr{
				pos: position{line: 402, col: 30, offset: 11605},
				exprs: []any{
					&notExpr{
						pos: position{line: 402, col: 30, offset: 11605},
						expr: &seqExpr{
							pos: position{line: 402, col: 32, offset: 11607},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 402, col: 32, offset: 11607},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 402, col: 36, offset: 11611},
									expr: &litMatcher{
										pos:        position{line: 402, col: 37, offset: 11612},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 402, col: 42, offset: 11617},
						offset: 95,
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 404, col: 1, offset: 11639},
			expr: &actionExpr{
				pos: position{line: 404, col: 22, offset: 11660},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 404, col: 22, offset: 11660},
					exprs: []any{
						&notExpr{
							pos: position{line: 404, col: 22, offset: 11660},
							expr: &ruleRefExpr{
								pos:    position{line: 404, col: 23, offset: 11661},
								offset: 335,
							},
						},
						&litMatcher{
							pos:        position{line: 404, col: 36, offset: 11674},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 41, offset: 11679},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 404, col: 48, offset: 11686},
								offset: 82,
							},
						},
						&litMatcher{
							pos:        position{line: 404, col: 74, offset: 11712},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 408, col: 1, offset: 11749},
			expr: &actionExpr{
				pos: position{line: 408, col: 28, offset: 11776},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 408, col: 28, offset: 11776},
					exprs: []any{
						&notExpr{
							pos: position{line: 408, col: 28, offset: 11776},
							expr: &ruleRefExpr{
								pos:    position{line: 408, col: 29, offset: 11777},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 408, col: 31, offset: 11779},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 408, col: 37, offset: 11785},
								expr: &actionExpr{
									pos: position{line: 408, col: 38, offset: 11786},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 408, col: 38, offset: 11786},
										exprs: []any{
											&notExpr{
												pos: position{line: 408, col: 38, offset: 11786},
												expr: &ruleRefExpr{
													pos:    position{line: 408, col: 39, offset: 11787},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 408, col: 41, offset: 11789},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 408, col: 47, offset: 11795},
													expr: &ruleRefExpr{
														pos:    position{line: 408, col: 48, offset: 11796},
														offset: 83,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 412, col: 1, offset: 11922},
			expr: &seqExpr{
				pos: position{line: 412, col: 30, offset: 11951},
				exprs: []any{
					&notExpr{
						pos: position{line: 412, col: 30, offset: 11951},
						expr: &litMatcher{
							pos:        position{line: 412, col: 32, offset: 11953},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 412, col: 38, offset: 11959},
						offset: 95,
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 415, col: 1, offset: 11982},
			expr: &actionExpr{
				pos: position{line: 415, col: 10, offset: 11991},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 415, col: 10, offset: 11991},
					exprs: []any{
						&notExpr{
							pos: position{line: 415, col: 10, offset: 11991},
							expr: &litMatcher{
								pos:        position{line: 415, col: 11, offset: 11992},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 16, offset: 11997},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 21, offset: 12002},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 415, col: 25, offset: 12006},
								offset: 240,
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 43, offset: 12024},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 415, col: 49, offset: 12030},
								expr: &actionExpr{
									pos: position{line: 415, col: 50, offset: 12031},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 415, col: 50, offset: 12031},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 415, col: 50, offset: 12031},
												offset: 328,
											},
											&litMatcher{
												pos:        position{line: 415, col: 60, offset: 12041},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 415, col: 64, offset: 12045},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 415, col: 71, offset: 12052},
													offset: 86,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 107, offset: 12088},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 423, col: 1, offset: 12265},
			expr: &actionExpr{
				pos: position{line: 423, col: 19, offset: 12283},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 423, col: 19, offset: 12283},
					exprs: []any{
						&notExpr{
							pos: position{line: 423, col: 19, offset: 12283},
							expr: &litMatcher{
								pos:        position{line: 423, col: 20, offset: 12284},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 25, offset: 12289},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 30, offset: 12294},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 423, col: 34, offset: 12298},
								offset: 240,
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 52, offset: 12316},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 423, col: 58, offset: 12322},
								expr: &actionExpr{
									pos: position{line: 423, col: 59, offset: 12323},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 423, col: 59, offset: 12323},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 423, col: 59, offset: 12323},
												offset: 328,
											},
											&litMatcher{
												pos:        position{line: 423, col: 69, offset: 12333},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 423, col: 73, offset: 12337},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 423, col: 80, offset: 12344},
													offset: 86,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 423, col: 116, offset: 12380},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 431, col: 1, offset: 12580},
			expr: &oneOrMoreExpr{
				pos: position{line: 431, col: 15, offset: 12594},
				expr: &seqExpr{
					pos: position{line: 431, col: 17, offset: 12596},
					exprs: []any{
						&notExpr{
							pos: position{line: 431, col: 17, offset: 12596},
							expr: &litMatcher{
								pos:        position{line: 431, col: 18, offset: 12597},
								val:        "]]",
								ignoreCase: false,
								want:       "\"]]\"",
							},
						},
						&choiceExpr{
							pos: position{line: 432, col: 6, offset: 12607},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 432, col: 6, offset: 12607},
									expr: &charClassMatcher{
										pos:        position{line: 432, col: 6, offset: 12607},
										val:        "[^\\r\\n{\\]]",
										chars:      []rune{'\r', '\n', '{', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 433, col: 7, offset: 12626},
									offset: 53,
								},
								&litMatcher{
									pos:        position{line: 434, col: 7, offset: 12652},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 440, col: 1, offset: 12665},
			expr: &choiceExpr{
				pos: position{line: 440, col: 14, offset: 12678},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 440, col: 14, offset: 12678},
						run: (*parser).callonAdmonition2,
						expr: &seqExpr{
							pos: position{line: 440, col: 14, offset: 12678},
							exprs: []any{
								&ruleRefExpr{
									pos:    position{line: 440, col: 14, offset: 12678},
									offset: 321,
								},
								&litMatcher{
									pos:        position{line: 441, col: 5, offset: 12699},
									val:        "NOTE: ",
									ignoreCase: false,
									want:       "\"NOTE: \"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 7, offset: 12782},
						run: (*parser).callonAdmonition6,
						expr: &litMatcher{
							pos:        position{line: 442, col: 7, offset: 12782},
							val:        "TIP: ",
							ignoreCase: false,
							want:       "\"TIP: \"",
						},
					},
					&actionExpr{
						pos: position{line: 443, col: 7, offset: 12863},
						run: (*parser).callonAdmonition8,
						expr: &litMatcher{
							pos:        position{line: 443, col: 7, offset: 12863},
							val:        "IMPORTANT: ",
							ignoreCase: false,
							want:       "\"IMPORTANT: \"",
						},
					},
					&actionExpr{
						pos: position{line: 444, col: 7, offset: 12956},
						run: (*parser).callonAdmonition10,
						expr: &litMatcher{
							pos:        position{line: 444, col: 7, offset: 12956},
							val:        "CAUTON: ",
							ignoreCase: false,
							want:       "\"CAUTON: \"",
						},
					},
					&actionExpr{
						pos: position{line: 445, col: 7, offset: 13044},
						run: (*parser).callonAdmonition12,
						expr: &litMatcher{
							pos:        position{line: 445, col: 7, offset: 13044},
							val:        "WARNING: ",
							ignoreCase: false,
							want:       "\"WARNING: \"",
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 450, col: 1, offset: 13134},
			expr: &actionExpr{
				pos: position{line: 450, col: 18, offset: 13151},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 450, col: 18, offset: 13151},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 450, col: 18, offset: 13151},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 450, col: 26, offset: 13159},
								expr: &ruleRefExpr{
									pos:    position{line: 450, col: 27, offset: 13160},
									offset: 89,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 43, offset: 13176},
							label: "eol",
							expr: &ruleRefExpr{
								pos:    position{line: 450, col: 47, offset: 13180},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 458, col: 1, offset: 13337},
			expr: &choiceExpr{
				pos: position{line: 459, col: 5, offset: 13359},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 459, col: 5, offset: 13359},
						offset: 87,
					},
					&ruleRefExpr{
						pos:    position{line: 460, col: 5, offset: 13376},
						offset: 277,
					},
					&ruleRefExpr{
						pos:    position{line: 461, col: 5, offset: 13400},
						offset: 94,
					},
					&ruleRefExpr{
						pos:    position{line: 462, col: 5, offset: 13420},
						offset: 100,
					},
					&ruleRefExpr{
						pos:    position{line: 463, col: 5, offset: 13432},
						offset: 98,
					},
					&ruleRefExpr{
						pos:    position{line: 464, col: 5, offset: 13451},
						offset: 107,
					},
					&ruleRefExpr{
						pos:    position{line: 465, col: 5, offset: 13462},
						offset: 84,
					},
					&ruleRefExpr{
						pos:    position{line: 466, col: 5, offset: 13476},
						offset: 235,
					},
					&ruleRefExpr{
						pos:    position{line: 467, col: 5, offset: 13498},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 468, col: 5, offset: 13523},
						offset: 305,
					},
					&ruleRefExpr{
						pos:    position{line: 469, col: 5, offset: 13539},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 470, col: 5, offset: 13561},
						offset: 330,
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 473, col: 1, offset: 13592},
			expr: &actionExpr{
				pos: position{line: 473, col: 19, offset: 13610},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 473, col: 19, offset: 13610},
					expr: &seqExpr{
						pos: position{line: 473, col: 20, offset: 13611},
						exprs: []any{
							&notExpr{
								pos: position{line: 473, col: 20, offset: 13611},
								expr: &ruleRefExpr{
									pos:    position{line: 473, col: 21, offset: 13612},
									offset: 161,
								},
							},
							&notExpr{
								pos: position{line: 473, col: 31, offset: 13622},
								expr: &ruleRefExpr{
									pos:    position{line: 473, col: 32, offset: 13623},
									offset: 108,
								},
							},
							&notExpr{
								pos: position{line: 473, col: 42, offset: 13633},
								expr: &ruleRefExpr{
									pos:    position{line: 473, col: 43, offset: 13634},
									offset: 99,
								},
							},
							&notExpr{
								pos: position{line: 473, col: 64, offset: 13655},
								expr: &ruleRefExpr{
									pos:    position{line: 473, col: 65, offset: 13656},
									offset: 242,
								},
							},
							&charClassMatcher{
								pos:        position{line: 473, col: 90, offset: 13681},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 478, col: 1, offset: 13755},
			expr: &actionExpr{
				pos: position{line: 478, col: 12, offset: 13766},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 478, col: 12, offset: 13766},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 478, col: 12, offset: 13766},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 478, col: 24, offset: 13778},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 478, col: 27, offset: 13781},
								expr: &ruleRefExpr{
									pos:    position{line: 478, col: 28, offset: 13782},
									offset: 92,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 478, col: 41, offset: 13795},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 478, col: 45, offset: 13799},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 478, col: 51, offset: 13805},
								expr: &ruleRefExpr{
									pos:    position{line: 478, col: 52, offset: 13806},
									offset: 93,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 478, col: 68, offset: 13822},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 482, col: 1, offset: 13896},
			expr: &actionExpr{
				pos: position{line: 482, col: 14, offset: 13909},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 482, col: 14, offset: 13909},
					expr: &ruleRefExpr{
						pos:    position{line: 482, col: 14, offset: 13909},
						offset: 317,
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 486, col: 1, offset: 13959},
			expr: &seqExpr{
				pos: position{line: 486, col: 17, offset: 13975},
				exprs: []any{
					&notExpr{
						pos: position{line: 486, col: 17, offset: 13975},
						expr: &litMatcher{
							pos:        position{line: 486, col: 18, offset: 13976},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&choiceExpr{
						pos: position{line: 486, col: 24, offset: 13982},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 486, col: 24, offset: 13982},
								offset: 325,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 37, offset: 13995},
								offset: 332,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 42, offset: 14000},
								offset: 303,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 55, offset: 14013},
								offset: 211,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 63, offset: 14021},
								offset: 304,
							},
							&ruleRefExpr{
								pos: position{line: 486, col: 77, offset: 14035},
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 85, offset: 14043},
								offset: 305,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 97, offset: 14055},
								offset: 53,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 118, offset: 14076},
								offset: 301,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 137, offset: 14095},
								offset: 309,
							},
							&ruleRefExpr{
								pos:    position{line: 486, col: 149, offset: 14107},
								offset: 330,
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 490, col: 1, offset: 14133},
			expr: &actionExpr{
				pos: position{line: 490, col: 17, offset: 14149},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 490, col: 17, offset: 14149},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 490, col: 17, offset: 14149},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 490, col: 28, offset: 14160},
								expr: &ruleRefExpr{
									pos:    position{line: 490, col: 29, offset: 14161},
									offset: 31,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 490, col: 52, offset: 14184},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 491, col: 5, offset: 14195},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 491, col: 5, offset: 14195},
										offset: 55,
									},
									&ruleRefExpr{
										pos:    position{line: 492, col: 7, offset: 14211},
										offset: 62,
									},
									&ruleRefExpr{
										pos:    position{line: 493, col: 7, offset: 14229},
										offset: 77,
									},
									&ruleRefExpr{
										pos:    position{line: 494, col: 7, offset: 14250},
										offset: 180,
									},
									&ruleRefExpr{
										pos:    position{line: 495, col: 7, offset: 14267},
										offset: 73,
									},
									&ruleRefExpr{
										pos:    position{line: 496, col: 7, offset: 14289},
										offset: 69,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 501, col: 1, offset: 14438},
			expr: &choiceExpr{
				pos: position{line: 502, col: 5, offset: 14467},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 502, col: 5, offset: 14467},
						offset: 325,
					},
					&ruleRefExpr{
						pos:    position{line: 503, col: 5, offset: 14485},
						offset: 332,
					},
					&ruleRefExpr{
						pos:    position{line: 504, col: 5, offset: 14495},
						offset: 303,
					},
					&ruleRefExpr{
						pos:    position{line: 505, col: 5, offset: 14513},
						offset: 304,
					},
					&ruleRefExpr{
						pos:    position{line: 506, col: 5, offset: 14532},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 507, col: 5, offset: 14558},
						offset: 94,
					},
					&ruleRefExpr{
						pos:    position{line: 508, col: 5, offset: 14579},
						offset: 100,
					},
					&ruleRefExpr{
						pos:    position{line: 509, col: 5, offset: 14591},
						offset: 98,
					},
					&ruleRefExpr{
						pos:    position{line: 510, col: 5, offset: 14610},
						offset: 107,
					},
					&ruleRefExpr{
						pos:    position{line: 511, col: 5, offset: 14621},
						offset: 84,
					},
					&ruleRefExpr{
						pos:    position{line: 512, col: 5, offset: 14635},
						offset: 235,
					},
					&ruleRefExpr{
						pos:    position{line: 513, col: 5, offset: 14657},
						offset: 301,
					},
					&ruleRefExpr{
						pos:    position{line: 514, col: 5, offset: 14681},
						offset: 330,
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 517, col: 1, offset: 14705},
			expr: &actionExpr{
				pos: position{line: 517, col: 20, offset: 14724},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 517, col: 20, offset: 14724},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 517, col: 20, offset: 14724},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 24, offset: 14728},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 517, col: 36, offset: 14740},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 517, col: 56, offset: 14760},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 522, col: 1, offset: 14801},
			expr: &actionExpr{
				pos: position{line: 522, col: 14, offset: 14814},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 522, col: 14, offset: 14814},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 522, col: 14, offset: 14814},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 24, offset: 14824},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 30, offset: 14830},
								offset: 164,
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 36, offset: 14836},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 48, offset: 14848},
								offset: 51,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 522, col: 66, offset: 14866},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 526, col: 1, offset: 15003},
			expr: &actionExpr{
				pos: position{line: 526, col: 15, offset: 15017},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 526, col: 15, offset: 15017},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 526, col: 15, offset: 15017},
							offset: 99,
						},
						&notExpr{
							pos: position{line: 526, col: 36, offset: 15038},
							expr: &litMatcher{
								pos:        position{line: 526, col: 37, offset: 15039},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 41, offset: 15043},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 526, col: 47, offset: 15049},
								offset: 164,
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 53, offset: 15055},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 526, col: 65, offset: 15067},
								offset: 51,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 530, col: 1, offset: 15214},
			expr: &litMatcher{
				pos:        position{line: 530, col: 24, offset: 15237},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 534, col: 1, offset: 15249},
			expr: &actionExpr{
				pos: position{line: 534, col: 8, offset: 15256},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 534, col: 8, offset: 15256},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 534, col: 8, offset: 15256},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 534, col: 16, offset: 15264},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 534, col: 22, offset: 15270},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 534, col: 22, offset: 15270},
									expr: &choiceExpr{
										pos: position{line: 534, col: 23, offset: 15271},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 534, col: 23, offset: 15271},
												offset: 317,
											},
											&litMatcher{
												pos:        position{line: 534, col: 38, offset: 15286},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 534, col: 44, offset: 15292},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 81, offset: 15329},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 534, col: 93, offset: 15341},
								offset: 51,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 539, col: 1, offset: 15463},
			expr: &actionExpr{
				pos: position{line: 539, col: 15, offset: 15477},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 539, col: 15, offset: 15477},
					exprs: []any{
						&notExpr{
							pos: position{line: 539, col: 15, offset: 15477},
							expr: &litMatcher{
								pos:        position{line: 539, col: 16, offset: 15478},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 21, offset: 15483},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 33, offset: 15495},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 539, col: 39, offset: 15501},
								offset: 102,
							},
						},
						&labeledExpr{
							pos:   position{line: 539, col: 56, offset: 15518},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 539, col: 68, offset: 15530},
								offset: 51,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 539, col: 86, offset: 15548},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 539, col: 96, offset: 15558},
							expr: &ruleRefExpr{
								pos:    position{line: 539, col: 97, offset: 15559},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 544, col: 1, offset: 15716},
			expr: &actionExpr{
				pos: position{line: 544, col: 19, offset: 15734},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 544, col: 19, offset: 15734},
					exprs: []any{
						&notExpr{
							pos: position{line: 544, col: 19, offset: 15734},
							expr: &ruleRefExpr{
								pos:    position{line: 544, col: 20, offset: 15735},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 22, offset: 15737},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 544, col: 27, offset: 15742},
								offset: 164,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParse",
			pos:  position{line: 549, col: 1, offset: 15774},
			expr: &actionExpr{
				pos: position{line: 549, col: 16, offset: 15789},
				run: (*parser).callonIncludeParse1,
				expr: &seqExpr{
					pos: position{line: 549, col: 16, offset: 15789},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 549, col: 16, offset: 15789},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 549, col: 24, offset: 15797},
								expr: &ruleRefExpr{
									pos:    position{line: 549, col: 25, offset: 15798},
									offset: 104,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 549, col: 47, offset: 15820},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseElement",
			pos:  position{line: 553, col: 1, offset: 15877},
			expr: &actionExpr{
				pos: position{line: 553, col: 23, offset: 15899},
				run: (*parser).callonIncludeParseElement1,
				expr: &seqExpr{
					pos: position{line: 553, col: 23, offset: 15899},
					exprs: []any{
						&notExpr{
							pos: position{line: 553, col: 23, offset: 15899},
							expr: &ruleRefExpr{
								pos:    position{line: 553, col: 24, offset: 15900},
								offset: 318,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 553, col: 34, offset: 15910},
							offset: 321,
						},
						&labeledExpr{
							pos:   position{line: 553, col: 50, offset: 15926},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 553, col: 59, offset: 15935},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 553, col: 59, offset: 15935},
										offset: 101,
									},
									&ruleRefExpr{
										pos:    position{line: 553, col: 73, offset: 15949},
										offset: 105,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 553, col: 91, offset: 15967},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLine",
			pos:  position{line: 557, col: 1, offset: 16006},
			expr: &actionExpr{
				pos: position{line: 557, col: 20, offset: 16025},
				run: (*parser).callonIncludeParseLine1,
				expr: &seqExpr{
					pos: position{line: 557, col: 20, offset: 16025},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 557, col: 20, offset: 16025},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 28, offset: 16033},
								expr: &charClassMatcher{
									pos:        position{line: 557, col: 28, offset: 16033},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&andExpr{
							pos: position{line: 557, col: 37, offset: 16042},
							expr: &ruleRefExpr{
								pos:    position{line: 557, col: 38, offset: 16043},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLineElement",
			pos:  position{line: 561, col: 1, offset: 16130},
			expr: &oneOrMoreExpr{
				pos: position{line: 561, col: 28, offset: 16157},
				expr: &charClassMatcher{
					pos:        position{line: 561, col: 28, offset: 16157},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 566, col: 1, offset: 16172},
			expr: &actionExpr{
				pos: position{line: 566, col: 8, offset: 16179},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 566, col: 8, offset: 16179},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 566, col: 14, offset: 16185},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 566, col: 14, offset: 16185},
								offset: 109,
							},
							&ruleRefExpr{
								pos:    position{line: 566, col: 25, offset: 16196},
								offset: 110,
							},
							&ruleRefExpr{
								pos:    position{line: 566, col: 40, offset: 16211},
								offset: 111,
							},
							&ruleRefExpr{
								pos:    position{line: 566, col: 55, offset: 16226},
								offset: 166,
							},
						},
					},
				},
			},
		},
		{
			name: "LinkMacro",
			pos:  position{line: 570, col: 1, offset: 16267},
			expr: &litMatcher{
				pos:        position{line: 570, col: 13, offset: 16279},
				val:        "link:",
				ignoreCase: false,
				want:       "\"link:\"",
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 572, col: 1, offset: 16288},
			expr: &actionExpr{
				pos: position{line: 572, col: 12, offset: 16299},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 572, col: 12, offset: 16299},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 572, col: 12, offset: 16299},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 16, offset: 16303},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 572, col: 21, offset: 16308},
								offset: 163,
							},
						},
						&litMatcher{
							pos:        position{line: 572, col: 30, offset: 16317},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 576, col: 1, offset: 16383},
			expr: &actionExpr{
				pos: position{line: 576, col: 16, offset: 16398},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 576, col: 16, offset: 16398},
					exprs: []any{
						&notExpr{
							pos: position{line: 576, col: 16, offset: 16398},
							expr: &litMatcher{
								pos:        position{line: 576, col: 17, offset: 16399},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 576, col: 22, offset: 16404},
							offset: 108,
						},
						&labeledExpr{
							pos:   position{line: 576, col: 32, offset: 16414},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 576, col: 36, offset: 16418},
								offset: 162,
							},
						},
						&labeledExpr{
							pos:   position{line: 576, col: 40, offset: 16422},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 576, col: 52, offset: 16434},
								offset: 51,
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 581, col: 1, offset: 16575},
			expr: &actionExpr{
				pos: position{line: 581, col: 16, offset: 16590},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 581, col: 16, offset: 16590},
					exprs: []any{
						&notExpr{
							pos: position{line: 581, col: 16, offset: 16590},
							expr: &litMatcher{
								pos:        position{line: 581, col: 17, offset: 16591},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 22, offset: 16596},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 581, col: 27, offset: 16601},
								offset: 163,
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 36, offset: 16610},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 47, offset: 16621},
								expr: &ruleRefExpr{
									pos:    position{line: 581, col: 48, offset: 16622},
									offset: 51,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 587, col: 1, offset: 16755},
			expr: &actionExpr{
				pos: position{line: 587, col: 9, offset: 16763},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 587, col: 9, offset: 16763},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 587, col: 9, offset: 16763},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 587, col: 20, offset: 16774},
								expr: &ruleRefExpr{
									pos:    position{line: 587, col: 21, offset: 16775},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 587, col: 46, offset: 16800},
							offset: 117,
						},
						&labeledExpr{
							pos:   position{line: 587, col: 57, offset: 16811},
							label: "cells",
							expr: &ruleRefExpr{
								pos:    position{line: 587, col: 64, offset: 16818},
								offset: 113,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 587, col: 79, offset: 16833},
							offset: 134,
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 595, col: 1, offset: 16990},
			expr: &zeroOrMoreExpr{
				pos: position{line: 595, col: 17, offset: 17006},
				expr: &ruleRefExpr{
					pos:    position{line: 595, col: 18, offset: 17007},
					offset: 114,
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 597, col: 1, offset: 17024},
			expr: &choiceExpr{
				pos: position{line: 598, col: 9, offset: 17049},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 598, col: 9, offset: 17049},
						offset: 118,
					},
					&ruleRefExpr{
						pos:    position{line: 599, col: 11, offset: 17075},
						offset: 120,
					},
					&ruleRefExpr{
						pos:    position{line: 600, col: 11, offset: 17097},
						offset: 130,
					},
					&ruleRefExpr{
						pos:    position{line: 601, col: 11, offset: 17124},
						offset: 135,
					},
				},
			},
		},
		{
			name: "IncludedTableElements",
			pos:  position{line: 604, col: 1, offset: 17145},
			expr: &actionExpr{
				pos: position{line: 604, col: 25, offset: 17169},
				run: (*parser).callonIncludedTableElements1,
				expr: &seqExpr{
					pos: position{line: 604, col: 25, offset: 17169},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 604, col: 25, offset: 17169},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 604, col: 33, offset: 17177},
								expr: &ruleRefExpr{
									pos:    position{line: 604, col: 34, offset: 17178},
									offset: 116,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 604, col: 57, offset: 17201},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "IncludedTableElement",
			pos:  position{line: 609, col: 1, offset: 17320},
			expr: &choiceExpr{
				pos: position{line: 610, col: 9, offset: 17353},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 610, col: 9, offset: 17353},
						offset: 119,
					},
					&ruleRefExpr{
						pos:    position{line: 611, col: 11, offset: 17387},
						offset: 120,
					},
					&ruleRefExpr{
						pos:    position{line: 612, col: 11, offset: 17409},
						offset: 130,
					},
					&ruleRefExpr{
						pos:    position{line: 613, col: 11, offset: 17436},
						offset: 136,
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 616, col: 1, offset: 17465},
			expr: &actionExpr{
				pos: position{line: 616, col: 14, offset: 17478},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 616, col: 14, offset: 17478},
					exprs: []any{
						&notExpr{
							pos: position{line: 616, col: 14, offset: 17478},
							expr: &litMatcher{
								pos:        position{line: 616, col: 15, offset: 17479},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 616, col: 20, offset: 17484},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 616, col: 27, offset: 17491},
							expr: &litMatcher{
								pos:        position{line: 616, col: 27, offset: 17491},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 616, col: 32, offset: 17496},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 616, col: 42, offset: 17506},
							expr: &ruleRefExpr{
								pos:    position{line: 616, col: 43, offset: 17507},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 620, col: 1, offset: 17578},
			expr: &actionExpr{
				pos: position{line: 620, col: 18, offset: 17595},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 620, col: 18, offset: 17595},
					exprs: []any{
						&notExpr{
							pos: position{line: 620, col: 18, offset: 17595},
							expr: &ruleRefExpr{
								pos:    position{line: 620, col: 19, offset: 17596},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 620, col: 28, offset: 17605},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 620, col: 36, offset: 17613},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 620, col: 46, offset: 17623},
							expr: &ruleRefExpr{
								pos:    position{line: 620, col: 48, offset: 17625},
								offset: 311,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableEmptyLine",
			pos:  position{line: 624, col: 1, offset: 17706},
			expr: &actionExpr{
				pos: position{line: 624, col: 26, offset: 17731},
				run: (*parser).callonIncludedTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 624, col: 26, offset: 17731},
					exprs: []any{
						&notExpr{
							pos: position{line: 624, col: 26, offset: 17731},
							expr: &ruleRefExpr{
								pos:    position{line: 624, col: 27, offset: 17732},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 36, offset: 17741},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 44, offset: 17749},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 624, col: 54, offset: 17759},
							expr: &choiceExpr{
								pos: position{line: 624, col: 56, offset: 17761},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 624, col: 56, offset: 17761},
										offset: 311,
									},
									&ruleRefExpr{
										pos:    position{line: 624, col: 66, offset: 17771},
										offset: 318,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 628, col: 1, offset: 17854},
			expr: &choiceExpr{
				pos: position{line: 628, col: 16, offset: 17869},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 628, col: 16, offset: 17869},
						offset: 122,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 35, offset: 17888},
						offset: 124,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 55, offset: 17908},
						offset: 121,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 68, offset: 17921},
						offset: 123,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 82, offset: 17935},
						offset: 127,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 98, offset: 17951},
						offset: 128,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 113, offset: 17966},
						offset: 129,
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 630, col: 1, offset: 17992},
			expr: &actionExpr{
				pos: position{line: 630, col: 14, offset: 18005},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 630, col: 14, offset: 18005},
					exprs: []any{
						&notExpr{
							pos: position{line: 630, col: 14, offset: 18005},
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 15, offset: 18006},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 630, col: 24, offset: 18015},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 630, col: 32, offset: 18023},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 42, offset: 18033},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 48, offset: 18039},
								offset: 285,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfDef",
			pos:  position{line: 634, col: 1, offset: 18102},
			expr: &actionExpr{
				pos: position{line: 634, col: 20, offset: 18121},
				run: (*parser).callonTableInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 634, col: 20, offset: 18121},
					exprs: []any{
						&notExpr{
							pos: position{line: 634, col: 20, offset: 18121},
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 21, offset: 18122},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 634, col: 30, offset: 18131},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 634, col: 38, offset: 18139},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 634, col: 48, offset: 18149},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 54, offset: 18155},
								offset: 285,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 634, col: 60, offset: 18161},
							offset: 311,
						},
						&notExpr{
							pos: position{line: 634, col: 68, offset: 18169},
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 69, offset: 18170},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 634, col: 95, offset: 18196},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 104, offset: 18205},
								offset: 140,
							},
						},
						&labeledExpr{
							pos:   position{line: 634, col: 122, offset: 18223},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 128, offset: 18229},
								offset: 127,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 648, col: 1, offset: 18580},
			expr: &actionExpr{
				pos: position{line: 648, col: 15, offset: 18594},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 648, col: 15, offset: 18594},
					exprs: []any{
						&notExpr{
							pos: position{line: 648, col: 15, offset: 18594},
							expr: &ruleRefExpr{
								pos:    position{line: 648, col: 16, offset: 18595},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 648, col: 25, offset: 18604},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 648, col: 33, offset: 18612},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 648, col: 43, offset: 18622},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 648, col: 50, offset: 18629},
								offset: 287,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfNDef",
			pos:  position{line: 652, col: 1, offset: 18696},
			expr: &actionExpr{
				pos: position{line: 652, col: 21, offset: 18716},
				run: (*parser).callonTableInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 652, col: 21, offset: 18716},
					exprs: []any{
						&notExpr{
							pos: position{line: 652, col: 21, offset: 18716},
							expr: &ruleRefExpr{
								pos:    position{line: 652, col: 22, offset: 18717},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 652, col: 31, offset: 18726},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 652, col: 39, offset: 18734},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 652, col: 49, offset: 18744},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 652, col: 56, offset: 18751},
								offset: 287,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 652, col: 63, offset: 18758},
							offset: 311,
						},
						&notExpr{
							pos: position{line: 652, col: 71, offset: 18766},
							expr: &ruleRefExpr{
								pos:    position{line: 652, col: 72, offset: 18767},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 98, offset: 18793},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 652, col: 107, offset: 18802},
								offset: 140,
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 125, offset: 18820},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 652, col: 131, offset: 18826},
								offset: 127,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfEval",
			pos:  position{line: 666, col: 1, offset: 19179},
			expr: &actionExpr{
				pos: position{line: 666, col: 15, offset: 19193},
				run: (*parser).callonTableIfEval1,
				expr: &seqExpr{
					pos: position{line: 666, col: 15, offset: 19193},
					exprs: []any{
						&notExpr{
							pos: position{line: 666, col: 15, offset: 19193},
							expr: &ruleRefExpr{
								pos:    position{line: 666, col: 16, offset: 19194},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 666, col: 25, offset: 19203},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 666, col: 33, offset: 19211},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 666, col: 43, offset: 19221},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 666, col: 50, offset: 19228},
								offset: 296,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfEval",
			pos:  position{line: 670, col: 1, offset: 19295},
			expr: &actionExpr{
				pos: position{line: 670, col: 21, offset: 19315},
				run: (*parser).callonTableInlineIfEval1,
				expr: &seqExpr{
					pos: position{line: 670, col: 21, offset: 19315},
					exprs: []any{
						&notExpr{
							pos: position{line: 670, col: 21, offset: 19315},
							expr: &ruleRefExpr{
								pos:    position{line: 670, col: 22, offset: 19316},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 670, col: 31, offset: 19325},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 670, col: 39, offset: 19333},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 670, col: 49, offset: 19343},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 670, col: 56, offset: 19350},
								offset: 296,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 670, col: 63, offset: 19357},
							offset: 311,
						},
						&notExpr{
							pos: position{line: 670, col: 71, offset: 19365},
							expr: &ruleRefExpr{
								pos:    position{line: 670, col: 72, offset: 19366},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 670, col: 98, offset: 19392},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 670, col: 107, offset: 19401},
								offset: 140,
							},
						},
						&labeledExpr{
							pos:   position{line: 670, col: 125, offset: 19419},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 670, col: 131, offset: 19425},
								offset: 127,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 684, col: 1, offset: 19778},
			expr: &actionExpr{
				pos: position{line: 684, col: 17, offset: 19794},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 684, col: 17, offset: 19794},
					exprs: []any{
						&notExpr{
							pos: position{line: 684, col: 17, offset: 19794},
							expr: &ruleRefExpr{
								pos:    position{line: 684, col: 18, offset: 19795},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 684, col: 27, offset: 19804},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 684, col: 35, offset: 19812},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 684, col: 45, offset: 19822},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 684, col: 54, offset: 19831},
								offset: 291,
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 688, col: 1, offset: 19901},
			expr: &actionExpr{
				pos: position{line: 688, col: 16, offset: 19916},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 688, col: 16, offset: 19916},
					exprs: []any{
						&notExpr{
							pos: position{line: 688, col: 16, offset: 19916},
							expr: &ruleRefExpr{
								pos:    position{line: 688, col: 17, offset: 19917},
								offset: 134,
							},
						},
						&choiceExpr{
							pos: position{line: 688, col: 27, offset: 19927},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 688, col: 27, offset: 19927},
									offset: 311,
								},
								&ruleRefExpr{
									pos:    position{line: 688, col: 37, offset: 19937},
									offset: 320,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 688, col: 54, offset: 19954},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 688, col: 63, offset: 19963},
								offset: 263,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 692, col: 1, offset: 20054},
			expr: &actionExpr{
				pos: position{line: 692, col: 25, offset: 20078},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 692, col: 25, offset: 20078},
					exprs: []any{
						&notExpr{
							pos: position{line: 692, col: 25, offset: 20078},
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 26, offset: 20079},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 692, col: 35, offset: 20088},
							offset: 311,
						},
						&labeledExpr{
							pos:   position{line: 692, col: 43, offset: 20096},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 52, offset: 20105},
								offset: 266,
							},
						},
					},
				},
			},
		},
		{
			name: "TableFileInclude",
			pos:  position{line: 696, col: 1, offset: 20194},
			expr: &actionExpr{
				pos: position{line: 696, col: 20, offset: 20213},
				run: (*parser).callonTableFileInclude1,
				expr: &seqExpr{
					pos: position{line: 696, col: 20, offset: 20213},
					exprs: []any{
						&notExpr{
							pos: position{line: 696, col: 20, offset: 20213},
							expr: &ruleRefExpr{
								pos:    position{line: 696, col: 21, offset: 20214},
								offset: 134,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 696, col: 30, offset: 20223},
							offset: 311,
						},
						&notExpr{
							pos: position{line: 696, col: 38, offset: 20231},
							expr: &litMatcher{
								pos:        position{line: 696, col: 39, offset: 20232},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 696, col: 44, offset: 20237},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 696, col: 56, offset: 20249},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 696, col: 62, offset: 20255},
								offset: 102,
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 79, offset: 20272},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 696, col: 91, offset: 20284},
								offset: 51,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 696, col: 109, offset: 20302},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 696, col: 119, offset: 20312},
							expr: &ruleRefExpr{
								pos:    position{line: 696, col: 120, offset: 20313},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 700, col: 1, offset: 20469},
			expr: &oneOrMoreExpr{
				pos: position{line: 700, col: 19, offset: 20487},
				expr: &ruleRefExpr{
					pos:    position{line: 700, col: 19, offset: 20487},
					offset: 118,
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 702, col: 1, offset: 20504},
			expr: &actionExpr{
				pos: position{line: 702, col: 26, offset: 20529},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 702, col: 26, offset: 20529},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 702, col: 26, offset: 20529},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 702, col: 34, offset: 20537},
								expr: &ruleRefExpr{
									pos:    position{line: 702, col: 35, offset: 20538},
									offset: 133,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 702, col: 67, offset: 20570},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 706, col: 1, offset: 20648},
			expr: &choiceExpr{
				pos: position{line: 707, col: 5, offset: 20686},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 707, col: 5, offset: 20686},
						offset: 94,
					},
					&ruleRefExpr{
						pos:    position{line: 708, col: 5, offset: 20706},
						offset: 100,
					},
					&ruleRefExpr{
						pos:    position{line: 709, col: 5, offset: 20718},
						offset: 98,
					},
					&ruleRefExpr{
						pos:    position{line: 710, col: 5, offset: 20737},
						offset: 107,
					},
					&ruleRefExpr{
						pos:    position{line: 711, col: 5, offset: 20748},
						offset: 84,
					},
					&ruleRefExpr{
						pos:    position{line: 712, col: 5, offset: 20763},
						offset: 235,
					},
					&ruleRefExpr{
						pos:    position{line: 713, col: 5, offset: 20784},
						offset: 53,
					},
					&ruleRefExpr{
						pos:    position{line: 714, col: 5, offset: 20809},
						offset: 305,
					},
					&ruleRefExpr{
						pos:    position{line: 715, col: 5, offset: 20825},
						offset: 152,
					},
					&ruleRefExpr{
						pos:    position{line: 716, col: 5, offset: 20856},
						offset: 330,
					},
					&ruleRefExpr{
						pos:    position{line: 717, col: 5, offset: 20883},
						offset: 311,
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 720, col: 1, offset: 20896},
			expr: &seqExpr{
				pos: position{line: 720, col: 12, offset: 20907},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 720, col: 12, offset: 20907},
						offset: 311,
					},
					&notExpr{
						pos: position{line: 720, col: 20, offset: 20915},
						expr: &litMatcher{
							pos:        position{line: 720, col: 21, offset: 20916},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&litMatcher{
						pos:        position{line: 720, col: 26, offset: 20921},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 720, col: 33, offset: 20928},
						expr: &litMatcher{
							pos:        position{line: 720, col: 33, offset: 20928},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 720, col: 38, offset: 20933},
						offset: 328,
					},
					&andExpr{
						pos: position{line: 720, col: 48, offset: 20943},
						expr: &ruleRefExpr{
							pos:    position{line: 720, col: 49, offset: 20944},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 722, col: 1, offset: 20957},
			expr: &actionExpr{
				pos: position{line: 722, col: 12, offset: 20968},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 722, col: 12, offset: 20968},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 722, col: 12, offset: 20968},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 722, col: 21, offset: 20977},
								offset: 138,
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 46, offset: 21002},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 722, col: 57, offset: 21013},
								expr: &ruleRefExpr{
									pos:    position{line: 722, col: 58, offset: 21014},
									offset: 139,
								},
							},
						},
						&andExpr{
							pos: position{line: 722, col: 86, offset: 21042},
							expr: &choiceExpr{
								pos: position{line: 722, col: 88, offset: 21044},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 722, col: 88, offset: 21044},
										offset: 134,
									},
									&ruleRefExpr{
										pos:    position{line: 722, col: 99, offset: 21055},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 722, col: 121, offset: 21077},
										offset: 311,
									},
									&ruleRefExpr{
										pos:    position{line: 722, col: 131, offset: 21087},
										offset: 318,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableRow",
			pos:  position{line: 731, col: 1, offset: 21328},
			expr: &actionExpr{
				pos: position{line: 731, col: 20, offset: 21347},
				run: (*parser).callonIncludedTableRow1,
				expr: &seqExpr{
					pos: position{line: 731, col: 20, offset: 21347},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 731, col: 20, offset: 21347},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 731, col: 29, offset: 21356},
								offset: 138,
							},
						},
						&labeledExpr{
							pos:   position{line: 731, col: 54, offset: 21381},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 731, col: 65, offset: 21392},
								expr: &ruleRefExpr{
									pos:    position{line: 731, col: 66, offset: 21393},
									offset: 139,
								},
							},
						},
						&andExpr{
							pos: position{line: 731, col: 94, offset: 21421},
							expr: &choiceExpr{
								pos: position{line: 731, col: 96, offset: 21423},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 731, col: 96, offset: 21423},
										offset: 318,
									},
									&ruleRefExpr{
										pos:    position{line: 731, col: 108, offset: 21435},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 731, col: 130, offset: 21457},
										offset: 311,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 740, col: 1, offset: 21697},
			expr: &choiceExpr{
				pos: position{line: 740, col: 23, offset: 21719},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 740, col: 23, offset: 21719},
						offset: 156,
					},
					&ruleRefExpr{
						pos:    position{line: 740, col: 54, offset: 21750},
						offset: 155,
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 742, col: 1, offset: 21778},
			expr: &actionExpr{
				pos: position{line: 742, col: 26, offset: 21803},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 742, col: 26, offset: 21803},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 742, col: 26, offset: 21803},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 742, col: 34, offset: 21811},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 742, col: 61, offset: 21838},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 742, col: 70, offset: 21847},
								offset: 140,
							},
						},
						&andExpr{
							pos: position{line: 742, col: 88, offset: 21865},
							expr: &choiceExpr{
								pos: position{line: 742, col: 90, offset: 21867},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 742, col: 90, offset: 21867},
										offset: 134,
									},
									&ruleRefExpr{
										pos:    position{line: 742, col: 101, offset: 21878},
										offset: 131,
									},
									&ruleRefExpr{
										pos:    position{line: 742, col: 119, offset: 21896},
										offset: 120,
									},
									&ruleRefExpr{
										pos:    position{line: 742, col: 133, offset: 21910},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 742, col: 155, offset: 21932},
										offset: 311,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 747, col: 1, offset: 22064},
			expr: &actionExpr{
				pos: position{line: 747, col: 30, offset: 22093},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 747, col: 30, offset: 22093},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 747, col: 30, offset: 22093},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 747, col: 38, offset: 22101},
								offset: 156,
							},
						},
						&labeledExpr{
							pos:   position{line: 747, col: 68, offset: 22131},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 747, col: 77, offset: 22140},
								offset: 140,
							},
						},
						&andExpr{
							pos: position{line: 747, col: 95, offset: 22158},
							expr: &choiceExpr{
								pos: position{line: 747, col: 97, offset: 22160},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 747, col: 97, offset: 22160},
										offset: 134,
									},
									&ruleRefExpr{
										pos:    position{line: 747, col: 108, offset: 22171},
										offset: 131,
									},
									&ruleRefExpr{
										pos:    position{line: 747, col: 126, offset: 22189},
										offset: 120,
									},
									&ruleRefExpr{
										pos:    position{line: 747, col: 140, offset: 22203},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 747, col: 162, offset: 22225},
										offset: 311,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 752, col: 1, offset: 22353},
			expr: &actionExpr{
				pos: position{line: 752, col: 20, offset: 22372},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 752, col: 20, offset: 22372},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 752, col: 29, offset: 22381},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 752, col: 29, offset: 22381},
								offset: 144,
							},
							&ruleRefExpr{
								pos:    position{line: 752, col: 50, offset: 22402},
								offset: 149,
							},
							&ruleRefExpr{
								pos:    position{line: 752, col: 72, offset: 22424},
								offset: 141,
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 756, col: 1, offset: 22468},
			expr: &actionExpr{
				pos: position{line: 756, col: 13, offset: 22480},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 756, col: 13, offset: 22480},
					expr: &choiceExpr{
						pos: position{line: 756, col: 15, offset: 22482},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 756, col: 15, offset: 22482},
								offset: 134,
							},
							&ruleRefExpr{
								pos:    position{line: 756, col: 26, offset: 22493},
								offset: 137,
							},
							&ruleRefExpr{
								pos:    position{line: 756, col: 48, offset: 22515},
								offset: 311,
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 760, col: 1, offset: 22569},
			expr: &seqExpr{
				pos: position{line: 760, col: 24, offset: 22592},
				exprs: []any{
					&notExpr{
						pos: position{line: 760, col: 24, offset: 22592},
						expr: &ruleRefExpr{
							pos:    position{line: 760, col: 25, offset: 22593},
							offset: 134,
						},
					},
					&notExpr{
						pos: position{line: 760, col: 34, offset: 22602},
						expr: &ruleRefExpr{
							pos:    position{line: 760, col: 35, offset: 22603},
							offset: 137,
						},
					},
					&notExpr{
						pos: position{line: 760, col: 54, offset: 22622},
						expr: &ruleRefExpr{
							pos:    position{line: 760, col: 55, offset: 22623},
							offset: 120,
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 762, col: 1, offset: 22636},
			expr: &notExpr{
				pos: position{line: 762, col: 33, offset: 22668},
				expr: &ruleRefExpr{
					pos:    position{line: 762, col: 34, offset: 22669},
					offset: 120,
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 764, col: 1, offset: 22682},
			expr: &actionExpr{
				pos: position{line: 764, col: 22, offset: 22703},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 764, col: 22, offset: 22703},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 764, col: 22, offset: 22703},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 764, col: 28, offset: 22709},
								expr: &ruleRefExpr{
									pos:    position{line: 764, col: 29, offset: 22710},
									offset: 145,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 764, col: 51, offset: 22732},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 764, col: 60, offset: 22741},
								offset: 148,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 774, col: 1, offset: 23004},
			expr: &choiceExpr{
				pos: position{line: 774, col: 23, offset: 23026},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 774, col: 23, offset: 23026},
						offset: 147,
					},
					&ruleRefExpr{
						pos:    position{line: 774, col: 50, offset: 23053},
						offset: 146,
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 776, col: 1, offset: 23087},
			expr: &actionExpr{
				pos: position{line: 776, col: 35, offset: 23121},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 776, col: 35, offset: 23121},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 776, col: 35, offset: 23121},
							offset: 142,
						},
						&labeledExpr{
							pos:   position{line: 776, col: 56, offset: 23142},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 776, col: 64, offset: 23150},
								expr: &ruleRefExpr{
									pos:    position{line: 776, col: 64, offset: 23150},
									offset: 311,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 776, col: 73, offset: 23159},
							offset: 143,
						},
						&labeledExpr{
							pos:   position{line: 776, col: 103, offset: 23189},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 776, col: 111, offset: 23197},
								expr: &ruleRefExpr{
									pos:    position{line: 776, col: 112, offset: 23198},
									offset: 150,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 776, col: 133, offset: 23219},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 776, col: 156, offset: 23242},
								expr: &actionExpr{
									pos: position{line: 776, col: 157, offset: 23243},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 776, col: 157, offset: 23243},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 776, col: 157, offset: 23243},
												label: "nl",
												expr: &ruleRefExpr{
													pos:    position{line: 776, col: 160, offset: 23246},
													offset: 311,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 776, col: 168, offset: 23254},
												offset: 328,
											},
											&andExpr{
												pos: position{line: 776, col: 178, offset: 23264},
												expr: &ruleRefExpr{
													pos:    position{line: 776, col: 180, offset: 23266},
													offset: 311,
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 776, col: 209, offset: 23295},
							expr: &ruleRefExpr{
								pos:    position{line: 776, col: 210, offset: 23296},
								offset: 311,
							},
						},
						&notExpr{
							pos: position{line: 776, col: 218, offset: 23304},
							expr: &choiceExpr{
								pos: position{line: 776, col: 220, offset: 23306},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 776, col: 220, offset: 23306},
										offset: 120,
									},
									&ruleRefExpr{
										pos:    position{line: 776, col: 234, offset: 23320},
										offset: 134,
									},
									&ruleRefExpr{
										pos:    position{line: 776, col: 245, offset: 23331},
										offset: 137,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 776, col: 267, offset: 23353},
							expr: &choiceExpr{
								pos: position{line: 776, col: 269, offset: 23355},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 776, col: 269, offset: 23355},
										offset: 145,
									},
									&ruleRefExpr{
										pos:    position{line: 776, col: 291, offset: 23377},
										offset: 148,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 789, col: 1, offset: 23734},
			expr: &actionExpr{
				pos: position{line: 789, col: 28, offset: 23761},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 789, col: 28, offset: 23761},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 789, col: 28, offset: 23761},
							offset: 142,
						},
						&ruleRefExpr{
							pos:    position{line: 789, col: 49, offset: 23782},
							offset: 311,
						},
						&ruleRefExpr{
							pos:    position{line: 789, col: 57, offset: 23790},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 789, col: 67, offset: 23800},
							expr: &ruleRefExpr{
								pos:    position{line: 789, col: 69, offset: 23802},
								offset: 311,
							},
						},
						&notExpr{
							pos: position{line: 789, col: 78, offset: 23811},
							expr: &ruleRefExpr{
								pos:    position{line: 789, col: 79, offset: 23812},
								offset: 134,
							},
						},
						&notExpr{
							pos: position{line: 789, col: 88, offset: 23821},
							expr: &ruleRefExpr{
								pos:    position{line: 789, col: 89, offset: 23822},
								offset: 137,
							},
						},
						&notExpr{
							pos: position{line: 789, col: 108, offset: 23841},
							expr: &ruleRefExpr{
								pos:    position{line: 789, col: 109, offset: 23842},
								offset: 120,
							},
						},
						&andExpr{
							pos: position{line: 789, col: 121, offset: 23854},
							expr: &choiceExpr{
								pos: position{line: 789, col: 123, offset: 23856},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 789, col: 123, offset: 23856},
										offset: 145,
									},
									&ruleRefExpr{
										pos:    position{line: 789, col: 145, offset: 23878},
										offset: 148,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 794, col: 1, offset: 24008},
			expr: &actionExpr{
				pos: position{line: 794, col: 27, offset: 24034},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 794, col: 27, offset: 24034},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 794, col: 27, offset: 24034},
							offset: 142,
						},
						&labeledExpr{
							pos:   position{line: 794, col: 48, offset: 24055},
							label: "nl",
							expr: &ruleRefExpr{
								pos:    position{line: 794, col: 51, offset: 24058},
								offset: 311,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 794, col: 59, offset: 24066},
							offset: 143,
						},
						&labeledExpr{
							pos:   position{line: 794, col: 89, offset: 24096},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 794, col: 97, offset: 24104},
								expr: &ruleRefExpr{
									pos:    position{line: 794, col: 98, offset: 24105},
									offset: 150,
								},
							},
						},
						&andExpr{
							pos: position{line: 794, col: 119, offset: 24126},
							expr: &choiceExpr{
								pos: position{line: 794, col: 121, offset: 24128},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 794, col: 121, offset: 24128},
										offset: 134,
									},
									&ruleRefExpr{
										pos:    position{line: 794, col: 132, offset: 24139},
										offset: 131,
									},
									&ruleRefExpr{
										pos:    position{line: 794, col: 150, offset: 24157},
										offset: 120,
									},
									&ruleRefExpr{
										pos:    position{line: 794, col: 164, offset: 24171},
										offset: 137,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 801, col: 1, offset: 24346},
			expr: &actionExpr{
				pos: position{line: 801, col: 23, offset: 24368},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 801, col: 23, offset: 24368},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 801, col: 23, offset: 24368},
							offset: 142,
						},
						&labeledExpr{
							pos:   position{line: 801, col: 44, offset: 24389},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 801, col: 52, offset: 24397},
								expr: &ruleRefExpr{
									pos:    position{line: 801, col: 53, offset: 24398},
									offset: 150,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 806, col: 1, offset: 24485},
			expr: &actionExpr{
				pos: position{line: 806, col: 22, offset: 24506},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 806, col: 22, offset: 24506},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 806, col: 22, offset: 24506},
							offset: 142,
						},
						&labeledExpr{
							pos:   position{line: 806, col: 44, offset: 24528},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 807, col: 4, offset: 24541},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 807, col: 4, offset: 24541},
										offset: 94,
									},
									&ruleRefExpr{
										pos:    position{line: 808, col: 5, offset: 24561},
										offset: 100,
									},
									&ruleRefExpr{
										pos:    position{line: 809, col: 5, offset: 24573},
										offset: 98,
									},
									&ruleRefExpr{
										pos:    position{line: 810, col: 5, offset: 24592},
										offset: 107,
									},
									&ruleRefExpr{
										pos:    position{line: 811, col: 5, offset: 24603},
										offset: 84,
									},
									&ruleRefExpr{
										pos:    position{line: 812, col: 5, offset: 24618},
										offset: 235,
									},
									&ruleRefExpr{
										pos:    position{line: 813, col: 5, offset: 24639},
										offset: 53,
									},
									&ruleRefExpr{
										pos:    position{line: 814, col: 5, offset: 24664},
										offset: 305,
									},
									&ruleRefExpr{
										pos:    position{line: 815, col: 5, offset: 24680},
										offset: 153,
									},
									&ruleRefExpr{
										pos:    position{line: 816, col: 5, offset: 24709},
										offset: 152,
									},
									&ruleRefExpr{
										pos:    position{line: 817, col: 5, offset: 24740},
										offset: 154,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 822, col: 1, offset: 24805},
			expr: &actionExpr{
				pos: position{line: 822, col: 21, offset: 24825},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 822, col: 21, offset: 24825},
					exprs: []any{
						&notExpr{
							pos: position{line: 822, col: 21, offset: 24825},
							expr: &ruleRefExpr{
								pos:    position{line: 822, col: 22, offset: 24826},
								offset: 155,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 822, col: 48, offset: 24852},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 822, col: 59, offset: 24863},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 822, col: 68, offset: 24872},
								offset: 2,
							},
						},
						&notExpr{
							pos: position{line: 822, col: 82, offset: 24886},
							expr: &ruleRefExpr{
								pos:    position{line: 822, col: 83, offset: 24887},
								offset: 137,
							},
						},
						&notExpr{
							pos: position{line: 822, col: 103, offset: 24907},
							expr: &ruleRefExpr{
								pos:    position{line: 822, col: 104, offset: 24908},
								offset: 134,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 827, col: 1, offset: 24953},
			expr: &actionExpr{
				pos: position{line: 827, col: 28, offset: 24980},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 827, col: 28, offset: 24980},
					expr: &seqExpr{
						pos: position{line: 827, col: 29, offset: 24981},
						exprs: []any{
							&notExpr{
								pos: position{line: 827, col: 29, offset: 24981},
								expr: &ruleRefExpr{
									pos:    position{line: 827, col: 30, offset: 24982},
									offset: 161,
								},
							},
							&notExpr{
								pos: position{line: 827, col: 40, offset: 24992},
								expr: &ruleRefExpr{
									pos:    position{line: 827, col: 41, offset: 24993},
									offset: 108,
								},
							},
							&notExpr{
								pos: position{line: 827, col: 51, offset: 25003},
								expr: &ruleRefExpr{
									pos:    position{line: 827, col: 52, offset: 25004},
									offset: 99,
								},
							},
							&notExpr{
								pos: position{line: 827, col: 73, offset: 25025},
								expr: &ruleRefExpr{
									pos:    position{line: 827, col: 74, offset: 25026},
									offset: 242,
								},
							},
							&charClassMatcher{
								pos:        position{line: 827, col: 99, offset: 25051},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&notExpr{
								pos: position{line: 827, col: 109, offset: 25061},
								expr: &ruleRefExpr{
									pos:    position{line: 827, col: 110, offset: 25062},
									offset: 137,
								},
							},
							&notExpr{
								pos: position{line: 827, col: 129, offset: 25081},
								expr: &ruleRefExpr{
									pos:    position{line: 827, col: 130, offset: 25082},
									offset: 134,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellSpaces",
			pos:  position{line: 831, col: 1, offset: 25154},
			expr: &actionExpr{
				pos: position{line: 831, col: 25, offset: 25178},
				run: (*parser).callonInlineTableCellSpaces1,
				expr: &oneOrMoreExpr{
					pos: position{line: 831, col: 25, offset: 25178},
					expr: &seqExpr{
						pos: position{line: 831, col: 26, offset: 25179},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 831, col: 26, offset: 25179},
								offset: 333,
							},
							&notExpr{
								pos: position{line: 831, col: 28, offset: 25181},
								expr: &ruleRefExpr{
									pos:    position{line: 831, col: 29, offset: 25182},
									offset: 137,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 835, col: 1, offset: 25263},
			expr: &actionExpr{
				pos: position{line: 835, col: 27, offset: 25289},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &seqExpr{
					pos: position{line: 835, col: 27, offset: 25289},
					exprs: []any{
						&notExpr{
							pos: position{line: 835, col: 27, offset: 25289},
							expr: &ruleRefExpr{
								pos:    position{line: 835, col: 28, offset: 25290},
								offset: 137,
							},
						},
						&choiceExpr{
							pos: position{line: 835, col: 48, offset: 25310},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 835, col: 48, offset: 25310},
									val:        "\\|",
									ignoreCase: false,
									want:       "\"\\\\|\"",
								},
								&charClassMatcher{
									pos:        position{line: 835, col: 56, offset: 25318},
									val:        "[^|\\r\\n]",
									chars:      []rune{'|', '\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 841, col: 1, offset: 25438},
			expr: &actionExpr{
				pos: position{line: 841, col: 29, offset: 25466},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 841, col: 29, offset: 25466},
					exprs: []any{
						&notExpr{
							pos: position{line: 841, col: 29, offset: 25466},
							expr: &ruleRefExpr{
								pos:    position{line: 841, col: 30, offset: 25467},
								offset: 134,
							},
						},
						&choiceExpr{
							pos: position{line: 841, col: 40, offset: 25477},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 841, col: 40, offset: 25477},
									offset: 320,
								},
								&ruleRefExpr{
									pos:    position{line: 841, col: 58, offset: 25495},
									offset: 311,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 841, col: 67, offset: 25504},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 841, col: 77, offset: 25514},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 841, col: 84, offset: 25521},
								expr: &ruleRefExpr{
									pos:    position{line: 841, col: 85, offset: 25522},
									offset: 160,
								},
							},
						},
						&notExpr{
							pos: position{line: 841, col: 103, offset: 25540},
							expr: &litMatcher{
								pos:        position{line: 841, col: 104, offset: 25541},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 841, col: 109, offset: 25546},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 848, col: 1, offset: 25662},
			expr: &actionExpr{
				pos: position{line: 848, col: 32, offset: 25693},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 848, col: 32, offset: 25693},
					exprs: []any{
						&notExpr{
							pos: position{line: 848, col: 32, offset: 25693},
							expr: &ruleRefExpr{
								pos:    position{line: 848, col: 33, offset: 25694},
								offset: 134,
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 42, offset: 25703},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 49, offset: 25710},
								expr: &ruleRefExpr{
									pos:    position{line: 848, col: 50, offset: 25711},
									offset: 158,
								},
							},
						},
						&notExpr{
							pos: position{line: 848, col: 78, offset: 25739},
							expr: &litMatcher{
								pos:        position{line: 848, col: 79, offset: 25740},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 848, col: 84, offset: 25745},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 853, col: 1, offset: 25850},
			expr: &actionExpr{
				pos: position{line: 853, col: 26, offset: 25875},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 853, col: 26, offset: 25875},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 853, col: 26, offset: 25875},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 853, col: 36, offset: 25885},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 853, col: 44, offset: 25893},
								offset: 160,
							},
						},
						&andCodeExpr{
							pos: position{line: 853, col: 61, offset: 25910},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 860, col: 1, offset: 26036},
			expr: &actionExpr{
				pos: position{line: 860, col: 29, offset: 26064},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 860, col: 29, offset: 26064},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 860, col: 29, offset: 26064},
							label: "lead",
							expr: &ruleRefExpr{
								pos:    position{line: 860, col: 35, offset: 26070},
								offset: 332,
							},
						},
						&labeledExpr{
							pos:   position{line: 860, col: 39, offset: 26074},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 860, col: 47, offset: 26082},
								offset: 160,
							},
						},
						&andCodeExpr{
							pos: position{line: 860, col: 64, offset: 26099},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 866, col: 1, offset: 26185},
			expr: &actionExpr{
				pos: position{line: 866, col: 17, offset: 26201},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 866, col: 17, offset: 26201},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 866, col: 17, offset: 26201},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 866, col: 24, offset: 26208},
								expr: &actionExpr{
									pos: position{line: 866, col: 25, offset: 26209},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 866, col: 25, offset: 26209},
										label: "n",
										expr: &ruleRefExpr{
											pos:    position{line: 866, col: 27, offset: 26211},
											offset: 313,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 868, col: 12, offset: 26282},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 868, col: 17, offset: 26287},
								expr: &actionExpr{
									pos: position{line: 868, col: 18, offset: 26288},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 868, col: 18, offset: 26288},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 868, col: 18, offset: 26288},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 868, col: 22, offset: 26292},
												label: "n",
												expr: &ruleRefExpr{
													pos:    position{line: 868, col: 24, offset: 26294},
													offset: 313,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 871, col: 11, offset: 26372},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 879, col: 1, offset: 26600},
			expr: &actionExpr{
				pos: position{line: 880, col: 5, offset: 26624},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 880, col: 5, offset: 26624},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 880, col: 5, offset: 26624},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 880, col: 16, offset: 26635},
								expr: &actionExpr{
									pos: position{line: 881, col: 9, offset: 26645},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 881, col: 9, offset: 26645},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 881, col: 9, offset: 26645},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 881, col: 21, offset: 26657},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 881, col: 21, offset: 26657},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 881, col: 21, offset: 26657},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 881, col: 26, offset: 26662},
																expr: &charClassMatcher{
																	pos:        position{line: 881, col: 26, offset: 26662},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 881, col: 63, offset: 26699},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 26781},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 885, col: 10, offset: 26786},
								expr: &actionExpr{
									pos: position{line: 886, col: 9, offset: 26796},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 886, col: 9, offset: 26796},
										label: "span",
										expr: &ruleRefExpr{
											pos:    position{line: 886, col: 15, offset: 26802},
											offset: 159,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 26873},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 890, col: 21, offset: 26889},
								expr: &choiceExpr{
									pos: position{line: 891, col: 9, offset: 26899},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 891, col: 9, offset: 26899},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 891, col: 9, offset: 26899},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 892, col: 11, offset: 26967},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 892, col: 11, offset: 26967},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 893, col: 11, offset: 27036},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 893, col: 11, offset: 27036},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 27108},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 895, col: 19, offset: 27122},
								expr: &choiceExpr{
									pos: position{line: 896, col: 9, offset: 27132},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 896, col: 9, offset: 27132},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 896, col: 9, offset: 27132},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 897, col: 11, offset: 27198},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 897, col: 11, offset: 27198},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 898, col: 11, offset: 27267},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 898, col: 11, offset: 27267},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 27337},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 900, col: 11, offset: 27343},
								expr: &choiceExpr{
									pos: position{line: 901, col: 9, offset: 27353},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 901, col: 9, offset: 27353},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 901, col: 9, offset: 27353},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 902, col: 11, offset: 27415},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 902, col: 11, offset: 27415},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 903, col: 11, offset: 27476},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 903, col: 11, offset: 27476},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 904, col: 11, offset: 27539},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 904, col: 11, offset: 27539},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 905, col: 11, offset: 27600},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 905, col: 11, offset: 27600},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 906, col: 11, offset: 27662},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 906, col: 11, offset: 27662},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 907, col: 11, offset: 27726},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 907, col: 11, offset: 27726},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 909, col: 6, offset: 27789},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 926, col: 1, offset: 28394},
			expr: &choiceExpr{
				pos: position{line: 926, col: 14, offset: 28407},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 926, col: 14, offset: 28407},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 926, col: 27, offset: 28420},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 926, col: 39, offset: 28432},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 926, col: 50, offset: 28443},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 926, col: 61, offset: 28454},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 928, col: 1, offset: 28467},
			expr: &actionExpr{
				pos: position{line: 928, col: 7, offset: 28473},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 928, col: 7, offset: 28473},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 928, col: 7, offset: 28473},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 928, col: 14, offset: 28480},
								expr: &ruleRefExpr{
									pos:    position{line: 928, col: 15, offset: 28481},
									offset: 161,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 27, offset: 28493},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 928, col: 33, offset: 28499},
								offset: 164,
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 932, col: 1, offset: 28597},
			expr: &actionExpr{
				pos: position{line: 932, col: 11, offset: 28607},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 932, col: 11, offset: 28607},
					exprs: []any{
						&notExpr{
							pos: position{line: 932, col: 11, offset: 28607},
							expr: &litMatcher{
								pos:        position{line: 932, col: 12, offset: 28608},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 16, offset: 28612},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:    position{line: 932, col: 24, offset: 28620},
								offset: 161,
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 35, offset: 28631},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 932, col: 41, offset: 28637},
								offset: 164,
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 939, col: 1, offset: 28738},
			expr: &actionExpr{
				pos: position{line: 939, col: 8, offset: 28745},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 939, col: 8, offset: 28745},
					exprs: []any{
						&notExpr{
							pos: position{line: 939, col: 8, offset: 28745},
							expr: &litMatcher{
								pos:        position{line: 939, col: 9, offset: 28746},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 939, col: 13, offset: 28750},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 939, col: 24, offset: 28761},
								expr: &ruleRefExpr{
									pos:    position{line: 939, col: 24, offset: 28761},
									offset: 165,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 943, col: 1, offset: 28832},
			expr: &choiceExpr{
				pos: position{line: 943, col: 16, offset: 28847},
				alternatives: []any{
					&oneOrMoreExpr{
						pos: position{line: 943, col: 16, offset: 28847},
						expr: &charClassMatcher{
							pos:        position{line: 943, col: 17, offset: 28848},
							val:        "[^\\n{.<>!?,;[\\] ]",
							chars:      []rune{'\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 944, col: 5, offset: 28873},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 944, col: 5, offset: 28873},
								val:        "[.?!;,]",
								chars:      []rune{'.', '?', '!', ';', ','},
								ignoreCase: false,
								inverted:   false,
							},
							&andExpr{
								pos: position{line: 944, col: 13, offset: 28881},
								expr: &seqExpr{
									pos: position{line: 944, col: 15, offset: 28883},
									exprs: []any{
										&notExpr{
											pos: position{line: 944, col: 15, offset: 28883},
											expr: &ruleRefExpr{
												pos:    position{line: 944, col: 16, offset: 28884},
												offset: 333,
											},
										},
										&notExpr{
											pos: position{line: 944, col: 18, offset: 28886},
											expr: &ruleRefExpr{
												pos:    position{line: 944, col: 19, offset: 28887},
												offset: 318,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 945, col: 4, offset: 28902},
						offset: 53,
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 949, col: 1, offset: 28926},
			expr: &actionExpr{
				pos: position{line: 949, col: 9, offset: 28934},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 949, col: 9, offset: 28934},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 949, col: 9, offset: 28934},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 949, col: 15, offset: 28940},
								offset: 167,
							},
						},
						&litMatcher{
							pos:        position{line: 949, col: 26, offset: 28951},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 949, col: 30, offset: 28955},
							label: "domain",
							expr: &ruleRefExpr{
								pos:    position{line: 949, col: 38, offset: 28963},
								offset: 168,
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 953, col: 1, offset: 29061},
			expr: &actionExpr{
				pos: position{line: 953, col: 13, offset: 29073},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 953, col: 13, offset: 29073},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 953, col: 13, offset: 29073},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 953, col: 19, offset: 29079},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 953, col: 19, offset: 29079},
									expr: &choiceExpr{
										pos: position{line: 953, col: 20, offset: 29080},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 953, col: 20, offset: 29080},
												offset: 317,
											},
											&charClassMatcher{
												pos:        position{line: 953, col: 35, offset: 29095},
												val:        "[!#$%&'*+-/=?^_`{|}~.]",
												chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:     []rune{'+', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 955, col: 4, offset: 29223},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 962, col: 1, offset: 29389},
			expr: &actionExpr{
				pos: position{line: 962, col: 15, offset: 29403},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 962, col: 15, offset: 29403},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 962, col: 15, offset: 29403},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 962, col: 23, offset: 29411},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 962, col: 24, offset: 29412},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 962, col: 24, offset: 29412},
											expr: &ruleRefExpr{
												pos:    position{line: 962, col: 25, offset: 29413},
												offset: 317,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 962, col: 40, offset: 29428},
											expr: &seqExpr{
												pos: position{line: 962, col: 41, offset: 29429},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 962, col: 41, offset: 29429},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 962, col: 45, offset: 29433},
														expr: &choiceExpr{
															pos: position{line: 962, col: 46, offset: 29434},
															alternatives: []any{
																&ruleRefExpr{
																	pos:    position{line: 962, col: 46, offset: 29434},
																	offset: 317,
																},
																&litMatcher{
																	pos:        position{line: 962, col: 61, offset: 29449},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 964, col: 4, offset: 29494},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 972, col: 1, offset: 29636},
			expr: &actionExpr{
				pos: position{line: 973, col: 5, offset: 29650},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 973, col: 5, offset: 29650},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 973, col: 5, offset: 29650},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 973, col: 12, offset: 29657},
								offset: 170,
							},
						},
						&labeledExpr{
							pos:   position{line: 974, col: 5, offset: 29675},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 974, col: 11, offset: 29681},
								expr: &ruleRefExpr{
									pos:    position{line: 974, col: 12, offset: 29682},
									offset: 174,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 975, col: 5, offset: 29700},
							offset: 171,
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 979, col: 1, offset: 29858},
			expr: &actionExpr{
				pos: position{line: 979, col: 16, offset: 29873},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 979, col: 16, offset: 29873},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 979, col: 16, offset: 29873},
							offset: 321,
						},
						&labeledExpr{
							pos:   position{line: 979, col: 32, offset: 29889},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 979, col: 42, offset: 29899},
								offset: 173,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 979, col: 59, offset: 29916},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 979, col: 69, offset: 29926},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 986, col: 1, offset: 30103},
			expr: &seqExpr{
				pos: position{line: 986, col: 14, offset: 30116},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 986, col: 14, offset: 30116},
						offset: 321,
					},
					&labeledExpr{
						pos:   position{line: 986, col: 30, offset: 30132},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 986, col: 40, offset: 30142},
							offset: 173,
						},
					},
					&andExpr{
						pos: position{line: 986, col: 57, offset: 30159},
						expr: &ruleRefExpr{
							pos:    position{line: 986, col: 58, offset: 30160},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 986, col: 68, offset: 30170},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 995, col: 1, offset: 30430},
			expr: &actionExpr{
				pos: position{line: 995, col: 18, offset: 30447},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 995, col: 18, offset: 30447},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 995, col: 18, offset: 30447},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 995, col: 27, offset: 30456},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 995, col: 27, offset: 30456},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 995, col: 34, offset: 30463},
										expr: &litMatcher{
											pos:        position{line: 995, col: 34, offset: 30463},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 995, col: 40, offset: 30469},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 1002, col: 1, offset: 30588},
			expr: &actionExpr{
				pos: position{line: 1002, col: 20, offset: 30607},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 20, offset: 30607},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1002, col: 20, offset: 30607},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1002, col: 29, offset: 30616},
								offset: 172,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1003, col: 5, offset: 30637},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 1008, col: 1, offset: 30764},
			expr: &actionExpr{
				pos: position{line: 1008, col: 15, offset: 30778},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 1008, col: 16, offset: 30779},
					exprs: []any{
						&notExpr{
							pos: position{line: 1008, col: 16, offset: 30779},
							expr: &ruleRefExpr{
								pos:    position{line: 1008, col: 17, offset: 30780},
								offset: 173,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1008, col: 34, offset: 30797},
							offset: 319,
						},
						&labeledExpr{
							pos:   position{line: 1008, col: 47, offset: 30810},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1008, col: 52, offset: 30815},
								offset: 327,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1008, col: 60, offset: 30823},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 1012, col: 1, offset: 30874},
			expr: &actionExpr{
				pos: position{line: 1013, col: 5, offset: 30885},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 5, offset: 30885},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1013, col: 5, offset: 30885},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1013, col: 12, offset: 30892},
								offset: 176,
							},
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 5, offset: 30907},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1014, col: 11, offset: 30913},
								expr: &seqExpr{
									pos: position{line: 1014, col: 12, offset: 30914},
									exprs: []any{
										&notExpr{
											pos: position{line: 1014, col: 12, offset: 30914},
											expr: &ruleRefExpr{
												pos:    position{line: 1014, col: 13, offset: 30915},
												offset: 179,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1014, col: 27, offset: 30929},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1015, col: 5, offset: 30943},
							offset: 177,
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 1019, col: 1, offset: 31092},
			expr: &actionExpr{
				pos: position{line: 1019, col: 13, offset: 31104},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 1019, col: 13, offset: 31104},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1019, col: 13, offset: 31104},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1019, col: 23, offset: 31114},
								offset: 179,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1019, col: 37, offset: 31128},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1019, col: 47, offset: 31138},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 1026, col: 1, offset: 31312},
			expr: &seqExpr{
				pos: position{line: 1026, col: 11, offset: 31322},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1026, col: 11, offset: 31322},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1026, col: 21, offset: 31332},
							offset: 179,
						},
					},
					&andExpr{
						pos: position{line: 1026, col: 35, offset: 31346},
						expr: &ruleRefExpr{
							pos:    position{line: 1026, col: 36, offset: 31347},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1026, col: 46, offset: 31357},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 1035, col: 1, offset: 31611},
			expr: &actionExpr{
				pos: position{line: 1035, col: 14, offset: 31624},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 1035, col: 14, offset: 31624},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 1035, col: 23, offset: 31633},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 1040, col: 1, offset: 31689},
			expr: &actionExpr{
				pos: position{line: 1040, col: 17, offset: 31705},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 17, offset: 31705},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1040, col: 17, offset: 31705},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1040, col: 26, offset: 31714},
								offset: 178,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1041, col: 5, offset: 31731},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1047, col: 1, offset: 31864},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 15, offset: 31878},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1047, col: 15, offset: 31878},
						offset: 181,
					},
					&ruleRefExpr{
						pos:    position{line: 1047, col: 34, offset: 31897},
						offset: 184,
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1049, col: 1, offset: 31916},
			expr: &actionExpr{
				pos: position{line: 1049, col: 20, offset: 31935},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 20, offset: 31935},
					exprs: []any{
						&notExpr{
							pos: position{line: 1049, col: 20, offset: 31935},
							expr: &ruleRefExpr{
								pos:    position{line: 1049, col: 21, offset: 31936},
								offset: 334,
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 28, offset: 31943},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1049, col: 32, offset: 31947},
							expr: &notExpr{
								pos: position{line: 1049, col: 34, offset: 31949},
								expr: &litMatcher{
									pos:        position{line: 1049, col: 35, offset: 31950},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 40, offset: 31955},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1049, col: 47, offset: 31962},
								offset: 182,
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 70, offset: 31985},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1049, col: 74, offset: 31989},
							expr: &litMatcher{
								pos:        position{line: 1049, col: 75, offset: 31990},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1049, col: 79, offset: 31994},
							expr: &notExpr{
								pos: position{line: 1049, col: 81, offset: 31996},
								expr: &ruleRefExpr{
									pos:    position{line: 1049, col: 82, offset: 31997},
									offset: 317,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1053, col: 1, offset: 32042},
			expr: &actionExpr{
				pos: position{line: 1053, col: 25, offset: 32066},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 25, offset: 32066},
					exprs: []any{
						&notExpr{
							pos: position{line: 1053, col: 25, offset: 32066},
							expr: &ruleRefExpr{
								pos:    position{line: 1053, col: 26, offset: 32067},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 28, offset: 32069},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1053, col: 34, offset: 32075},
								expr: &actionExpr{
									pos: position{line: 1053, col: 35, offset: 32076},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1053, col: 35, offset: 32076},
										exprs: []any{
											&notExpr{
												pos: position{line: 1053, col: 35, offset: 32076},
												expr: &ruleRefExpr{
													pos:    position{line: 1053, col: 36, offset: 32077},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 1053, col: 38, offset: 32079},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1053, col: 44, offset: 32085},
													expr: &ruleRefExpr{
														pos:    position{line: 1053, col: 45, offset: 32086},
														offset: 183,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1057, col: 1, offset: 32240},
			expr: &seqExpr{
				pos: position{line: 1057, col: 27, offset: 32266},
				exprs: []any{
					&notExpr{
						pos: position{line: 1057, col: 27, offset: 32266},
						expr: &seqExpr{
							pos: position{line: 1057, col: 29, offset: 32268},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1057, col: 29, offset: 32268},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&notExpr{
									pos: position{line: 1057, col: 33, offset: 32272},
									expr: &litMatcher{
										pos:        position{line: 1057, col: 34, offset: 32273},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1057, col: 39, offset: 32278},
						offset: 95,
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1059, col: 1, offset: 32300},
			expr: &actionExpr{
				pos: position{line: 1059, col: 20, offset: 32319},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 20, offset: 32319},
					exprs: []any{
						&notExpr{
							pos: position{line: 1059, col: 20, offset: 32319},
							expr: &ruleRefExpr{
								pos:    position{line: 1059, col: 21, offset: 32320},
								offset: 335,
							},
						},
						&litMatcher{
							pos:        position{line: 1059, col: 34, offset: 32333},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1059, col: 39, offset: 32338},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1059, col: 46, offset: 32345},
								offset: 185,
							},
						},
						&litMatcher{
							pos:        position{line: 1059, col: 69, offset: 32368},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1063, col: 1, offset: 32405},
			expr: &actionExpr{
				pos: position{line: 1063, col: 25, offset: 32429},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 25, offset: 32429},
					exprs: []any{
						&notExpr{
							pos: position{line: 1063, col: 25, offset: 32429},
							expr: &ruleRefExpr{
								pos:    position{line: 1063, col: 26, offset: 32430},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 1063, col: 28, offset: 32432},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1063, col: 34, offset: 32438},
								expr: &actionExpr{
									pos: position{line: 1063, col: 35, offset: 32439},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1063, col: 35, offset: 32439},
										exprs: []any{
											&notExpr{
												pos: position{line: 1063, col: 35, offset: 32439},
												expr: &ruleRefExpr{
													pos:    position{line: 1063, col: 36, offset: 32440},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 1063, col: 38, offset: 32442},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1063, col: 44, offset: 32448},
													expr: &ruleRefExpr{
														pos:    position{line: 1063, col: 45, offset: 32449},
														offset: 186,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1067, col: 1, offset: 32615},
			expr: &seqExpr{
				pos: position{line: 1067, col: 27, offset: 32641},
				exprs: []any{
					&notExpr{
						pos: position{line: 1067, col: 27, offset: 32641},
						expr: &litMatcher{
							pos:        position{line: 1067, col: 29, offset: 32643},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1067, col: 35, offset: 32649},
						offset: 95,
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1070, col: 1, offset: 32672},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 32686},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1071, col: 5, offset: 32686},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1071, col: 5, offset: 32686},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1071, col: 12, offset: 32693},
								offset: 188,
							},
						},
						&labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 32711},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1072, col: 11, offset: 32717},
								expr: &seqExpr{
									pos: position{line: 1072, col: 12, offset: 32718},
									exprs: []any{
										&notExpr{
											pos: position{line: 1072, col: 12, offset: 32718},
											expr: &ruleRefExpr{
												pos:    position{line: 1072, col: 13, offset: 32719},
												offset: 191,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1072, col: 30, offset: 32736},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1073, col: 5, offset: 32750},
							offset: 189,
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1077, col: 1, offset: 32908},
			expr: &actionExpr{
				pos: position{line: 1077, col: 16, offset: 32923},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1077, col: 16, offset: 32923},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1077, col: 16, offset: 32923},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1077, col: 26, offset: 32933},
								offset: 191,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1077, col: 43, offset: 32950},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1077, col: 53, offset: 32960},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1084, col: 1, offset: 33145},
			expr: &seqExpr{
				pos: position{line: 1084, col: 14, offset: 33158},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1084, col: 14, offset: 33158},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1084, col: 24, offset: 33168},
							offset: 191,
						},
					},
					&andExpr{
						pos: position{line: 1084, col: 41, offset: 33185},
						expr: &ruleRefExpr{
							pos:    position{line: 1084, col: 42, offset: 33186},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1084, col: 52, offset: 33196},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1093, col: 1, offset: 33464},
			expr: &actionExpr{
				pos: position{line: 1093, col: 17, offset: 33480},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1093, col: 17, offset: 33480},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1093, col: 17, offset: 33480},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1093, col: 26, offset: 33489},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1093, col: 26, offset: 33489},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1093, col: 33, offset: 33496},
										expr: &litMatcher{
											pos:        position{line: 1093, col: 33, offset: 33496},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1093, col: 39, offset: 33502},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1100, col: 1, offset: 33625},
			expr: &actionExpr{
				pos: position{line: 1100, col: 20, offset: 33644},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 20, offset: 33644},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1100, col: 20, offset: 33644},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1100, col: 29, offset: 33653},
								offset: 190,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1101, col: 5, offset: 33673},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1106, col: 1, offset: 33804},
			expr: &actionExpr{
				pos: position{line: 1106, col: 15, offset: 33818},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 16, offset: 33819},
					exprs: []any{
						&notExpr{
							pos: position{line: 1106, col: 16, offset: 33819},
							expr: &ruleRefExpr{
								pos:    position{line: 1106, col: 17, offset: 33820},
								offset: 191,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1106, col: 34, offset: 33837},
							offset: 319,
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 47, offset: 33850},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1106, col: 52, offset: 33855},
								offset: 327,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1106, col: 60, offset: 33863},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1112, col: 1, offset: 33912},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 33926},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 5, offset: 33926},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1113, col: 5, offset: 33926},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1113, col: 12, offset: 33933},
								offset: 194,
							},
						},
						&labeledExpr{
							pos:   position{line: 1114, col: 5, offset: 33951},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1114, col: 11, offset: 33957},
								expr: &ruleRefExpr{
									pos:    position{line: 1114, col: 12, offset: 33958},
									offset: 198,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1115, col: 5, offset: 33976},
							offset: 195,
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1119, col: 1, offset: 34143},
			expr: &actionExpr{
				pos: position{line: 1119, col: 16, offset: 34158},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 16, offset: 34158},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1119, col: 16, offset: 34158},
							offset: 321,
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 32, offset: 34174},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1119, col: 42, offset: 34184},
								offset: 197,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1119, col: 59, offset: 34201},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1119, col: 69, offset: 34211},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1126, col: 1, offset: 34388},
			expr: &seqExpr{
				pos: position{line: 1126, col: 14, offset: 34401},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 1126, col: 14, offset: 34401},
						offset: 321,
					},
					&labeledExpr{
						pos:   position{line: 1126, col: 30, offset: 34417},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1126, col: 40, offset: 34427},
							offset: 197,
						},
					},
					&andExpr{
						pos: position{line: 1126, col: 57, offset: 34444},
						expr: &ruleRefExpr{
							pos:    position{line: 1126, col: 58, offset: 34445},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1126, col: 68, offset: 34455},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1135, col: 1, offset: 34715},
			expr: &actionExpr{
				pos: position{line: 1135, col: 15, offset: 34729},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 15, offset: 34729},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1135, col: 15, offset: 34729},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1135, col: 21, offset: 34735},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1135, col: 21, offset: 34735},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1135, col: 28, offset: 34742},
										expr: &litMatcher{
											pos:        position{line: 1135, col: 28, offset: 34742},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1135, col: 34, offset: 34748},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1142, col: 1, offset: 34861},
			expr: &actionExpr{
				pos: position{line: 1142, col: 20, offset: 34880},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 20, offset: 34880},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1142, col: 20, offset: 34880},
							label: "dots",
							expr: &ruleRefExpr{
								pos:    position{line: 1142, col: 26, offset: 34886},
								offset: 196,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1143, col: 5, offset: 34904},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1148, col: 1, offset: 35028},
			expr: &actionExpr{
				pos: position{line: 1148, col: 15, offset: 35042},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 16, offset: 35043},
					exprs: []any{
						&notExpr{
							pos: position{line: 1148, col: 16, offset: 35043},
							expr: &ruleRefExpr{
								pos:    position{line: 1148, col: 17, offset: 35044},
								offset: 197,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1148, col: 34, offset: 35061},
							offset: 319,
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 47, offset: 35074},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1148, col: 52, offset: 35079},
								offset: 327,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1148, col: 60, offset: 35087},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1152, col: 1, offset: 35134},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 35148},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 35148},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1153, col: 5, offset: 35148},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1153, col: 12, offset: 35155},
								offset: 200,
							},
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 5, offset: 35173},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1154, col: 11, offset: 35179},
								expr: &seqExpr{
									pos: position{line: 1154, col: 12, offset: 35180},
									exprs: []any{
										&notExpr{
											pos: position{line: 1154, col: 12, offset: 35180},
											expr: &ruleRefExpr{
												pos:    position{line: 1154, col: 13, offset: 35181},
												offset: 203,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1154, col: 30, offset: 35198},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1155, col: 5, offset: 35212},
							offset: 201,
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1159, col: 1, offset: 35370},
			expr: &actionExpr{
				pos: position{line: 1159, col: 16, offset: 35385},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 16, offset: 35385},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1159, col: 16, offset: 35385},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1159, col: 26, offset: 35395},
								offset: 203,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1159, col: 43, offset: 35412},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1159, col: 53, offset: 35422},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1166, col: 1, offset: 35599},
			expr: &seqExpr{
				pos: position{line: 1166, col: 14, offset: 35612},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1166, col: 14, offset: 35612},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1166, col: 24, offset: 35622},
							offset: 203,
						},
					},
					&andExpr{
						pos: position{line: 1166, col: 41, offset: 35639},
						expr: &ruleRefExpr{
							pos:    position{line: 1166, col: 42, offset: 35640},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1166, col: 52, offset: 35650},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1175, col: 1, offset: 35910},
			expr: &actionExpr{
				pos: position{line: 1175, col: 20, offset: 35929},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 20, offset: 35929},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1175, col: 20, offset: 35929},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1175, col: 31, offset: 35940},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1175, col: 31, offset: 35940},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1175, col: 38, offset: 35947},
										expr: &litMatcher{
											pos:        position{line: 1175, col: 38, offset: 35947},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1175, col: 44, offset: 35953},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1182, col: 1, offset: 36076},
			expr: &actionExpr{
				pos: position{line: 1182, col: 20, offset: 36095},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 20, offset: 36095},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1182, col: 20, offset: 36095},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:    position{line: 1182, col: 31, offset: 36106},
								offset: 202,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1183, col: 5, offset: 36129},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1189, col: 1, offset: 36259},
			expr: &actionExpr{
				pos: position{line: 1189, col: 12, offset: 36270},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 12, offset: 36270},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1189, col: 12, offset: 36270},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1189, col: 20, offset: 36278},
								expr: &ruleRefExpr{
									pos:    position{line: 1189, col: 21, offset: 36279},
									offset: 205,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1189, col: 39, offset: 36297},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1193, col: 1, offset: 36354},
			expr: &actionExpr{
				pos: position{line: 1193, col: 19, offset: 36372},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 19, offset: 36372},
					exprs: []any{
						&notExpr{
							pos: position{line: 1193, col: 19, offset: 36372},
							expr: &ruleRefExpr{
								pos:    position{line: 1193, col: 20, offset: 36373},
								offset: 318,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1193, col: 30, offset: 36383},
							offset: 321,
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 46, offset: 36399},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1193, col: 55, offset: 36408},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1193, col: 55, offset: 36408},
										offset: 208,
									},
									&ruleRefExpr{
										pos:    position{line: 1193, col: 68, offset: 36421},
										offset: 209,
									},
									&ruleRefExpr{
										pos:    position{line: 1193, col: 82, offset: 36435},
										offset: 210,
									},
									&ruleRefExpr{
										pos:    position{line: 1193, col: 96, offset: 36449},
										offset: 22,
									},
									&ruleRefExpr{
										pos:    position{line: 1193, col: 113, offset: 36466},
										offset: 26,
									},
									&ruleRefExpr{
										pos:    position{line: 1193, col: 130, offset: 36483},
										offset: 101,
									},
									&ruleRefExpr{
										pos:    position{line: 1193, col: 144, offset: 36497},
										offset: 206,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1193, col: 158, offset: 36511},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1197, col: 1, offset: 36550},
			expr: &actionExpr{
				pos: position{line: 1197, col: 16, offset: 36565},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 16, offset: 36565},
					exprs: []any{
						&notExpr{
							pos: position{line: 1197, col: 16, offset: 36565},
							expr: &ruleRefExpr{
								pos:    position{line: 1197, col: 17, offset: 36566},
								offset: 290,
							},
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 35, offset: 36584},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1197, col: 43, offset: 36592},
								expr: &ruleRefExpr{
									pos:    position{line: 1197, col: 43, offset: 36592},
									offset: 207,
								},
							},
						},
						&andExpr{
							pos: position{line: 1197, col: 64, offset: 36613},
							expr: &ruleRefExpr{
								pos:    position{line: 1197, col: 65, offset: 36614},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1201, col: 1, offset: 36701},
			expr: &choiceExpr{
				pos: position{line: 1202, col: 4, offset: 36728},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1202, col: 4, offset: 36728},
						offset: 53,
					},
					&oneOrMoreExpr{
						pos: position{line: 1204, col: 6, offset: 36759},
						expr: &charClassMatcher{
							pos:        position{line: 1204, col: 6, offset: 36759},
							val:        "[^\\r\\n{]",
							chars:      []rune{'\r', '\n', '{'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&litMatcher{
						pos:        position{line: 1205, col: 7, offset: 36777},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1208, col: 1, offset: 36785},
			expr: &actionExpr{
				pos: position{line: 1208, col: 14, offset: 36798},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 14, offset: 36798},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1208, col: 14, offset: 36798},
							offset: 284,
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 29, offset: 36813},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1208, col: 41, offset: 36825},
								offset: 292,
							},
						},
						&litMatcher{
							pos:        position{line: 1208, col: 64, offset: 36848},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1208, col: 69, offset: 36853},
							offset: 328,
						},
						&ruleRefExpr{
							pos:    position{line: 1208, col: 80, offset: 36864},
							offset: 324,
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 90, offset: 36874},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1208, col: 96, offset: 36880},
								expr: &ruleRefExpr{
									pos:    position{line: 1208, col: 97, offset: 36881},
									offset: 205,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1208, col: 116, offset: 36900},
							offset: 291,
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1213, col: 1, offset: 37088},
			expr: &actionExpr{
				pos: position{line: 1213, col: 15, offset: 37102},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 15, offset: 37102},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1213, col: 15, offset: 37102},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 26, offset: 37113},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1213, col: 38, offset: 37125},
								offset: 292,
							},
						},
						&litMatcher{
							pos:        position{line: 1213, col: 61, offset: 37148},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1213, col: 66, offset: 37153},
							offset: 328,
						},
						&ruleRefExpr{
							pos:    position{line: 1213, col: 77, offset: 37164},
							offset: 324,
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 87, offset: 37174},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1213, col: 93, offset: 37180},
								expr: &ruleRefExpr{
									pos:    position{line: 1213, col: 94, offset: 37181},
									offset: 205,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1213, col: 113, offset: 37200},
							offset: 291,
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1218, col: 1, offset: 37390},
			expr: &actionExpr{
				pos: position{line: 1218, col: 15, offset: 37404},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 15, offset: 37404},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1218, col: 15, offset: 37404},
							offset: 297,
						},
						&litMatcher{
							pos:        position{line: 1218, col: 31, offset: 37420},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1218, col: 35, offset: 37424},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 45, offset: 37434},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1218, col: 51, offset: 37440},
								offset: 298,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1218, col: 64, offset: 37453},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 75, offset: 37464},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1218, col: 84, offset: 37473},
								offset: 299,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1218, col: 100, offset: 37489},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 110, offset: 37499},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1218, col: 117, offset: 37506},
								offset: 298,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1218, col: 130, offset: 37519},
							offset: 328,
						},
						&litMatcher{
							pos:        position{line: 1218, col: 140, offset: 37529},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1218, col: 144, offset: 37533},
							offset: 328,
						},
						&ruleRefExpr{
							pos:    position{line: 1218, col: 155, offset: 37544},
							offset: 324,
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 165, offset: 37554},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1218, col: 171, offset: 37560},
								expr: &ruleRefExpr{
									pos:    position{line: 1218, col: 172, offset: 37561},
									offset: 205,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1218, col: 191, offset: 37580},
							offset: 291,
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1225, col: 1, offset: 37801},
			expr: &actionExpr{
				pos: position{line: 1226, col: 5, offset: 37813},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 5, offset: 37813},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1226, col: 5, offset: 37813},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1226, col: 12, offset: 37820},
								offset: 212,
							},
						},
						&labeledExpr{
							pos:   position{line: 1227, col: 5, offset: 37836},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1227, col: 11, offset: 37842},
								expr: &seqExpr{
									pos: position{line: 1227, col: 12, offset: 37843},
									exprs: []any{
										&notExpr{
											pos: position{line: 1227, col: 12, offset: 37843},
											expr: &ruleRefExpr{
												pos:    position{line: 1227, col: 13, offset: 37844},
												offset: 215,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1227, col: 28, offset: 37859},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1228, col: 5, offset: 37873},
							offset: 213,
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1232, col: 1, offset: 38025},
			expr: &actionExpr{
				pos: position{line: 1232, col: 14, offset: 38038},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1232, col: 14, offset: 38038},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1232, col: 14, offset: 38038},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1232, col: 24, offset: 38048},
								offset: 215,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1232, col: 39, offset: 38063},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1232, col: 49, offset: 38073},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1239, col: 1, offset: 38248},
			expr: &seqExpr{
				pos: position{line: 1239, col: 12, offset: 38259},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1239, col: 12, offset: 38259},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1239, col: 22, offset: 38269},
							offset: 215,
						},
					},
					&andExpr{
						pos: position{line: 1239, col: 37, offset: 38284},
						expr: &ruleRefExpr{
							pos:    position{line: 1239, col: 38, offset: 38285},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1239, col: 48, offset: 38295},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1248, col: 1, offset: 38547},
			expr: &actionExpr{
				pos: position{line: 1248, col: 19, offset: 38565},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 19, offset: 38565},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1248, col: 19, offset: 38565},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1248, col: 31, offset: 38577},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1248, col: 31, offset: 38577},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1248, col: 38, offset: 38584},
										expr: &litMatcher{
											pos:        position{line: 1248, col: 38, offset: 38584},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1248, col: 44, offset: 38590},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1255, col: 1, offset: 38715},
			expr: &actionExpr{
				pos: position{line: 1255, col: 18, offset: 38732},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 18, offset: 38732},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1255, col: 18, offset: 38732},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:    position{line: 1255, col: 30, offset: 38744},
								offset: 214,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1256, col: 5, offset: 38766},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1262, col: 1, offset: 38895},
			expr: &actionExpr{
				pos: position{line: 1262, col: 17, offset: 38911},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 17, offset: 38911},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1262, col: 17, offset: 38911},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1262, col: 22, offset: 38916},
								expr: &ruleRefExpr{
									pos:    position{line: 1262, col: 22, offset: 38916},
									offset: 89,
								},
							},
						},
						&andExpr{
							pos: position{line: 1262, col: 37, offset: 38931},
							expr: &ruleRefExpr{
								pos:    position{line: 1262, col: 38, offset: 38932},
								offset: 324,
							},
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 48, offset: 38942},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1262, col: 54, offset: 38948},
								expr: &ruleRefExpr{
									pos:    position{line: 1262, col: 55, offset: 38949},
									offset: 219,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 70, offset: 38964},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1262, col: 85, offset: 38979},
								expr: &ruleRefExpr{
									pos:    position{line: 1262, col: 86, offset: 38980},
									offset: 220,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1273, col: 1, offset: 39223},
			expr: &actionExpr{
				pos: position{line: 1273, col: 24, offset: 39246},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 24, offset: 39246},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1273, col: 24, offset: 39246},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1273, col: 28, offset: 39250},
							offset: 328,
						},
						&ruleRefExpr{
							pos:    position{line: 1273, col: 38, offset: 39260},
							offset: 311,
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 46, offset: 39268},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1273, col: 53, offset: 39275},
								offset: 3,
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1277, col: 1, offset: 39363},
			expr: &actionExpr{
				pos: position{line: 1277, col: 20, offset: 39382},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 20, offset: 39382},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1277, col: 20, offset: 39382},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1277, col: 24, offset: 39386},
							offset: 328,
						},
						&ruleRefExpr{
							pos:    position{line: 1277, col: 34, offset: 39396},
							offset: 311,
						},
						&labeledExpr{
							pos:   position{line: 1277, col: 42, offset: 39404},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1277, col: 48, offset: 39410},
								offset: 2,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1281, col: 1, offset: 39506},
			expr: &actionExpr{
				pos: position{line: 1281, col: 16, offset: 39521},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 16, offset: 39521},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1281, col: 16, offset: 39521},
							offset: 324,
						},
						&notExpr{
							pos: position{line: 1281, col: 26, offset: 39531},
							expr: &ruleRefExpr{
								pos:    position{line: 1281, col: 27, offset: 39532},
								offset: 255,
							},
						},
						&notExpr{
							pos: position{line: 1281, col: 45, offset: 39550},
							expr: &ruleRefExpr{
								pos:    position{line: 1281, col: 46, offset: 39551},
								offset: 257,
							},
						},
						&notExpr{
							pos: position{line: 1281, col: 66, offset: 39571},
							expr: &ruleRefExpr{
								pos:    position{line: 1281, col: 67, offset: 39572},
								offset: 14,
							},
						},
						&notExpr{
							pos: position{line: 1281, col: 83, offset: 39588},
							expr: &ruleRefExpr{
								pos:    position{line: 1281, col: 84, offset: 39589},
								offset: 300,
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 105, offset: 39610},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1281, col: 113, offset: 39618},
								expr: &ruleRefExpr{
									pos:    position{line: 1281, col: 114, offset: 39619},
									offset: 89,
								},
							},
						},
						&andExpr{
							pos: position{line: 1281, col: 130, offset: 39635},
							expr: &ruleRefExpr{
								pos:    position{line: 1281, col: 131, offset: 39636},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1285, col: 1, offset: 39722},
			expr: &actionExpr{
				pos: position{line: 1285, col: 18, offset: 39739},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1285, col: 18, offset: 39739},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1285, col: 18, offset: 39739},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1285, col: 25, offset: 39746},
								expr: &ruleRefExpr{
									pos:    position{line: 1285, col: 26, offset: 39747},
									offset: 217,
								},
							},
						},
						&andExpr{
							pos: position{line: 1285, col: 49, offset: 39770},
							expr: &ruleRefExpr{
								pos:    position{line: 1285, col: 50, offset: 39771},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1290, col: 1, offset: 39810},
			expr: &actionExpr{
				pos: position{line: 1290, col: 17, offset: 39826},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 17, offset: 39826},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1290, col: 18, offset: 39827},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1290, col: 18, offset: 39827},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1290, col: 26, offset: 39835},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1290, col: 26, offset: 39835},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1290, col: 30, offset: 39839},
											expr: &ruleRefExpr{
												pos:    position{line: 1290, col: 30, offset: 39839},
												offset: 333,
											},
										},
										&litMatcher{
											pos:        position{line: 1290, col: 33, offset: 39842},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1290, col: 37, offset: 39846},
											expr: &ruleRefExpr{
												pos:    position{line: 1290, col: 37, offset: 39846},
												offset: 333,
											},
										},
										&litMatcher{
											pos:        position{line: 1290, col: 40, offset: 39849},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1290, col: 46, offset: 39855},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1290, col: 46, offset: 39855},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1290, col: 50, offset: 39859},
											expr: &ruleRefExpr{
												pos:    position{line: 1290, col: 50, offset: 39859},
												offset: 333,
											},
										},
										&litMatcher{
											pos:        position{line: 1290, col: 53, offset: 39862},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1290, col: 57, offset: 39866},
											expr: &ruleRefExpr{
												pos:    position{line: 1290, col: 57, offset: 39866},
												offset: 333,
											},
										},
										&litMatcher{
											pos:        position{line: 1290, col: 60, offset: 39869},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1290, col: 66, offset: 39875},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1290, col: 66, offset: 39875},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1290, col: 70, offset: 39879},
											expr: &ruleRefExpr{
												pos:    position{line: 1290, col: 70, offset: 39879},
												offset: 333,
											},
										},
										&litMatcher{
											pos:        position{line: 1290, col: 73, offset: 39882},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1290, col: 77, offset: 39886},
											expr: &ruleRefExpr{
												pos:    position{line: 1290, col: 77, offset: 39886},
												offset: 333,
											},
										},
										&litMatcher{
											pos:        position{line: 1290, col: 80, offset: 39889},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1290, col: 85, offset: 39894},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 1290, col: 95, offset: 39904},
							expr: &ruleRefExpr{
								pos:    position{line: 1290, col: 96, offset: 39905},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1295, col: 1, offset: 39976},
			expr: &actionExpr{
				pos: position{line: 1295, col: 13, offset: 39988},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 13, offset: 39988},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1295, col: 14, offset: 39989},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1295, col: 21, offset: 39996},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 1295, col: 31, offset: 40006},
							expr: &ruleRefExpr{
								pos:    position{line: 1295, col: 32, offset: 40007},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1300, col: 1, offset: 40074},
			expr: &actionExpr{
				pos: position{line: 1301, col: 5, offset: 40087},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 5, offset: 40087},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1301, col: 5, offset: 40087},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1301, col: 12, offset: 40094},
								offset: 224,
							},
						},
						&labeledExpr{
							pos:   position{line: 1302, col: 5, offset: 40111},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1302, col: 11, offset: 40117},
								expr: &seqExpr{
									pos: position{line: 1302, col: 12, offset: 40118},
									exprs: []any{
										&notExpr{
											pos: position{line: 1302, col: 12, offset: 40118},
											expr: &ruleRefExpr{
												pos:    position{line: 1302, col: 13, offset: 40119},
												offset: 227,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1302, col: 29, offset: 40135},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1303, col: 5, offset: 40149},
							offset: 225,
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1307, col: 1, offset: 40304},
			expr: &actionExpr{
				pos: position{line: 1307, col: 15, offset: 40318},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 15, offset: 40318},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1307, col: 15, offset: 40318},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1307, col: 25, offset: 40328},
								offset: 227,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1307, col: 41, offset: 40344},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1307, col: 51, offset: 40354},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1314, col: 1, offset: 40538},
			expr: &seqExpr{
				pos: position{line: 1314, col: 13, offset: 40550},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1314, col: 13, offset: 40550},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1314, col: 23, offset: 40560},
							offset: 227,
						},
					},
					&andExpr{
						pos: position{line: 1314, col: 39, offset: 40576},
						expr: &ruleRefExpr{
							pos:    position{line: 1314, col: 40, offset: 40577},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1314, col: 50, offset: 40587},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1323, col: 1, offset: 40853},
			expr: &actionExpr{
				pos: position{line: 1323, col: 19, offset: 40871},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 19, offset: 40871},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1323, col: 19, offset: 40871},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1323, col: 30, offset: 40882},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1323, col: 30, offset: 40882},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1323, col: 36, offset: 40888},
										expr: &litMatcher{
											pos:        position{line: 1323, col: 36, offset: 40888},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1323, col: 42, offset: 40894},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1330, col: 1, offset: 41021},
			expr: &actionExpr{
				pos: position{line: 1330, col: 19, offset: 41039},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 19, offset: 41039},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1330, col: 19, offset: 41039},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1330, col: 28, offset: 41048},
								offset: 226,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1331, col: 5, offset: 41070},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1336, col: 1, offset: 41200},
			expr: &actionExpr{
				pos: position{line: 1336, col: 14, offset: 41213},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 15, offset: 41214},
					exprs: []any{
						&notExpr{
							pos: position{line: 1336, col: 15, offset: 41214},
							expr: &ruleRefExpr{
								pos:    position{line: 1336, col: 16, offset: 41215},
								offset: 227,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1336, col: 32, offset: 41231},
							offset: 319,
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 45, offset: 41244},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1336, col: 50, offset: 41249},
								offset: 327,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1336, col: 58, offset: 41257},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1342, col: 1, offset: 41306},
			expr: &actionExpr{
				pos: position{line: 1343, col: 5, offset: 41317},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 5, offset: 41317},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1343, col: 5, offset: 41317},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1343, col: 12, offset: 41324},
								offset: 230,
							},
						},
						&labeledExpr{
							pos:   position{line: 1344, col: 5, offset: 41339},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1344, col: 11, offset: 41345},
								expr: &ruleRefExpr{
									pos:    position{line: 1344, col: 12, offset: 41346},
									offset: 234,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1345, col: 5, offset: 41361},
							offset: 231,
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1349, col: 1, offset: 41520},
			expr: &actionExpr{
				pos: position{line: 1349, col: 13, offset: 41532},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 13, offset: 41532},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1349, col: 13, offset: 41532},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1349, col: 23, offset: 41542},
								offset: 233,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1349, col: 37, offset: 41556},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1349, col: 47, offset: 41566},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1356, col: 1, offset: 41740},
			expr: &seqExpr{
				pos: position{line: 1356, col: 11, offset: 41750},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1356, col: 11, offset: 41750},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1356, col: 21, offset: 41760},
							offset: 233,
						},
					},
					&andExpr{
						pos: position{line: 1356, col: 35, offset: 41774},
						expr: &ruleRefExpr{
							pos:    position{line: 1356, col: 36, offset: 41775},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1356, col: 46, offset: 41785},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1365, col: 1, offset: 42039},
			expr: &actionExpr{
				pos: position{line: 1365, col: 14, offset: 42052},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 14, offset: 42052},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1365, col: 14, offset: 42052},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1365, col: 22, offset: 42060},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1365, col: 22, offset: 42060},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1365, col: 29, offset: 42067},
										expr: &litMatcher{
											pos:        position{line: 1365, col: 29, offset: 42067},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1365, col: 35, offset: 42073},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1372, col: 1, offset: 42190},
			expr: &actionExpr{
				pos: position{line: 1372, col: 17, offset: 42206},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 17, offset: 42206},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1372, col: 17, offset: 42206},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:    position{line: 1372, col: 25, offset: 42214},
								offset: 232,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1373, col: 5, offset: 42231},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1378, col: 1, offset: 42354},
			expr: &actionExpr{
				pos: position{line: 1378, col: 12, offset: 42365},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1378, col: 13, offset: 42366},
					exprs: []any{
						&notExpr{
							pos: position{line: 1378, col: 13, offset: 42366},
							expr: &ruleRefExpr{
								pos:    position{line: 1378, col: 14, offset: 42367},
								offset: 233,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1378, col: 28, offset: 42381},
							offset: 319,
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 41, offset: 42394},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1378, col: 46, offset: 42399},
								offset: 327,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1378, col: 54, offset: 42407},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1386, col: 1, offset: 42458},
			expr: &choiceExpr{
				pos: position{line: 1386, col: 18, offset: 42475},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1386, col: 18, offset: 42475},
						offset: 236,
					},
					&ruleRefExpr{
						pos:    position{line: 1386, col: 43, offset: 42500},
						offset: 245,
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1388, col: 1, offset: 42521},
			expr: &actionExpr{
				pos: position{line: 1388, col: 26, offset: 42546},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1388, col: 26, offset: 42546},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1388, col: 26, offset: 42546},
							offset: 237,
						},
						&labeledExpr{
							pos:   position{line: 1388, col: 46, offset: 42566},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 1388, col: 50, offset: 42570},
								offset: 240,
							},
						},
						&labeledExpr{
							pos:   position{line: 1388, col: 68, offset: 42588},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1388, col: 74, offset: 42594},
								expr: &actionExpr{
									pos: position{line: 1388, col: 75, offset: 42595},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1388, col: 75, offset: 42595},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 1388, col: 75, offset: 42595},
												offset: 328,
											},
											&litMatcher{
												pos:        position{line: 1388, col: 85, offset: 42605},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1388, col: 89, offset: 42609},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1388, col: 96, offset: 42616},
													exprs: []any{
														&ruleRefExpr{
															pos:    position{line: 1388, col: 96, offset: 42616},
															offset: 328,
														},
														&ruleRefExpr{
															pos:    position{line: 1388, col: 106, offset: 42626},
															offset: 241,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1388, col: 150, offset: 42670},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1396, col: 1, offset: 42928},
			expr: &litMatcher{
				pos:        position{line: 1396, col: 23, offset: 42950},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceInitialCharacter",
			pos:  position{line: 1398, col: 1, offset: 42957},
			expr: &actionExpr{
				pos: position{line: 1398, col: 34, offset: 42990},
				run: (*parser).callonCrossReferenceInitialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1398, col: 35, offset: 42991},
					alternatives: []any{
						&ruleRefExpr{
							pos:    position{line: 1398, col: 35, offset: 42991},
							offset: 316,
						},
						&charClassMatcher{
							pos:        position{line: 1398, col: 43, offset: 42999},
							val:        "[:_]",
							chars:      []rune{':', '_'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceCharacters",
			pos:  position{line: 1403, col: 1, offset: 43149},
			expr: &actionExpr{
				pos: position{line: 1403, col: 28, offset: 43176},
				run: (*parser).callonCrossReferenceCharacters1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1403, col: 28, offset: 43176},
					expr: &seqExpr{
						pos: position{line: 1403, col: 29, offset: 43177},
						exprs: []any{
							&notExpr{
								pos: position{line: 1403, col: 29, offset: 43177},
								expr: &ruleRefExpr{
									pos:    position{line: 1403, col: 30, offset: 43178},
									offset: 53,
								},
							},
							&charClassMatcher{
								pos:        position{line: 1403, col: 50, offset: 43198},
								val:        "[\\p{L}\\p{N} _:.-]",
								chars:      []rune{' ', '_', ':', '.', '-'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1408, col: 1, offset: 43276},
			expr: &actionExpr{
				pos: position{line: 1408, col: 21, offset: 43296},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 21, offset: 43296},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1408, col: 21, offset: 43296},
							label: "start",
							expr: &choiceExpr{
								pos: position{line: 1408, col: 28, offset: 43303},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1408, col: 28, offset: 43303},
										offset: 53,
									},
									&ruleRefExpr{
										pos:    position{line: 1408, col: 49, offset: 43324},
										offset: 238,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 81, offset: 43356},
							label: "end",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1408, col: 85, offset: 43360},
								expr: &choiceExpr{
									pos: position{line: 1408, col: 86, offset: 43361},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 1408, col: 86, offset: 43361},
											offset: 53,
										},
										&ruleRefExpr{
											pos:    position{line: 1408, col: 107, offset: 43382},
											offset: 239,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1417, col: 1, offset: 43556},
			expr: &oneOrMoreExpr{
				pos: position{line: 1417, col: 23, offset: 43578},
				expr: &choiceExpr{
					pos: position{line: 1418, col: 5, offset: 43584},
					alternatives: []any{
						&oneOrMoreExpr{
							pos: position{line: 1418, col: 6, offset: 43585},
							expr: &charClassMatcher{
								pos:        position{line: 1418, col: 6, offset: 43585},
								val:        "[^<>{[\\]]",
								chars:      []rune{'<', '>', '{', '[', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1419, col: 7, offset: 43603},
							offset: 53,
						},
						&litMatcher{
							pos:        position{line: 1420, col: 7, offset: 43629},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceMacroStart",
			pos:  position{line: 1423, col: 1, offset: 43638},
			expr: &litMatcher{
				pos:        position{line: 1423, col: 28, offset: 43665},
				val:        "xref:",
				ignoreCase: false,
				want:       "\"xref:\"",
			},
		},
		{
			name: "CrossReferenceMacroLabelContent",
			pos:  position{line: 1425, col: 1, offset: 43674},
			expr: &seqExpr{
				pos: position{line: 1425, col: 35, offset: 43708},
				exprs: []any{
					&notExpr{
						pos: position{line: 1425, col: 35, offset: 43708},
						expr: &litMatcher{
							pos:        position{line: 1425, col: 36, offset: 43709},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1425, col: 40, offset: 43713},
						expr: &ruleRefExpr{
							pos:    position{line: 1425, col: 40, offset: 43713},
							offset: 89,
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceMacroLabel",
			pos:  position{line: 1428, col: 1, offset: 43731},
			expr: &actionExpr{
				pos: position{line: 1428, col: 28, offset: 43758},
				run: (*parser).callonCrossReferenceMacroLabel1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 28, offset: 43758},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1428, col: 28, offset: 43758},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1428, col: 32, offset: 43762},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 1428, col: 40, offset: 43770},
								expr: &ruleRefExpr{
									pos:    position{line: 1428, col: 41, offset: 43771},
									offset: 243,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1428, col: 75, offset: 43805},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceMacro",
			pos:  position{line: 1433, col: 1, offset: 43843},
			expr: &actionExpr{
				pos: position{line: 1433, col: 23, offset: 43865},
				run: (*parser).callonCrossReferenceMacro1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 23, offset: 43865},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1433, col: 23, offset: 43865},
							offset: 242,
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 48, offset: 43890},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 1433, col: 54, offset: 43896},
								offset: 164,
							},
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 60, offset: 43902},
							label: "label",
							expr: &ruleRefExpr{
								pos:    position{line: 1433, col: 67, offset: 43909},
								offset: 244,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1444, col: 1, offset: 44195},
			expr: &actionExpr{
				pos: position{line: 1444, col: 18, offset: 44212},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1444, col: 18, offset: 44212},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1444, col: 18, offset: 44212},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1444, col: 28, offset: 44222},
								expr: &litMatcher{
									pos:        position{line: 1444, col: 28, offset: 44222},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1444, col: 33, offset: 44227},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1444, col: 42, offset: 44236},
								expr: &ruleRefExpr{
									pos:    position{line: 1444, col: 42, offset: 44236},
									offset: 247,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1444, col: 66, offset: 44260},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1444, col: 71, offset: 44265},
								expr: &ruleRefExpr{
									pos:    position{line: 1444, col: 72, offset: 44266},
									offset: 248,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1444, col: 93, offset: 44287},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1444, col: 98, offset: 44292},
								expr: &ruleRefExpr{
									pos:    position{line: 1444, col: 99, offset: 44293},
									offset: 249,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1444, col: 120, offset: 44314},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1451, col: 1, offset: 44438},
			expr: &choiceExpr{
				pos: position{line: 1452, col: 5, offset: 44469},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1452, col: 5, offset: 44469},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1453, col: 7, offset: 44480},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1454, col: 8, offset: 44492},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1454, col: 8, offset: 44492},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1454, col: 12, offset: 44496},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1454, col: 21, offset: 44505},
									expr: &litMatcher{
										pos:        position{line: 1454, col: 21, offset: 44505},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1454, col: 26, offset: 44510},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1457, col: 1, offset: 44556},
			expr: &choiceExpr{
				pos: position{line: 1458, col: 5, offset: 44583},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1458, col: 5, offset: 44583},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1459, col: 7, offset: 44594},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1460, col: 8, offset: 44606},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1460, col: 8, offset: 44606},
								expr: &litMatcher{
									pos:        position{line: 1460, col: 8, offset: 44606},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1460, col: 13, offset: 44611},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1460, col: 18, offset: 44616},
									expr: &litMatcher{
										pos:        position{line: 1460, col: 18, offset: 44616},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1460, col: 23, offset: 44621},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1463, col: 1, offset: 44663},
			expr: &choiceExpr{
				pos: position{line: 1464, col: 5, offset: 44690},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1464, col: 5, offset: 44690},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1465, col: 7, offset: 44701},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1466, col: 8, offset: 44713},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1466, col: 8, offset: 44713},
								expr: &litMatcher{
									pos:        position{line: 1466, col: 8, offset: 44713},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1466, col: 13, offset: 44718},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1466, col: 18, offset: 44723},
									expr: &litMatcher{
										pos:        position{line: 1466, col: 18, offset: 44723},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1466, col: 23, offset: 44728},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1469, col: 1, offset: 44770},
			expr: &actionExpr{
				pos: position{line: 1469, col: 18, offset: 44787},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1469, col: 18, offset: 44787},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1469, col: 18, offset: 44787},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1469, col: 28, offset: 44797},
								expr: &litMatcher{
									pos:        position{line: 1469, col: 28, offset: 44797},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 33, offset: 44802},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1469, col: 42, offset: 44811},
								expr: &ruleRefExpr{
									pos:    position{line: 1469, col: 42, offset: 44811},
									offset: 251,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 66, offset: 44835},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1469, col: 71, offset: 44840},
								expr: &ruleRefExpr{
									pos:    position{line: 1469, col: 72, offset: 44841},
									offset: 252,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 93, offset: 44862},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1469, col: 98, offset: 44867},
								expr: &ruleRefExpr{
									pos:    position{line: 1469, col: 99, offset: 44868},
									offset: 253,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1469, col: 120, offset: 44889},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1476, col: 1, offset: 45013},
			expr: &choiceExpr{
				pos: position{line: 1477, col: 5, offset: 45044},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1477, col: 5, offset: 45044},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1478, col: 7, offset: 45055},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1479, col: 8, offset: 45067},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1479, col: 8, offset: 45067},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1479, col: 12, offset: 45071},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1479, col: 21, offset: 45080},
									expr: &litMatcher{
										pos:        position{line: 1479, col: 21, offset: 45080},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1479, col: 26, offset: 45085},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1482, col: 1, offset: 45131},
			expr: &choiceExpr{
				pos: position{line: 1483, col: 5, offset: 45158},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1483, col: 5, offset: 45158},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1484, col: 7, offset: 45169},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1485, col: 8, offset: 45181},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1485, col: 8, offset: 45181},
								expr: &litMatcher{
									pos:        position{line: 1485, col: 8, offset: 45181},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1485, col: 13, offset: 45186},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1485, col: 18, offset: 45191},
									expr: &litMatcher{
										pos:        position{line: 1485, col: 18, offset: 45191},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1485, col: 23, offset: 45196},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1488, col: 1, offset: 45238},
			expr: &choiceExpr{
				pos: position{line: 1489, col: 5, offset: 45265},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1489, col: 5, offset: 45265},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1490, col: 7, offset: 45276},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1491, col: 8, offset: 45288},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1491, col: 8, offset: 45288},
								expr: &litMatcher{
									pos:        position{line: 1491, col: 8, offset: 45288},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1491, col: 13, offset: 45293},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1491, col: 18, offset: 45298},
									expr: &litMatcher{
										pos:        position{line: 1491, col: 18, offset: 45298},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1491, col: 23, offset: 45303},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1496, col: 1, offset: 45347},
			expr: &actionExpr{
				pos: position{line: 1496, col: 19, offset: 45365},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 19, offset: 45365},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1496, col: 19, offset: 45365},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1496, col: 27, offset: 45373},
								offset: 255,
							},
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 47, offset: 45393},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1496, col: 54, offset: 45400},
								offset: 216,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1502, col: 1, offset: 45594},
			expr: &actionExpr{
				pos: position{line: 1502, col: 21, offset: 45614},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 21, offset: 45614},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1502, col: 21, offset: 45614},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1502, col: 29, offset: 45622},
								offset: 328,
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 40, offset: 45633},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1502, col: 48, offset: 45641},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1502, col: 48, offset: 45641},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1502, col: 48, offset: 45641},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1502, col: 48, offset: 45641},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1502, col: 57, offset: 45650},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1502, col: 58, offset: 45651},
															expr: &litMatcher{
																pos:        position{line: 1502, col: 58, offset: 45651},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1504, col: 4, offset: 45697},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1510, col: 3, offset: 45792},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1510, col: 3, offset: 45792},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1510, col: 3, offset: 45792},
													expr: &charClassMatcher{
														pos:        position{line: 1510, col: 3, offset: 45792},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1510, col: 10, offset: 45799},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1511, col: 3, offset: 45836},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1511, col: 3, offset: 45836},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1511, col: 3, offset: 45836},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1511, col: 9, offset: 45842},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1512, col: 3, offset: 45879},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1512, col: 3, offset: 45879},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1512, col: 3, offset: 45879},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1512, col: 9, offset: 45885},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1513, col: 3, offset: 45922},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1513, col: 3, offset: 45922},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1513, col: 3, offset: 45922},
													offset: 250,
												},
												&litMatcher{
													pos:        position{line: 1513, col: 18, offset: 45937},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1514, col: 3, offset: 45974},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1514, col: 3, offset: 45974},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1514, col: 3, offset: 45974},
													offset: 246,
												},
												&litMatcher{
													pos:        position{line: 1514, col: 18, offset: 45989},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1516, col: 1, offset: 46026},
							offset: 332,
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1524, col: 1, offset: 46117},
			expr: &actionExpr{
				pos: position{line: 1524, col: 21, offset: 46137},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1524, col: 21, offset: 46137},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1524, col: 21, offset: 46137},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1524, col: 29, offset: 46145},
								offset: 257,
							},
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 50, offset: 46166},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1524, col: 60, offset: 46176},
								expr: &ruleRefExpr{
									pos:    position{line: 1524, col: 61, offset: 46177},
									offset: 258,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 73, offset: 46189},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1524, col: 80, offset: 46196},
								offset: 216,
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1531, col: 1, offset: 46440},
			expr: &actionExpr{
				pos: position{line: 1531, col: 23, offset: 46462},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1531, col: 23, offset: 46462},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1531, col: 23, offset: 46462},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1531, col: 31, offset: 46470},
								offset: 328,
							},
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 42, offset: 46481},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1531, col: 50, offset: 46489},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1531, col: 51, offset: 46490},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1531, col: 51, offset: 46490},
											expr: &litMatcher{
												pos:        position{line: 1531, col: 51, offset: 46490},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1531, col: 58, offset: 46497},
											expr: &litMatcher{
												pos:        position{line: 1531, col: 58, offset: 46497},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1533, col: 4, offset: 46539},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:    position{line: 1536, col: 1, offset: 46588},
							offset: 332,
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1542, col: 1, offset: 46673},
			expr: &actionExpr{
				pos: position{line: 1542, col: 13, offset: 46685},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1542, col: 13, offset: 46685},
					exprs: []any{
						&andExpr{
							pos: position{line: 1542, col: 13, offset: 46685},
							expr: &litMatcher{
								pos:        position{line: 1542, col: 14, offset: 46686},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 1, offset: 46691},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1544, col: 7, offset: 46709},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1544, col: 7, offset: 46709},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1544, col: 7, offset: 46709},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1545, col: 7, offset: 46766},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1545, col: 7, offset: 46766},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1546, col: 7, offset: 46821},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1546, col: 7, offset: 46821},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1547, col: 7, offset: 46875},
							offset: 332,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1552, col: 1, offset: 46918},
			expr: &actionExpr{
				pos: position{line: 1552, col: 23, offset: 46940},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 23, offset: 46940},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1552, col: 23, offset: 46940},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 36, offset: 46953},
								expr: &ruleRefExpr{
									pos:    position{line: 1552, col: 37, offset: 46954},
									offset: 85,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 55, offset: 46972},
							label: "term",
							expr: &ruleRefExpr{
								pos:    position{line: 1552, col: 61, offset: 46978},
								offset: 260,
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 82, offset: 46999},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1552, col: 90, offset: 47007},
								offset: 261,
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 113, offset: 47030},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1552, col: 124, offset: 47041},
								expr: &choiceExpr{
									pos: position{line: 1552, col: 125, offset: 47042},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1552, col: 125, offset: 47042},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:    position{line: 1552, col: 125, offset: 47042},
												offset: 333,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1552, col: 180, offset: 47097},
											offset: 311,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 190, offset: 47107},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1552, col: 197, offset: 47114},
								offset: 262,
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1563, col: 1, offset: 47641},
			expr: &actionExpr{
				pos: position{line: 1563, col: 23, offset: 47663},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1563, col: 23, offset: 47663},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1563, col: 28, offset: 47668},
						expr: &seqExpr{
							pos: position{line: 1563, col: 29, offset: 47669},
							exprs: []any{
								&notExpr{
									pos: position{line: 1563, col: 29, offset: 47669},
									expr: &ruleRefExpr{
										pos:    position{line: 1563, col: 30, offset: 47670},
										offset: 261,
									},
								},
								&notExpr{
									pos: position{line: 1563, col: 52, offset: 47692},
									expr: &ruleRefExpr{
										pos:    position{line: 1563, col: 53, offset: 47693},
										offset: 324,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 1563, col: 63, offset: 47703},
									offset: 89,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1567, col: 1, offset: 47759},
			expr: &actionExpr{
				pos: position{line: 1567, col: 25, offset: 47783},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1567, col: 25, offset: 47783},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1567, col: 25, offset: 47783},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1567, col: 35, offset: 47793},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1567, col: 43, offset: 47801},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1567, col: 43, offset: 47801},
									expr: &choiceExpr{
										pos: position{line: 1567, col: 44, offset: 47802},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1567, col: 44, offset: 47802},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1567, col: 50, offset: 47808},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1569, col: 4, offset: 47850},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:    position{line: 1576, col: 1, offset: 47977},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1581, col: 1, offset: 48024},
			expr: &actionExpr{
				pos: position{line: 1581, col: 28, offset: 48051},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 28, offset: 48051},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1581, col: 28, offset: 48051},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1581, col: 34, offset: 48057},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1581, col: 34, offset: 48057},
										expr: &ruleRefExpr{
											pos:    position{line: 1581, col: 34, offset: 48057},
											offset: 89,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1581, col: 51, offset: 48074},
										offset: 2,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1581, col: 65, offset: 48088},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1581, col: 80, offset: 48103},
								expr: &ruleRefExpr{
									pos:    position{line: 1581, col: 81, offset: 48104},
									offset: 220,
								},
							},
						},
						&andExpr{
							pos: position{line: 1581, col: 99, offset: 48122},
							expr: &ruleRefExpr{
								pos:    position{line: 1581, col: 100, offset: 48123},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1590, col: 1, offset: 48284},
			expr: &actionExpr{
				pos: position{line: 1590, col: 21, offset: 48304},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 21, offset: 48304},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1590, col: 21, offset: 48304},
							offset: 264,
						},
						&notExpr{
							pos: position{line: 1590, col: 48, offset: 48331},
							expr: &litMatcher{
								pos:        position{line: 1590, col: 49, offset: 48332},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 54, offset: 48337},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 1590, col: 63, offset: 48346},
								offset: 265,
							},
						},
						&andExpr{
							pos: position{line: 1590, col: 89, offset: 48372},
							expr: &ruleRefExpr{
								pos:    position{line: 1590, col: 90, offset: 48373},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1594, col: 1, offset: 48463},
			expr: &actionExpr{
				pos: position{line: 1594, col: 30, offset: 48492},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1594, col: 30, offset: 48492},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1598, col: 1, offset: 48537},
			expr: &actionExpr{
				pos: position{line: 1598, col: 28, offset: 48564},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1598, col: 28, offset: 48564},
					expr: &charClassMatcher{
						pos:        position{line: 1598, col: 28, offset: 48564},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1602, col: 1, offset: 48613},
			expr: &actionExpr{
				pos: position{line: 1603, col: 5, offset: 48636},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 5, offset: 48636},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1603, col: 5, offset: 48636},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1603, col: 12, offset: 48643},
								offset: 267,
							},
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 5, offset: 48670},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1604, col: 11, offset: 48676},
								expr: &ruleRefExpr{
									pos:    position{line: 1604, col: 12, offset: 48677},
									offset: 271,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1605, col: 5, offset: 48704},
							offset: 268,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1609, col: 1, offset: 48889},
			expr: &actionExpr{
				pos: position{line: 1609, col: 25, offset: 48913},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1609, col: 25, offset: 48913},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1609, col: 25, offset: 48913},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1609, col: 35, offset: 48923},
								offset: 270,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1609, col: 61, offset: 48949},
							offset: 324,
						},
						&andCodeExpr{
							pos: position{line: 1609, col: 72, offset: 48960},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1616, col: 1, offset: 49150},
			expr: &seqExpr{
				pos: position{line: 1616, col: 23, offset: 49172},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1616, col: 23, offset: 49172},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1616, col: 33, offset: 49182},
							offset: 270,
						},
					},
					&andExpr{
						pos: position{line: 1616, col: 59, offset: 49208},
						expr: &ruleRefExpr{
							pos:    position{line: 1616, col: 60, offset: 49209},
							offset: 324,
						},
					},
					&andCodeExpr{
						pos: position{line: 1616, col: 70, offset: 49219},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1625, col: 1, offset: 49505},
			expr: &actionExpr{
				pos: position{line: 1625, col: 34, offset: 49538},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 34, offset: 49538},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1625, col: 34, offset: 49538},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1625, col: 50, offset: 49554},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1625, col: 50, offset: 49554},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1625, col: 57, offset: 49561},
										expr: &litMatcher{
											pos:        position{line: 1625, col: 57, offset: 49561},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1625, col: 63, offset: 49567},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1632, col: 1, offset: 49712},
			expr: &actionExpr{
				pos: position{line: 1632, col: 29, offset: 49740},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1632, col: 29, offset: 49740},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1632, col: 29, offset: 49740},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:    position{line: 1632, col: 45, offset: 49756},
								offset: 269,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1633, col: 5, offset: 49793},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1638, col: 1, offset: 49944},
			expr: &actionExpr{
				pos: position{line: 1638, col: 24, offset: 49967},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1638, col: 25, offset: 49968},
					exprs: []any{
						&notExpr{
							pos: position{line: 1638, col: 25, offset: 49968},
							expr: &ruleRefExpr{
								pos:    position{line: 1638, col: 26, offset: 49969},
								offset: 270,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1638, col: 52, offset: 49995},
							offset: 319,
						},
						&labeledExpr{
							pos:   position{line: 1638, col: 65, offset: 50008},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1638, col: 70, offset: 50013},
								offset: 327,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1638, col: 78, offset: 50021},
							offset: 324,
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1644, col: 1, offset: 50070},
			expr: &choiceExpr{
				pos: position{line: 1644, col: 11, offset: 50080},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1644, col: 11, offset: 50080},
						offset: 273,
					},
					&ruleRefExpr{
						pos:    position{line: 1644, col: 30, offset: 50099},
						offset: 274,
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1646, col: 1, offset: 50123},
			expr: &actionExpr{
				pos: position{line: 1646, col: 20, offset: 50142},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1646, col: 20, offset: 50142},
					exprs: []any{
						&notExpr{
							pos: position{line: 1646, col: 20, offset: 50142},
							expr: &litMatcher{
								pos:        position{line: 1646, col: 21, offset: 50143},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1646, col: 26, offset: 50148},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1646, col: 38, offset: 50160},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1646, col: 43, offset: 50165},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1646, col: 62, offset: 50184},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1646, col: 75, offset: 50197},
								expr: &ruleRefExpr{
									pos:    position{line: 1646, col: 76, offset: 50198},
									offset: 275,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1646, col: 98, offset: 50220},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1650, col: 1, offset: 50321},
			expr: &actionExpr{
				pos: position{line: 1650, col: 26, offset: 50346},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1650, col: 26, offset: 50346},
					exprs: []any{
						&notExpr{
							pos: position{line: 1650, col: 26, offset: 50346},
							expr: &litMatcher{
								pos:        position{line: 1650, col: 27, offset: 50347},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1650, col: 32, offset: 50352},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1650, col: 45, offset: 50365},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1650, col: 50, offset: 50370},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1650, col: 69, offset: 50389},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1650, col: 82, offset: 50402},
								expr: &ruleRefExpr{
									pos:    position{line: 1650, col: 83, offset: 50403},
									offset: 275,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1650, col: 105, offset: 50425},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1654, col: 1, offset: 50527},
			expr: &actionExpr{
				pos: position{line: 1654, col: 23, offset: 50549},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1654, col: 23, offset: 50549},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1654, col: 23, offset: 50549},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 27, offset: 50553},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:    position{line: 1654, col: 40, offset: 50566},
								offset: 276,
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1658, col: 1, offset: 50619},
			expr: &choiceExpr{
				pos: position{line: 1658, col: 23, offset: 50641},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1658, col: 23, offset: 50641},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:        position{line: 1658, col: 23, offset: 50641},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1661, col: 7, offset: 50697},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1661, col: 7, offset: 50697},
							expr: &charClassMatcher{
								pos:        position{line: 1661, col: 7, offset: 50697},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1668, col: 1, offset: 50763},
			expr: &actionExpr{
				pos: position{line: 1668, col: 21, offset: 50783},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 21, offset: 50783},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1668, col: 21, offset: 50783},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1668, col: 32, offset: 50794},
								expr: &ruleRefExpr{
									pos:    position{line: 1668, col: 33, offset: 50795},
									offset: 96,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 53, offset: 50815},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1668, col: 59, offset: 50821},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1668, col: 59, offset: 50821},
										offset: 278,
									},
									&ruleRefExpr{
										pos:    position{line: 1668, col: 85, offset: 50847},
										offset: 281,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1672, col: 1, offset: 50993},
			expr: &actionExpr{
				pos: position{line: 1672, col: 27, offset: 51019},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1672, col: 27, offset: 51019},
					exprs: []any{
						&notExpr{
							pos: position{line: 1672, col: 27, offset: 51019},
							expr: &ruleRefExpr{
								pos:    position{line: 1672, col: 28, offset: 51020},
								offset: 334,
							},
						},
						&litMatcher{
							pos:        position{line: 1672, col: 35, offset: 51027},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1672, col: 39, offset: 51031},
							expr: &notExpr{
								pos: position{line: 1672, col: 41, offset: 51033},
								expr: &litMatcher{
									pos:        position{line: 1672, col: 42, offset: 51034},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1672, col: 47, offset: 51039},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1672, col: 54, offset: 51046},
								offset: 279,
							},
						},
						&litMatcher{
							pos:        position{line: 1672, col: 82, offset: 51074},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1672, col: 86, offset: 51078},
							expr: &litMatcher{
								pos:        position{line: 1672, col: 87, offset: 51079},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1672, col: 91, offset: 51083},
							expr: &notExpr{
								pos: position{line: 1672, col: 93, offset: 51085},
								expr: &ruleRefExpr{
									pos:    position{line: 1672, col: 94, offset: 51086},
									offset: 317,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1676, col: 1, offset: 51131},
			expr: &actionExpr{
				pos: position{line: 1676, col: 30, offset: 51160},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 30, offset: 51160},
					exprs: []any{
						&notExpr{
							pos: position{line: 1676, col: 30, offset: 51160},
							expr: &ruleRefExpr{
								pos:    position{line: 1676, col: 31, offset: 51161},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 33, offset: 51163},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1676, col: 39, offset: 51169},
								expr: &actionExpr{
									pos: position{line: 1676, col: 40, offset: 51170},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1676, col: 40, offset: 51170},
										exprs: []any{
											&notExpr{
												pos: position{line: 1676, col: 40, offset: 51170},
												expr: &ruleRefExpr{
													pos:    position{line: 1676, col: 41, offset: 51171},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 1676, col: 43, offset: 51173},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1676, col: 49, offset: 51179},
													expr: &ruleRefExpr{
														pos:    position{line: 1676, col: 50, offset: 51180},
														offset: 280,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1680, col: 1, offset: 51361},
			expr: &seqExpr{
				pos: position{line: 1680, col: 32, offset: 51392},
				exprs: []any{
					&notExpr{
						pos: position{line: 1680, col: 32, offset: 51392},
						expr: &seqExpr{
							pos: position{line: 1680, col: 34, offset: 51394},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1680, col: 34, offset: 51394},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&notExpr{
									pos: position{line: 1680, col: 38, offset: 51398},
									expr: &litMatcher{
										pos:        position{line: 1680, col: 39, offset: 51399},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1680, col: 44, offset: 51404},
						offset: 95,
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1682, col: 1, offset: 51426},
			expr: &actionExpr{
				pos: position{line: 1682, col: 27, offset: 51452},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1682, col: 27, offset: 51452},
					exprs: []any{
						&notExpr{
							pos: position{line: 1682, col: 27, offset: 51452},
							expr: &ruleRefExpr{
								pos:    position{line: 1682, col: 28, offset: 51453},
								offset: 335,
							},
						},
						&litMatcher{
							pos:        position{line: 1682, col: 41, offset: 51466},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 46, offset: 51471},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1682, col: 53, offset: 51478},
								offset: 282,
							},
						},
						&litMatcher{
							pos:        position{line: 1682, col: 81, offset: 51506},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1686, col: 1, offset: 51543},
			expr: &actionExpr{
				pos: position{line: 1686, col: 30, offset: 51572},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1686, col: 30, offset: 51572},
					exprs: []any{
						&notExpr{
							pos: position{line: 1686, col: 30, offset: 51572},
							expr: &ruleRefExpr{
								pos:    position{line: 1686, col: 31, offset: 51573},
								offset: 333,
							},
						},
						&labeledExpr{
							pos:   position{line: 1686, col: 33, offset: 51575},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1686, col: 39, offset: 51581},
								expr: &actionExpr{
									pos: position{line: 1686, col: 40, offset: 51582},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1686, col: 40, offset: 51582},
										exprs: []any{
											&notExpr{
												pos: position{line: 1686, col: 40, offset: 51582},
												expr: &ruleRefExpr{
													pos:    position{line: 1686, col: 41, offset: 51583},
													offset: 333,
												},
											},
											&labeledExpr{
												pos:   position{line: 1686, col: 43, offset: 51585},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1686, col: 49, offset: 51591},
													expr: &ruleRefExpr{
														pos:    position{line: 1686, col: 50, offset: 51592},
														offset: 283,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1690, col: 1, offset: 51785},
			expr: &seqExpr{
				pos: position{line: 1690, col: 32, offset: 51816},
				exprs: []any{
					&notExpr{
						pos: position{line: 1690, col: 32, offset: 51816},
						expr: &litMatcher{
							pos:        position{line: 1690, col: 34, offset: 51818},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1690, col: 40, offset: 51824},
						offset: 95,
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1693, col: 1, offset: 51847},
			expr: &litMatcher{
				pos:        position{line: 1693, col: 18, offset: 51864},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1695, col: 1, offset: 51876},
			expr: &actionExpr{
				pos: position{line: 1695, col: 9, offset: 51884},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1695, col: 9, offset: 51884},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1695, col: 9, offset: 51884},
							offset: 284,
						},
						&labeledExpr{
							pos:   position{line: 1695, col: 24, offset: 51899},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1695, col: 36, offset: 51911},
								offset: 292,
							},
						},
						&litMatcher{
							pos:        position{line: 1695, col: 59, offset: 51934},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1695, col: 64, offset: 51939},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 1695, col: 75, offset: 51950},
							expr: &ruleRefExpr{
								pos:    position{line: 1695, col: 76, offset: 51951},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "IfNDefStatement",
			pos:  position{line: 1700, col: 1, offset: 52071},
			expr: &litMatcher{
				pos:        position{line: 1700, col: 19, offset: 52089},
				val:        "ifndef::",
				ignoreCase: false,
				want:       "\"ifndef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1703, col: 1, offset: 52103},
			expr: &actionExpr{
				pos: position{line: 1703, col: 10, offset: 52112},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1703, col: 10, offset: 52112},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1703, col: 10, offset: 52112},
							offset: 286,
						},
						&labeledExpr{
							pos:   position{line: 1703, col: 26, offset: 52128},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1703, col: 38, offset: 52140},
								offset: 292,
							},
						},
						&litMatcher{
							pos:        position{line: 1703, col: 61, offset: 52163},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1703, col: 66, offset: 52168},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 1703, col: 77, offset: 52179},
							expr: &ruleRefExpr{
								pos:    position{line: 1703, col: 78, offset: 52180},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1708, col: 1, offset: 52302},
			expr: &actionExpr{
				pos: position{line: 1708, col: 15, offset: 52316},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1708, col: 15, offset: 52316},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1708, col: 15, offset: 52316},
							offset: 284,
						},
						&labeledExpr{
							pos:   position{line: 1708, col: 30, offset: 52331},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1708, col: 42, offset: 52343},
								offset: 292,
							},
						},
						&litMatcher{
							pos:        position{line: 1708, col: 65, offset: 52366},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1708, col: 69, offset: 52370},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1708, col: 78, offset: 52379},
								offset: 295,
							},
						},
						&litMatcher{
							pos:        position{line: 1708, col: 104, offset: 52405},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1708, col: 108, offset: 52409},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1713, col: 1, offset: 52587},
			expr: &actionExpr{
				pos: position{line: 1713, col: 16, offset: 52602},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1713, col: 16, offset: 52602},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1713, col: 16, offset: 52602},
							offset: 286,
						},
						&labeledExpr{
							pos:   position{line: 1713, col: 32, offset: 52618},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1713, col: 44, offset: 52630},
								offset: 292,
							},
						},
						&litMatcher{
							pos:        position{line: 1713, col: 67, offset: 52653},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1713, col: 71, offset: 52657},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1713, col: 80, offset: 52666},
								offset: 295,
							},
						},
						&litMatcher{
							pos:        position{line: 1713, col: 106, offset: 52692},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1713, col: 110, offset: 52696},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1718, col: 1, offset: 52876},
			expr: &litMatcher{
				pos:        position{line: 1718, col: 21, offset: 52896},
				val:        "endif::",
				ignoreCase: false,
				want:       "\"endif::\"",
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1720, col: 1, offset: 52908},
			expr: &actionExpr{
				pos: position{line: 1720, col: 12, offset: 52919},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1720, col: 12, offset: 52919},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1720, col: 12, offset: 52919},
							offset: 290,
						},
						&labeledExpr{
							pos:   position{line: 1720, col: 30, offset: 52937},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1720, col: 41, offset: 52948},
								expr: &ruleRefExpr{
									pos:    position{line: 1720, col: 42, offset: 52949},
									offset: 292,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1720, col: 66, offset: 52973},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1720, col: 72, offset: 52979},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 1720, col: 82, offset: 52989},
							expr: &ruleRefExpr{
								pos:    position{line: 1720, col: 83, offset: 52990},
								offset: 324,
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1730, col: 1, offset: 53277},
			expr: &choiceExpr{
				pos: position{line: 1730, col: 25, offset: 53301},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1730, col: 25, offset: 53301},
						offset: 293,
					},
					&ruleRefExpr{
						pos:    position{line: 1730, col: 52, offset: 53328},
						offset: 294,
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1732, col: 1, offset: 53354},
			expr: &actionExpr{
				pos: position{line: 1732, col: 28, offset: 53381},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1732, col: 28, offset: 53381},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1732, col: 34, offset: 53387},
						expr: &actionExpr{
							pos: position{line: 1733, col: 5, offset: 53393},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1733, col: 5, offset: 53393},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1733, col: 5, offset: 53393},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1733, col: 10, offset: 53398},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1733, col: 29, offset: 53417},
										offset: 328,
									},
									&zeroOrOneExpr{
										pos: position{line: 1733, col: 39, offset: 53427},
										expr: &litMatcher{
											pos:        position{line: 1733, col: 39, offset: 53427},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1733, col: 44, offset: 53432},
										offset: 328,
									},
									&andCodeExpr{
										pos: position{line: 1734, col: 5, offset: 53447},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1744, col: 1, offset: 53708},
			expr: &actionExpr{
				pos: position{line: 1744, col: 28, offset: 53735},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1744, col: 28, offset: 53735},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1744, col: 34, offset: 53741},
						expr: &actionExpr{
							pos: position{line: 1745, col: 5, offset: 53747},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1745, col: 5, offset: 53747},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1745, col: 5, offset: 53747},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1745, col: 10, offset: 53752},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1745, col: 29, offset: 53771},
										offset: 328,
									},
									&zeroOrOneExpr{
										pos: position{line: 1745, col: 39, offset: 53781},
										expr: &litMatcher{
											pos:        position{line: 1745, col: 39, offset: 53781},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1745, col: 44, offset: 53786},
										offset: 328,
									},
									&andCodeExpr{
										pos: position{line: 1746, col: 5, offset: 53801},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1756, col: 1, offset: 54062},
			expr: &seqExpr{
				pos: position{line: 1756, col: 28, offset: 54089},
				exprs: []any{
					&notExpr{
						pos: position{line: 1756, col: 28, offset: 54089},
						expr: &litMatcher{
							pos:        position{line: 1756, col: 29, offset: 54090},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1756, col: 33, offset: 54094},
						expr: &ruleRefExpr{
							pos:    position{line: 1756, col: 33, offset: 54094},
							offset: 89,
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1758, col: 1, offset: 54111},
			expr: &actionExpr{
				pos: position{line: 1758, col: 10, offset: 54120},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1758, col: 10, offset: 54120},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1758, col: 10, offset: 54120},
							offset: 297,
						},
						&litMatcher{
							pos:        position{line: 1758, col: 26, offset: 54136},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1758, col: 30, offset: 54140},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 40, offset: 54150},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1758, col: 46, offset: 54156},
								offset: 298,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1758, col: 59, offset: 54169},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 70, offset: 54180},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1758, col: 79, offset: 54189},
								offset: 299,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1758, col: 95, offset: 54205},
							offset: 328,
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 105, offset: 54215},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1758, col: 112, offset: 54222},
								offset: 298,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1758, col: 125, offset: 54235},
							offset: 328,
						},
						&litMatcher{
							pos:        position{line: 1758, col: 135, offset: 54245},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1758, col: 139, offset: 54249},
							offset: 328,
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1762, col: 1, offset: 54404},
			expr: &litMatcher{
				pos:        position{line: 1762, col: 19, offset: 54422},
				val:        "ifeval::",
				ignoreCase: false,
				want:       "\"ifeval::\"",
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1764, col: 1, offset: 54435},
			expr: &actionExpr{
				pos: position{line: 1764, col: 15, offset: 54449},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1764, col: 15, offset: 54449},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1764, col: 20, offset: 54454},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 1764, col: 20, offset: 54454},
								offset: 38,
							},
							&ruleRefExpr{
								pos:    position{line: 1764, col: 48, offset: 54482},
								offset: 43,
							},
							&ruleRefExpr{
								pos:    position{line: 1764, col: 76, offset: 54510},
								offset: 47,
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1768, col: 1, offset: 54643},
			expr: &choiceExpr{
				pos: position{line: 1769, col: 7, offset: 54667},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1769, col: 8, offset: 54668},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1769, col: 8, offset: 54668},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1770, col: 8, offset: 54731},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1770, col: 8, offset: 54731},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1771, col: 8, offset: 54797},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1771, col: 8, offset: 54797},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1772, col: 8, offset: 54863},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1772, col: 8, offset: 54863},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1773, col: 8, offset: 54936},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1773, col: 8, offset: 54936},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1774, col: 8, offset: 55005},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1774, col: 8, offset: 55005},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "ConditionalStatement",
			pos:  position{line: 1776, col: 1, offset: 55075},
			expr: &choiceExpr{
				pos: position{line: 1776, col: 25, offset: 55099},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1776, col: 25, offset: 55099},
						offset: 284,
					},
					&ruleRefExpr{
						pos:    position{line: 1776, col: 42, offset: 55116},
						offset: 286,
					},
					&ruleRefExpr{
						pos:    position{line: 1776, col: 60, offset: 55134},
						offset: 297,
					},
					&ruleRefExpr{
						pos:    position{line: 1776, col: 78, offset: 55152},
						offset: 290,
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1779, col: 1, offset: 55173},
			expr: &actionExpr{
				pos: position{line: 1779, col: 20, offset: 55192},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1779, col: 21, offset: 55193},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1779, col: 21, offset: 55193},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1779, col: 27, offset: 55199},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1779, col: 33, offset: 55205},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1783, col: 1, offset: 55276},
			expr: &seqExpr{
				pos: position{line: 1783, col: 15, offset: 55290},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1783, col: 15, offset: 55290},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1783, col: 19, offset: 55294},
						expr: &notExpr{
							pos: position{line: 1783, col: 21, offset: 55296},
							expr: &litMatcher{
								pos:        position{line: 1783, col: 22, offset: 55297},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1785, col: 1, offset: 55303},
			expr: &choiceExpr{
				pos: position{line: 1785, col: 15, offset: 55317},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1785, col: 15, offset: 55317},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1785, col: 15, offset: 55317},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1785, col: 15, offset: 55317},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1785, col: 21, offset: 55323},
									expr: &charClassMatcher{
										pos:        position{line: 1785, col: 22, offset: 55324},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1787, col: 9, offset: 55382},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1787, col: 9, offset: 55382},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1787, col: 9, offset: 55382},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1787, col: 13, offset: 55386},
									expr: &charClassMatcher{
										pos:        position{line: 1787, col: 14, offset: 55387},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1792, col: 1, offset: 55450},
			expr: &actionExpr{
				pos: position{line: 1792, col: 15, offset: 55464},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1792, col: 17, offset: 55466},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 1792, col: 18, offset: 55467},
							val:        "[,;.?)/:!=\"'@-[\\]]",
							chars:      []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:     []rune{'@', '['},
							ignoreCase: false,
							inverted:   false,
						},
						&seqExpr{
							pos: position{line: 1792, col: 41, offset: 55490},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1792, col: 41, offset: 55490},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1792, col: 45, offset: 55494},
									expr: &litMatcher{
										pos:        position{line: 1792, col: 46, offset: 55495},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1796, col: 1, offset: 55562},
			expr: &actionExpr{
				pos: position{line: 1796, col: 13, offset: 55574},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1796, col: 13, offset: 55574},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1796, col: 13, offset: 55574},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1796, col: 17, offset: 55578},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 1796, col: 27, offset: 55588},
							expr: &ruleRefExpr{
								pos:    position{line: 1796, col: 29, offset: 55590},
								offset: 324,
							},
						},
						&andCodeExpr{
							pos: position{line: 1796, col: 40, offset: 55601},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1802, col: 1, offset: 55702},
			expr: &choiceExpr{
				pos: position{line: 1802, col: 16, offset: 55717},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1802, col: 16, offset: 55717},
						offset: 308,
					},
					&ruleRefExpr{
						pos:    position{line: 1802, col: 36, offset: 55737},
						offset: 307,
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1804, col: 1, offset: 55757},
			expr: &choiceExpr{
				pos: position{line: 1804, col: 22, offset: 55778},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1804, col: 22, offset: 55778},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&litMatcher{
						pos:        position{line: 1804, col: 30, offset: 55786},
						val:        "`\"",
						ignoreCase: false,
						want:       "\"`\\\"\"",
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1806, col: 1, offset: 55795},
			expr: &choiceExpr{
				pos: position{line: 1806, col: 22, offset: 55816},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1806, col: 22, offset: 55816},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&litMatcher{
						pos:        position{line: 1806, col: 29, offset: 55823},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1808, col: 1, offset: 55831},
			expr: &actionExpr{
				pos: position{line: 1808, col: 13, offset: 55843},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1808, col: 13, offset: 55843},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1808, col: 13, offset: 55843},
							offset: 321,
						},
						&ruleRefExpr{
							pos:    position{line: 1808, col: 29, offset: 55859},
							offset: 328,
						},
						&ruleRefExpr{
							pos:    position{line: 1808, col: 39, offset: 55869},
							offset: 311,
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1812, col: 1, offset: 55959},
			expr: &seqExpr{
				pos: position{line: 1812, col: 15, offset: 55973},
				exprs: []any{
					&notExpr{
						pos: position{line: 1812, col: 15, offset: 55973},
						expr: &litMatcher{
							pos:        position{line: 1812, col: 16, offset: 55974},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1812, col: 21, offset: 55979},
						offset: 311,
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1814, col: 1, offset: 55988},
			expr: &actionExpr{
				pos: position{line: 1814, col: 11, offset: 55998},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1814, col: 12, offset: 55999},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1814, col: 12, offset: 55999},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1814, col: 19, offset: 56006},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1818, col: 1, offset: 56066},
			expr: &actionExpr{
				pos: position{line: 1818, col: 15, offset: 56080},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1818, col: 15, offset: 56080},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1818, col: 15, offset: 56080},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:    position{line: 1818, col: 26, offset: 56091},
								offset: 313,
							},
						},
						&litMatcher{
							pos:        position{line: 1818, col: 42, offset: 56107},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1822, col: 1, offset: 56143},
			expr: &actionExpr{
				pos: position{line: 1822, col: 20, offset: 56162},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1822, col: 20, offset: 56162},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1822, col: 21, offset: 56163},
							expr: &charClassMatcher{
								pos:        position{line: 1822, col: 21, offset: 56163},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1822, col: 29, offset: 56171},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1828, col: 1, offset: 56262},
			expr: &notExpr{
				pos: position{line: 1828, col: 14, offset: 56275},
				expr: &ruleRefExpr{
					pos:    position{line: 1828, col: 15, offset: 56276},
					offset: 311,
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1830, col: 1, offset: 56285},
			expr: &notExpr{
				pos: position{line: 1830, col: 12, offset: 56296},
				expr: &ruleRefExpr{
					pos:    position{line: 1830, col: 13, offset: 56297},
					offset: 333,
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1832, col: 1, offset: 56300},
			expr: &charClassMatcher{
				pos:        position{line: 1832, col: 9, offset: 56308},
				val:        "[\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1834, col: 1, offset: 56317},
			expr: &charClassMatcher{
				pos:        position{line: 1834, col: 16, offset: 56332},
				val:        "[\\p{L}\\p{N}]",
				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1836, col: 1, offset: 56346},
			expr: &notExpr{
				pos: position{line: 1836, col: 13, offset: 56358},
				expr: &anyMatcher{
					line: 1836, col: 14, offset: 56359,
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1838, col: 1, offset: 56363},
			expr: &andExpr{
				pos: position{line: 1838, col: 16, offset: 56378},
				expr: &anyMatcher{
					line: 1838, col: 18, offset: 56380,
				},
			},
		},
		{
			name: "BeginningOfFile",
			pos:  position{line: 1840, col: 1, offset: 56384},
			expr: &seqExpr{
				pos: position{line: 1840, col: 19, offset: 56402},
				exprs: []any{
					&andExpr{
						pos: position{line: 1840, col: 19, offset: 56402},
						expr: &anyMatcher{
							line: 1840, col: 21, offset: 56404,
						},
					},
					&andCodeExpr{
						pos: position{line: 1840, col: 24, offset: 56407},
						run: (*parser).callonBeginningOfFile4,
					},
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1846, col: 1, offset: 56522},
			expr: &notExpr{
				pos: position{line: 1846, col: 19, offset: 56540},
				expr: &ruleRefExpr{
					pos:    position{line: 1846, col: 20, offset: 56541},
					offset: 322,
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1848, col: 1, offset: 56558},
			expr: &seqExpr{
				pos: position{line: 1848, col: 19, offset: 56576},
				exprs: []any{
					&anyMatcher{
						line: 1848, col: 19, offset: 56576,
					},
					&andCodeExpr{
						pos: position{line: 1848, col: 21, offset: 56578},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1852, col: 1, offset: 56626},
			expr: &actionExpr{
				pos: position{line: 1852, col: 10, offset: 56635},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1852, col: 10, offset: 56635},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1852, col: 10, offset: 56635},
							offset: 328,
						},
						&andExpr{
							pos: position{line: 1852, col: 20, offset: 56645},
							expr: &notExpr{
								pos: position{line: 1852, col: 22, offset: 56647},
								expr: &ruleRefExpr{
									pos:    position{line: 1852, col: 23, offset: 56648},
									offset: 333,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1852, col: 26, offset: 56651},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1858, col: 1, offset: 56720},
			expr: &choiceExpr{
				pos: position{line: 1858, col: 13, offset: 56732},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1858, col: 13, offset: 56732},
						offset: 311,
					},
					&ruleRefExpr{
						pos:    position{line: 1858, col: 23, offset: 56742},
						offset: 318,
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1860, col: 1, offset: 56753},
			expr: &labeledExpr{
				pos:   position{line: 1860, col: 14, offset: 56766},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1860, col: 20, offset: 56772},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1860, col: 20, offset: 56772},
						expr: &ruleRefExpr{
							pos:    position{line: 1860, col: 20, offset: 56772},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1862, col: 1, offset: 56818},
			expr: &actionExpr{
				pos: position{line: 1862, col: 16, offset: 56833},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1862, col: 16, offset: 56833},
					expr: &ruleRefExpr{
						pos:    position{line: 1862, col: 16, offset: 56833},
						offset: 330,
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1866, col: 1, offset: 56895},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1866, col: 11, offset: 56905},
				expr: &charClassMatcher{
					pos:        position{line: 1866, col: 11, offset: 56905},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1868, col: 1, offset: 56916},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1868, col: 13, offset: 56928},
				expr: &charClassMatcher{
					pos:        position{line: 1868, col: 13, offset: 56928},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1870, col: 1, offset: 56937},
			expr: &actionExpr{
				pos: position{line: 1870, col: 21, offset: 56957},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1870, col: 22, offset: 56958},
					alternatives: []any{
						&anyMatcher{
							line: 1870, col: 22, offset: 56958,
						},
						&ruleRefExpr{
							pos:    position{line: 1870, col: 26, offset: 56962},
							offset: 311,
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1874, col: 1, offset: 57011},
			expr: &charClassMatcher{
				pos:        position{line: 1874, col: 24, offset: 57034},
				val:        "[^\\r\\n]",
				chars:      []rune{'\r', '\n'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1876, col: 1, offset: 57044},
			expr: &charClassMatcher{
				pos:        position{line: 1876, col: 22, offset: 57065},
				val:        "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "__",
			pos:  position{line: 1878, col: 1, offset: 57108},
			expr: &actionExpr{
				pos: position{line: 1878, col: 6, offset: 57113},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1878, col: 6, offset: 57113},
					expr: &charClassMatcher{
						pos:        position{line: 1878, col: 6, offset: 57113},
						val:        "[ \\t]",
						chars:      []rune{' ', '\t'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1882, col: 1, offset: 57160},
			expr: &actionExpr{
				pos: position{line: 1882, col: 5, offset: 57164},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:        position{line: 1882, col: 5, offset: 57164},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1886, col: 1, offset: 57210},
			expr: &litMatcher{
				pos:        position{line: 1886, col: 10, offset: 57219},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1888, col: 1, offset: 57226},
			expr: &litMatcher{
				pos:        position{line: 1888, col: 16, offset: 57241},
				val:        "\\\\",
				ignoreCase: false,
				want:       "\"\\\\\\\\\"",
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Elements))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onAlchemyEscape1(start, value, lines any) (any, error) {
	return compose(c, asciidoc.NewAlchemyEscape(), setLines[*asciidoc.AlchemyEscape](cast[any, string](lines.([]any))), setElements[*asciidoc.AlchemyEscape](value))

}

func (p *parser) callonAlchemyEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscape1(stack["start"], stack["value"], stack["lines"])
}

func (c *current) onAlchemyEscapeLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonAlchemyEscapeLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscapeLine1(stack["line"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join(flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Elements)...), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueCharacter2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueCharacter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueCharacter2()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueCharacter2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonDoubleQuoteAttributeValueCharacter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueCharacter2()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(asciidoc.Elements), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(id.(asciidoc.Elements), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAdmonition2() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition2()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Elements)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Elements)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onIncludeParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonIncludeParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParse1(stack["content"])
}

func (c *current) onIncludeParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonIncludeParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseElement1(stack["element"])
}

func (c *current) onIncludeParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonIncludeParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseLine1(stack["content"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLinkMacro(url.(asciidoc.URL)), setAttributes[*asciidoc.LinkMacro](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onIncludedTableElements1(content any) (any, error) {
	table := c.globalStore["table"].(*asciidoc.Table)
	return parseTableRows(table, content.([]any))
}

func (p *parser) callonIncludedTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableElements1(stack["content"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onIncludedTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonIncludedTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableInlineIfDef1(ifdef, content, endif any) (any, error) {
	id, err := compose(c, ifdef.(*asciidoc.IfDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Elements{id}, content.(asciidoc.Elements)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfDef1(stack["ifdef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableInlineIfNDef1(ifndef, content, endif any) (any, error) {
	id, err := compose(c, ifndef.(*asciidoc.IfNDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Elements{id}, content.(asciidoc.Elements)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfNDef1(stack["ifndef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfEval1(ifeval any) (any, error) {
	return compose(c, ifeval.(*asciidoc.IfEval))
}

func (p *parser) callonTableIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfEval1(stack["ifeval"])
}

func (c *current) onTableInlineIfEval1(ifeval, content, endif any) (any, error) {
	id, err := compose(c, ifeval.(*asciidoc.IfEval))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Elements{id}, content.(asciidoc.Elements)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfEval1(stack["ifeval"], stack["content"], stack["endif"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonTableFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onIncludedTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonIncludedTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Elements)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Elements)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Elements{}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Elements
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Elements{populatePosition(c, asciidoc.NewEmptyLine(string(c.text)))}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return mergeStrings(flat(content.([]any))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onInlineTableCellSpaces1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonInlineTableCellSpaces1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellSpaces1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe(column, span.Column.Value)
	span.Row = asciidoc.Maybe(row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe(multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe(horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe(verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe(style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Elements)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Elements)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines.([]any)...)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return append([]any{&asciidoc.NewLine{}}, element.([]any)...), nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(asciidoc.Elements), asciidoc.CrossReferenceFormatNatural), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceInitialCharacter1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCrossReferenceInitialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceInitialCharacter1()
}

func (c *current) onCrossReferenceCharacters1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCrossReferenceCharacters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceCharacters1()
}

func (c *current) onCrossReferenceID1(start, end any) (any, error) {

	var id []any
	id = append(id, start)
	if end != nil {
		id = append(id, end.([]any)...)
	}
	return join(id), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1(stack["start"], stack["end"])
}

func (c *current) onCrossReferenceMacroLabel1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonCrossReferenceMacroLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceMacroLabel1(stack["content"])
}

func (c *current) onCrossReferenceMacro1(path, label any) (any, error) {
	var lbl asciidoc.Elements
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(path.(asciidoc.Elements), asciidoc.CrossReferenceFormatMacro), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonCrossReferenceMacro1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceMacro1(stack["path"], stack["label"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Elements)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 10, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Elements)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 10, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Elements))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Elements)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Elements(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names, attr.union), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names, attr.union), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onBeginningOfFile4() (bool, error) {
	if c.pos.line == 0 && c.pos.col == 0 {
	}
	return c.pos.line == 0 && c.pos.col == 0, nil
}

func (p *parser) callonBeginningOfFile4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeginningOfFile4()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict

	parser                *parser                         // Alchemy patch: we keep a reference to the parent parser here, so inline code can access it
	delimitedBlockState   delimitedBlockState             // Alchemy patch: we keep track of levels of delimited blocks here
	tableColumnsAttribute *asciidoc.TableColumnsAttribute // Alchemy patch: we keep track of explicit table columns here to aid in allocating columns
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos position
	val string
	// Alchemy patch: we don't use this optimization, so don't allocate the array
	//basicLatinChars [128]bool
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore:         make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	offset position // Alchemy patch: we add an offset field to track element positions in the doc
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any // Alchemy patch: we lazily allocate this array, as it's infrequently populated

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
