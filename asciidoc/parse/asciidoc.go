// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/hasty/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 92},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 103},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 103},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 103},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 111},
								expr: &ruleRefExpr{
									pos:  position{line: 14, col: 21, offset: 112},
									name: "Element",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 31, offset: 122},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 177},
			expr: &actionExpr{
				pos: position{line: 18, col: 11, offset: 187},
				run: (*parser).callonElement1,
				expr: &labeledExpr{
					pos:   position{line: 18, col: 11, offset: 187},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 18, col: 20, offset: 196},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 18, col: 20, offset: 196},
								name: "BlockElement",
							},
							&ruleRefExpr{
								pos:  position{line: 18, col: 35, offset: 211},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 25, col: 1, offset: 260},
			expr: &actionExpr{
				pos: position{line: 25, col: 16, offset: 275},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 25, col: 16, offset: 275},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 25, col: 16, offset: 275},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 25, col: 32, offset: 291},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 41, offset: 300},
								name: "BlockElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 56, offset: 315},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 26, col: 1, offset: 325},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 32, col: 1, offset: 424},
			expr: &actionExpr{
				pos: position{line: 32, col: 17, offset: 440},
				run: (*parser).callonBlockElements1,
				expr: &labeledExpr{
					pos:   position{line: 32, col: 17, offset: 440},
					label: "blockElement",
					expr: &choiceExpr{
						pos: position{line: 33, col: 5, offset: 460},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 33, col: 5, offset: 460},
								name: "BlockEmptyLine",
							},
							&ruleRefExpr{
								pos:  position{line: 34, col: 5, offset: 481},
								name: "AttributableBlocks",
							},
							&ruleRefExpr{
								pos:  position{line: 35, col: 5, offset: 506},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 37, col: 5, offset: 541},
								name: "NakedBlocks",
							},
							&ruleRefExpr{
								pos:  position{line: 38, col: 5, offset: 559},
								name: "NakedBlockAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 43, col: 1, offset: 620},
			expr: &actionExpr{
				pos: position{line: 43, col: 15, offset: 634},
				run: (*parser).callonNakedBlocks1,
				expr: &labeledExpr{
					pos:   position{line: 43, col: 15, offset: 634},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 44, col: 5, offset: 647},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 44, col: 5, offset: 647},
								name: "MultiLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 45, col: 5, offset: 671},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 46, col: 5, offset: 695},
								name: "AttributeEntry",
							},
							&ruleRefExpr{
								pos:  position{line: 47, col: 5, offset: 717},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 48, col: 5, offset: 738},
								name: "IfDef",
							},
							&ruleRefExpr{
								pos:  position{line: 49, col: 5, offset: 750},
								name: "IfNDef",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 5, offset: 764},
								name: "IfEval",
							},
							&ruleRefExpr{
								pos:  position{line: 51, col: 5, offset: 777},
								name: "EndIfDef",
							},
							&ruleRefExpr{
								pos:  position{line: 52, col: 5, offset: 792},
								name: "FileInclude",
							},
							&ruleRefExpr{
								pos:  position{line: 53, col: 5, offset: 810},
								name: "DescriptionListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 54, col: 5, offset: 836},
								name: "ListContinuation",
							},
							&ruleRefExpr{
								pos:  position{line: 55, col: 5, offset: 859},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 60, col: 1, offset: 900},
			expr: &actionExpr{
				pos: position{line: 60, col: 22, offset: 921},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 60, col: 22, offset: 921},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 60, col: 22, offset: 921},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 33, offset: 932},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 34, offset: 933},
									name: "BlockElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 59, offset: 958},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 61, col: 5, offset: 973},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 61, col: 5, offset: 973},
										name: "Listing",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 5, offset: 988},
										name: "Open",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 5, offset: 999},
										name: "Example",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 5, offset: 1013},
										name: "Sidebar",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 5, offset: 1027},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 5, offset: 1039},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 5, offset: 1053},
										name: "Stem",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 5, offset: 1064},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 5, offset: 1079},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 5, offset: 1099},
										name: "PageBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 5, offset: 1115},
										name: "BlockImage",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 5, offset: 1132},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 5, offset: 1155},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 5, offset: 1180},
										name: "DescriptionListItem",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 75, col: 9, offset: 1209},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 87, col: 1, offset: 1607},
			expr: &actionExpr{
				pos: position{line: 87, col: 19, offset: 1625},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 87, col: 19, offset: 1625},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 88, col: 5, offset: 1641},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 88, col: 6, offset: 1642},
								run: (*parser).callonBlockAttributes4,
								expr: &labeledExpr{
									pos:   position{line: 88, col: 6, offset: 1642},
									label: "anchor",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 14, offset: 1650},
										name: "AnchorAttribute",
									},
								},
							},
							&actionExpr{
								pos: position{line: 91, col: 8, offset: 1711},
								run: (*parser).callonBlockAttributes7,
								expr: &labeledExpr{
									pos:   position{line: 91, col: 8, offset: 1711},
									label: "title",
									expr: &ruleRefExpr{
										pos:  position{line: 91, col: 15, offset: 1718},
										name: "BlockTitle",
									},
								},
							},
							&actionExpr{
								pos: position{line: 94, col: 8, offset: 1773},
								run: (*parser).callonBlockAttributes10,
								expr: &labeledExpr{
									pos:   position{line: 94, col: 8, offset: 1773},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 20, offset: 1785},
										name: "Attributes",
									},
								},
							},
							&actionExpr{
								pos: position{line: 97, col: 8, offset: 1846},
								run: (*parser).callonBlockAttributes13,
								expr: &labeledExpr{
									pos:   position{line: 97, col: 8, offset: 1846},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 20, offset: 1858},
										name: "ShorthandAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 104, col: 1, offset: 1960},
			expr: &actionExpr{
				pos: position{line: 104, col: 14, offset: 1973},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 104, col: 14, offset: 1973},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 104, col: 14, offset: 1973},
							name: "BeginningOfLine",
						},
						&litMatcher{
							pos:        position{line: 104, col: 30, offset: 1989},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 104, col: 34, offset: 1993},
							expr: &charClassMatcher{
								pos:             position{line: 104, col: 35, offset: 1994},
								val:             "[ .]",
								chars:           []rune{' ', '.'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 40, offset: 1999},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 49, offset: 2008},
								name: "BlockTitleContent",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 112, col: 1, offset: 2183},
			expr: &actionExpr{
				pos: position{line: 112, col: 21, offset: 2203},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 112, col: 21, offset: 2203},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 29, offset: 2211},
						expr: &choiceExpr{
							pos: position{line: 112, col: 30, offset: 2212},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 112, col: 30, offset: 2212},
									name: "NakedInlineText",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 2230},
									name: "Alphanumeric",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 63, offset: 2245},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 67, offset: 2249},
									name: "Punctuation",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 81, offset: 2263},
									name: "AttributeReference",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 102, offset: 2284},
									name: "CharacterClassInline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 116, col: 1, offset: 2351},
			expr: &actionExpr{
				pos: position{line: 116, col: 18, offset: 2368},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 116, col: 18, offset: 2368},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 18, offset: 2368},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 18, offset: 2368},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 116, col: 21, offset: 2371},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 22, offset: 2372},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 120, col: 1, offset: 2450},
			expr: &actionExpr{
				pos: position{line: 120, col: 25, offset: 2474},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 120, col: 25, offset: 2474},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 120, col: 25, offset: 2474},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 37, offset: 2486},
								name: "BlockAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 54, offset: 2503},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 54, offset: 2503},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 120, col: 57, offset: 2506},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 58, offset: 2507},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 124, col: 1, offset: 2553},
			expr: &actionExpr{
				pos: position{line: 124, col: 35, offset: 2587},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 124, col: 35, offset: 2587},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 124, col: 35, offset: 2587},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 43, offset: 2595},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 55, offset: 2607},
								name: "BlockAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 124, col: 72, offset: 2624},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 72, offset: 2624},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 124, col: 75, offset: 2627},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 76, offset: 2628},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 128, col: 1, offset: 2674},
			expr: &actionExpr{
				pos: position{line: 128, col: 26, offset: 2699},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 128, col: 26, offset: 2699},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 128, col: 26, offset: 2699},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 37, offset: 2710},
								name: "BlockElementAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 60, offset: 2733},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 128, col: 81, offset: 2754},
								expr: &ruleRefExpr{
									pos:  position{line: 128, col: 82, offset: 2755},
									name: "BlockElementAdditionalAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 116, offset: 2789},
							name: "EndOfLine",
						},
						&zeroOrMoreExpr{
							pos: position{line: 128, col: 126, offset: 2799},
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 126, offset: 2799},
								name: "EmptyLine",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 136, col: 1, offset: 3016},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 3039},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 3039},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 136, col: 24, offset: 3039},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 35, offset: 3050},
								name: "BlockElementAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 58, offset: 3073},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 136, col: 79, offset: 3094},
								expr: &ruleRefExpr{
									pos:  position{line: 136, col: 80, offset: 3095},
									name: "BlockElementAdditionalAttribute",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 148, col: 1, offset: 3437},
			expr: &actionExpr{
				pos: position{line: 149, col: 5, offset: 3460},
				run: (*parser).callonBlockDelimiters1,
				expr: &seqExpr{
					pos: position{line: 149, col: 5, offset: 3460},
					exprs: []any{
						&notExpr{
							pos: position{line: 149, col: 5, offset: 3460},
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 6, offset: 3461},
								name: "Alphanumeric",
							},
						},
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 3478},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 151, col: 9, offset: 3498},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 151, col: 9, offset: 3498},
										name: "MultiLineCommentForwardSlashes",
									},
									&ruleRefExpr{
										pos:  position{line: 152, col: 11, offset: 3539},
										name: "ExampleEquals",
									},
									&ruleRefExpr{
										pos:  position{line: 153, col: 11, offset: 3563},
										name: "FencedBackticks",
									},
									&ruleRefExpr{
										pos:  position{line: 154, col: 11, offset: 3589},
										name: "ListingHyphens",
									},
									&ruleRefExpr{
										pos:  position{line: 155, col: 11, offset: 3614},
										name: "LiteralDots",
									},
									&ruleRefExpr{
										pos:  position{line: 156, col: 11, offset: 3636},
										name: "StemPluses",
									},
									&ruleRefExpr{
										pos:  position{line: 157, col: 11, offset: 3657},
										name: "QuoteUnderlines",
									},
									&ruleRefExpr{
										pos:  position{line: 158, col: 11, offset: 3683},
										name: "SidebarAsterisks",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 162, col: 1, offset: 3748},
			expr: &actionExpr{
				pos: position{line: 162, col: 11, offset: 3758},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 162, col: 11, offset: 3758},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 162, col: 11, offset: 3758},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 162, col: 18, offset: 3765},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 162, col: 18, offset: 3765},
									expr: &charClassMatcher{
										pos:             position{line: 162, col: 18, offset: 3765},
										val:             "[=]",
										chars:           []rune{'='},
										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
										ignoreCase:      false,
										inverted:        false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 165, col: 5, offset: 3824},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:  position{line: 168, col: 5, offset: 3881},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 8, offset: 3884},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 15, offset: 3891},
								name: "SectionTitle",
							},
						},
						&andExpr{
							pos: position{line: 168, col: 29, offset: 3905},
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 30, offset: 3906},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 172, col: 1, offset: 4021},
			expr: &oneOrMoreExpr{
				pos: position{line: 172, col: 16, offset: 4036},
				expr: &ruleRefExpr{
					pos:  position{line: 172, col: 17, offset: 4037},
					name: "SectionTitleValue",
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 174, col: 1, offset: 4058},
			expr: &actionExpr{
				pos: position{line: 174, col: 21, offset: 4078},
				run: (*parser).callonSectionTitleValue1,
				expr: &seqExpr{
					pos: position{line: 174, col: 21, offset: 4078},
					exprs: []any{
						&notExpr{
							pos: position{line: 174, col: 21, offset: 4078},
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 22, offset: 4079},
								name: "EndOfLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 174, col: 32, offset: 4089},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 175, col: 5, offset: 4103},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 175, col: 5, offset: 4103},
										name: "UnbrokenText",
									},
									&ruleRefExpr{
										pos:  position{line: 176, col: 7, offset: 4123},
										name: "__",
									},
									&ruleRefExpr{
										pos:  position{line: 177, col: 7, offset: 4133},
										name: "Apostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 7, offset: 4151},
										name: "Punctuation",
									},
									&ruleRefExpr{
										pos:  position{line: 179, col: 7, offset: 4171},
										name: "FormattedText",
									},
									&ruleRefExpr{
										pos:  position{line: 181, col: 7, offset: 4216},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 182, col: 7, offset: 4228},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 183, col: 7, offset: 4252},
										name: "Icon",
									},
									&ruleRefExpr{
										pos:  position{line: 184, col: 7, offset: 4264},
										name: "AttributeReference",
									},
									&ruleRefExpr{
										pos:  position{line: 185, col: 7, offset: 4290},
										name: "Anchor",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 7, offset: 4319},
										name: "CharacterClassInline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 192, col: 1, offset: 4371},
			expr: &actionExpr{
				pos: position{line: 192, col: 18, offset: 4388},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 192, col: 18, offset: 4388},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 192, col: 18, offset: 4388},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 22, offset: 4392},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 28, offset: 4398},
								name: "AttributeEntryName",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 48, offset: 4418},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 192, col: 52, offset: 4422},
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 52, offset: 4422},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 192, col: 55, offset: 4425},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 62, offset: 4432},
								name: "AttributeEntryElements",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 196, col: 1, offset: 4576},
			expr: &actionExpr{
				pos: position{line: 196, col: 22, offset: 4597},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 196, col: 22, offset: 4597},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 196, col: 22, offset: 4597},
							name: "CharacterGroupWord",
						},
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 41, offset: 4616},
							expr: &choiceExpr{
								pos: position{line: 196, col: 42, offset: 4617},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 196, col: 42, offset: 4617},
										name: "CharacterGroupWord",
									},
									&litMatcher{
										pos:        position{line: 196, col: 63, offset: 4638},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 200, col: 1, offset: 4684},
			expr: &actionExpr{
				pos: position{line: 200, col: 26, offset: 4709},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 200, col: 26, offset: 4709},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 200, col: 32, offset: 4715},
						expr: &ruleRefExpr{
							pos:  position{line: 200, col: 32, offset: 4715},
							name: "AttributeEntryElement",
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 204, col: 1, offset: 4809},
			expr: &choiceExpr{
				pos: position{line: 204, col: 26, offset: 4834},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 204, col: 26, offset: 4834},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 204, col: 26, offset: 4834},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 204, col: 36, offset: 4844},
								name: "EndOfLine",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 48, offset: 4856},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 206, col: 1, offset: 4880},
			expr: &choiceExpr{
				pos: position{line: 206, col: 18, offset: 4897},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 206, col: 18, offset: 4897},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 206, col: 18, offset: 4897},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 206, col: 18, offset: 4897},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 206, col: 23, offset: 4902},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 29, offset: 4908},
										name: "AttributeEntryName",
									},
								},
								&litMatcher{
									pos:        position{line: 206, col: 49, offset: 4928},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 206, col: 53, offset: 4932},
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 53, offset: 4932},
										name: "_",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 5007},
						run: (*parser).callonAttributeReset10,
						expr: &seqExpr{
							pos: position{line: 208, col: 5, offset: 5007},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 208, col: 5, offset: 5007},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 208, col: 9, offset: 5011},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 15, offset: 5017},
										name: "AttributeEntryName",
									},
								},
								&litMatcher{
									pos:        position{line: 208, col: 35, offset: 5037},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 208, col: 40, offset: 5042},
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 40, offset: 5042},
										name: "_",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 213, col: 1, offset: 5195},
			expr: &actionExpr{
				pos: position{line: 213, col: 14, offset: 5208},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 213, col: 14, offset: 5208},
					exprs: []any{
						&notExpr{
							pos: position{line: 213, col: 14, offset: 5208},
							expr: &litMatcher{
								pos:        position{line: 213, col: 15, offset: 5209},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 20, offset: 5214},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 213, col: 24, offset: 5218},
							expr: &litMatcher{
								pos:        position{line: 213, col: 25, offset: 5219},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 29, offset: 5223},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 41, offset: 5235},
								name: "AttributeList",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 56, offset: 5250},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 218, col: 1, offset: 5292},
			expr: &actionExpr{
				pos: position{line: 218, col: 17, offset: 5308},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 218, col: 17, offset: 5308},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 218, col: 28, offset: 5319},
						expr: &ruleRefExpr{
							pos:  position{line: 218, col: 29, offset: 5320},
							name: "AttributeListItem",
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 222, col: 1, offset: 5405},
			expr: &actionExpr{
				pos: position{line: 222, col: 21, offset: 5425},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 222, col: 21, offset: 5425},
					exprs: []any{
						&notExpr{
							pos: position{line: 222, col: 21, offset: 5425},
							expr: &litMatcher{
								pos:        position{line: 222, col: 22, offset: 5426},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 26, offset: 5430},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 26, offset: 5430},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 29, offset: 5433},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 40, offset: 5444},
								name: "Attribute",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 51, offset: 5455},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 51, offset: 5455},
								name: "_",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 222, col: 54, offset: 5458},
							expr: &litMatcher{
								pos:        position{line: 222, col: 54, offset: 5458},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 226, col: 1, offset: 5494},
			expr: &actionExpr{
				pos: position{line: 226, col: 13, offset: 5506},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 13, offset: 5506},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 226, col: 13, offset: 5506},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 226, col: 18, offset: 5511},
								expr: &actionExpr{
									pos: position{line: 226, col: 20, offset: 5513},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 226, col: 21, offset: 5514},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 226, col: 21, offset: 5514},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 27, offset: 5520},
													name: "NamedAttributeName",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 226, col: 47, offset: 5540},
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 47, offset: 5540},
													name: "_",
												},
											},
											&litMatcher{
												pos:        position{line: 226, col: 50, offset: 5543},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 226, col: 54, offset: 5547},
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 54, offset: 5547},
													name: "_",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 81, offset: 5574},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 226, col: 88, offset: 5581},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 226, col: 88, offset: 5581},
										name: "SingleQuoteAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 116, offset: 5609},
										name: "DoubleQuoteAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 144, offset: 5637},
										name: "NakedAttributeValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 233, col: 1, offset: 5893},
			expr: &actionExpr{
				pos: position{line: 233, col: 23, offset: 5915},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 233, col: 23, offset: 5915},
					exprs: []any{
						&notExpr{
							pos: position{line: 233, col: 23, offset: 5915},
							expr: &litMatcher{
								pos:        position{line: 233, col: 24, offset: 5916},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 29, offset: 5921},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 233, col: 33, offset: 5925},
							expr: &litMatcher{
								pos:        position{line: 233, col: 34, offset: 5926},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 38, offset: 5930},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 49, offset: 5941},
								name: "ShorthandAttribute",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 69, offset: 5961},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 237, col: 1, offset: 6001},
			expr: &actionExpr{
				pos: position{line: 237, col: 22, offset: 6022},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 22, offset: 6022},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 22, offset: 6022},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 28, offset: 6028},
								expr: &ruleRefExpr{
									pos:  position{line: 237, col: 29, offset: 6029},
									name: "ShorthandAttributeValue",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 55, offset: 6055},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 237, col: 62, offset: 6062},
								expr: &choiceExpr{
									pos: position{line: 237, col: 63, offset: 6063},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 237, col: 63, offset: 6063},
											name: "ShorthandID",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 77, offset: 6077},
											name: "ShorthandRole",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 93, offset: 6093},
											name: "ShorthandOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 241, col: 1, offset: 6181},
			expr: &actionExpr{
				pos: position{line: 241, col: 18, offset: 6198},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 241, col: 18, offset: 6198},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 241, col: 24, offset: 6204},
						name: "ShorthandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 245, col: 1, offset: 6295},
			expr: &actionExpr{
				pos: position{line: 245, col: 15, offset: 6309},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 245, col: 15, offset: 6309},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 15, offset: 6309},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 19, offset: 6313},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 25, offset: 6319},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 249, col: 1, offset: 6410},
			expr: &actionExpr{
				pos: position{line: 249, col: 17, offset: 6426},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 249, col: 17, offset: 6426},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 249, col: 17, offset: 6426},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 21, offset: 6430},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 27, offset: 6436},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 253, col: 1, offset: 6529},
			expr: &actionExpr{
				pos: position{line: 253, col: 19, offset: 6547},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 253, col: 19, offset: 6547},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 253, col: 19, offset: 6547},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 23, offset: 6551},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 29, offset: 6557},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 257, col: 1, offset: 6652},
			expr: &actionExpr{
				pos: position{line: 257, col: 27, offset: 6678},
				run: (*parser).callonShorthandAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 257, col: 27, offset: 6678},
					label: "value",
					expr: &choiceExpr{
						pos: position{line: 257, col: 34, offset: 6685},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 257, col: 34, offset: 6685},
								exprs: []any{
									&notExpr{
										pos: position{line: 257, col: 34, offset: 6685},
										expr: &litMatcher{
											pos:        position{line: 257, col: 35, offset: 6686},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 39, offset: 6690},
										expr: &litMatcher{
											pos:        position{line: 257, col: 40, offset: 6691},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 44, offset: 6695},
										expr: &litMatcher{
											pos:        position{line: 257, col: 45, offset: 6696},
											val:        "%",
											ignoreCase: false,
											want:       "\"%\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 257, col: 49, offset: 6700},
										name: "SingleQuoteAttributeValue",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 257, col: 77, offset: 6728},
								name: "DoubleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 257, col: 105, offset: 6756},
								name: "NakedAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 261, col: 1, offset: 6804},
			expr: &actionExpr{
				pos: position{line: 261, col: 29, offset: 6832},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 261, col: 29, offset: 6832},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 261, col: 29, offset: 6832},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 33, offset: 6836},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 39, offset: 6842},
								expr: &ruleRefExpr{
									pos:  position{line: 261, col: 40, offset: 6843},
									name: "SingleQuoteAttributeValueElement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 75, offset: 6878},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 265, col: 1, offset: 6987},
			expr: &choiceExpr{
				pos: position{line: 266, col: 5, offset: 7028},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7028},
						run: (*parser).callonSingleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 7028},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7081},
						name: "Alphanumeric",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7101},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7110},
						name: "CurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7129},
						name: "AttributeReference",
					},
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 7154},
						run: (*parser).callonSingleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 271, col: 5, offset: 7154},
							expr: &charClassMatcher{
								pos:             position{line: 271, col: 5, offset: 7154},
								val:             "[^\\r\\n\\\\' ]",
								chars:           []rune{'\r', '\n', '\\', '\'', ' '},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 276, col: 1, offset: 7233},
			expr: &actionExpr{
				pos: position{line: 276, col: 29, offset: 7261},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 29, offset: 7261},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 276, col: 29, offset: 7261},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 34, offset: 7266},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 276, col: 40, offset: 7272},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 41, offset: 7273},
									name: "DoubleQuoteAttributeValueElement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 76, offset: 7308},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 280, col: 1, offset: 7418},
			expr: &choiceExpr{
				pos: position{line: 281, col: 5, offset: 7459},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 7459},
						run: (*parser).callonDoubleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 281, col: 5, offset: 7459},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7515},
						name: "Alphanumeric",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7535},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7544},
						name: "CurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 7562},
						name: "AttributeReference",
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 7587},
						run: (*parser).callonDoubleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 286, col: 5, offset: 7587},
							expr: &charClassMatcher{
								pos:             position{line: 286, col: 5, offset: 7587},
								val:             "[^\\r\\n\\\\\" ]",
								chars:           []rune{'\r', '\n', '\\', '"', ' '},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 291, col: 1, offset: 7666},
			expr: &actionExpr{
				pos: position{line: 291, col: 23, offset: 7688},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 291, col: 23, offset: 7688},
					exprs: []any{
						&notExpr{
							pos: position{line: 291, col: 23, offset: 7688},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 24, offset: 7689},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 26, offset: 7691},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 291, col: 32, offset: 7697},
								expr: &choiceExpr{
									pos: position{line: 292, col: 5, offset: 7703},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 292, col: 5, offset: 7703},
											name: "AttributeReference",
										},
										&ruleRefExpr{
											pos:  position{line: 293, col: 5, offset: 7729},
											name: "_",
										},
										&actionExpr{
											pos: position{line: 294, col: 5, offset: 7738},
											run: (*parser).callonNakedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 294, col: 5, offset: 7738},
												expr: &charClassMatcher{
													pos:             position{line: 294, col: 5, offset: 7738},
													val:             "[^=\\], ]",
													chars:           []rune{'=', ']', ',', ' '},
													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
													ignoreCase:      false,
													inverted:        true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 301, col: 1, offset: 7951},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 7970},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 7970},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 7970},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 24, offset: 7974},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 36, offset: 7986},
								name: "AttributeList",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 51, offset: 8001},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 305, col: 1, offset: 8041},
			expr: &actionExpr{
				pos: position{line: 305, col: 22, offset: 8062},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 305, col: 22, offset: 8062},
					exprs: []any{
						&charClassMatcher{
							pos:             position{line: 305, col: 22, offset: 8062},
							val:             "[A-Za-z0-9_]",
							chars:           []rune{'_'},
							ranges:          []rune{'A', 'Z', 'a', 'z', '0', '9'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 35, offset: 8075},
							expr: &charClassMatcher{
								pos:             position{line: 305, col: 35, offset: 8075},
								val:             "[A-Za-z0-9_-]",
								chars:           []rune{'_', '-'},
								ranges:          []rune{'A', 'Z', 'a', 'z', '0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 309, col: 1, offset: 8130},
			expr: &actionExpr{
				pos: position{line: 309, col: 22, offset: 8151},
				run: (*parser).callonAttributeReference1,
				expr: &labeledExpr{
					pos:   position{line: 309, col: 22, offset: 8151},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 309, col: 33, offset: 8162},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 309, col: 33, offset: 8162},
								name: "AttributeReferenceValue",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 59, offset: 8188},
								name: "Counter",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 313, col: 1, offset: 8228},
			expr: &actionExpr{
				pos: position{line: 313, col: 27, offset: 8254},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 313, col: 27, offset: 8254},
					exprs: []any{
						&notExpr{
							pos: position{line: 313, col: 27, offset: 8254},
							expr: &litMatcher{
								pos:        position{line: 313, col: 28, offset: 8255},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 33, offset: 8260},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 37, offset: 8264},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 42, offset: 8269},
								name: "AttributeEntryName",
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 61, offset: 8288},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 321, col: 1, offset: 8384},
			expr: &choiceExpr{
				pos: position{line: 321, col: 13, offset: 8396},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 321, col: 13, offset: 8396},
						name: "SingleBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 30, offset: 8413},
						name: "DoubleBoldText",
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 323, col: 1, offset: 8430},
			expr: &actionExpr{
				pos: position{line: 323, col: 18, offset: 8447},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 323, col: 18, offset: 8447},
					exprs: []any{
						&notExpr{
							pos: position{line: 323, col: 18, offset: 8447},
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 19, offset: 8448},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 26, offset: 8455},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 323, col: 30, offset: 8459},
							expr: &notExpr{
								pos: position{line: 323, col: 32, offset: 8461},
								expr: &litMatcher{
									pos:        position{line: 323, col: 33, offset: 8462},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 38, offset: 8467},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 45, offset: 8474},
								name: "SingleBoldTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 66, offset: 8495},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 323, col: 70, offset: 8499},
							expr: &litMatcher{
								pos:        position{line: 323, col: 71, offset: 8500},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 323, col: 75, offset: 8504},
							expr: &notExpr{
								pos: position{line: 323, col: 77, offset: 8506},
								expr: &ruleRefExpr{
									pos:  position{line: 323, col: 78, offset: 8507},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 327, col: 1, offset: 8552},
			expr: &actionExpr{
				pos: position{line: 327, col: 23, offset: 8574},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 327, col: 23, offset: 8574},
					exprs: []any{
						&notExpr{
							pos: position{line: 327, col: 23, offset: 8574},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 24, offset: 8575},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 26, offset: 8577},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 327, col: 32, offset: 8583},
								expr: &actionExpr{
									pos: position{line: 327, col: 33, offset: 8584},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 327, col: 33, offset: 8584},
										exprs: []any{
											&notExpr{
												pos: position{line: 327, col: 33, offset: 8584},
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 34, offset: 8585},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 327, col: 36, offset: 8587},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 327, col: 42, offset: 8593},
													expr: &ruleRefExpr{
														pos:  position{line: 327, col: 43, offset: 8594},
														name: "SingleBoldTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 331, col: 1, offset: 8742},
			expr: &actionExpr{
				pos: position{line: 331, col: 25, offset: 8766},
				run: (*parser).callonSingleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 331, col: 25, offset: 8766},
					exprs: []any{
						&notExpr{
							pos: position{line: 331, col: 25, offset: 8766},
							expr: &seqExpr{
								pos: position{line: 331, col: 27, offset: 8768},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 331, col: 27, offset: 8768},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&notExpr{
										pos: position{line: 331, col: 31, offset: 8772},
										expr: &litMatcher{
											pos:        position{line: 331, col: 32, offset: 8773},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 37, offset: 8778},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 46, offset: 8787},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 335, col: 1, offset: 8842},
			expr: &actionExpr{
				pos: position{line: 335, col: 18, offset: 8859},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 335, col: 18, offset: 8859},
					exprs: []any{
						&notExpr{
							pos: position{line: 335, col: 18, offset: 8859},
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 19, offset: 8860},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 32, offset: 8873},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 37, offset: 8878},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 44, offset: 8885},
								name: "DoubleBoldTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 65, offset: 8906},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 339, col: 1, offset: 8943},
			expr: &actionExpr{
				pos: position{line: 339, col: 23, offset: 8965},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 339, col: 23, offset: 8965},
					exprs: []any{
						&notExpr{
							pos: position{line: 339, col: 23, offset: 8965},
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 24, offset: 8966},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 26, offset: 8968},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 339, col: 32, offset: 8974},
								expr: &actionExpr{
									pos: position{line: 339, col: 33, offset: 8975},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 339, col: 33, offset: 8975},
										exprs: []any{
											&notExpr{
												pos: position{line: 339, col: 33, offset: 8975},
												expr: &ruleRefExpr{
													pos:  position{line: 339, col: 34, offset: 8976},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 339, col: 36, offset: 8978},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 339, col: 42, offset: 8984},
													expr: &ruleRefExpr{
														pos:  position{line: 339, col: 43, offset: 8985},
														name: "DoubleBoldTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 343, col: 1, offset: 9145},
			expr: &actionExpr{
				pos: position{line: 343, col: 25, offset: 9169},
				run: (*parser).callonDoubleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 343, col: 25, offset: 9169},
					exprs: []any{
						&notExpr{
							pos: position{line: 343, col: 25, offset: 9169},
							expr: &litMatcher{
								pos:        position{line: 343, col: 27, offset: 9171},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 33, offset: 9177},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 42, offset: 9186},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 349, col: 1, offset: 9243},
			expr: &choiceExpr{
				pos: position{line: 349, col: 15, offset: 9257},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 349, col: 15, offset: 9257},
						name: "SingleItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 34, offset: 9276},
						name: "DoubleItalicText",
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 351, col: 1, offset: 9295},
			expr: &actionExpr{
				pos: position{line: 351, col: 20, offset: 9314},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 351, col: 20, offset: 9314},
					exprs: []any{
						&notExpr{
							pos: position{line: 351, col: 20, offset: 9314},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 21, offset: 9315},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 28, offset: 9322},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 351, col: 32, offset: 9326},
							expr: &notExpr{
								pos: position{line: 351, col: 34, offset: 9328},
								expr: &litMatcher{
									pos:        position{line: 351, col: 35, offset: 9329},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 40, offset: 9334},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 47, offset: 9341},
								name: "SingleItalicTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 70, offset: 9364},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 351, col: 74, offset: 9368},
							expr: &litMatcher{
								pos:        position{line: 351, col: 75, offset: 9369},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 79, offset: 9373},
							expr: &notExpr{
								pos: position{line: 351, col: 81, offset: 9375},
								expr: &ruleRefExpr{
									pos:  position{line: 351, col: 82, offset: 9376},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 355, col: 1, offset: 9421},
			expr: &actionExpr{
				pos: position{line: 355, col: 25, offset: 9445},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 355, col: 25, offset: 9445},
					exprs: []any{
						&notExpr{
							pos: position{line: 355, col: 25, offset: 9445},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 26, offset: 9446},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 28, offset: 9448},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 355, col: 34, offset: 9454},
								expr: &actionExpr{
									pos: position{line: 355, col: 35, offset: 9455},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 355, col: 35, offset: 9455},
										exprs: []any{
											&notExpr{
												pos: position{line: 355, col: 35, offset: 9455},
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 36, offset: 9456},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 355, col: 38, offset: 9458},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 355, col: 44, offset: 9464},
													expr: &ruleRefExpr{
														pos:  position{line: 355, col: 45, offset: 9465},
														name: "SingleItalicTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 359, col: 1, offset: 9579},
			expr: &actionExpr{
				pos: position{line: 359, col: 27, offset: 9605},
				run: (*parser).callonSingleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 359, col: 27, offset: 9605},
					exprs: []any{
						&notExpr{
							pos: position{line: 359, col: 27, offset: 9605},
							expr: &seqExpr{
								pos: position{line: 359, col: 29, offset: 9607},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 359, col: 29, offset: 9607},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
									&notExpr{
										pos: position{line: 359, col: 33, offset: 9611},
										expr: &litMatcher{
											pos:        position{line: 359, col: 34, offset: 9612},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 39, offset: 9617},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 48, offset: 9626},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 363, col: 1, offset: 9681},
			expr: &actionExpr{
				pos: position{line: 363, col: 20, offset: 9700},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 363, col: 20, offset: 9700},
					exprs: []any{
						&notExpr{
							pos: position{line: 363, col: 20, offset: 9700},
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 21, offset: 9701},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 34, offset: 9714},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 39, offset: 9719},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 46, offset: 9726},
								name: "DoubleItalicTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 69, offset: 9749},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 367, col: 1, offset: 9786},
			expr: &actionExpr{
				pos: position{line: 367, col: 25, offset: 9810},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 367, col: 25, offset: 9810},
					exprs: []any{
						&notExpr{
							pos: position{line: 367, col: 25, offset: 9810},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 26, offset: 9811},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 28, offset: 9813},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 34, offset: 9819},
								expr: &actionExpr{
									pos: position{line: 367, col: 35, offset: 9820},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 367, col: 35, offset: 9820},
										exprs: []any{
											&notExpr{
												pos: position{line: 367, col: 35, offset: 9820},
												expr: &ruleRefExpr{
													pos:  position{line: 367, col: 36, offset: 9821},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 367, col: 38, offset: 9823},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 367, col: 44, offset: 9829},
													expr: &ruleRefExpr{
														pos:  position{line: 367, col: 45, offset: 9830},
														name: "DoubleItalicTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 371, col: 1, offset: 9950},
			expr: &actionExpr{
				pos: position{line: 371, col: 27, offset: 9976},
				run: (*parser).callonDoubleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 371, col: 27, offset: 9976},
					exprs: []any{
						&notExpr{
							pos: position{line: 371, col: 27, offset: 9976},
							expr: &litMatcher{
								pos:        position{line: 371, col: 29, offset: 9978},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 35, offset: 9984},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 44, offset: 9993},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 378, col: 1, offset: 10051},
			expr: &actionExpr{
				pos: position{line: 378, col: 17, offset: 10067},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 378, col: 17, offset: 10067},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 378, col: 17, offset: 10067},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 22, offset: 10072},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 29, offset: 10079},
								name: "SubscriptTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 49, offset: 10099},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 382, col: 1, offset: 10134},
			expr: &actionExpr{
				pos: position{line: 382, col: 22, offset: 10155},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 22, offset: 10155},
					exprs: []any{
						&notExpr{
							pos: position{line: 382, col: 22, offset: 10155},
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 23, offset: 10156},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 382, col: 25, offset: 10158},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 382, col: 31, offset: 10164},
								expr: &actionExpr{
									pos: position{line: 382, col: 32, offset: 10165},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 382, col: 32, offset: 10165},
										exprs: []any{
											&notExpr{
												pos: position{line: 382, col: 32, offset: 10165},
												expr: &ruleRefExpr{
													pos:  position{line: 382, col: 33, offset: 10166},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 382, col: 35, offset: 10168},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 382, col: 41, offset: 10174},
													expr: &ruleRefExpr{
														pos:  position{line: 382, col: 42, offset: 10175},
														name: "SubscriptTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 386, col: 1, offset: 10332},
			expr: &actionExpr{
				pos: position{line: 386, col: 24, offset: 10355},
				run: (*parser).callonSubscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 386, col: 24, offset: 10355},
					exprs: []any{
						&notExpr{
							pos: position{line: 386, col: 24, offset: 10355},
							expr: &litMatcher{
								pos:        position{line: 386, col: 26, offset: 10357},
								val:        "~",
								ignoreCase: false,
								want:       "\"~\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 31, offset: 10362},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 40, offset: 10371},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 390, col: 1, offset: 10426},
			expr: &actionExpr{
				pos: position{line: 390, col: 20, offset: 10445},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 390, col: 21, offset: 10446},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 390, col: 21, offset: 10446},
							name: "Escape",
						},
						&litMatcher{
							pos:        position{line: 390, col: 28, offset: 10453},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 32, offset: 10457},
							name: "SubscriptTextValue",
						},
						&litMatcher{
							pos:        position{line: 390, col: 51, offset: 10476},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 396, col: 1, offset: 10539},
			expr: &actionExpr{
				pos: position{line: 396, col: 19, offset: 10557},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 396, col: 19, offset: 10557},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 396, col: 19, offset: 10557},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 24, offset: 10562},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 31, offset: 10569},
								name: "SuperscriptTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 53, offset: 10591},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 400, col: 1, offset: 10626},
			expr: &actionExpr{
				pos: position{line: 400, col: 24, offset: 10649},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 400, col: 24, offset: 10649},
					exprs: []any{
						&notExpr{
							pos: position{line: 400, col: 24, offset: 10649},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 25, offset: 10650},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 27, offset: 10652},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 33, offset: 10658},
								expr: &actionExpr{
									pos: position{line: 400, col: 34, offset: 10659},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 400, col: 34, offset: 10659},
										exprs: []any{
											&notExpr{
												pos: position{line: 400, col: 34, offset: 10659},
												expr: &ruleRefExpr{
													pos:  position{line: 400, col: 35, offset: 10660},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 400, col: 37, offset: 10662},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 400, col: 43, offset: 10668},
													expr: &ruleRefExpr{
														pos:  position{line: 400, col: 44, offset: 10669},
														name: "SuperscriptTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 404, col: 1, offset: 10832},
			expr: &actionExpr{
				pos: position{line: 404, col: 26, offset: 10857},
				run: (*parser).callonSuperscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 404, col: 26, offset: 10857},
					exprs: []any{
						&notExpr{
							pos: position{line: 404, col: 26, offset: 10857},
							expr: &litMatcher{
								pos:        position{line: 404, col: 28, offset: 10859},
								val:        "^",
								ignoreCase: false,
								want:       "\"^\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 33, offset: 10864},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 42, offset: 10873},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 408, col: 1, offset: 10928},
			expr: &actionExpr{
				pos: position{line: 408, col: 22, offset: 10949},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 408, col: 23, offset: 10950},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 408, col: 23, offset: 10950},
							name: "Escape",
						},
						&litMatcher{
							pos:        position{line: 408, col: 30, offset: 10957},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 34, offset: 10961},
							name: "SuperscriptTextValue",
						},
						&litMatcher{
							pos:        position{line: 408, col: 55, offset: 10982},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 413, col: 1, offset: 11044},
			expr: &choiceExpr{
				pos: position{line: 413, col: 18, offset: 11061},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 413, col: 18, offset: 11061},
						name: "SingleMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 413, col: 40, offset: 11083},
						name: "DoubleMonospaceText",
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 415, col: 1, offset: 11105},
			expr: &actionExpr{
				pos: position{line: 415, col: 22, offset: 11126},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 415, col: 22, offset: 11126},
					exprs: []any{
						&notExpr{
							pos: position{line: 415, col: 22, offset: 11126},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 23, offset: 11127},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 30, offset: 11134},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 415, col: 34, offset: 11138},
							expr: &notExpr{
								pos: position{line: 415, col: 36, offset: 11140},
								expr: &litMatcher{
									pos:        position{line: 415, col: 37, offset: 11141},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 42, offset: 11146},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 49, offset: 11153},
								name: "SingleMonospaceTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 75, offset: 11179},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 415, col: 79, offset: 11183},
							expr: &litMatcher{
								pos:        position{line: 415, col: 80, offset: 11184},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 415, col: 84, offset: 11188},
							expr: &notExpr{
								pos: position{line: 415, col: 86, offset: 11190},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 87, offset: 11191},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 419, col: 1, offset: 11236},
			expr: &actionExpr{
				pos: position{line: 419, col: 28, offset: 11263},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 419, col: 28, offset: 11263},
					exprs: []any{
						&notExpr{
							pos: position{line: 419, col: 28, offset: 11263},
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 29, offset: 11264},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 31, offset: 11266},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 419, col: 37, offset: 11272},
								expr: &actionExpr{
									pos: position{line: 419, col: 38, offset: 11273},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 419, col: 38, offset: 11273},
										exprs: []any{
											&notExpr{
												pos: position{line: 419, col: 38, offset: 11273},
												expr: &ruleRefExpr{
													pos:  position{line: 419, col: 39, offset: 11274},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 419, col: 41, offset: 11276},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 419, col: 47, offset: 11282},
													expr: &ruleRefExpr{
														pos:  position{line: 419, col: 48, offset: 11283},
														name: "SingleMonospaceTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 423, col: 1, offset: 11403},
			expr: &actionExpr{
				pos: position{line: 423, col: 30, offset: 11432},
				run: (*parser).callonSingleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 423, col: 30, offset: 11432},
					exprs: []any{
						&notExpr{
							pos: position{line: 423, col: 30, offset: 11432},
							expr: &seqExpr{
								pos: position{line: 423, col: 32, offset: 11434},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 423, col: 32, offset: 11434},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
									&notExpr{
										pos: position{line: 423, col: 36, offset: 11438},
										expr: &litMatcher{
											pos:        position{line: 423, col: 37, offset: 11439},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 42, offset: 11444},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 51, offset: 11453},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 427, col: 1, offset: 11508},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 11529},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 11529},
					exprs: []any{
						&notExpr{
							pos: position{line: 427, col: 22, offset: 11529},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 23, offset: 11530},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 36, offset: 11543},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 41, offset: 11548},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 48, offset: 11555},
								name: "DoubleMonospaceTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 74, offset: 11581},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 431, col: 1, offset: 11618},
			expr: &actionExpr{
				pos: position{line: 431, col: 28, offset: 11645},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 431, col: 28, offset: 11645},
					exprs: []any{
						&notExpr{
							pos: position{line: 431, col: 28, offset: 11645},
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 29, offset: 11646},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 31, offset: 11648},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 431, col: 37, offset: 11654},
								expr: &actionExpr{
									pos: position{line: 431, col: 38, offset: 11655},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 431, col: 38, offset: 11655},
										exprs: []any{
											&notExpr{
												pos: position{line: 431, col: 38, offset: 11655},
												expr: &ruleRefExpr{
													pos:  position{line: 431, col: 39, offset: 11656},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 431, col: 41, offset: 11658},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 431, col: 47, offset: 11664},
													expr: &ruleRefExpr{
														pos:  position{line: 431, col: 48, offset: 11665},
														name: "DoubleMonospaceTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 435, col: 1, offset: 11791},
			expr: &actionExpr{
				pos: position{line: 435, col: 30, offset: 11820},
				run: (*parser).callonDoubleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 435, col: 30, offset: 11820},
					exprs: []any{
						&notExpr{
							pos: position{line: 435, col: 30, offset: 11820},
							expr: &litMatcher{
								pos:        position{line: 435, col: 32, offset: 11822},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 38, offset: 11828},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 47, offset: 11837},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 441, col: 1, offset: 11894},
			expr: &actionExpr{
				pos: position{line: 441, col: 10, offset: 11903},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 441, col: 10, offset: 11903},
					exprs: []any{
						&notExpr{
							pos: position{line: 441, col: 10, offset: 11903},
							expr: &litMatcher{
								pos:        position{line: 441, col: 11, offset: 11904},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 16, offset: 11909},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 21, offset: 11914},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 25, offset: 11918},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 43, offset: 11936},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 49, offset: 11942},
								expr: &actionExpr{
									pos: position{line: 441, col: 50, offset: 11943},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 441, col: 50, offset: 11943},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 441, col: 50, offset: 11943},
												expr: &ruleRefExpr{
													pos:  position{line: 441, col: 50, offset: 11943},
													name: "_",
												},
											},
											&litMatcher{
												pos:        position{line: 441, col: 53, offset: 11946},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 441, col: 57, offset: 11950},
												label: "label",
												expr: &ruleRefExpr{
													pos:  position{line: 441, col: 64, offset: 11957},
													name: "AnchorLabel",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 100, offset: 11993},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 449, col: 1, offset: 12154},
			expr: &actionExpr{
				pos: position{line: 449, col: 19, offset: 12172},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 449, col: 19, offset: 12172},
					exprs: []any{
						&notExpr{
							pos: position{line: 449, col: 19, offset: 12172},
							expr: &litMatcher{
								pos:        position{line: 449, col: 20, offset: 12173},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 25, offset: 12178},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 30, offset: 12183},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 34, offset: 12187},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 52, offset: 12205},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 58, offset: 12211},
								expr: &actionExpr{
									pos: position{line: 449, col: 59, offset: 12212},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 449, col: 59, offset: 12212},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 449, col: 59, offset: 12212},
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 59, offset: 12212},
													name: "_",
												},
											},
											&litMatcher{
												pos:        position{line: 449, col: 62, offset: 12215},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 66, offset: 12219},
												label: "label",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 73, offset: 12226},
													name: "AnchorLabel",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 109, offset: 12262},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 457, col: 1, offset: 12466},
			expr: &oneOrMoreExpr{
				pos: position{line: 457, col: 15, offset: 12480},
				expr: &choiceExpr{
					pos: position{line: 457, col: 17, offset: 12482},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 457, col: 17, offset: 12482},
							exprs: []any{
								&notExpr{
									pos: position{line: 457, col: 17, offset: 12482},
									expr: &litMatcher{
										pos:        position{line: 457, col: 18, offset: 12483},
										val:        "]]",
										ignoreCase: false,
										want:       "\"]]\"",
									},
								},
								&actionExpr{
									pos: position{line: 458, col: 6, offset: 12493},
									run: (*parser).callonAnchorLabel6,
									expr: &oneOrMoreExpr{
										pos: position{line: 458, col: 6, offset: 12493},
										expr: &charClassMatcher{
											pos:             position{line: 458, col: 6, offset: 12493},
											val:             "[^\\r\\n{[\\]]",
											chars:           []rune{'\r', '\n', '{', '[', ']'},
											basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
											ignoreCase:      false,
											inverted:        true,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 461, col: 7, offset: 12576},
							run: (*parser).callonAnchorLabel9,
							expr: &labeledExpr{
								pos:   position{line: 461, col: 7, offset: 12576},
								label: "arv",
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 11, offset: 12580},
									name: "AttributeReference",
								},
							},
						},
						&actionExpr{
							pos: position{line: 464, col: 8, offset: 12638},
							run: (*parser).callonAnchorLabel12,
							expr: &litMatcher{
								pos:        position{line: 464, col: 8, offset: 12638},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 470, col: 1, offset: 12700},
			expr: &actionExpr{
				pos: position{line: 470, col: 14, offset: 12713},
				run: (*parser).callonAdmonition1,
				expr: &seqExpr{
					pos: position{line: 470, col: 14, offset: 12713},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 470, col: 14, offset: 12713},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 30, offset: 12729},
							label: "admonition",
							expr: &choiceExpr{
								pos: position{line: 471, col: 5, offset: 12746},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 471, col: 5, offset: 12746},
										run: (*parser).callonAdmonition6,
										expr: &litMatcher{
											pos:        position{line: 471, col: 5, offset: 12746},
											val:        "NOTE: ",
											ignoreCase: false,
											want:       "\"NOTE: \"",
										},
									},
									&actionExpr{
										pos: position{line: 472, col: 7, offset: 12829},
										run: (*parser).callonAdmonition8,
										expr: &litMatcher{
											pos:        position{line: 472, col: 7, offset: 12829},
											val:        "TIP: ",
											ignoreCase: false,
											want:       "\"TIP: \"",
										},
									},
									&actionExpr{
										pos: position{line: 473, col: 7, offset: 12910},
										run: (*parser).callonAdmonition10,
										expr: &litMatcher{
											pos:        position{line: 473, col: 7, offset: 12910},
											val:        "IMPORTANT: ",
											ignoreCase: false,
											want:       "\"IMPORTANT: \"",
										},
									},
									&actionExpr{
										pos: position{line: 474, col: 7, offset: 13003},
										run: (*parser).callonAdmonition12,
										expr: &litMatcher{
											pos:        position{line: 474, col: 7, offset: 13003},
											val:        "CAUTON: ",
											ignoreCase: false,
											want:       "\"CAUTON: \"",
										},
									},
									&actionExpr{
										pos: position{line: 475, col: 7, offset: 13091},
										run: (*parser).callonAdmonition14,
										expr: &litMatcher{
											pos:        position{line: 475, col: 7, offset: 13091},
											val:        "WARNING: ",
											ignoreCase: false,
											want:       "\"WARNING: \"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 482, col: 1, offset: 13217},
			expr: &actionExpr{
				pos: position{line: 482, col: 18, offset: 13234},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 482, col: 18, offset: 13234},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 482, col: 18, offset: 13234},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 482, col: 26, offset: 13242},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 27, offset: 13243},
									name: "InlineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 43, offset: 13259},
							label: "eol",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 47, offset: 13263},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 490, col: 1, offset: 13420},
			expr: &actionExpr{
				pos: position{line: 490, col: 17, offset: 13436},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 17, offset: 13436},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 491, col: 5, offset: 13450},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 491, col: 5, offset: 13450},
								name: "Admonition",
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 5, offset: 13467},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 5, offset: 13491},
								name: "FormattedText",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 5, offset: 13511},
								name: "Icon",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 5, offset: 13523},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 5, offset: 13542},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 5, offset: 13553},
								name: "Anchor",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 5, offset: 13567},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 5, offset: 13589},
								name: "AttributeReference",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 5, offset: 13614},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 5, offset: 13630},
								name: "NakedInlineText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 5, offset: 13652},
								name: "CharacterClassInline",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 507, col: 1, offset: 13714},
			expr: &actionExpr{
				pos: position{line: 507, col: 19, offset: 13732},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 507, col: 19, offset: 13732},
					expr: &seqExpr{
						pos: position{line: 507, col: 20, offset: 13733},
						exprs: []any{
							&notExpr{
								pos: position{line: 507, col: 20, offset: 13733},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 21, offset: 13734},
									name: "URLScheme",
								},
							},
							&notExpr{
								pos: position{line: 507, col: 31, offset: 13744},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 32, offset: 13745},
									name: "InlineImageDelimiter",
								},
							},
							&charClassMatcher{
								pos:             position{line: 507, col: 53, offset: 13766},
								val:             "[A-Za-z ]",
								chars:           []rune{' '},
								ranges:          []rune{'A', 'Z', 'a', 'z'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 512, col: 1, offset: 13840},
			expr: &actionExpr{
				pos: position{line: 512, col: 12, offset: 13851},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 512, col: 12, offset: 13851},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 512, col: 12, offset: 13851},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 24, offset: 13863},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 27, offset: 13866},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 28, offset: 13867},
									name: "FootnoteId",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 41, offset: 13880},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 45, offset: 13884},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 512, col: 51, offset: 13890},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 52, offset: 13891},
									name: "FootnoteValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 68, offset: 13907},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 516, col: 1, offset: 13981},
			expr: &actionExpr{
				pos: position{line: 516, col: 14, offset: 13994},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 516, col: 14, offset: 13994},
					expr: &ruleRefExpr{
						pos:  position{line: 516, col: 14, offset: 13994},
						name: "Alphanumeric",
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 520, col: 1, offset: 14044},
			expr: &actionExpr{
				pos: position{line: 520, col: 17, offset: 14060},
				run: (*parser).callonFootnoteValue1,
				expr: &seqExpr{
					pos: position{line: 520, col: 17, offset: 14060},
					exprs: []any{
						&notExpr{
							pos: position{line: 520, col: 17, offset: 14060},
							expr: &litMatcher{
								pos:        position{line: 520, col: 18, offset: 14061},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 22, offset: 14065},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 520, col: 32, offset: 14075},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 520, col: 32, offset: 14075},
										name: "InlineText",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 45, offset: 14088},
										name: "__",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 50, offset: 14093},
										name: "Apostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 63, offset: 14106},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 71, offset: 14114},
										name: "Punctuation",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 85, offset: 14128},
										name: "Macro",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 93, offset: 14136},
										name: "LineBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 105, offset: 14148},
										name: "AttributeReference",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 126, offset: 14169},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 145, offset: 14188},
										name: "EmptyLine",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 157, offset: 14200},
										name: "CharacterClassInline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 525, col: 1, offset: 14252},
			expr: &actionExpr{
				pos: position{line: 525, col: 17, offset: 14268},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 525, col: 17, offset: 14268},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 525, col: 17, offset: 14268},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 28, offset: 14279},
								expr: &ruleRefExpr{
									pos:  position{line: 525, col: 29, offset: 14280},
									name: "ShorthandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 52, offset: 14303},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 526, col: 5, offset: 14314},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 526, col: 5, offset: 14314},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 7, offset: 14330},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 7, offset: 14348},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 7, offset: 14369},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 7, offset: 14386},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 7, offset: 14408},
										name: "SubscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 536, col: 1, offset: 14557},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 14586},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 537, col: 5, offset: 14586},
						name: "InlineText",
					},
					&ruleRefExpr{
						pos:  position{line: 538, col: 5, offset: 14604},
						name: "__",
					},
					&ruleRefExpr{
						pos:  position{line: 539, col: 5, offset: 14614},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 540, col: 5, offset: 14632},
						name: "Punctuation",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 14651},
						name: "AttributeReference",
					},
					&ruleRefExpr{
						pos:  position{line: 542, col: 5, offset: 14677},
						name: "FormattedText",
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 5, offset: 14698},
						name: "Icon",
					},
					&ruleRefExpr{
						pos:  position{line: 544, col: 5, offset: 14710},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 5, offset: 14729},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 14740},
						name: "Anchor",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 14754},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 14778},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 551, col: 1, offset: 14802},
			expr: &actionExpr{
				pos: position{line: 551, col: 20, offset: 14821},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 551, col: 20, offset: 14821},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 551, col: 20, offset: 14821},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 24, offset: 14825},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 36, offset: 14837},
								name: "ShorthandAttribute",
							},
						},
						&litMatcher{
							pos:        position{line: 551, col: 56, offset: 14857},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 556, col: 1, offset: 14898},
			expr: &actionExpr{
				pos: position{line: 556, col: 14, offset: 14911},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 556, col: 14, offset: 14911},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 556, col: 14, offset: 14911},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 24, offset: 14921},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 30, offset: 14927},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 36, offset: 14933},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 48, offset: 14945},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 556, col: 66, offset: 14963},
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 66, offset: 14963},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 560, col: 1, offset: 15088},
			expr: &actionExpr{
				pos: position{line: 560, col: 15, offset: 15102},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 560, col: 15, offset: 15102},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 560, col: 15, offset: 15102},
							name: "InlineImageDelimiter",
						},
						&notExpr{
							pos: position{line: 560, col: 36, offset: 15123},
							expr: &litMatcher{
								pos:        position{line: 560, col: 37, offset: 15124},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 41, offset: 15128},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 47, offset: 15134},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 53, offset: 15140},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 65, offset: 15152},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 564, col: 1, offset: 15294},
			expr: &litMatcher{
				pos:        position{line: 564, col: 24, offset: 15317},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 568, col: 1, offset: 15329},
			expr: &actionExpr{
				pos: position{line: 568, col: 8, offset: 15336},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 568, col: 8, offset: 15336},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 8, offset: 15336},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 16, offset: 15344},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 568, col: 22, offset: 15350},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 568, col: 22, offset: 15350},
									expr: &choiceExpr{
										pos: position{line: 568, col: 23, offset: 15351},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 568, col: 23, offset: 15351},
												name: "Alphanumeric",
											},
											&litMatcher{
												pos:        position{line: 568, col: 38, offset: 15366},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 568, col: 44, offset: 15372},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 81, offset: 15409},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 93, offset: 15421},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 573, col: 1, offset: 15543},
			expr: &actionExpr{
				pos: position{line: 573, col: 15, offset: 15557},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 573, col: 15, offset: 15557},
					exprs: []any{
						&notExpr{
							pos: position{line: 573, col: 15, offset: 15557},
							expr: &litMatcher{
								pos:        position{line: 573, col: 16, offset: 15558},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 21, offset: 15563},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 33, offset: 15575},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 39, offset: 15581},
								name: "FileIncludePath",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 56, offset: 15598},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 68, offset: 15610},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 573, col: 86, offset: 15628},
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 86, offset: 15628},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 573, col: 89, offset: 15631},
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 90, offset: 15632},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 578, col: 1, offset: 15789},
			expr: &actionExpr{
				pos: position{line: 578, col: 19, offset: 15807},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 578, col: 19, offset: 15807},
					exprs: []any{
						&notExpr{
							pos: position{line: 578, col: 19, offset: 15807},
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 20, offset: 15808},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 22, offset: 15810},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 27, offset: 15815},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 585, col: 1, offset: 15849},
			expr: &actionExpr{
				pos: position{line: 585, col: 8, offset: 15856},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 585, col: 8, offset: 15856},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 585, col: 14, offset: 15862},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 585, col: 14, offset: 15862},
								name: "HTMLLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 25, offset: 15873},
								name: "PrefixedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 40, offset: 15888},
								name: "ExternalLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 55, offset: 15903},
								name: "Email",
							},
						},
					},
				},
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 589, col: 1, offset: 15944},
			expr: &actionExpr{
				pos: position{line: 589, col: 12, offset: 15955},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 589, col: 12, offset: 15955},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 589, col: 12, offset: 15955},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 16, offset: 15959},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 21, offset: 15964},
								name: "FullURL",
							},
						},
						&litMatcher{
							pos:        position{line: 589, col: 30, offset: 15973},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 593, col: 1, offset: 16039},
			expr: &actionExpr{
				pos: position{line: 593, col: 16, offset: 16054},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 593, col: 16, offset: 16054},
					exprs: []any{
						&notExpr{
							pos: position{line: 593, col: 16, offset: 16054},
							expr: &litMatcher{
								pos:        position{line: 593, col: 17, offset: 16055},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 593, col: 22, offset: 16060},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 30, offset: 16068},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 34, offset: 16072},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 38, offset: 16076},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 50, offset: 16088},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 598, col: 1, offset: 16219},
			expr: &actionExpr{
				pos: position{line: 598, col: 16, offset: 16234},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 598, col: 16, offset: 16234},
					exprs: []any{
						&notExpr{
							pos: position{line: 598, col: 16, offset: 16234},
							expr: &litMatcher{
								pos:        position{line: 598, col: 17, offset: 16235},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 22, offset: 16240},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 27, offset: 16245},
								name: "FullURL",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 36, offset: 16254},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 47, offset: 16265},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 48, offset: 16266},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 604, col: 1, offset: 16399},
			expr: &actionExpr{
				pos: position{line: 604, col: 9, offset: 16407},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 604, col: 9, offset: 16407},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 604, col: 9, offset: 16407},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 604, col: 20, offset: 16418},
								expr: &ruleRefExpr{
									pos:  position{line: 604, col: 21, offset: 16419},
									name: "BlockElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 46, offset: 16444},
							name: "TableStart",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 57, offset: 16455},
							label: "cells",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 64, offset: 16462},
								name: "TableElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 79, offset: 16477},
							name: "TableEnd",
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 612, col: 1, offset: 16634},
			expr: &zeroOrMoreExpr{
				pos: position{line: 612, col: 17, offset: 16650},
				expr: &ruleRefExpr{
					pos:  position{line: 612, col: 18, offset: 16651},
					name: "TableElement",
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 614, col: 1, offset: 16668},
			expr: &choiceExpr{
				pos: position{line: 615, col: 9, offset: 16693},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 615, col: 9, offset: 16693},
						name: "TableEmptyLine",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 11, offset: 16719},
						name: "TableMacros",
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 11, offset: 16741},
						name: "TableRow",
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 620, col: 1, offset: 16762},
			expr: &actionExpr{
				pos: position{line: 620, col: 14, offset: 16775},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 620, col: 14, offset: 16775},
					exprs: []any{
						&notExpr{
							pos: position{line: 620, col: 14, offset: 16775},
							expr: &litMatcher{
								pos:        position{line: 620, col: 15, offset: 16776},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 620, col: 20, offset: 16781},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 620, col: 27, offset: 16788},
							expr: &litMatcher{
								pos:        position{line: 620, col: 27, offset: 16788},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 32, offset: 16793},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 620, col: 42, offset: 16803},
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 43, offset: 16804},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 624, col: 1, offset: 16875},
			expr: &actionExpr{
				pos: position{line: 624, col: 18, offset: 16892},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 624, col: 18, offset: 16892},
					exprs: []any{
						&notExpr{
							pos: position{line: 624, col: 18, offset: 16892},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 19, offset: 16893},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 28, offset: 16902},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 36, offset: 16910},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 624, col: 46, offset: 16920},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 48, offset: 16922},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 628, col: 1, offset: 17003},
			expr: &choiceExpr{
				pos: position{line: 628, col: 16, offset: 17018},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 628, col: 16, offset: 17018},
						name: "TableIfDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 29, offset: 17031},
						name: "TableIfNDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 43, offset: 17045},
						name: "TableEndIfDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 59, offset: 17061},
						name: "TableComment",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 74, offset: 17076},
						name: "TableMultiLineComment",
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 630, col: 1, offset: 17100},
			expr: &actionExpr{
				pos: position{line: 630, col: 14, offset: 17113},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 630, col: 14, offset: 17113},
					exprs: []any{
						&notExpr{
							pos: position{line: 630, col: 14, offset: 17113},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 15, offset: 17114},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 24, offset: 17123},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 32, offset: 17131},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 42, offset: 17141},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 48, offset: 17147},
								name: "IfDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 634, col: 1, offset: 17210},
			expr: &actionExpr{
				pos: position{line: 634, col: 15, offset: 17224},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 634, col: 15, offset: 17224},
					exprs: []any{
						&notExpr{
							pos: position{line: 634, col: 15, offset: 17224},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 16, offset: 17225},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 25, offset: 17234},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 33, offset: 17242},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 634, col: 43, offset: 17252},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 50, offset: 17259},
								name: "IfNDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 638, col: 1, offset: 17326},
			expr: &actionExpr{
				pos: position{line: 638, col: 17, offset: 17342},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 638, col: 17, offset: 17342},
					exprs: []any{
						&notExpr{
							pos: position{line: 638, col: 17, offset: 17342},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 18, offset: 17343},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 638, col: 27, offset: 17352},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 638, col: 35, offset: 17360},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 638, col: 45, offset: 17370},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 54, offset: 17379},
								name: "EndIfDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 642, col: 1, offset: 17449},
			expr: &actionExpr{
				pos: position{line: 642, col: 16, offset: 17464},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 642, col: 16, offset: 17464},
					exprs: []any{
						&notExpr{
							pos: position{line: 642, col: 16, offset: 17464},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 17, offset: 17465},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 26, offset: 17474},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 34, offset: 17482},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 43, offset: 17491},
								name: "SingleLineComment",
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 646, col: 1, offset: 17582},
			expr: &actionExpr{
				pos: position{line: 646, col: 25, offset: 17606},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 646, col: 25, offset: 17606},
					exprs: []any{
						&notExpr{
							pos: position{line: 646, col: 25, offset: 17606},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 26, offset: 17607},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 35, offset: 17616},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 646, col: 43, offset: 17624},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 52, offset: 17633},
								name: "MultiLineComment",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 650, col: 1, offset: 17722},
			expr: &oneOrMoreExpr{
				pos: position{line: 650, col: 19, offset: 17740},
				expr: &ruleRefExpr{
					pos:  position{line: 650, col: 19, offset: 17740},
					name: "TableEmptyLine",
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 652, col: 1, offset: 17757},
			expr: &actionExpr{
				pos: position{line: 652, col: 26, offset: 17782},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 652, col: 26, offset: 17782},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 652, col: 26, offset: 17782},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 652, col: 34, offset: 17790},
								expr: &ruleRefExpr{
									pos:  position{line: 652, col: 35, offset: 17791},
									name: "TableCellInlineContentElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 67, offset: 17823},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 656, col: 1, offset: 17901},
			expr: &actionExpr{
				pos: position{line: 656, col: 33, offset: 17933},
				run: (*parser).callonTableCellInlineContentElement1,
				expr: &labeledExpr{
					pos:   position{line: 656, col: 33, offset: 17933},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 657, col: 5, offset: 17947},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 657, col: 5, offset: 17947},
								name: "FormattedText",
							},
							&ruleRefExpr{
								pos:  position{line: 658, col: 5, offset: 17967},
								name: "Icon",
							},
							&ruleRefExpr{
								pos:  position{line: 659, col: 5, offset: 17979},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 660, col: 5, offset: 17998},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 661, col: 5, offset: 18009},
								name: "Anchor",
							},
							&ruleRefExpr{
								pos:  position{line: 662, col: 5, offset: 18024},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 663, col: 5, offset: 18045},
								name: "AttributeReference",
							},
							&ruleRefExpr{
								pos:  position{line: 664, col: 5, offset: 18070},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 665, col: 5, offset: 18086},
								name: "NakedInlineTableCellText",
							},
							&ruleRefExpr{
								pos:  position{line: 666, col: 5, offset: 18117},
								name: "CharacterClassInline",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 5, offset: 18144},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 672, col: 1, offset: 18193},
			expr: &actionExpr{
				pos: position{line: 672, col: 12, offset: 18204},
				run: (*parser).callonTableEnd1,
				expr: &seqExpr{
					pos: position{line: 672, col: 12, offset: 18204},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 672, col: 12, offset: 18204},
							name: "NewLine",
						},
						&notExpr{
							pos: position{line: 672, col: 20, offset: 18212},
							expr: &litMatcher{
								pos:        position{line: 672, col: 21, offset: 18213},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 672, col: 26, offset: 18218},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 672, col: 33, offset: 18225},
							expr: &litMatcher{
								pos:        position{line: 672, col: 33, offset: 18225},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 672, col: 38, offset: 18230},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 672, col: 48, offset: 18240},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 49, offset: 18241},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 676, col: 1, offset: 18313},
			expr: &actionExpr{
				pos: position{line: 676, col: 12, offset: 18324},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 676, col: 12, offset: 18324},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 676, col: 12, offset: 18324},
							label: "initial",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 21, offset: 18333},
								name: "InitialInlineTableCell",
							},
						},
						&labeledExpr{
							pos:   position{line: 676, col: 46, offset: 18358},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 676, col: 57, offset: 18369},
								expr: &ruleRefExpr{
									pos:  position{line: 676, col: 58, offset: 18370},
									name: "AdditionalInlineTableCell",
								},
							},
						},
						&andExpr{
							pos: position{line: 676, col: 86, offset: 18398},
							expr: &choiceExpr{
								pos: position{line: 676, col: 88, offset: 18400},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 676, col: 88, offset: 18400},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 99, offset: 18411},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 121, offset: 18433},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 685, col: 1, offset: 18673},
			expr: &choiceExpr{
				pos: position{line: 685, col: 23, offset: 18695},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 685, col: 23, offset: 18695},
						name: "AdditionalTableCellDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 685, col: 54, offset: 18726},
						name: "InitialTableCellDelimiter",
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 687, col: 1, offset: 18754},
			expr: &actionExpr{
				pos: position{line: 687, col: 26, offset: 18779},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 687, col: 26, offset: 18779},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 687, col: 26, offset: 18779},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 34, offset: 18787},
								name: "InitialTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 61, offset: 18814},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 70, offset: 18823},
								name: "InlineTableLines",
							},
						},
						&andExpr{
							pos: position{line: 687, col: 88, offset: 18841},
							expr: &choiceExpr{
								pos: position{line: 687, col: 90, offset: 18843},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 687, col: 90, offset: 18843},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 101, offset: 18854},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 119, offset: 18872},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 133, offset: 18886},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 155, offset: 18908},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 692, col: 1, offset: 19035},
			expr: &actionExpr{
				pos: position{line: 692, col: 30, offset: 19064},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 692, col: 30, offset: 19064},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 692, col: 30, offset: 19064},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 38, offset: 19072},
								name: "AdditionalTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 68, offset: 19102},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 77, offset: 19111},
								name: "InlineTableLines",
							},
						},
						&andExpr{
							pos: position{line: 692, col: 95, offset: 19129},
							expr: &choiceExpr{
								pos: position{line: 692, col: 97, offset: 19131},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 692, col: 97, offset: 19131},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 108, offset: 19142},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 126, offset: 19160},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 140, offset: 19174},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 162, offset: 19196},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialBlockTableCell",
			pos:  position{line: 696, col: 1, offset: 19318},
			expr: &actionExpr{
				pos: position{line: 696, col: 25, offset: 19342},
				run: (*parser).callonInitialBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 696, col: 25, offset: 19342},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 696, col: 25, offset: 19342},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 33, offset: 19350},
								name: "InitialTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 60, offset: 19377},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 68, offset: 19385},
								expr: &choiceExpr{
									pos: position{line: 696, col: 69, offset: 19386},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 696, col: 69, offset: 19386},
											name: "BlockTableElement",
										},
										&ruleRefExpr{
											pos:  position{line: 696, col: 89, offset: 19406},
											name: "InlineTableElements",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 696, col: 111, offset: 19428},
							expr: &choiceExpr{
								pos: position{line: 696, col: 113, offset: 19430},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 696, col: 113, offset: 19430},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 124, offset: 19441},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 142, offset: 19459},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 156, offset: 19473},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 178, offset: 19495},
										name: "NewLine",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 696, col: 189, offset: 19506},
							run: (*parser).callonInitialBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "AdditionalBlockTableCell",
			pos:  position{line: 703, col: 1, offset: 19786},
			expr: &actionExpr{
				pos: position{line: 703, col: 28, offset: 19813},
				run: (*parser).callonAdditionalBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 703, col: 28, offset: 19813},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 703, col: 28, offset: 19813},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 36, offset: 19821},
								name: "AdditionalTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 66, offset: 19851},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 703, col: 74, offset: 19859},
								expr: &choiceExpr{
									pos: position{line: 703, col: 75, offset: 19860},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 703, col: 75, offset: 19860},
											name: "BlockTableElement",
										},
										&ruleRefExpr{
											pos:  position{line: 703, col: 95, offset: 19880},
											name: "InlineTableElements",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 703, col: 117, offset: 19902},
							expr: &choiceExpr{
								pos: position{line: 703, col: 119, offset: 19904},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 703, col: 119, offset: 19904},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 130, offset: 19915},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 148, offset: 19933},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 162, offset: 19947},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 184, offset: 19969},
										name: "NewLine",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 703, col: 195, offset: 19980},
							run: (*parser).callonAdditionalBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 710, col: 1, offset: 20260},
			expr: &actionExpr{
				pos: position{line: 710, col: 20, offset: 20279},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 710, col: 20, offset: 20279},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 710, col: 29, offset: 20288},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 710, col: 29, offset: 20288},
								name: "MultiLineTableCell",
							},
							&ruleRefExpr{
								pos:  position{line: 710, col: 50, offset: 20309},
								name: "InlineTableElements",
							},
							&ruleRefExpr{
								pos:  position{line: 710, col: 72, offset: 20331},
								name: "EmptyCell",
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 714, col: 1, offset: 20375},
			expr: &actionExpr{
				pos: position{line: 714, col: 13, offset: 20387},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 714, col: 13, offset: 20387},
					expr: &choiceExpr{
						pos: position{line: 714, col: 15, offset: 20389},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 714, col: 15, offset: 20389},
								name: "TableEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 26, offset: 20400},
								name: "TableCellDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 48, offset: 20422},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 718, col: 1, offset: 20505},
			expr: &seqExpr{
				pos: position{line: 718, col: 24, offset: 20528},
				exprs: []any{
					&notExpr{
						pos: position{line: 718, col: 24, offset: 20528},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 25, offset: 20529},
							name: "TableEnd",
						},
					},
					&notExpr{
						pos: position{line: 718, col: 34, offset: 20538},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 35, offset: 20539},
							name: "TableCellDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 720, col: 1, offset: 20560},
			expr: &seqExpr{
				pos: position{line: 720, col: 33, offset: 20592},
				exprs: []any{
					&notExpr{
						pos: position{line: 720, col: 33, offset: 20592},
						expr: &ruleRefExpr{
							pos:  position{line: 720, col: 34, offset: 20593},
							name: "MultiLineComment",
						},
					},
					&notExpr{
						pos: position{line: 720, col: 51, offset: 20610},
						expr: &ruleRefExpr{
							pos:  position{line: 720, col: 52, offset: 20611},
							name: "SingleLineComment",
						},
					},
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 722, col: 1, offset: 20630},
			expr: &actionExpr{
				pos: position{line: 722, col: 22, offset: 20651},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 722, col: 22, offset: 20651},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 722, col: 22, offset: 20651},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 722, col: 28, offset: 20657},
								expr: &ruleRefExpr{
									pos:  position{line: 722, col: 29, offset: 20658},
									name: "InlineTableCellLine",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 51, offset: 20680},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 60, offset: 20689},
								name: "InlineTableCellLastLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 732, col: 1, offset: 20947},
			expr: &choiceExpr{
				pos: position{line: 732, col: 23, offset: 20969},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 732, col: 23, offset: 20969},
						name: "InlineTableCellEmptyLine",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 50, offset: 20996},
						name: "InlineTableCellIntermediateLine",
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 734, col: 1, offset: 21030},
			expr: &actionExpr{
				pos: position{line: 734, col: 35, offset: 21064},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 734, col: 35, offset: 21064},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 734, col: 35, offset: 21064},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 56, offset: 21085},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 64, offset: 21093},
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 64, offset: 21093},
									name: "NewLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 73, offset: 21102},
							name: "ValidMultilineTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 103, offset: 21132},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 734, col: 111, offset: 21140},
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 112, offset: 21141},
									name: "InlineTableElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 133, offset: 21162},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 156, offset: 21185},
								expr: &actionExpr{
									pos: position{line: 734, col: 157, offset: 21186},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 734, col: 157, offset: 21186},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 734, col: 157, offset: 21186},
												label: "nl",
												expr: &ruleRefExpr{
													pos:  position{line: 734, col: 160, offset: 21189},
													name: "NewLine",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 734, col: 168, offset: 21197},
												name: "AnySpaces",
											},
											&andExpr{
												pos: position{line: 734, col: 178, offset: 21207},
												expr: &ruleRefExpr{
													pos:  position{line: 734, col: 180, offset: 21209},
													name: "NewLine",
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 209, offset: 21238},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 210, offset: 21239},
								name: "NewLine",
							},
						},
						&notExpr{
							pos: position{line: 734, col: 218, offset: 21247},
							expr: &choiceExpr{
								pos: position{line: 734, col: 220, offset: 21249},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 734, col: 220, offset: 21249},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 234, offset: 21263},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 245, offset: 21274},
										name: "TableCellDelimiter",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 267, offset: 21296},
							expr: &choiceExpr{
								pos: position{line: 734, col: 269, offset: 21298},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 734, col: 269, offset: 21298},
										name: "InlineTableCellLine",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 291, offset: 21320},
										name: "InlineTableCellLastLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 747, col: 1, offset: 21677},
			expr: &actionExpr{
				pos: position{line: 747, col: 28, offset: 21704},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 747, col: 28, offset: 21704},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 747, col: 28, offset: 21704},
							name: "ValidTableCellPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 49, offset: 21725},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 57, offset: 21733},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 747, col: 67, offset: 21743},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 69, offset: 21745},
								name: "NewLine",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 78, offset: 21754},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 79, offset: 21755},
								name: "TableEnd",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 88, offset: 21764},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 89, offset: 21765},
								name: "TableCellDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 108, offset: 21784},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 109, offset: 21785},
								name: "TableMacros",
							},
						},
						&andExpr{
							pos: position{line: 747, col: 121, offset: 21797},
							expr: &choiceExpr{
								pos: position{line: 747, col: 123, offset: 21799},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 747, col: 123, offset: 21799},
										name: "InlineTableCellLine",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 145, offset: 21821},
										name: "InlineTableCellLastLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 752, col: 1, offset: 21908},
			expr: &actionExpr{
				pos: position{line: 752, col: 27, offset: 21934},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 752, col: 27, offset: 21934},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 752, col: 27, offset: 21934},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 48, offset: 21955},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 51, offset: 21958},
								name: "NewLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 59, offset: 21966},
							name: "ValidMultilineTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 89, offset: 21996},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 752, col: 97, offset: 22004},
								expr: &ruleRefExpr{
									pos:  position{line: 752, col: 98, offset: 22005},
									name: "InlineTableElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 752, col: 119, offset: 22026},
							expr: &choiceExpr{
								pos: position{line: 752, col: 121, offset: 22028},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 752, col: 121, offset: 22028},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 132, offset: 22039},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 150, offset: 22057},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 164, offset: 22071},
										name: "TableCellDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLine",
			pos:  position{line: 759, col: 1, offset: 22246},
			expr: &actionExpr{
				pos: position{line: 759, col: 22, offset: 22267},
				run: (*parser).callonBlockTableCellLine1,
				expr: &labeledExpr{
					pos:   position{line: 759, col: 22, offset: 22267},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 759, col: 31, offset: 22276},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 759, col: 31, offset: 22276},
								name: "BlockTableElement",
							},
							&ruleRefExpr{
								pos:  position{line: 759, col: 51, offset: 22296},
								name: "InlineTableCellIntermediateLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLastLine",
			pos:  position{line: 763, col: 1, offset: 22363},
			expr: &actionExpr{
				pos: position{line: 763, col: 26, offset: 22388},
				run: (*parser).callonBlockTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 763, col: 26, offset: 22388},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 763, col: 26, offset: 22388},
							name: "ValidTableCellPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 47, offset: 22409},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 763, col: 55, offset: 22417},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 763, col: 63, offset: 22425},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 64, offset: 22426},
									name: "InlineTableElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 763, col: 85, offset: 22447},
							expr: &choiceExpr{
								pos: position{line: 763, col: 87, offset: 22449},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 763, col: 87, offset: 22449},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 763, col: 98, offset: 22460},
										name: "TableCellDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 768, col: 1, offset: 22548},
			expr: &actionExpr{
				pos: position{line: 768, col: 23, offset: 22570},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 768, col: 23, offset: 22570},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 768, col: 23, offset: 22570},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 44, offset: 22591},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 768, col: 52, offset: 22599},
								expr: &ruleRefExpr{
									pos:  position{line: 768, col: 53, offset: 22600},
									name: "InlineTableElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 773, col: 1, offset: 22693},
			expr: &actionExpr{
				pos: position{line: 773, col: 22, offset: 22714},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 773, col: 22, offset: 22714},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 773, col: 22, offset: 22714},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 44, offset: 22736},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 774, col: 5, offset: 22750},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 774, col: 5, offset: 22750},
										name: "NakedInlineTableCellText",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 5, offset: 22781},
										name: "CharacterClassTableCell",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 780, col: 1, offset: 22846},
			expr: &actionExpr{
				pos: position{line: 780, col: 21, offset: 22866},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 780, col: 21, offset: 22866},
					exprs: []any{
						&notExpr{
							pos: position{line: 780, col: 21, offset: 22866},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 22, offset: 22867},
								name: "InitialTableCellDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 48, offset: 22893},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 59, offset: 22904},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 68, offset: 22913},
								name: "BlockElement",
							},
						},
						&notExpr{
							pos: position{line: 780, col: 82, offset: 22927},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 83, offset: 22928},
								name: "TableCellDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 780, col: 103, offset: 22948},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 104, offset: 22949},
								name: "TableEnd",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 785, col: 1, offset: 22994},
			expr: &actionExpr{
				pos: position{line: 785, col: 28, offset: 23021},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 785, col: 28, offset: 23021},
					expr: &seqExpr{
						pos: position{line: 785, col: 29, offset: 23022},
						exprs: []any{
							&charClassMatcher{
								pos:             position{line: 785, col: 29, offset: 23022},
								val:             "[A-Za-z ]",
								chars:           []rune{' '},
								ranges:          []rune{'A', 'Z', 'a', 'z'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
							&notExpr{
								pos: position{line: 785, col: 39, offset: 23032},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 40, offset: 23033},
									name: "TableCellDelimiter",
								},
							},
							&notExpr{
								pos: position{line: 785, col: 59, offset: 23052},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 60, offset: 23053},
									name: "TableEnd",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 789, col: 1, offset: 23125},
			expr: &actionExpr{
				pos: position{line: 789, col: 27, offset: 23151},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &choiceExpr{
					pos: position{line: 789, col: 28, offset: 23152},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 789, col: 28, offset: 23152},
							val:        "\\|",
							ignoreCase: false,
							want:       "\"\\\\|\"",
						},
						&charClassMatcher{
							pos:             position{line: 789, col: 36, offset: 23160},
							val:             "[^|\\r\\n]",
							chars:           []rune{'|', '\r', '\n'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false},
							ignoreCase:      false,
							inverted:        true,
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 794, col: 1, offset: 23279},
			expr: &actionExpr{
				pos: position{line: 794, col: 29, offset: 23307},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 794, col: 29, offset: 23307},
					exprs: []any{
						&notExpr{
							pos: position{line: 794, col: 29, offset: 23307},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 30, offset: 23308},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 39, offset: 23317},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 47, offset: 23325},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 57, offset: 23335},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 794, col: 64, offset: 23342},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 65, offset: 23343},
									name: "TableCellFormat",
								},
							},
						},
						&notExpr{
							pos: position{line: 794, col: 83, offset: 23361},
							expr: &litMatcher{
								pos:        position{line: 794, col: 84, offset: 23362},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 794, col: 89, offset: 23367},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 801, col: 1, offset: 23483},
			expr: &actionExpr{
				pos: position{line: 801, col: 32, offset: 23514},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 801, col: 32, offset: 23514},
					exprs: []any{
						&notExpr{
							pos: position{line: 801, col: 32, offset: 23514},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 33, offset: 23515},
								name: "TableEnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 42, offset: 23524},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 49, offset: 23531},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 50, offset: 23532},
									name: "AdditionalTableCellFormat",
								},
							},
						},
						&notExpr{
							pos: position{line: 801, col: 78, offset: 23560},
							expr: &litMatcher{
								pos:        position{line: 801, col: 79, offset: 23561},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 801, col: 84, offset: 23566},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 806, col: 1, offset: 23671},
			expr: &actionExpr{
				pos: position{line: 806, col: 26, offset: 23696},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 806, col: 26, offset: 23696},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 806, col: 26, offset: 23696},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 36, offset: 23706},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 44, offset: 23714},
								name: "TableCellFormat",
							},
						},
						&andCodeExpr{
							pos: position{line: 806, col: 61, offset: 23731},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 813, col: 1, offset: 23857},
			expr: &actionExpr{
				pos: position{line: 813, col: 29, offset: 23885},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 813, col: 29, offset: 23885},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 813, col: 29, offset: 23885},
							label: "lead",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 35, offset: 23891},
								name: "__",
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 39, offset: 23895},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 47, offset: 23903},
								name: "TableCellFormat",
							},
						},
						&andCodeExpr{
							pos: position{line: 813, col: 64, offset: 23920},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 819, col: 1, offset: 24006},
			expr: &actionExpr{
				pos: position{line: 819, col: 17, offset: 24022},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 819, col: 17, offset: 24022},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 819, col: 17, offset: 24022},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 819, col: 24, offset: 24029},
								expr: &actionExpr{
									pos: position{line: 819, col: 25, offset: 24030},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 819, col: 25, offset: 24030},
										label: "n",
										expr: &ruleRefExpr{
											pos:  position{line: 819, col: 27, offset: 24032},
											name: "PositiveInteger",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 12, offset: 24103},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 821, col: 17, offset: 24108},
								expr: &actionExpr{
									pos: position{line: 821, col: 18, offset: 24109},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 821, col: 18, offset: 24109},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 821, col: 18, offset: 24109},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 821, col: 22, offset: 24113},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 821, col: 24, offset: 24115},
													name: "PositiveInteger",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 824, col: 11, offset: 24193},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 832, col: 1, offset: 24431},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 24455},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 24455},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 833, col: 5, offset: 24455},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 833, col: 16, offset: 24466},
								expr: &actionExpr{
									pos: position{line: 834, col: 9, offset: 24476},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 834, col: 9, offset: 24476},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 834, col: 9, offset: 24476},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 834, col: 21, offset: 24488},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 834, col: 21, offset: 24488},
														exprs: []any{
															&charClassMatcher{
																pos:             position{line: 834, col: 21, offset: 24488},
																val:             "[1-9]",
																ranges:          []rune{'1', '9'},
																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																ignoreCase:      false,
																inverted:        false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 834, col: 26, offset: 24493},
																expr: &charClassMatcher{
																	pos:             position{line: 834, col: 26, offset: 24493},
																	val:             "[0-9]",
																	ranges:          []rune{'0', '9'},
																	basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																	ignoreCase:      false,
																	inverted:        false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 834, col: 63, offset: 24530},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 24612},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 838, col: 10, offset: 24617},
								expr: &actionExpr{
									pos: position{line: 839, col: 9, offset: 24627},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 839, col: 9, offset: 24627},
										label: "span",
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 15, offset: 24633},
											name: "TableCellSpan",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 5, offset: 24704},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 843, col: 21, offset: 24720},
								expr: &choiceExpr{
									pos: position{line: 844, col: 9, offset: 24730},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 844, col: 9, offset: 24730},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 844, col: 9, offset: 24730},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 845, col: 11, offset: 24798},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 845, col: 11, offset: 24798},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 846, col: 11, offset: 24867},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 846, col: 11, offset: 24867},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 24939},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 19, offset: 24953},
								expr: &choiceExpr{
									pos: position{line: 849, col: 9, offset: 24963},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 849, col: 9, offset: 24963},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 849, col: 9, offset: 24963},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 850, col: 11, offset: 25029},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 850, col: 11, offset: 25029},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 851, col: 11, offset: 25098},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 851, col: 11, offset: 25098},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 25168},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 853, col: 11, offset: 25174},
								expr: &choiceExpr{
									pos: position{line: 854, col: 9, offset: 25184},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 854, col: 9, offset: 25184},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 854, col: 9, offset: 25184},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 855, col: 11, offset: 25246},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 855, col: 11, offset: 25246},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 856, col: 11, offset: 25307},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 856, col: 11, offset: 25307},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 857, col: 11, offset: 25370},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 857, col: 11, offset: 25370},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 858, col: 11, offset: 25431},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 858, col: 11, offset: 25431},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 859, col: 11, offset: 25493},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 859, col: 11, offset: 25493},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 860, col: 11, offset: 25557},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 860, col: 11, offset: 25557},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 862, col: 6, offset: 25620},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 879, col: 1, offset: 26323},
			expr: &actionExpr{
				pos: position{line: 879, col: 13, offset: 26335},
				run: (*parser).callonURLScheme1,
				expr: &choiceExpr{
					pos: position{line: 879, col: 14, offset: 26336},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 879, col: 14, offset: 26336},
							val:        "https://",
							ignoreCase: false,
							want:       "\"https://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 27, offset: 26349},
							val:        "http://",
							ignoreCase: false,
							want:       "\"http://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 39, offset: 26361},
							val:        "ftp://",
							ignoreCase: false,
							want:       "\"ftp://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 50, offset: 26372},
							val:        "irc://",
							ignoreCase: false,
							want:       "\"irc://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 61, offset: 26383},
							val:        "mailto:",
							ignoreCase: false,
							want:       "\"mailto:\"",
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 883, col: 1, offset: 26434},
			expr: &actionExpr{
				pos: position{line: 883, col: 7, offset: 26440},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 883, col: 7, offset: 26440},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 883, col: 7, offset: 26440},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 14, offset: 26447},
								expr: &ruleRefExpr{
									pos:  position{line: 883, col: 15, offset: 26448},
									name: "URLScheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 27, offset: 26460},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 33, offset: 26466},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 888, col: 1, offset: 26572},
			expr: &actionExpr{
				pos: position{line: 888, col: 11, offset: 26582},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 888, col: 11, offset: 26582},
					exprs: []any{
						&notExpr{
							pos: position{line: 888, col: 11, offset: 26582},
							expr: &litMatcher{
								pos:        position{line: 888, col: 12, offset: 26583},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 16, offset: 26587},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 24, offset: 26595},
								name: "URLScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 35, offset: 26606},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 41, offset: 26612},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 895, col: 1, offset: 26707},
			expr: &actionExpr{
				pos: position{line: 895, col: 8, offset: 26714},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 895, col: 8, offset: 26714},
					exprs: []any{
						&notExpr{
							pos: position{line: 895, col: 8, offset: 26714},
							expr: &litMatcher{
								pos:        position{line: 895, col: 9, offset: 26715},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 13, offset: 26719},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 895, col: 24, offset: 26730},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 24, offset: 26730},
									name: "PathElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 899, col: 1, offset: 26801},
			expr: &choiceExpr{
				pos: position{line: 899, col: 16, offset: 26816},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 899, col: 16, offset: 26816},
						run: (*parser).callonPathElement2,
						expr: &oneOrMoreExpr{
							pos: position{line: 899, col: 16, offset: 26816},
							expr: &charClassMatcher{
								pos:             position{line: 899, col: 17, offset: 26817},
								val:             "[^\\r\\n{.<>!?,;[\\] ]",
								chars:           []rune{'\r', '\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 26896},
						run: (*parser).callonPathElement5,
						expr: &seqExpr{
							pos: position{line: 901, col: 6, offset: 26897},
							exprs: []any{
								&charClassMatcher{
									pos:             position{line: 901, col: 6, offset: 26897},
									val:             "[.?!;,]",
									chars:           []rune{'.', '?', '!', ';', ','},
									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
									ignoreCase:      false,
									inverted:        false,
								},
								&andExpr{
									pos: position{line: 901, col: 14, offset: 26905},
									expr: &seqExpr{
										pos: position{line: 901, col: 16, offset: 26907},
										exprs: []any{
											&notExpr{
												pos: position{line: 901, col: 16, offset: 26907},
												expr: &ruleRefExpr{
													pos:  position{line: 901, col: 17, offset: 26908},
													name: "_",
												},
											},
											&notExpr{
												pos: position{line: 901, col: 19, offset: 26910},
												expr: &ruleRefExpr{
													pos:  position{line: 901, col: 20, offset: 26911},
													name: "EndOfFile",
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 903, col: 5, offset: 26980},
						name: "AttributeReference",
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 907, col: 1, offset: 27004},
			expr: &actionExpr{
				pos: position{line: 907, col: 9, offset: 27012},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 907, col: 9, offset: 27012},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 907, col: 9, offset: 27012},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 15, offset: 27018},
								name: "EmailName",
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 26, offset: 27029},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 30, offset: 27033},
							label: "domain",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 38, offset: 27041},
								name: "EmailDomain",
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 911, col: 1, offset: 27139},
			expr: &actionExpr{
				pos: position{line: 911, col: 13, offset: 27151},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 911, col: 13, offset: 27151},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 911, col: 13, offset: 27151},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 911, col: 19, offset: 27157},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 911, col: 19, offset: 27157},
									expr: &choiceExpr{
										pos: position{line: 911, col: 20, offset: 27158},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 911, col: 20, offset: 27158},
												name: "Alphanumeric",
											},
											&charClassMatcher{
												pos:             position{line: 911, col: 35, offset: 27173},
												val:             "[!#$%&'*+-/=?^_`{|}~.]",
												chars:           []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:          []rune{'+', '/'},
												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false},
												ignoreCase:      false,
												inverted:        false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 913, col: 4, offset: 27301},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 920, col: 1, offset: 27467},
			expr: &actionExpr{
				pos: position{line: 920, col: 15, offset: 27481},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 920, col: 15, offset: 27481},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 920, col: 15, offset: 27481},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 920, col: 23, offset: 27489},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 920, col: 24, offset: 27490},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 920, col: 24, offset: 27490},
											expr: &ruleRefExpr{
												pos:  position{line: 920, col: 25, offset: 27491},
												name: "Alphanumeric",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 920, col: 40, offset: 27506},
											expr: &seqExpr{
												pos: position{line: 920, col: 41, offset: 27507},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 920, col: 41, offset: 27507},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 920, col: 45, offset: 27511},
														expr: &choiceExpr{
															pos: position{line: 920, col: 46, offset: 27512},
															alternatives: []any{
																&ruleRefExpr{
																	pos:  position{line: 920, col: 46, offset: 27512},
																	name: "Alphanumeric",
																},
																&litMatcher{
																	pos:        position{line: 920, col: 61, offset: 27527},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 922, col: 4, offset: 27572},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 930, col: 1, offset: 27714},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 27728},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 27728},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 931, col: 5, offset: 27728},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 12, offset: 27735},
								name: "ListingStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 5, offset: 27753},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 932, col: 11, offset: 27759},
								expr: &ruleRefExpr{
									pos:  position{line: 932, col: 12, offset: 27760},
									name: "ListingLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 5, offset: 27778},
							name: "ListingEnd",
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 937, col: 1, offset: 27936},
			expr: &actionExpr{
				pos: position{line: 937, col: 16, offset: 27951},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 937, col: 16, offset: 27951},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 937, col: 16, offset: 27951},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 937, col: 32, offset: 27967},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 42, offset: 27977},
								name: "ListingDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 937, col: 59, offset: 27994},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 937, col: 69, offset: 28004},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 944, col: 1, offset: 28181},
			expr: &seqExpr{
				pos: position{line: 944, col: 14, offset: 28194},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 944, col: 14, offset: 28194},
						name: "BeginningOfLine",
					},
					&labeledExpr{
						pos:   position{line: 944, col: 30, offset: 28210},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 40, offset: 28220},
							name: "ListingDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 944, col: 57, offset: 28237},
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 58, offset: 28238},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 944, col: 68, offset: 28248},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 953, col: 1, offset: 28508},
			expr: &actionExpr{
				pos: position{line: 953, col: 18, offset: 28525},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 953, col: 18, offset: 28525},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 953, col: 18, offset: 28525},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 953, col: 27, offset: 28534},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 953, col: 27, offset: 28534},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 953, col: 34, offset: 28541},
										expr: &litMatcher{
											pos:        position{line: 953, col: 34, offset: 28541},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 953, col: 40, offset: 28547},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 960, col: 1, offset: 28666},
			expr: &actionExpr{
				pos: position{line: 960, col: 20, offset: 28685},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 960, col: 20, offset: 28685},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 960, col: 20, offset: 28685},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 29, offset: 28694},
								name: "ListingHyphens",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 961, col: 5, offset: 28715},
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 5, offset: 28715},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 966, col: 1, offset: 28835},
			expr: &actionExpr{
				pos: position{line: 966, col: 15, offset: 28849},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 966, col: 16, offset: 28850},
					exprs: []any{
						&notExpr{
							pos: position{line: 966, col: 16, offset: 28850},
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 17, offset: 28851},
								name: "ListingDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 34, offset: 28868},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 966, col: 47, offset: 28881},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 52, offset: 28886},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 60, offset: 28894},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 970, col: 1, offset: 28944},
			expr: &actionExpr{
				pos: position{line: 971, col: 5, offset: 28955},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 971, col: 5, offset: 28955},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 971, col: 5, offset: 28955},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 971, col: 12, offset: 28962},
								name: "OpenStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 972, col: 5, offset: 28977},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 972, col: 11, offset: 28983},
								expr: &seqExpr{
									pos: position{line: 972, col: 12, offset: 28984},
									exprs: []any{
										&notExpr{
											pos: position{line: 972, col: 12, offset: 28984},
											expr: &ruleRefExpr{
												pos:  position{line: 972, col: 13, offset: 28985},
												name: "OpenDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 972, col: 27, offset: 28999},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 5, offset: 29013},
							name: "OpenEnd",
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 977, col: 1, offset: 29162},
			expr: &actionExpr{
				pos: position{line: 977, col: 13, offset: 29174},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 977, col: 13, offset: 29174},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 977, col: 13, offset: 29174},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 23, offset: 29184},
								name: "OpenDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 977, col: 37, offset: 29198},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 977, col: 47, offset: 29208},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 984, col: 1, offset: 29382},
			expr: &seqExpr{
				pos: position{line: 984, col: 11, offset: 29392},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 984, col: 11, offset: 29392},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 984, col: 21, offset: 29402},
							name: "OpenDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 984, col: 35, offset: 29416},
						expr: &ruleRefExpr{
							pos:  position{line: 984, col: 36, offset: 29417},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 984, col: 46, offset: 29427},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 993, col: 1, offset: 29681},
			expr: &actionExpr{
				pos: position{line: 993, col: 14, offset: 29694},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 993, col: 14, offset: 29694},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 993, col: 23, offset: 29703},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 998, col: 1, offset: 29759},
			expr: &actionExpr{
				pos: position{line: 998, col: 17, offset: 29775},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 998, col: 17, offset: 29775},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 998, col: 17, offset: 29775},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 26, offset: 29784},
								name: "OpenEquals",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 999, col: 5, offset: 29801},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 5, offset: 29801},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1005, col: 1, offset: 29927},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 15, offset: 29941},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 15, offset: 29941},
						name: "SingleMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 34, offset: 29960},
						name: "DoubleMarkedText",
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1007, col: 1, offset: 29979},
			expr: &actionExpr{
				pos: position{line: 1007, col: 20, offset: 29998},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1007, col: 20, offset: 29998},
					exprs: []any{
						&notExpr{
							pos: position{line: 1007, col: 20, offset: 29998},
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 21, offset: 29999},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 28, offset: 30006},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1007, col: 32, offset: 30010},
							expr: &notExpr{
								pos: position{line: 1007, col: 34, offset: 30012},
								expr: &litMatcher{
									pos:        position{line: 1007, col: 35, offset: 30013},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1007, col: 40, offset: 30018},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 47, offset: 30025},
								name: "SingleMarkedTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 70, offset: 30048},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1007, col: 74, offset: 30052},
							expr: &litMatcher{
								pos:        position{line: 1007, col: 75, offset: 30053},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1007, col: 79, offset: 30057},
							expr: &notExpr{
								pos: position{line: 1007, col: 81, offset: 30059},
								expr: &ruleRefExpr{
									pos:  position{line: 1007, col: 82, offset: 30060},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1011, col: 1, offset: 30105},
			expr: &actionExpr{
				pos: position{line: 1011, col: 25, offset: 30129},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 25, offset: 30129},
					exprs: []any{
						&notExpr{
							pos: position{line: 1011, col: 25, offset: 30129},
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 26, offset: 30130},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 28, offset: 30132},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1011, col: 34, offset: 30138},
								expr: &actionExpr{
									pos: position{line: 1011, col: 35, offset: 30139},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1011, col: 35, offset: 30139},
										exprs: []any{
											&notExpr{
												pos: position{line: 1011, col: 35, offset: 30139},
												expr: &ruleRefExpr{
													pos:  position{line: 1011, col: 36, offset: 30140},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1011, col: 38, offset: 30142},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1011, col: 44, offset: 30148},
													expr: &ruleRefExpr{
														pos:  position{line: 1011, col: 45, offset: 30149},
														name: "SingleMarkedTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1015, col: 1, offset: 30303},
			expr: &actionExpr{
				pos: position{line: 1015, col: 27, offset: 30329},
				run: (*parser).callonSingleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 27, offset: 30329},
					exprs: []any{
						&notExpr{
							pos: position{line: 1015, col: 27, offset: 30329},
							expr: &seqExpr{
								pos: position{line: 1015, col: 29, offset: 30331},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1015, col: 29, offset: 30331},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
									&notExpr{
										pos: position{line: 1015, col: 33, offset: 30335},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 34, offset: 30336},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1015, col: 39, offset: 30341},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1015, col: 48, offset: 30350},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1019, col: 1, offset: 30405},
			expr: &actionExpr{
				pos: position{line: 1019, col: 20, offset: 30424},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1019, col: 20, offset: 30424},
					exprs: []any{
						&notExpr{
							pos: position{line: 1019, col: 20, offset: 30424},
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 21, offset: 30425},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 34, offset: 30438},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1019, col: 39, offset: 30443},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 46, offset: 30450},
								name: "DoubleMarkedTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 69, offset: 30473},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1023, col: 1, offset: 30510},
			expr: &actionExpr{
				pos: position{line: 1023, col: 25, offset: 30534},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 25, offset: 30534},
					exprs: []any{
						&notExpr{
							pos: position{line: 1023, col: 25, offset: 30534},
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 26, offset: 30535},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 28, offset: 30537},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1023, col: 34, offset: 30543},
								expr: &actionExpr{
									pos: position{line: 1023, col: 35, offset: 30544},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1023, col: 35, offset: 30544},
										exprs: []any{
											&notExpr{
												pos: position{line: 1023, col: 35, offset: 30544},
												expr: &ruleRefExpr{
													pos:  position{line: 1023, col: 36, offset: 30545},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1023, col: 38, offset: 30547},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1023, col: 44, offset: 30553},
													expr: &ruleRefExpr{
														pos:  position{line: 1023, col: 45, offset: 30554},
														name: "DoubleMarkedTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1027, col: 1, offset: 30720},
			expr: &actionExpr{
				pos: position{line: 1027, col: 27, offset: 30746},
				run: (*parser).callonDoubleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 27, offset: 30746},
					exprs: []any{
						&notExpr{
							pos: position{line: 1027, col: 27, offset: 30746},
							expr: &litMatcher{
								pos:        position{line: 1027, col: 29, offset: 30748},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 35, offset: 30754},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 44, offset: 30763},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1033, col: 1, offset: 30820},
			expr: &actionExpr{
				pos: position{line: 1034, col: 5, offset: 30834},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 5, offset: 30834},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1034, col: 5, offset: 30834},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 12, offset: 30841},
								name: "ExampleStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 5, offset: 30859},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1035, col: 11, offset: 30865},
								expr: &seqExpr{
									pos: position{line: 1035, col: 12, offset: 30866},
									exprs: []any{
										&notExpr{
											pos: position{line: 1035, col: 12, offset: 30866},
											expr: &ruleRefExpr{
												pos:  position{line: 1035, col: 13, offset: 30867},
												name: "ExampleDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1035, col: 30, offset: 30884},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1036, col: 5, offset: 30898},
							name: "ExampleEnd",
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1040, col: 1, offset: 31056},
			expr: &actionExpr{
				pos: position{line: 1040, col: 16, offset: 31071},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 16, offset: 31071},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1040, col: 16, offset: 31071},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1040, col: 26, offset: 31081},
								name: "ExampleDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1040, col: 43, offset: 31098},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1040, col: 53, offset: 31108},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1047, col: 1, offset: 31293},
			expr: &seqExpr{
				pos: position{line: 1047, col: 14, offset: 31306},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1047, col: 14, offset: 31306},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1047, col: 24, offset: 31316},
							name: "ExampleDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1047, col: 41, offset: 31333},
						expr: &ruleRefExpr{
							pos:  position{line: 1047, col: 42, offset: 31334},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1047, col: 52, offset: 31344},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1056, col: 1, offset: 31612},
			expr: &actionExpr{
				pos: position{line: 1056, col: 17, offset: 31628},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1056, col: 17, offset: 31628},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1056, col: 17, offset: 31628},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1056, col: 26, offset: 31637},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1056, col: 26, offset: 31637},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1056, col: 33, offset: 31644},
										expr: &litMatcher{
											pos:        position{line: 1056, col: 33, offset: 31644},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1056, col: 39, offset: 31650},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1063, col: 1, offset: 31773},
			expr: &actionExpr{
				pos: position{line: 1063, col: 20, offset: 31792},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 20, offset: 31792},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1063, col: 20, offset: 31792},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 1063, col: 29, offset: 31801},
								name: "ExampleEquals",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1064, col: 5, offset: 31821},
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 5, offset: 31821},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1069, col: 1, offset: 31945},
			expr: &actionExpr{
				pos: position{line: 1069, col: 15, offset: 31959},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 16, offset: 31960},
					exprs: []any{
						&notExpr{
							pos: position{line: 1069, col: 16, offset: 31960},
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 17, offset: 31961},
								name: "ExampleDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 34, offset: 31978},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 47, offset: 31991},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 52, offset: 31996},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 60, offset: 32004},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1075, col: 1, offset: 32052},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 32066},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 32066},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1076, col: 5, offset: 32066},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 12, offset: 32073},
								name: "LiteralStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 5, offset: 32091},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1077, col: 11, offset: 32097},
								expr: &ruleRefExpr{
									pos:  position{line: 1077, col: 12, offset: 32098},
									name: "LiteralLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1078, col: 5, offset: 32116},
							name: "LiteralEnd",
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1082, col: 1, offset: 32283},
			expr: &actionExpr{
				pos: position{line: 1082, col: 16, offset: 32298},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 16, offset: 32298},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1082, col: 16, offset: 32298},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 32, offset: 32314},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 42, offset: 32324},
								name: "LiteralDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1082, col: 59, offset: 32341},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1082, col: 69, offset: 32351},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1089, col: 1, offset: 32528},
			expr: &seqExpr{
				pos: position{line: 1089, col: 14, offset: 32541},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1089, col: 14, offset: 32541},
						name: "BeginningOfLine",
					},
					&labeledExpr{
						pos:   position{line: 1089, col: 30, offset: 32557},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1089, col: 40, offset: 32567},
							name: "LiteralDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1089, col: 57, offset: 32584},
						expr: &ruleRefExpr{
							pos:  position{line: 1089, col: 58, offset: 32585},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1089, col: 68, offset: 32595},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1098, col: 1, offset: 32855},
			expr: &actionExpr{
				pos: position{line: 1098, col: 15, offset: 32869},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 15, offset: 32869},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1098, col: 15, offset: 32869},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1098, col: 21, offset: 32875},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1098, col: 21, offset: 32875},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1098, col: 28, offset: 32882},
										expr: &litMatcher{
											pos:        position{line: 1098, col: 28, offset: 32882},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1098, col: 34, offset: 32888},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1105, col: 1, offset: 33001},
			expr: &actionExpr{
				pos: position{line: 1105, col: 20, offset: 33020},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 20, offset: 33020},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1105, col: 20, offset: 33020},
							label: "dots",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 26, offset: 33026},
								name: "LiteralDots",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1106, col: 5, offset: 33044},
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 5, offset: 33044},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1111, col: 1, offset: 33161},
			expr: &actionExpr{
				pos: position{line: 1111, col: 15, offset: 33175},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 16, offset: 33176},
					exprs: []any{
						&notExpr{
							pos: position{line: 1111, col: 16, offset: 33176},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 17, offset: 33177},
								name: "LiteralDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 34, offset: 33194},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 47, offset: 33207},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 52, offset: 33212},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 60, offset: 33220},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1115, col: 1, offset: 33266},
			expr: &actionExpr{
				pos: position{line: 1116, col: 5, offset: 33280},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 5, offset: 33280},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1116, col: 5, offset: 33280},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 12, offset: 33287},
								name: "SidebarStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 5, offset: 33305},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1117, col: 11, offset: 33311},
								expr: &seqExpr{
									pos: position{line: 1117, col: 12, offset: 33312},
									exprs: []any{
										&notExpr{
											pos: position{line: 1117, col: 12, offset: 33312},
											expr: &ruleRefExpr{
												pos:  position{line: 1117, col: 13, offset: 33313},
												name: "SidebarDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1117, col: 30, offset: 33330},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1118, col: 5, offset: 33344},
							name: "SidebarEnd",
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1122, col: 1, offset: 33502},
			expr: &actionExpr{
				pos: position{line: 1122, col: 16, offset: 33517},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 16, offset: 33517},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1122, col: 16, offset: 33517},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 26, offset: 33527},
								name: "SidebarDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1122, col: 43, offset: 33544},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1122, col: 53, offset: 33554},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1129, col: 1, offset: 33731},
			expr: &seqExpr{
				pos: position{line: 1129, col: 14, offset: 33744},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1129, col: 14, offset: 33744},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1129, col: 24, offset: 33754},
							name: "SidebarDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1129, col: 41, offset: 33771},
						expr: &ruleRefExpr{
							pos:  position{line: 1129, col: 42, offset: 33772},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1129, col: 52, offset: 33782},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1138, col: 1, offset: 34042},
			expr: &actionExpr{
				pos: position{line: 1138, col: 20, offset: 34061},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 20, offset: 34061},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1138, col: 20, offset: 34061},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1138, col: 31, offset: 34072},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1138, col: 31, offset: 34072},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1138, col: 38, offset: 34079},
										expr: &litMatcher{
											pos:        position{line: 1138, col: 38, offset: 34079},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1138, col: 44, offset: 34085},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1145, col: 1, offset: 34208},
			expr: &actionExpr{
				pos: position{line: 1145, col: 20, offset: 34227},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 20, offset: 34227},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1145, col: 20, offset: 34227},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 31, offset: 34238},
								name: "SidebarAsterisks",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1146, col: 5, offset: 34261},
							expr: &ruleRefExpr{
								pos:  position{line: 1146, col: 5, offset: 34261},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1152, col: 1, offset: 34384},
			expr: &actionExpr{
				pos: position{line: 1152, col: 12, offset: 34395},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 12, offset: 34395},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1152, col: 12, offset: 34395},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1152, col: 20, offset: 34403},
								expr: &ruleRefExpr{
									pos:  position{line: 1152, col: 21, offset: 34404},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1152, col: 39, offset: 34422},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1156, col: 1, offset: 34479},
			expr: &actionExpr{
				pos: position{line: 1156, col: 19, offset: 34497},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 19, offset: 34497},
					exprs: []any{
						&notExpr{
							pos: position{line: 1156, col: 19, offset: 34497},
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 20, offset: 34498},
								name: "EndOfFile",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 30, offset: 34508},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 46, offset: 34524},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1156, col: 55, offset: 34533},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1156, col: 55, offset: 34533},
										name: "IfDefBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 68, offset: 34546},
										name: "IfNDefBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 82, offset: 34560},
										name: "IfEvalBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 96, offset: 34574},
										name: "AttributeEntry",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 113, offset: 34591},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 130, offset: 34608},
										name: "PreParseLine",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 144, offset: 34622},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1160, col: 1, offset: 34661},
			expr: &actionExpr{
				pos: position{line: 1160, col: 16, offset: 34676},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 16, offset: 34676},
					exprs: []any{
						&notExpr{
							pos: position{line: 1160, col: 16, offset: 34676},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 17, offset: 34677},
								name: "EndIfDefStatement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 35, offset: 34695},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1160, col: 43, offset: 34703},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 43, offset: 34703},
									name: "PreParseLineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1160, col: 64, offset: 34724},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 65, offset: 34725},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1164, col: 1, offset: 34812},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 34840},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 34840},
						run: (*parser).callonPreParseLineElement2,
						expr: &labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 34840},
							label: "arv",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 9, offset: 34844},
								name: "AttributeReference",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 6, offset: 34906},
						run: (*parser).callonPreParseLineElement5,
						expr: &oneOrMoreExpr{
							pos: position{line: 1169, col: 6, offset: 34906},
							expr: &charClassMatcher{
								pos:             position{line: 1169, col: 6, offset: 34906},
								val:             "[^\\r\\n{]",
								chars:           []rune{'\r', '\n', '{'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
								ignoreCase:      false,
								inverted:        true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 8, offset: 34987},
						run: (*parser).callonPreParseLineElement8,
						expr: &litMatcher{
							pos:        position{line: 1172, col: 8, offset: 34987},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1175, col: 1, offset: 35025},
			expr: &actionExpr{
				pos: position{line: 1175, col: 14, offset: 35038},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 14, offset: 35038},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1175, col: 14, offset: 35038},
							name: "IfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 29, offset: 35053},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 41, offset: 35065},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1175, col: 64, offset: 35088},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1175, col: 69, offset: 35093},
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 69, offset: 35093},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 73, offset: 35097},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 83, offset: 35107},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1175, col: 89, offset: 35113},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 90, offset: 35114},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 109, offset: 35133},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1180, col: 1, offset: 35321},
			expr: &actionExpr{
				pos: position{line: 1180, col: 15, offset: 35335},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 15, offset: 35335},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1180, col: 15, offset: 35335},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 26, offset: 35346},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 38, offset: 35358},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1180, col: 61, offset: 35381},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1180, col: 66, offset: 35386},
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 66, offset: 35386},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 70, offset: 35390},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 80, offset: 35400},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1180, col: 86, offset: 35406},
								expr: &ruleRefExpr{
									pos:  position{line: 1180, col: 87, offset: 35407},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 106, offset: 35426},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1185, col: 1, offset: 35616},
			expr: &actionExpr{
				pos: position{line: 1185, col: 15, offset: 35630},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 15, offset: 35630},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1185, col: 15, offset: 35630},
							name: "IfEvalStatement",
						},
						&litMatcher{
							pos:        position{line: 1185, col: 31, offset: 35646},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1185, col: 35, offset: 35650},
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 35, offset: 35650},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 38, offset: 35653},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 44, offset: 35659},
								name: "IfEvalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1185, col: 57, offset: 35672},
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 57, offset: 35672},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 61, offset: 35676},
							label: "operand",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 70, offset: 35685},
								name: "IfEvalOperator",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1185, col: 86, offset: 35701},
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 86, offset: 35701},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 89, offset: 35704},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 96, offset: 35711},
								name: "IfEvalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1185, col: 109, offset: 35724},
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 109, offset: 35724},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 1185, col: 112, offset: 35727},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1185, col: 116, offset: 35731},
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 116, offset: 35731},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 120, offset: 35735},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 130, offset: 35745},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1185, col: 136, offset: 35751},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 137, offset: 35752},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 156, offset: 35771},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1192, col: 1, offset: 35992},
			expr: &actionExpr{
				pos: position{line: 1193, col: 5, offset: 36004},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 5, offset: 36004},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1193, col: 5, offset: 36004},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1193, col: 12, offset: 36011},
								name: "QuoteStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 5, offset: 36027},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1194, col: 11, offset: 36033},
								expr: &seqExpr{
									pos: position{line: 1194, col: 12, offset: 36034},
									exprs: []any{
										&notExpr{
											pos: position{line: 1194, col: 12, offset: 36034},
											expr: &ruleRefExpr{
												pos:  position{line: 1194, col: 13, offset: 36035},
												name: "QuoteDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1194, col: 28, offset: 36050},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 5, offset: 36064},
							name: "QuoteEnd",
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1199, col: 1, offset: 36216},
			expr: &actionExpr{
				pos: position{line: 1199, col: 14, offset: 36229},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 14, offset: 36229},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1199, col: 14, offset: 36229},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 24, offset: 36239},
								name: "QuoteDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1199, col: 39, offset: 36254},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1199, col: 49, offset: 36264},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1206, col: 1, offset: 36439},
			expr: &seqExpr{
				pos: position{line: 1206, col: 12, offset: 36450},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1206, col: 12, offset: 36450},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 22, offset: 36460},
							name: "QuoteDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1206, col: 37, offset: 36475},
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 38, offset: 36476},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1206, col: 48, offset: 36486},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1215, col: 1, offset: 36738},
			expr: &actionExpr{
				pos: position{line: 1215, col: 19, offset: 36756},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 19, offset: 36756},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1215, col: 19, offset: 36756},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1215, col: 31, offset: 36768},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1215, col: 31, offset: 36768},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1215, col: 38, offset: 36775},
										expr: &litMatcher{
											pos:        position{line: 1215, col: 38, offset: 36775},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1215, col: 44, offset: 36781},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1222, col: 1, offset: 36906},
			expr: &actionExpr{
				pos: position{line: 1222, col: 18, offset: 36923},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 18, offset: 36923},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1222, col: 18, offset: 36923},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 30, offset: 36935},
								name: "QuoteUnderlines",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1223, col: 5, offset: 36957},
							expr: &ruleRefExpr{
								pos:  position{line: 1223, col: 5, offset: 36957},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1229, col: 1, offset: 37079},
			expr: &actionExpr{
				pos: position{line: 1229, col: 17, offset: 37095},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 17, offset: 37095},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1229, col: 17, offset: 37095},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1229, col: 22, offset: 37100},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 22, offset: 37100},
									name: "InlineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1229, col: 37, offset: 37115},
							expr: &ruleRefExpr{
								pos:  position{line: 1229, col: 38, offset: 37116},
								name: "EndOfLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 48, offset: 37126},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1229, col: 54, offset: 37132},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 55, offset: 37133},
									name: "ListItemLine",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 70, offset: 37148},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1229, col: 85, offset: 37163},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 86, offset: 37164},
									name: "AttachedBlocks",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlock",
			pos:  position{line: 1240, col: 1, offset: 37396},
			expr: &actionExpr{
				pos: position{line: 1240, col: 17, offset: 37412},
				run: (*parser).callonAttachedBlock1,
				expr: &seqExpr{
					pos: position{line: 1240, col: 17, offset: 37412},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1240, col: 17, offset: 37412},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1240, col: 26, offset: 37421},
								name: "AttachedBlockElement",
							},
						},
						&andExpr{
							pos: position{line: 1240, col: 48, offset: 37443},
							expr: &ruleRefExpr{
								pos:  position{line: 1240, col: 49, offset: 37444},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1244, col: 1, offset: 37483},
			expr: &actionExpr{
				pos: position{line: 1244, col: 24, offset: 37506},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 24, offset: 37506},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1244, col: 24, offset: 37506},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1244, col: 28, offset: 37510},
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 28, offset: 37510},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 31, offset: 37513},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 39, offset: 37521},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 46, offset: 37528},
								name: "BlockElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1248, col: 1, offset: 37616},
			expr: &actionExpr{
				pos: position{line: 1248, col: 20, offset: 37635},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 20, offset: 37635},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1248, col: 20, offset: 37635},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1248, col: 24, offset: 37639},
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 24, offset: 37639},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1248, col: 27, offset: 37642},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 35, offset: 37650},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 41, offset: 37656},
								name: "BlockElement",
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1252, col: 1, offset: 37752},
			expr: &actionExpr{
				pos: position{line: 1252, col: 16, offset: 37767},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 16, offset: 37767},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1252, col: 16, offset: 37767},
							name: "EndOfLine",
						},
						&notExpr{
							pos: position{line: 1252, col: 26, offset: 37777},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 27, offset: 37778},
								name: "OrderedListMarker",
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 45, offset: 37796},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 46, offset: 37797},
								name: "UnorderedListMarker",
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 66, offset: 37817},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 67, offset: 37818},
								name: "BlockDelimiters",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 84, offset: 37835},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1252, col: 92, offset: 37843},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 92, offset: 37843},
									name: "InlineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1252, col: 107, offset: 37858},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 108, offset: 37859},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1256, col: 1, offset: 37926},
			expr: &actionExpr{
				pos: position{line: 1256, col: 18, offset: 37943},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 18, offset: 37943},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1256, col: 18, offset: 37943},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1256, col: 25, offset: 37950},
								expr: &ruleRefExpr{
									pos:  position{line: 1256, col: 26, offset: 37951},
									name: "AttachedBlockElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1256, col: 49, offset: 37974},
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 50, offset: 37975},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1261, col: 1, offset: 38014},
			expr: &actionExpr{
				pos: position{line: 1261, col: 17, offset: 38030},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 17, offset: 38030},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1261, col: 18, offset: 38031},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1261, col: 18, offset: 38031},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1261, col: 26, offset: 38039},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 26, offset: 38039},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 30, offset: 38043},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 30, offset: 38043},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 33, offset: 38046},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 37, offset: 38050},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 37, offset: 38050},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 40, offset: 38053},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 46, offset: 38059},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 46, offset: 38059},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 50, offset: 38063},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 50, offset: 38063},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 53, offset: 38066},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 57, offset: 38070},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 57, offset: 38070},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 60, offset: 38073},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 66, offset: 38079},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 66, offset: 38079},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 70, offset: 38083},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 70, offset: 38083},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 73, offset: 38086},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 77, offset: 38090},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 77, offset: 38090},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 80, offset: 38093},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1261, col: 85, offset: 38098},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 85, offset: 38098},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 1261, col: 88, offset: 38101},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 89, offset: 38102},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1266, col: 1, offset: 38173},
			expr: &actionExpr{
				pos: position{line: 1266, col: 13, offset: 38185},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 13, offset: 38185},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1266, col: 14, offset: 38186},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1266, col: 21, offset: 38193},
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 21, offset: 38193},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 1266, col: 24, offset: 38196},
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 25, offset: 38197},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1271, col: 1, offset: 38264},
			expr: &actionExpr{
				pos: position{line: 1272, col: 5, offset: 38277},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 5, offset: 38277},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1272, col: 5, offset: 38277},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 12, offset: 38284},
								name: "FencedStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 5, offset: 38301},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1273, col: 11, offset: 38307},
								expr: &seqExpr{
									pos: position{line: 1273, col: 12, offset: 38308},
									exprs: []any{
										&notExpr{
											pos: position{line: 1273, col: 12, offset: 38308},
											expr: &ruleRefExpr{
												pos:  position{line: 1273, col: 13, offset: 38309},
												name: "FencedDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1273, col: 29, offset: 38325},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1274, col: 5, offset: 38339},
							name: "FencedEnd",
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1278, col: 1, offset: 38494},
			expr: &actionExpr{
				pos: position{line: 1278, col: 15, offset: 38508},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 15, offset: 38508},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1278, col: 15, offset: 38508},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 25, offset: 38518},
								name: "FencedDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1278, col: 41, offset: 38534},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1278, col: 51, offset: 38544},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1285, col: 1, offset: 38728},
			expr: &seqExpr{
				pos: position{line: 1285, col: 13, offset: 38740},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1285, col: 13, offset: 38740},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1285, col: 23, offset: 38750},
							name: "FencedDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1285, col: 39, offset: 38766},
						expr: &ruleRefExpr{
							pos:  position{line: 1285, col: 40, offset: 38767},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1285, col: 50, offset: 38777},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1294, col: 1, offset: 39043},
			expr: &actionExpr{
				pos: position{line: 1294, col: 19, offset: 39061},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 19, offset: 39061},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1294, col: 19, offset: 39061},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1294, col: 30, offset: 39072},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1294, col: 30, offset: 39072},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1294, col: 36, offset: 39078},
										expr: &litMatcher{
											pos:        position{line: 1294, col: 36, offset: 39078},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1294, col: 42, offset: 39084},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1301, col: 1, offset: 39211},
			expr: &actionExpr{
				pos: position{line: 1301, col: 19, offset: 39229},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 19, offset: 39229},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1301, col: 19, offset: 39229},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 28, offset: 39238},
								name: "FencedBackticks",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1302, col: 5, offset: 39260},
							expr: &ruleRefExpr{
								pos:  position{line: 1302, col: 5, offset: 39260},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1307, col: 1, offset: 39383},
			expr: &actionExpr{
				pos: position{line: 1307, col: 14, offset: 39396},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 15, offset: 39397},
					exprs: []any{
						&notExpr{
							pos: position{line: 1307, col: 15, offset: 39397},
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 16, offset: 39398},
								name: "FencedDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 32, offset: 39414},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 45, offset: 39427},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 50, offset: 39432},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 58, offset: 39440},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1313, col: 1, offset: 39488},
			expr: &actionExpr{
				pos: position{line: 1314, col: 5, offset: 39499},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 5, offset: 39499},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1314, col: 5, offset: 39499},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 12, offset: 39506},
								name: "StemStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 5, offset: 39521},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1315, col: 11, offset: 39527},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 12, offset: 39528},
									name: "StemLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1316, col: 5, offset: 39543},
							name: "StemEnd",
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1320, col: 1, offset: 39702},
			expr: &actionExpr{
				pos: position{line: 1320, col: 13, offset: 39714},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 13, offset: 39714},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1320, col: 13, offset: 39714},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 23, offset: 39724},
								name: "StemDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1320, col: 37, offset: 39738},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1320, col: 47, offset: 39748},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1327, col: 1, offset: 39922},
			expr: &seqExpr{
				pos: position{line: 1327, col: 11, offset: 39932},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1327, col: 11, offset: 39932},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 21, offset: 39942},
							name: "StemDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1327, col: 35, offset: 39956},
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 36, offset: 39957},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1327, col: 46, offset: 39967},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1336, col: 1, offset: 40221},
			expr: &actionExpr{
				pos: position{line: 1336, col: 14, offset: 40234},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 14, offset: 40234},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1336, col: 14, offset: 40234},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1336, col: 22, offset: 40242},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1336, col: 22, offset: 40242},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1336, col: 29, offset: 40249},
										expr: &litMatcher{
											pos:        position{line: 1336, col: 29, offset: 40249},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1336, col: 35, offset: 40255},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1343, col: 1, offset: 40372},
			expr: &actionExpr{
				pos: position{line: 1343, col: 17, offset: 40388},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 17, offset: 40388},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1343, col: 17, offset: 40388},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:  position{line: 1343, col: 25, offset: 40396},
								name: "StemPluses",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1344, col: 5, offset: 40413},
							expr: &ruleRefExpr{
								pos:  position{line: 1344, col: 5, offset: 40413},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1349, col: 1, offset: 40529},
			expr: &actionExpr{
				pos: position{line: 1349, col: 12, offset: 40540},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 13, offset: 40541},
					exprs: []any{
						&notExpr{
							pos: position{line: 1349, col: 13, offset: 40541},
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 14, offset: 40542},
								name: "StemDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 28, offset: 40556},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 41, offset: 40569},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 46, offset: 40574},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 54, offset: 40582},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1357, col: 1, offset: 40632},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 18, offset: 40649},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1357, col: 18, offset: 40649},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 43, offset: 40674},
						name: "DocumentCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1359, col: 1, offset: 40698},
			expr: &actionExpr{
				pos: position{line: 1359, col: 26, offset: 40723},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1359, col: 26, offset: 40723},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1359, col: 26, offset: 40723},
							name: "CrossReferenceStart",
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 46, offset: 40743},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 50, offset: 40747},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 68, offset: 40765},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1359, col: 74, offset: 40771},
								expr: &actionExpr{
									pos: position{line: 1359, col: 75, offset: 40772},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1359, col: 75, offset: 40772},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 1359, col: 75, offset: 40772},
												expr: &ruleRefExpr{
													pos:  position{line: 1359, col: 75, offset: 40772},
													name: "_",
												},
											},
											&litMatcher{
												pos:        position{line: 1359, col: 78, offset: 40775},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1359, col: 82, offset: 40779},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1359, col: 89, offset: 40786},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 1359, col: 89, offset: 40786},
															expr: &ruleRefExpr{
																pos:  position{line: 1359, col: 89, offset: 40786},
																name: "_",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1359, col: 92, offset: 40789},
															name: "CrossReferenceLabel",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1359, col: 136, offset: 40833},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1367, col: 1, offset: 41037},
			expr: &litMatcher{
				pos:        position{line: 1367, col: 23, offset: 41059},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1369, col: 1, offset: 41066},
			expr: &actionExpr{
				pos: position{line: 1369, col: 21, offset: 41086},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 21, offset: 41086},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1369, col: 22, offset: 41087},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1369, col: 22, offset: 41087},
									name: "Alpha",
								},
								&charClassMatcher{
									pos:             position{line: 1369, col: 30, offset: 41095},
									val:             "[:_]",
									chars:           []rune{':', '_'},
									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
									ignoreCase:      false,
									inverted:        false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1369, col: 36, offset: 41101},
							expr: &charClassMatcher{
								pos:             position{line: 1369, col: 36, offset: 41101},
								val:             "[\\p{L}\\p{N} _:.-]",
								chars:           []rune{' ', '_', ':', '.', '-'},
								classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1374, col: 1, offset: 41253},
			expr: &oneOrMoreExpr{
				pos: position{line: 1374, col: 23, offset: 41275},
				expr: &choiceExpr{
					pos: position{line: 1375, col: 5, offset: 41281},
					alternatives: []any{
						&actionExpr{
							pos: position{line: 1375, col: 6, offset: 41282},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &oneOrMoreExpr{
								pos: position{line: 1375, col: 6, offset: 41282},
								expr: &charClassMatcher{
									pos:             position{line: 1375, col: 6, offset: 41282},
									val:             "[^<>{[\\]]",
									chars:           []rune{'<', '>', '{', '[', ']'},
									basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false},
									ignoreCase:      false,
									inverted:        true,
								},
							},
						},
						&actionExpr{
							pos: position{line: 1378, col: 7, offset: 41363},
							run: (*parser).callonCrossReferenceLabel6,
							expr: &labeledExpr{
								pos:   position{line: 1378, col: 7, offset: 41363},
								label: "arv",
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 11, offset: 41367},
									name: "AttributeReference",
								},
							},
						},
						&actionExpr{
							pos: position{line: 1381, col: 8, offset: 41425},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1381, col: 8, offset: 41425},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentCrossReference",
			pos:  position{line: 1384, col: 1, offset: 41464},
			expr: &actionExpr{
				pos: position{line: 1384, col: 26, offset: 41489},
				run: (*parser).callonDocumentCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 26, offset: 41489},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1384, col: 26, offset: 41489},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 34, offset: 41497},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 40, offset: 41503},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 46, offset: 41509},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 58, offset: 41521},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1391, col: 1, offset: 41687},
			expr: &actionExpr{
				pos: position{line: 1391, col: 18, offset: 41704},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 18, offset: 41704},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1391, col: 18, offset: 41704},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1391, col: 28, offset: 41714},
								expr: &litMatcher{
									pos:        position{line: 1391, col: 28, offset: 41714},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 33, offset: 41719},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 42, offset: 41728},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 42, offset: 41728},
									name: "UppercaseRomanHundreds",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 66, offset: 41752},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 71, offset: 41757},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 72, offset: 41758},
									name: "UppercaseRomanTens",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 93, offset: 41779},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 98, offset: 41784},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 99, offset: 41785},
									name: "UppercaseRomanOnes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1391, col: 120, offset: 41806},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1398, col: 1, offset: 41930},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 5, offset: 41961},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 41961},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1400, col: 7, offset: 41972},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1401, col: 8, offset: 41984},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1401, col: 8, offset: 41984},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1401, col: 12, offset: 41988},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1401, col: 21, offset: 41997},
									expr: &litMatcher{
										pos:        position{line: 1401, col: 21, offset: 41997},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1401, col: 26, offset: 42002},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1404, col: 1, offset: 42048},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 5, offset: 42075},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 42075},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1406, col: 7, offset: 42086},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1407, col: 8, offset: 42098},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1407, col: 8, offset: 42098},
								expr: &litMatcher{
									pos:        position{line: 1407, col: 8, offset: 42098},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1407, col: 13, offset: 42103},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1407, col: 18, offset: 42108},
									expr: &litMatcher{
										pos:        position{line: 1407, col: 18, offset: 42108},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1407, col: 23, offset: 42113},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1410, col: 1, offset: 42155},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 42182},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1411, col: 5, offset: 42182},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1412, col: 7, offset: 42193},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1413, col: 8, offset: 42205},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1413, col: 8, offset: 42205},
								expr: &litMatcher{
									pos:        position{line: 1413, col: 8, offset: 42205},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1413, col: 13, offset: 42210},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1413, col: 18, offset: 42215},
									expr: &litMatcher{
										pos:        position{line: 1413, col: 18, offset: 42215},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1413, col: 23, offset: 42220},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1416, col: 1, offset: 42262},
			expr: &actionExpr{
				pos: position{line: 1416, col: 18, offset: 42279},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1416, col: 18, offset: 42279},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1416, col: 18, offset: 42279},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1416, col: 28, offset: 42289},
								expr: &litMatcher{
									pos:        position{line: 1416, col: 28, offset: 42289},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 33, offset: 42294},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 42, offset: 42303},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 42, offset: 42303},
									name: "LowercaseRomanHundreds",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 66, offset: 42327},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 71, offset: 42332},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 72, offset: 42333},
									name: "LowercaseRomanTens",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 93, offset: 42354},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 98, offset: 42359},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 99, offset: 42360},
									name: "LowercaseRomanOnes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1416, col: 120, offset: 42381},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1423, col: 1, offset: 42505},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 5, offset: 42536},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 42536},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1425, col: 7, offset: 42547},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1426, col: 8, offset: 42559},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1426, col: 8, offset: 42559},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1426, col: 12, offset: 42563},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1426, col: 21, offset: 42572},
									expr: &litMatcher{
										pos:        position{line: 1426, col: 21, offset: 42572},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1426, col: 26, offset: 42577},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1429, col: 1, offset: 42623},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 5, offset: 42650},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1430, col: 5, offset: 42650},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1431, col: 7, offset: 42661},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1432, col: 8, offset: 42673},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1432, col: 8, offset: 42673},
								expr: &litMatcher{
									pos:        position{line: 1432, col: 8, offset: 42673},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1432, col: 13, offset: 42678},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1432, col: 18, offset: 42683},
									expr: &litMatcher{
										pos:        position{line: 1432, col: 18, offset: 42683},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1432, col: 23, offset: 42688},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1435, col: 1, offset: 42730},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 5, offset: 42757},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1436, col: 5, offset: 42757},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1437, col: 7, offset: 42768},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1438, col: 8, offset: 42780},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1438, col: 8, offset: 42780},
								expr: &litMatcher{
									pos:        position{line: 1438, col: 8, offset: 42780},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1438, col: 13, offset: 42785},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1438, col: 18, offset: 42790},
									expr: &litMatcher{
										pos:        position{line: 1438, col: 18, offset: 42790},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1438, col: 23, offset: 42795},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1443, col: 1, offset: 42839},
			expr: &actionExpr{
				pos: position{line: 1443, col: 19, offset: 42857},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 19, offset: 42857},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1443, col: 19, offset: 42857},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 27, offset: 42865},
								name: "OrderedListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 47, offset: 42885},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 54, offset: 42892},
								name: "ListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1449, col: 1, offset: 43081},
			expr: &actionExpr{
				pos: position{line: 1449, col: 21, offset: 43101},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1449, col: 21, offset: 43101},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1449, col: 21, offset: 43101},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 1449, col: 29, offset: 43109},
								name: "AnySpaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 1449, col: 40, offset: 43120},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1449, col: 48, offset: 43128},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1449, col: 48, offset: 43128},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1449, col: 48, offset: 43128},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1449, col: 48, offset: 43128},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1449, col: 57, offset: 43137},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1449, col: 58, offset: 43138},
															expr: &litMatcher{
																pos:        position{line: 1449, col: 58, offset: 43138},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1451, col: 4, offset: 43184},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1457, col: 3, offset: 43278},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1457, col: 3, offset: 43278},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1457, col: 3, offset: 43278},
													expr: &charClassMatcher{
														pos:             position{line: 1457, col: 3, offset: 43278},
														val:             "[0-9]",
														ranges:          []rune{'0', '9'},
														basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
														ignoreCase:      false,
														inverted:        false,
													},
												},
												&litMatcher{
													pos:        position{line: 1457, col: 10, offset: 43285},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1458, col: 3, offset: 43322},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1458, col: 3, offset: 43322},
											exprs: []any{
												&charClassMatcher{
													pos:             position{line: 1458, col: 3, offset: 43322},
													val:             "[a-z]",
													ranges:          []rune{'a', 'z'},
													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
													ignoreCase:      false,
													inverted:        false,
												},
												&litMatcher{
													pos:        position{line: 1458, col: 9, offset: 43328},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1459, col: 3, offset: 43365},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1459, col: 3, offset: 43365},
											exprs: []any{
												&charClassMatcher{
													pos:             position{line: 1459, col: 3, offset: 43365},
													val:             "[A-Z]",
													ranges:          []rune{'A', 'Z'},
													basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
													ignoreCase:      false,
													inverted:        false,
												},
												&litMatcher{
													pos:        position{line: 1459, col: 9, offset: 43371},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1460, col: 3, offset: 43408},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1460, col: 3, offset: 43408},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1460, col: 3, offset: 43408},
													name: "LowercaseRoman",
												},
												&litMatcher{
													pos:        position{line: 1460, col: 18, offset: 43423},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1461, col: 3, offset: 43460},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1461, col: 3, offset: 43460},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1461, col: 3, offset: 43460},
													name: "UppercaseRoman",
												},
												&litMatcher{
													pos:        position{line: 1461, col: 18, offset: 43475},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 1, offset: 43512},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1471, col: 1, offset: 43603},
			expr: &actionExpr{
				pos: position{line: 1471, col: 21, offset: 43623},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 21, offset: 43623},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1471, col: 21, offset: 43623},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 29, offset: 43631},
								name: "UnorderedListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 50, offset: 43652},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1471, col: 60, offset: 43662},
								expr: &ruleRefExpr{
									pos:  position{line: 1471, col: 61, offset: 43663},
									name: "Checklist",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 73, offset: 43675},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 80, offset: 43682},
								name: "ListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1478, col: 1, offset: 43921},
			expr: &actionExpr{
				pos: position{line: 1478, col: 23, offset: 43943},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 23, offset: 43943},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1478, col: 23, offset: 43943},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 31, offset: 43951},
								name: "AnySpaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 42, offset: 43962},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1478, col: 50, offset: 43970},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1478, col: 51, offset: 43971},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 51, offset: 43971},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 51, offset: 43971},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 58, offset: 43978},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 58, offset: 43978},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1480, col: 4, offset: 44020},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:  position{line: 1483, col: 1, offset: 44068},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1489, col: 1, offset: 44153},
			expr: &actionExpr{
				pos: position{line: 1489, col: 13, offset: 44165},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 13, offset: 44165},
					exprs: []any{
						&andExpr{
							pos: position{line: 1489, col: 13, offset: 44165},
							expr: &litMatcher{
								pos:        position{line: 1489, col: 14, offset: 44166},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 1, offset: 44171},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1491, col: 7, offset: 44189},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1491, col: 7, offset: 44189},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1491, col: 7, offset: 44189},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1492, col: 7, offset: 44246},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1492, col: 7, offset: 44246},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1493, col: 7, offset: 44301},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1493, col: 7, offset: 44301},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 7, offset: 44355},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1499, col: 1, offset: 44398},
			expr: &actionExpr{
				pos: position{line: 1499, col: 23, offset: 44420},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 23, offset: 44420},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1499, col: 23, offset: 44420},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1499, col: 36, offset: 44433},
								expr: &ruleRefExpr{
									pos:  position{line: 1499, col: 37, offset: 44434},
									name: "AnchorAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 55, offset: 44452},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 61, offset: 44458},
								name: "DescriptionListTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 82, offset: 44479},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 90, offset: 44487},
								name: "DescriptionListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 113, offset: 44510},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1499, col: 124, offset: 44521},
								expr: &choiceExpr{
									pos: position{line: 1499, col: 125, offset: 44522},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1499, col: 125, offset: 44522},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:  position{line: 1499, col: 125, offset: 44522},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1499, col: 180, offset: 44577},
											name: "NewLine",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 190, offset: 44587},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 197, offset: 44594},
								name: "DescriptionListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1510, col: 1, offset: 45106},
			expr: &actionExpr{
				pos: position{line: 1510, col: 23, offset: 45128},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1510, col: 23, offset: 45128},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1510, col: 28, offset: 45133},
						expr: &seqExpr{
							pos: position{line: 1510, col: 29, offset: 45134},
							exprs: []any{
								&notExpr{
									pos: position{line: 1510, col: 29, offset: 45134},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 30, offset: 45135},
										name: "DescriptionListMarker",
									},
								},
								&notExpr{
									pos: position{line: 1510, col: 52, offset: 45157},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 53, offset: 45158},
										name: "EndOfLine",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1510, col: 63, offset: 45168},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1514, col: 1, offset: 45224},
			expr: &actionExpr{
				pos: position{line: 1514, col: 25, offset: 45248},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 25, offset: 45248},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 1514, col: 25, offset: 45248},
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 25, offset: 45248},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 28, offset: 45251},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1514, col: 36, offset: 45259},
								run: (*parser).callonDescriptionListMarker6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1514, col: 36, offset: 45259},
									expr: &choiceExpr{
										pos: position{line: 1514, col: 37, offset: 45260},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1514, col: 37, offset: 45260},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1514, col: 43, offset: 45266},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1516, col: 4, offset: 45308},
							run: (*parser).callonDescriptionListMarker11,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1523, col: 1, offset: 45435},
							expr: &ruleRefExpr{
								pos:  position{line: 1523, col: 1, offset: 45435},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1528, col: 1, offset: 45475},
			expr: &actionExpr{
				pos: position{line: 1528, col: 28, offset: 45502},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 28, offset: 45502},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1528, col: 28, offset: 45502},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1528, col: 34, offset: 45508},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1528, col: 34, offset: 45508},
										expr: &ruleRefExpr{
											pos:  position{line: 1528, col: 34, offset: 45508},
											name: "InlineElement",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1528, col: 51, offset: 45525},
										name: "BlockElement",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 65, offset: 45539},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1528, col: 80, offset: 45554},
								expr: &ruleRefExpr{
									pos:  position{line: 1528, col: 81, offset: 45555},
									name: "AttachedBlocks",
								},
							},
						},
						&andExpr{
							pos: position{line: 1528, col: 99, offset: 45573},
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 100, offset: 45574},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1537, col: 1, offset: 45735},
			expr: &actionExpr{
				pos: position{line: 1537, col: 21, offset: 45755},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 21, offset: 45755},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1537, col: 21, offset: 45755},
							name: "SingleLineCommentDelimiter",
						},
						&notExpr{
							pos: position{line: 1537, col: 48, offset: 45782},
							expr: &litMatcher{
								pos:        position{line: 1537, col: 49, offset: 45783},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 54, offset: 45788},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 63, offset: 45797},
								name: "SingleLineCommentContent",
							},
						},
						&andExpr{
							pos: position{line: 1537, col: 89, offset: 45823},
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 90, offset: 45824},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1541, col: 1, offset: 45914},
			expr: &actionExpr{
				pos: position{line: 1541, col: 30, offset: 45943},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1541, col: 30, offset: 45943},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1545, col: 1, offset: 45988},
			expr: &actionExpr{
				pos: position{line: 1545, col: 28, offset: 46015},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1545, col: 28, offset: 46015},
					expr: &charClassMatcher{
						pos:             position{line: 1545, col: 28, offset: 46015},
						val:             "[^\\n]",
						chars:           []rune{'\n'},
						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
						ignoreCase:      false,
						inverted:        true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1549, col: 1, offset: 46062},
			expr: &actionExpr{
				pos: position{line: 1550, col: 5, offset: 46085},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 5, offset: 46085},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1550, col: 5, offset: 46085},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 12, offset: 46092},
								name: "MultiLineCommentStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 5, offset: 46119},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1551, col: 11, offset: 46125},
								expr: &ruleRefExpr{
									pos:  position{line: 1551, col: 12, offset: 46126},
									name: "MultiLineCommentLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1552, col: 5, offset: 46153},
							name: "MultiLineCommentEnd",
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1556, col: 1, offset: 46338},
			expr: &actionExpr{
				pos: position{line: 1556, col: 25, offset: 46362},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 25, offset: 46362},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1556, col: 25, offset: 46362},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 35, offset: 46372},
								name: "MultiLineCommentDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1556, col: 61, offset: 46398},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1556, col: 72, offset: 46409},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1563, col: 1, offset: 46599},
			expr: &seqExpr{
				pos: position{line: 1563, col: 23, offset: 46621},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1563, col: 23, offset: 46621},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1563, col: 33, offset: 46631},
							name: "MultiLineCommentDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1563, col: 59, offset: 46657},
						expr: &ruleRefExpr{
							pos:  position{line: 1563, col: 60, offset: 46658},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1563, col: 70, offset: 46668},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1572, col: 1, offset: 46954},
			expr: &actionExpr{
				pos: position{line: 1572, col: 34, offset: 46987},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 34, offset: 46987},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1572, col: 34, offset: 46987},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1572, col: 50, offset: 47003},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1572, col: 50, offset: 47003},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1572, col: 57, offset: 47010},
										expr: &litMatcher{
											pos:        position{line: 1572, col: 57, offset: 47010},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1572, col: 63, offset: 47016},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1579, col: 1, offset: 47161},
			expr: &actionExpr{
				pos: position{line: 1579, col: 29, offset: 47189},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 29, offset: 47189},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1579, col: 29, offset: 47189},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1579, col: 45, offset: 47205},
								name: "MultiLineCommentForwardSlashes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1580, col: 5, offset: 47242},
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 5, offset: 47242},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1585, col: 1, offset: 47386},
			expr: &actionExpr{
				pos: position{line: 1585, col: 24, offset: 47409},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 25, offset: 47410},
					exprs: []any{
						&notExpr{
							pos: position{line: 1585, col: 25, offset: 47410},
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 26, offset: 47411},
								name: "MultiLineCommentDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 52, offset: 47437},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 65, offset: 47450},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 70, offset: 47455},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 78, offset: 47463},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1591, col: 1, offset: 47511},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 11, offset: 47521},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1591, col: 11, offset: 47521},
						name: "CounterIncrement",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 30, offset: 47540},
						name: "CounterSilentIncrement",
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1593, col: 1, offset: 47564},
			expr: &actionExpr{
				pos: position{line: 1593, col: 20, offset: 47583},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 20, offset: 47583},
					exprs: []any{
						&notExpr{
							pos: position{line: 1593, col: 20, offset: 47583},
							expr: &litMatcher{
								pos:        position{line: 1593, col: 21, offset: 47584},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 26, offset: 47589},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 38, offset: 47601},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 43, offset: 47606},
								name: "AttributeEntryName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 62, offset: 47625},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1593, col: 75, offset: 47638},
								expr: &ruleRefExpr{
									pos:  position{line: 1593, col: 76, offset: 47639},
									name: "CounterInitialValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 98, offset: 47661},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1597, col: 1, offset: 47762},
			expr: &actionExpr{
				pos: position{line: 1597, col: 26, offset: 47787},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 26, offset: 47787},
					exprs: []any{
						&notExpr{
							pos: position{line: 1597, col: 26, offset: 47787},
							expr: &litMatcher{
								pos:        position{line: 1597, col: 27, offset: 47788},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 32, offset: 47793},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 45, offset: 47806},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 50, offset: 47811},
								name: "AttributeEntryName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 69, offset: 47830},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1597, col: 82, offset: 47843},
								expr: &ruleRefExpr{
									pos:  position{line: 1597, col: 83, offset: 47844},
									name: "CounterInitialValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 105, offset: 47866},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1601, col: 1, offset: 47968},
			expr: &actionExpr{
				pos: position{line: 1601, col: 23, offset: 47990},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 23, offset: 47990},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1601, col: 23, offset: 47990},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 27, offset: 47994},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 40, offset: 48007},
								name: "CounterInitializer",
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1605, col: 1, offset: 48060},
			expr: &choiceExpr{
				pos: position{line: 1605, col: 23, offset: 48082},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1605, col: 23, offset: 48082},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:             position{line: 1605, col: 23, offset: 48082},
							val:             "[a-zA-Z]",
							ranges:          []rune{'a', 'z', 'A', 'Z'},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
					},
					&actionExpr{
						pos: position{line: 1608, col: 7, offset: 48138},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1608, col: 7, offset: 48138},
							expr: &charClassMatcher{
								pos:             position{line: 1608, col: 7, offset: 48138},
								val:             "[0-9]",
								ranges:          []rune{'0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1615, col: 1, offset: 48204},
			expr: &actionExpr{
				pos: position{line: 1615, col: 21, offset: 48224},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 21, offset: 48224},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1615, col: 21, offset: 48224},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 32, offset: 48235},
								expr: &ruleRefExpr{
									pos:  position{line: 1615, col: 33, offset: 48236},
									name: "FormatAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 53, offset: 48256},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1615, col: 59, offset: 48262},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1615, col: 59, offset: 48262},
										name: "InlineSinglePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1615, col: 85, offset: 48288},
										name: "InlineDoublePassthrough",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1619, col: 1, offset: 48434},
			expr: &actionExpr{
				pos: position{line: 1619, col: 27, offset: 48460},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 27, offset: 48460},
					exprs: []any{
						&notExpr{
							pos: position{line: 1619, col: 27, offset: 48460},
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 28, offset: 48461},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 35, offset: 48468},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1619, col: 39, offset: 48472},
							expr: &notExpr{
								pos: position{line: 1619, col: 41, offset: 48474},
								expr: &litMatcher{
									pos:        position{line: 1619, col: 42, offset: 48475},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 47, offset: 48480},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 54, offset: 48487},
								name: "SinglePassthroughTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 82, offset: 48515},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1619, col: 86, offset: 48519},
							expr: &litMatcher{
								pos:        position{line: 1619, col: 87, offset: 48520},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1619, col: 91, offset: 48524},
							expr: &notExpr{
								pos: position{line: 1619, col: 93, offset: 48526},
								expr: &ruleRefExpr{
									pos:  position{line: 1619, col: 94, offset: 48527},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1623, col: 1, offset: 48572},
			expr: &actionExpr{
				pos: position{line: 1623, col: 30, offset: 48601},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 30, offset: 48601},
					exprs: []any{
						&notExpr{
							pos: position{line: 1623, col: 30, offset: 48601},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 31, offset: 48602},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 33, offset: 48604},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1623, col: 39, offset: 48610},
								expr: &actionExpr{
									pos: position{line: 1623, col: 40, offset: 48611},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1623, col: 40, offset: 48611},
										exprs: []any{
											&notExpr{
												pos: position{line: 1623, col: 40, offset: 48611},
												expr: &ruleRefExpr{
													pos:  position{line: 1623, col: 41, offset: 48612},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1623, col: 43, offset: 48614},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1623, col: 49, offset: 48620},
													expr: &ruleRefExpr{
														pos:  position{line: 1623, col: 50, offset: 48621},
														name: "SinglePassthroughTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1627, col: 1, offset: 48802},
			expr: &actionExpr{
				pos: position{line: 1627, col: 32, offset: 48833},
				run: (*parser).callonSinglePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 32, offset: 48833},
					exprs: []any{
						&notExpr{
							pos: position{line: 1627, col: 32, offset: 48833},
							expr: &seqExpr{
								pos: position{line: 1627, col: 34, offset: 48835},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1627, col: 34, offset: 48835},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&notExpr{
										pos: position{line: 1627, col: 38, offset: 48839},
										expr: &litMatcher{
											pos:        position{line: 1627, col: 39, offset: 48840},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 44, offset: 48845},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 53, offset: 48854},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1631, col: 1, offset: 48909},
			expr: &actionExpr{
				pos: position{line: 1631, col: 27, offset: 48935},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 27, offset: 48935},
					exprs: []any{
						&notExpr{
							pos: position{line: 1631, col: 27, offset: 48935},
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 28, offset: 48936},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 41, offset: 48949},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 46, offset: 48954},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 53, offset: 48961},
								name: "DoublePassthroughTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 81, offset: 48989},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1635, col: 1, offset: 49026},
			expr: &actionExpr{
				pos: position{line: 1635, col: 30, offset: 49055},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 30, offset: 49055},
					exprs: []any{
						&notExpr{
							pos: position{line: 1635, col: 30, offset: 49055},
							expr: &ruleRefExpr{
								pos:  position{line: 1635, col: 31, offset: 49056},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1635, col: 33, offset: 49058},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1635, col: 39, offset: 49064},
								expr: &actionExpr{
									pos: position{line: 1635, col: 40, offset: 49065},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1635, col: 40, offset: 49065},
										exprs: []any{
											&notExpr{
												pos: position{line: 1635, col: 40, offset: 49065},
												expr: &ruleRefExpr{
													pos:  position{line: 1635, col: 41, offset: 49066},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1635, col: 43, offset: 49068},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1635, col: 49, offset: 49074},
													expr: &ruleRefExpr{
														pos:  position{line: 1635, col: 50, offset: 49075},
														name: "DoublePassthroughTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1639, col: 1, offset: 49268},
			expr: &actionExpr{
				pos: position{line: 1639, col: 32, offset: 49299},
				run: (*parser).callonDoublePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1639, col: 32, offset: 49299},
					exprs: []any{
						&notExpr{
							pos: position{line: 1639, col: 32, offset: 49299},
							expr: &litMatcher{
								pos:        position{line: 1639, col: 34, offset: 49301},
								val:        "++",
								ignoreCase: false,
								want:       "\"++\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1639, col: 40, offset: 49307},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1639, col: 49, offset: 49316},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1644, col: 1, offset: 49372},
			expr: &actionExpr{
				pos: position{line: 1644, col: 9, offset: 49380},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 9, offset: 49380},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1644, col: 9, offset: 49380},
							name: "IfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 24, offset: 49395},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 36, offset: 49407},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1644, col: 59, offset: 49430},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1644, col: 64, offset: 49435},
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 64, offset: 49435},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 1644, col: 68, offset: 49439},
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 69, offset: 49440},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1649, col: 1, offset: 49560},
			expr: &actionExpr{
				pos: position{line: 1649, col: 18, offset: 49577},
				run: (*parser).callonIfDefStatement1,
				expr: &litMatcher{
					pos:        position{line: 1649, col: 18, offset: 49577},
					val:        "ifdef::",
					ignoreCase: false,
					want:       "\"ifdef::\"",
				},
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1653, col: 1, offset: 49627},
			expr: &actionExpr{
				pos: position{line: 1653, col: 10, offset: 49636},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1653, col: 10, offset: 49636},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1653, col: 10, offset: 49636},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1653, col: 21, offset: 49647},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1653, col: 33, offset: 49659},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1653, col: 56, offset: 49682},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1653, col: 61, offset: 49687},
							expr: &ruleRefExpr{
								pos:  position{line: 1653, col: 61, offset: 49687},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 1653, col: 65, offset: 49691},
							expr: &ruleRefExpr{
								pos:  position{line: 1653, col: 66, offset: 49692},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1658, col: 1, offset: 49814},
			expr: &actionExpr{
				pos: position{line: 1658, col: 15, offset: 49828},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 15, offset: 49828},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1658, col: 15, offset: 49828},
							val:        "ifdef::",
							ignoreCase: false,
							want:       "\"ifdef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 25, offset: 49838},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 37, offset: 49850},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1658, col: 60, offset: 49873},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 64, offset: 49877},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 73, offset: 49886},
								name: "InlineConditionalContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1658, col: 99, offset: 49912},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1658, col: 103, offset: 49916},
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 103, offset: 49916},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1663, col: 1, offset: 50075},
			expr: &actionExpr{
				pos: position{line: 1663, col: 16, offset: 50090},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1663, col: 16, offset: 50090},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1663, col: 16, offset: 50090},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1663, col: 27, offset: 50101},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1663, col: 39, offset: 50113},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1663, col: 62, offset: 50136},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1663, col: 66, offset: 50140},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1663, col: 75, offset: 50149},
								name: "InlineConditionalContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1663, col: 101, offset: 50175},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1663, col: 105, offset: 50179},
							expr: &ruleRefExpr{
								pos:  position{line: 1663, col: 105, offset: 50179},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1668, col: 1, offset: 50340},
			expr: &actionExpr{
				pos: position{line: 1668, col: 12, offset: 50351},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 12, offset: 50351},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1668, col: 12, offset: 50351},
							name: "EndIfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 30, offset: 50369},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1668, col: 41, offset: 50380},
								expr: &ruleRefExpr{
									pos:  position{line: 1668, col: 42, offset: 50381},
									name: "ConditionalAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1668, col: 66, offset: 50405},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 72, offset: 50411},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 72, offset: 50411},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 1668, col: 75, offset: 50414},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 76, offset: 50415},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1678, col: 1, offset: 50702},
			expr: &actionExpr{
				pos: position{line: 1678, col: 21, offset: 50722},
				run: (*parser).callonEndIfDefStatement1,
				expr: &litMatcher{
					pos:        position{line: 1678, col: 21, offset: 50722},
					val:        "endif::",
					ignoreCase: false,
					want:       "\"endif::\"",
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1682, col: 1, offset: 50772},
			expr: &actionExpr{
				pos: position{line: 1682, col: 25, offset: 50796},
				run: (*parser).callonConditionalAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 1682, col: 25, offset: 50796},
					label: "attr",
					expr: &choiceExpr{
						pos: position{line: 1682, col: 31, offset: 50802},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1682, col: 31, offset: 50802},
								name: "ConditionalAttributesAny",
							},
							&ruleRefExpr{
								pos:  position{line: 1682, col: 58, offset: 50829},
								name: "ConditionalAttributesAll",
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1686, col: 1, offset: 50886},
			expr: &actionExpr{
				pos: position{line: 1686, col: 28, offset: 50913},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1686, col: 28, offset: 50913},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1686, col: 34, offset: 50919},
						expr: &actionExpr{
							pos: position{line: 1687, col: 5, offset: 50925},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1687, col: 5, offset: 50925},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1687, col: 5, offset: 50925},
										label: "name",
										expr: &ruleRefExpr{
											pos:  position{line: 1687, col: 10, offset: 50930},
											name: "AttributeEntryName",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1687, col: 29, offset: 50949},
										expr: &ruleRefExpr{
											pos:  position{line: 1687, col: 29, offset: 50949},
											name: "_",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1687, col: 32, offset: 50952},
										expr: &litMatcher{
											pos:        position{line: 1687, col: 32, offset: 50952},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1687, col: 37, offset: 50957},
										expr: &ruleRefExpr{
											pos:  position{line: 1687, col: 37, offset: 50957},
											name: "_",
										},
									},
									&andCodeExpr{
										pos: position{line: 1688, col: 5, offset: 50965},
										run: (*parser).callonConditionalAttributesAny14,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1698, col: 1, offset: 51226},
			expr: &actionExpr{
				pos: position{line: 1698, col: 28, offset: 51253},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1698, col: 28, offset: 51253},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1698, col: 34, offset: 51259},
						expr: &actionExpr{
							pos: position{line: 1699, col: 5, offset: 51265},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1699, col: 5, offset: 51265},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1699, col: 5, offset: 51265},
										label: "name",
										expr: &ruleRefExpr{
											pos:  position{line: 1699, col: 10, offset: 51270},
											name: "AttributeEntryName",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1699, col: 29, offset: 51289},
										expr: &ruleRefExpr{
											pos:  position{line: 1699, col: 29, offset: 51289},
											name: "_",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1699, col: 32, offset: 51292},
										expr: &litMatcher{
											pos:        position{line: 1699, col: 32, offset: 51292},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1699, col: 37, offset: 51297},
										expr: &ruleRefExpr{
											pos:  position{line: 1699, col: 37, offset: 51297},
											name: "_",
										},
									},
									&andCodeExpr{
										pos: position{line: 1700, col: 5, offset: 51305},
										run: (*parser).callonConditionalAttributesAll14,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1710, col: 1, offset: 51566},
			expr: &actionExpr{
				pos: position{line: 1710, col: 28, offset: 51593},
				run: (*parser).callonInlineConditionalContent1,
				expr: &labeledExpr{
					pos:   position{line: 1710, col: 28, offset: 51593},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 1710, col: 36, offset: 51601},
						expr: &actionExpr{
							pos: position{line: 1710, col: 37, offset: 51602},
							run: (*parser).callonInlineConditionalContent4,
							expr: &seqExpr{
								pos: position{line: 1710, col: 37, offset: 51602},
								exprs: []any{
									&notExpr{
										pos: position{line: 1710, col: 37, offset: 51602},
										expr: &litMatcher{
											pos:        position{line: 1710, col: 38, offset: 51603},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
									&labeledExpr{
										pos:   position{line: 1710, col: 42, offset: 51607},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 1710, col: 50, offset: 51615},
											name: "InlineElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1716, col: 1, offset: 51688},
			expr: &actionExpr{
				pos: position{line: 1716, col: 10, offset: 51697},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 10, offset: 51697},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1716, col: 10, offset: 51697},
							name: "IfEvalStatement",
						},
						&litMatcher{
							pos:        position{line: 1716, col: 26, offset: 51713},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1716, col: 30, offset: 51717},
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 30, offset: 51717},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 33, offset: 51720},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 39, offset: 51726},
								name: "IfEvalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1716, col: 52, offset: 51739},
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 52, offset: 51739},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 56, offset: 51743},
							label: "operand",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 65, offset: 51752},
								name: "IfEvalOperator",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1716, col: 81, offset: 51768},
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 81, offset: 51768},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 84, offset: 51771},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 91, offset: 51778},
								name: "IfEvalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1716, col: 104, offset: 51791},
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 104, offset: 51791},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 1716, col: 107, offset: 51794},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1716, col: 111, offset: 51798},
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 111, offset: 51798},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1720, col: 1, offset: 51946},
			expr: &actionExpr{
				pos: position{line: 1720, col: 19, offset: 51964},
				run: (*parser).callonIfEvalStatement1,
				expr: &litMatcher{
					pos:        position{line: 1720, col: 19, offset: 51964},
					val:        "ifeval::",
					ignoreCase: false,
					want:       "\"ifeval::\"",
				},
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1724, col: 1, offset: 52015},
			expr: &actionExpr{
				pos: position{line: 1724, col: 15, offset: 52029},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1724, col: 15, offset: 52029},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1724, col: 20, offset: 52034},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1724, col: 20, offset: 52034},
								name: "SingleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1724, col: 48, offset: 52062},
								name: "DoubleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1724, col: 76, offset: 52090},
								name: "NakedAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1735, col: 1, offset: 52530},
			expr: &choiceExpr{
				pos: position{line: 1736, col: 7, offset: 52554},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1736, col: 8, offset: 52555},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1736, col: 8, offset: 52555},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1737, col: 8, offset: 52618},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1737, col: 8, offset: 52618},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1738, col: 8, offset: 52684},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1738, col: 8, offset: 52684},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1739, col: 8, offset: 52750},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1739, col: 8, offset: 52750},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1740, col: 8, offset: 52823},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1740, col: 8, offset: 52823},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1741, col: 8, offset: 52892},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1741, col: 8, offset: 52892},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1744, col: 1, offset: 52963},
			expr: &actionExpr{
				pos: position{line: 1744, col: 20, offset: 52982},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1744, col: 21, offset: 52983},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1744, col: 21, offset: 52983},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1744, col: 27, offset: 52989},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1744, col: 33, offset: 52995},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1748, col: 1, offset: 53066},
			expr: &seqExpr{
				pos: position{line: 1748, col: 15, offset: 53080},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1748, col: 15, offset: 53080},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1748, col: 19, offset: 53084},
						expr: &notExpr{
							pos: position{line: 1748, col: 21, offset: 53086},
							expr: &litMatcher{
								pos:        position{line: 1748, col: 22, offset: 53087},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1750, col: 1, offset: 53093},
			expr: &choiceExpr{
				pos: position{line: 1750, col: 15, offset: 53107},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1750, col: 15, offset: 53107},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1750, col: 15, offset: 53107},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1750, col: 15, offset: 53107},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1750, col: 21, offset: 53113},
									expr: &charClassMatcher{
										pos:             position{line: 1750, col: 22, offset: 53114},
										val:             "[\\p{L}]",
										classes:         []*unicode.RangeTable{rangeTable("L")},
										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
										ignoreCase:      false,
										inverted:        false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1752, col: 9, offset: 53172},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1752, col: 9, offset: 53172},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1752, col: 9, offset: 53172},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1752, col: 13, offset: 53176},
									expr: &charClassMatcher{
										pos:             position{line: 1752, col: 14, offset: 53177},
										val:             "[\\p{L}]",
										classes:         []*unicode.RangeTable{rangeTable("L")},
										basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
										ignoreCase:      false,
										inverted:        false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1757, col: 1, offset: 53240},
			expr: &actionExpr{
				pos: position{line: 1757, col: 15, offset: 53254},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1757, col: 17, offset: 53256},
					alternatives: []any{
						&charClassMatcher{
							pos:             position{line: 1757, col: 18, offset: 53257},
							val:             "[,;.?)/:!=\"'@-[\\]]",
							chars:           []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:          []rune{'@', '['},
							basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
							ignoreCase:      false,
							inverted:        false,
						},
						&seqExpr{
							pos: position{line: 1757, col: 41, offset: 53280},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1757, col: 41, offset: 53280},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1757, col: 45, offset: 53284},
									expr: &litMatcher{
										pos:        position{line: 1757, col: 46, offset: 53285},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1761, col: 1, offset: 53352},
			expr: &actionExpr{
				pos: position{line: 1761, col: 13, offset: 53364},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1761, col: 13, offset: 53364},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1761, col: 13, offset: 53364},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1761, col: 17, offset: 53368},
							expr: &ruleRefExpr{
								pos:  position{line: 1761, col: 17, offset: 53368},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 1761, col: 20, offset: 53371},
							expr: &ruleRefExpr{
								pos:  position{line: 1761, col: 22, offset: 53373},
								name: "EndOfLine",
							},
						},
						&andCodeExpr{
							pos: position{line: 1761, col: 33, offset: 53384},
							run: (*parser).callonLineBreak8,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1767, col: 1, offset: 53485},
			expr: &choiceExpr{
				pos: position{line: 1767, col: 16, offset: 53500},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1767, col: 16, offset: 53500},
						name: "SingleCurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 1767, col: 36, offset: 53520},
						name: "DoubleCurvedQuote",
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1769, col: 1, offset: 53540},
			expr: &actionExpr{
				pos: position{line: 1769, col: 21, offset: 53560},
				run: (*parser).callonDoubleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1769, col: 22, offset: 53561},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1769, col: 22, offset: 53561},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&litMatcher{
							pos:        position{line: 1769, col: 30, offset: 53569},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1771, col: 1, offset: 53607},
			expr: &actionExpr{
				pos: position{line: 1771, col: 21, offset: 53627},
				run: (*parser).callonSingleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1771, col: 22, offset: 53628},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1771, col: 22, offset: 53628},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&litMatcher{
							pos:        position{line: 1771, col: 29, offset: 53635},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1773, col: 1, offset: 53672},
			expr: &actionExpr{
				pos: position{line: 1773, col: 13, offset: 53684},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 13, offset: 53684},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1773, col: 13, offset: 53684},
							name: "BeginningOfLine",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1773, col: 29, offset: 53700},
							expr: &ruleRefExpr{
								pos:  position{line: 1773, col: 29, offset: 53700},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 32, offset: 53703},
							name: "NewLine",
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1777, col: 1, offset: 53793},
			expr: &seqExpr{
				pos: position{line: 1777, col: 15, offset: 53807},
				exprs: []any{
					&notExpr{
						pos: position{line: 1777, col: 15, offset: 53807},
						expr: &litMatcher{
							pos:        position{line: 1777, col: 16, offset: 53808},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1777, col: 21, offset: 53813},
						name: "NewLine",
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1779, col: 1, offset: 53822},
			expr: &actionExpr{
				pos: position{line: 1779, col: 11, offset: 53832},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1779, col: 12, offset: 53833},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1779, col: 12, offset: 53833},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1779, col: 19, offset: 53840},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
						&litMatcher{
							pos:        position{line: 1779, col: 26, offset: 53847},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1783, col: 1, offset: 53909},
			expr: &actionExpr{
				pos: position{line: 1783, col: 15, offset: 53923},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1783, col: 15, offset: 53923},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1783, col: 15, offset: 53923},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:  position{line: 1783, col: 26, offset: 53934},
								name: "PositiveInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 1783, col: 42, offset: 53950},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1787, col: 1, offset: 53986},
			expr: &actionExpr{
				pos: position{line: 1787, col: 20, offset: 54005},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1787, col: 20, offset: 54005},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1787, col: 21, offset: 54006},
							expr: &charClassMatcher{
								pos:             position{line: 1787, col: 21, offset: 54006},
								val:             "[0-9]",
								ranges:          []rune{'0', '9'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1787, col: 29, offset: 54014},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1793, col: 1, offset: 54105},
			expr: &notExpr{
				pos: position{line: 1793, col: 14, offset: 54118},
				expr: &ruleRefExpr{
					pos:  position{line: 1793, col: 15, offset: 54119},
					name: "NewLine",
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1795, col: 1, offset: 54128},
			expr: &notExpr{
				pos: position{line: 1795, col: 12, offset: 54139},
				expr: &ruleRefExpr{
					pos:  position{line: 1795, col: 13, offset: 54140},
					name: "_",
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1797, col: 1, offset: 54143},
			expr: &charClassMatcher{
				pos:             position{line: 1797, col: 9, offset: 54151},
				val:             "[\\p{L}]",
				classes:         []*unicode.RangeTable{rangeTable("L")},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1799, col: 1, offset: 54160},
			expr: &charClassMatcher{
				pos:             position{line: 1799, col: 16, offset: 54175},
				val:             "[\\p{L}\\p{N}]",
				classes:         []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1801, col: 1, offset: 54189},
			expr: &actionExpr{
				pos: position{line: 1801, col: 13, offset: 54201},
				run: (*parser).callonEndOfFile1,
				expr: &notExpr{
					pos: position{line: 1801, col: 13, offset: 54201},
					expr: &anyMatcher{
						line: 1801, col: 14, offset: 54202,
					},
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1805, col: 1, offset: 54244},
			expr: &andExpr{
				pos: position{line: 1805, col: 16, offset: 54259},
				expr: &anyMatcher{
					line: 1805, col: 18, offset: 54261,
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1807, col: 1, offset: 54265},
			expr: &notExpr{
				pos: position{line: 1807, col: 19, offset: 54283},
				expr: &ruleRefExpr{
					pos:  position{line: 1807, col: 20, offset: 54284},
					name: "OffsetCharacter",
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1809, col: 1, offset: 54301},
			expr: &seqExpr{
				pos: position{line: 1809, col: 19, offset: 54319},
				exprs: []any{
					&anyMatcher{
						line: 1809, col: 19, offset: 54319,
					},
					&andCodeExpr{
						pos: position{line: 1809, col: 21, offset: 54321},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1813, col: 1, offset: 54369},
			expr: &actionExpr{
				pos: position{line: 1813, col: 10, offset: 54378},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1813, col: 10, offset: 54378},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 1813, col: 10, offset: 54378},
							expr: &ruleRefExpr{
								pos:  position{line: 1813, col: 10, offset: 54378},
								name: "_",
							},
						},
						&andExpr{
							pos: position{line: 1813, col: 13, offset: 54381},
							expr: &notExpr{
								pos: position{line: 1813, col: 15, offset: 54383},
								expr: &ruleRefExpr{
									pos:  position{line: 1813, col: 16, offset: 54384},
									name: "_",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1813, col: 19, offset: 54387},
							run: (*parser).callonIndent8,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1819, col: 1, offset: 54456},
			expr: &choiceExpr{
				pos: position{line: 1819, col: 13, offset: 54468},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1819, col: 13, offset: 54468},
						name: "NewLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1819, col: 23, offset: 54478},
						name: "EndOfFile",
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1821, col: 1, offset: 54489},
			expr: &labeledExpr{
				pos:   position{line: 1821, col: 14, offset: 54502},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1821, col: 20, offset: 54508},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1821, col: 20, offset: 54508},
						expr: &ruleRefExpr{
							pos:  position{line: 1821, col: 20, offset: 54508},
							name: "Alphanumeric",
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1823, col: 1, offset: 54554},
			expr: &actionExpr{
				pos: position{line: 1823, col: 16, offset: 54569},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1823, col: 16, offset: 54569},
					expr: &ruleRefExpr{
						pos:  position{line: 1823, col: 16, offset: 54569},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1827, col: 1, offset: 54631},
			expr: &actionExpr{
				pos: position{line: 1827, col: 11, offset: 54641},
				run: (*parser).callonAnyText1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1827, col: 11, offset: 54641},
					expr: &ruleRefExpr{
						pos:  position{line: 1827, col: 11, offset: 54641},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1831, col: 1, offset: 54703},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1831, col: 13, offset: 54715},
				expr: &charClassMatcher{
					pos:             position{line: 1831, col: 13, offset: 54715},
					val:             "[ \\t]",
					chars:           []rune{' ', '\t'},
					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
					ignoreCase:      false,
					inverted:        false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1833, col: 1, offset: 54724},
			expr: &actionExpr{
				pos: position{line: 1833, col: 21, offset: 54744},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1833, col: 22, offset: 54745},
					alternatives: []any{
						&anyMatcher{
							line: 1833, col: 22, offset: 54745,
						},
						&ruleRefExpr{
							pos:  position{line: 1833, col: 26, offset: 54749},
							name: "NewLine",
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1837, col: 1, offset: 54798},
			expr: &charClassMatcher{
				pos:             position{line: 1837, col: 24, offset: 54821},
				val:             "[^\\n]",
				chars:           []rune{'\n'},
				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
				ignoreCase:      false,
				inverted:        true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1839, col: 1, offset: 54829},
			expr: &actionExpr{
				pos: position{line: 1839, col: 22, offset: 54850},
				run: (*parser).callonCharacterGroupWord1,
				expr: &charClassMatcher{
					pos:             position{line: 1839, col: 22, offset: 54850},
					val:             "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
					classes:         []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
					ignoreCase:      false,
					inverted:        false,
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1843, col: 1, offset: 54951},
			expr: &actionExpr{
				pos: position{line: 1843, col: 6, offset: 54956},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1843, col: 6, offset: 54956},
					expr: &charClassMatcher{
						pos:             position{line: 1843, col: 6, offset: 54956},
						val:             "[ \\t]",
						chars:           []rune{' ', '\t'},
						basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
						ignoreCase:      false,
						inverted:        false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1847, col: 1, offset: 55003},
			expr: &actionExpr{
				pos: position{line: 1847, col: 5, offset: 55007},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:             position{line: 1847, col: 5, offset: 55007},
					val:             "[ \\t]",
					chars:           []rune{' ', '\t'},
					basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
					ignoreCase:      false,
					inverted:        false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1851, col: 1, offset: 55053},
			expr: &actionExpr{
				pos: position{line: 1851, col: 10, offset: 55062},
				run: (*parser).callonEscape1,
				expr: &litMatcher{
					pos:        position{line: 1851, col: 10, offset: 55062},
					val:        "\\",
					ignoreCase: false,
					want:       "\"\\\\\"",
				},
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1853, col: 1, offset: 55099},
			expr: &actionExpr{
				pos: position{line: 1853, col: 16, offset: 55114},
				run: (*parser).callonDoubleEscape1,
				expr: &litMatcher{
					pos:        position{line: 1853, col: 16, offset: 55114},
					val:        "\\\\",
					ignoreCase: false,
					want:       "\"\\\\\\\\\"",
				},
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["element"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onBlockElements1(blockElement any) (any, error) {
	return blockElement, nil
}

func (p *parser) callonBlockElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElements1(stack["blockElement"])
}

func (c *current) onNakedBlocks1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonNakedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlocks1(stack["block"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockAttributes4(anchor any) (any, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes4(stack["anchor"])
}

func (c *current) onBlockAttributes7(title any) (any, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["title"])
}

func (c *current) onBlockAttributes10(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes10(stack["attributes"])
}

func (c *current) onBlockAttributes13(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["attributes"])
}

func (c *current) onBlockAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attribute"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Set))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onBlockDelimiters1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiters1(stack["delimiter"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onSectionTitleValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSectionTitleValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleValue1(stack["element"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join[asciidoc.Element](flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset10(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset10(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Set)), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onShorthandAttributeValue1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonShorthandAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement2()
}

func (c *current) onSingleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonSingleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement8()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("\""), nil
}

func (p *parser) callonDoubleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement2()
}

func (c *current) onDoubleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonDoubleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement8()
}

func (c *current) onNakedAttributeValue10() (any, error) {
	// Stop on commas, equals, spaces or end bracket
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonNakedAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue10()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join[asciidoc.Element](flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReference1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReference1(stack["attribute"])
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onSingleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextElement1(stack["element"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextElement1(stack["element"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onSingleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextElement1(stack["element"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextElement1(stack["element"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onSubscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSubscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onSuperscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSuperscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onSingleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextElement1(stack["element"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(string), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(asciidoc.NewString(id.(string)), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAnchorLabel6() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonAnchorLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel6()
}

func (c *current) onAnchorLabel9(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonAnchorLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel9(stack["arv"])
}

func (c *current) onAnchorLabel12() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonAnchorLabel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel12()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onAdmonition14() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition14()
}

func (c *current) onAdmonition1(admonition any) (any, error) {
	return admonition, nil
}

func (p *parser) callonAdmonition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition1(stack["admonition"])
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onInlineElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFootnoteValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonFootnoteValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteValue1(stack["element"])
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Set)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Set)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableCellInlineContentElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonTableCellInlineContentElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContentElement1(stack["element"])
}

func (c *current) onTableEnd1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEnd1()
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonInitialBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonInitialBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonAdditionalBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonAdditionalBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Set{asciidoc.NewString(string(c.text))}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Set
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Set{asciidoc.EmptyLine{}}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onBlockTableCellLine1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonBlockTableCellLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLine1(stack["content"])
}

func (c *current) onBlockTableCellLastLine1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonBlockTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLastLine1(stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe[int](column, span.Column.Value)
	span.Row = asciidoc.Maybe[int](row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe[int](multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe[asciidoc.TableCellHorizontalAlign](horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe[asciidoc.TableCellVerticalAlign](verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe[asciidoc.TableCellStyle](style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURLScheme1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonURLScheme1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURLScheme1()
}

func (c *current) onURL1(scheme, path any) (any, error) {
	s, _ := scheme.(string)
	return compose(c, asciidoc.NewURL(s, path.(asciidoc.Set)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(scheme.(string), path.(asciidoc.Set)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onPathElement2() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement2()
}

func (c *current) onPathElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement5()
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onSingleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextElement1(stack["element"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextElement1(stack["element"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onPreParseLineElement2(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonPreParseLineElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement2(stack["arv"])
}

func (c *current) onPreParseLineElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonPreParseLineElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement5()
}

func (c *current) onPreParseLineElement8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPreParseLineElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement8()
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlock1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonAttachedBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlock1(stack["element"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return []any{&asciidoc.NewLine{}, element}, nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(string)), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceID1() (any, error) {

	// See: https://docs.asciidoctor.org/asciidoc/latest/attributes/id/#valid-id-characters
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1()
}

func (c *current) onCrossReferenceLabel3() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonCrossReferenceLabel3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel6(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonCrossReferenceLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel6(stack["arv"])
}

func (c *current) onCrossReferenceLabel9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onDocumentCrossReference1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewDocumentCrossReference(path.(asciidoc.Set)), setAttributes[*asciidoc.DocumentCrossReference](attributes))
}

func (p *parser) callonDocumentCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentCrossReference1(stack["path"], stack["attributes"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 5, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 5, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Set))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Set)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Set(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker6()
}

func (c *current) onDescriptionListMarker11(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker11(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onSinglePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSinglePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextElement1(stack["element"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onDoublePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoublePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextElement1(stack["element"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfDefStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIfDefStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefStatement1()
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onEndIfDefStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndIfDefStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDefStatement1()
}

func (c *current) onConditionalAttributes1(attr any) (any, error) {
	return attr, nil
}

func (p *parser) callonConditionalAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributes1(stack["attr"])
}

func (c *current) onConditionalAttributesAny14(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny14(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll14(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll14(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onInlineConditionalContent4(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineConditionalContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent4(stack["element"])
}

func (c *current) onInlineConditionalContent1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineConditionalContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent1(stack["content"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIfEvalStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalStatement1()
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak8() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak8()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onDoubleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleCurvedQuote1()
}

func (c *current) onSingleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCurvedQuote1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onEndOfFile1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndOfFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfFile1()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent8() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent8()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onAnyText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAnyText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) onCharacterGroupWord1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCharacterGroupWord1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterGroupWord1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

func (c *current) onEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscape1()
}

func (c *current) onDoubleEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleEscape1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
	delimitedBlockState delimitedBlockState
	parser *parser
	tableColumnsAttribute *asciidoc.TableColumnsAttribute
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
	offset position
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	if cur < 128 {
		if chr.basicLatinChars[cur] != chr.inverted {
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
