// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 99},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 110},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 110},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 110},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 118},
								expr: &ruleRefExpr{
									pos:    position{line: 14, col: 21, offset: 119},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 14, col: 31, offset: 129},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 184},
			expr: &choiceExpr{
				pos: position{line: 18, col: 12, offset: 195},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 18, col: 12, offset: 195},
						offset: 2,
					},
					&ruleRefExpr{
						pos:    position{line: 18, col: 27, offset: 210},
						offset: 76,
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 21, col: 1, offset: 228},
			expr: &actionExpr{
				pos: position{line: 21, col: 16, offset: 243},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 21, col: 16, offset: 243},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 21, col: 16, offset: 243},
							offset: 296,
						},
						&labeledExpr{
							pos:   position{line: 21, col: 32, offset: 259},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 21, col: 41, offset: 268},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 21, col: 56, offset: 283},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 22, col: 1, offset: 293},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 28, col: 1, offset: 392},
			expr: &choiceExpr{
				pos: position{line: 29, col: 5, offset: 414},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 29, col: 5, offset: 414},
						offset: 9,
					},
					&ruleRefExpr{
						pos:    position{line: 30, col: 5, offset: 435},
						offset: 5,
					},
					&ruleRefExpr{
						pos:    position{line: 31, col: 5, offset: 460},
						offset: 100,
					},
					&ruleRefExpr{
						pos:    position{line: 32, col: 5, offset: 472},
						offset: 4,
					},
					&ruleRefExpr{
						pos:    position{line: 33, col: 5, offset: 490},
						offset: 13,
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 36, col: 1, offset: 515},
			expr: &choiceExpr{
				pos: position{line: 37, col: 5, offset: 535},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 37, col: 5, offset: 535},
						offset: 244,
					},
					&ruleRefExpr{
						pos:    position{line: 38, col: 5, offset: 559},
						offset: 241,
					},
					&ruleRefExpr{
						pos:    position{line: 39, col: 5, offset: 583},
						offset: 18,
					},
					&ruleRefExpr{
						pos:    position{line: 40, col: 5, offset: 605},
						offset: 22,
					},
					&ruleRefExpr{
						pos:    position{line: 41, col: 5, offset: 626},
						offset: 262,
					},
					&ruleRefExpr{
						pos:    position{line: 42, col: 5, offset: 638},
						offset: 264,
					},
					&ruleRefExpr{
						pos:    position{line: 43, col: 5, offset: 652},
						offset: 273,
					},
					&ruleRefExpr{
						pos:    position{line: 44, col: 5, offset: 665},
						offset: 267,
					},
					&ruleRefExpr{
						pos:    position{line: 45, col: 5, offset: 680},
						offset: 89,
					},
					&ruleRefExpr{
						pos:    position{line: 46, col: 5, offset: 698},
						offset: 237,
					},
					&ruleRefExpr{
						pos:    position{line: 47, col: 5, offset: 724},
						offset: 201,
					},
					&ruleRefExpr{
						pos:    position{line: 48, col: 5, offset: 747},
						offset: 287,
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 51, col: 1, offset: 759},
			expr: &actionExpr{
				pos: position{line: 51, col: 22, offset: 780},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 51, col: 22, offset: 780},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 51, col: 22, offset: 780},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 51, col: 33, offset: 791},
								expr: &ruleRefExpr{
									pos:    position{line: 51, col: 34, offset: 792},
									offset: 12,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 51, col: 59, offset: 817},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 52, col: 5, offset: 832},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 52, col: 5, offset: 832},
										offset: 151,
									},
									&ruleRefExpr{
										pos:    position{line: 53, col: 5, offset: 847},
										offset: 157,
									},
									&ruleRefExpr{
										pos:    position{line: 54, col: 5, offset: 858},
										offset: 169,
									},
									&ruleRefExpr{
										pos:    position{line: 55, col: 5, offset: 872},
										offset: 181,
									},
									&ruleRefExpr{
										pos:    position{line: 56, col: 5, offset: 886},
										offset: 193,
									},
									&ruleRefExpr{
										pos:    position{line: 57, col: 5, offset: 898},
										offset: 175,
									},
									&ruleRefExpr{
										pos:    position{line: 58, col: 5, offset: 912},
										offset: 212,
									},
									&ruleRefExpr{
										pos:    position{line: 59, col: 5, offset: 923},
										offset: 15,
									},
									&ruleRefExpr{
										pos:    position{line: 60, col: 5, offset: 938},
										offset: 204,
									},
									&ruleRefExpr{
										pos:    position{line: 61, col: 5, offset: 958},
										offset: 205,
									},
									&ruleRefExpr{
										pos:    position{line: 62, col: 5, offset: 974},
										offset: 85,
									},
									&ruleRefExpr{
										pos:    position{line: 63, col: 5, offset: 991},
										offset: 232,
									},
									&ruleRefExpr{
										pos:    position{line: 64, col: 5, offset: 1014},
										offset: 234,
									},
									&ruleRefExpr{
										pos:    position{line: 65, col: 5, offset: 1039},
										offset: 237,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 66, col: 9, offset: 1068},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 79, col: 1, offset: 1467},
			expr: &choiceExpr{
				pos: position{line: 79, col: 19, offset: 1485},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 79, col: 19, offset: 1485},
						offset: 73,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 37, offset: 1503},
						offset: 7,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 50, offset: 1516},
						offset: 23,
					},
					&ruleRefExpr{
						pos:    position{line: 79, col: 63, offset: 1529},
						offset: 27,
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 81, col: 1, offset: 1550},
			expr: &actionExpr{
				pos: position{line: 81, col: 14, offset: 1563},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 81, col: 14, offset: 1563},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 81, col: 14, offset: 1563},
							offset: 296,
						},
						&litMatcher{
							pos:        position{line: 81, col: 30, offset: 1579},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 81, col: 34, offset: 1583},
							expr: &charClassMatcher{
								pos:        position{line: 81, col: 35, offset: 1584},
								val:        "[ .]",
								chars:      []rune{' ', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 40, offset: 1589},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 81, col: 49, offset: 1598},
								offset: 8,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 89, col: 1, offset: 1773},
			expr: &actionExpr{
				pos: position{line: 89, col: 21, offset: 1793},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 89, col: 21, offset: 1793},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 89, col: 29, offset: 1801},
						expr: &choiceExpr{
							pos: position{line: 89, col: 30, offset: 1802},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 89, col: 30, offset: 1802},
									offset: 78,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 48, offset: 1820},
									offset: 293,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 63, offset: 1835},
									offset: 308,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 67, offset: 1839},
									offset: 280,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 81, offset: 1853},
									offset: 41,
								},
								&ruleRefExpr{
									pos:    position{line: 89, col: 102, offset: 1874},
									offset: 305,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 93, col: 1, offset: 1941},
			expr: &actionExpr{
				pos: position{line: 93, col: 18, offset: 1958},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 93, col: 18, offset: 1958},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 93, col: 18, offset: 1958},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 93, col: 28, offset: 1968},
							expr: &ruleRefExpr{
								pos:    position{line: 93, col: 29, offset: 1969},
								offset: 287,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 97, col: 1, offset: 2047},
			expr: &actionExpr{
				pos: position{line: 97, col: 25, offset: 2071},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 97, col: 25, offset: 2071},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 97, col: 25, offset: 2071},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 97, col: 37, offset: 2083},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 97, col: 54, offset: 2100},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 97, col: 64, offset: 2110},
							expr: &ruleRefExpr{
								pos:    position{line: 97, col: 65, offset: 2111},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 101, col: 1, offset: 2157},
			expr: &actionExpr{
				pos: position{line: 101, col: 35, offset: 2191},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 101, col: 35, offset: 2191},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 101, col: 35, offset: 2191},
							offset: 287,
						},
						&labeledExpr{
							pos:   position{line: 101, col: 43, offset: 2199},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 101, col: 55, offset: 2211},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 101, col: 72, offset: 2228},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 101, col: 82, offset: 2238},
							expr: &ruleRefExpr{
								pos:    position{line: 101, col: 83, offset: 2239},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 105, col: 1, offset: 2285},
			expr: &actionExpr{
				pos: position{line: 105, col: 26, offset: 2310},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 105, col: 26, offset: 2310},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 105, col: 26, offset: 2310},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 105, col: 37, offset: 2321},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 60, offset: 2344},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 81, offset: 2365},
								expr: &ruleRefExpr{
									pos:    position{line: 105, col: 82, offset: 2366},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 105, col: 116, offset: 2400},
							offset: 299,
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 126, offset: 2410},
							expr: &ruleRefExpr{
								pos:    position{line: 105, col: 126, offset: 2410},
								offset: 285,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 113, col: 1, offset: 2627},
			expr: &actionExpr{
				pos: position{line: 113, col: 24, offset: 2650},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 113, col: 24, offset: 2650},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 113, col: 24, offset: 2650},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 113, col: 35, offset: 2661},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 58, offset: 2684},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 79, offset: 2705},
								expr: &ruleRefExpr{
									pos:    position{line: 113, col: 80, offset: 2706},
									offset: 11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 125, col: 1, offset: 3048},
			expr: &seqExpr{
				pos: position{line: 126, col: 5, offset: 3071},
				exprs: []any{
					&notExpr{
						pos: position{line: 126, col: 5, offset: 3071},
						expr: &ruleRefExpr{
							pos:    position{line: 126, col: 6, offset: 3072},
							offset: 293,
						},
					},
					&choiceExpr{
						pos: position{line: 128, col: 9, offset: 3102},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 128, col: 9, offset: 3102},
								offset: 247,
							},
							&ruleRefExpr{
								pos:    position{line: 129, col: 11, offset: 3143},
								offset: 172,
							},
							&ruleRefExpr{
								pos:    position{line: 130, col: 11, offset: 3167},
								offset: 209,
							},
							&ruleRefExpr{
								pos:    position{line: 131, col: 11, offset: 3193},
								offset: 154,
							},
							&ruleRefExpr{
								pos:    position{line: 132, col: 11, offset: 3218},
								offset: 178,
							},
							&ruleRefExpr{
								pos:    position{line: 133, col: 11, offset: 3240},
								offset: 215,
							},
							&ruleRefExpr{
								pos:    position{line: 134, col: 11, offset: 3261},
								offset: 196,
							},
							&ruleRefExpr{
								pos:    position{line: 135, col: 11, offset: 3287},
								offset: 184,
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 138, col: 1, offset: 3311},
			expr: &actionExpr{
				pos: position{line: 138, col: 11, offset: 3321},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 138, col: 11, offset: 3321},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 138, col: 11, offset: 3321},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 138, col: 18, offset: 3328},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 18, offset: 3328},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 18, offset: 3328},
										val:        "[=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 141, col: 5, offset: 3387},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:    position{line: 144, col: 5, offset: 3444},
							offset: 307,
						},
						&labeledExpr{
							pos:   position{line: 144, col: 8, offset: 3447},
							label: "title",
							expr: &ruleRefExpr{
								pos:    position{line: 144, col: 15, offset: 3454},
								offset: 16,
							},
						},
						&andExpr{
							pos: position{line: 144, col: 29, offset: 3468},
							expr: &ruleRefExpr{
								pos:    position{line: 144, col: 30, offset: 3469},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 148, col: 1, offset: 3584},
			expr: &oneOrMoreExpr{
				pos: position{line: 148, col: 16, offset: 3599},
				expr: &ruleRefExpr{
					pos:    position{line: 148, col: 17, offset: 3600},
					offset: 17,
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 150, col: 1, offset: 3621},
			expr: &seqExpr{
				pos: position{line: 150, col: 21, offset: 3641},
				exprs: []any{
					&notExpr{
						pos: position{line: 150, col: 21, offset: 3641},
						expr: &ruleRefExpr{
							pos:    position{line: 150, col: 22, offset: 3642},
							offset: 299,
						},
					},
					&choiceExpr{
						pos: position{line: 151, col: 5, offset: 3658},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 151, col: 5, offset: 3658},
								offset: 301,
							},
							&ruleRefExpr{
								pos:    position{line: 152, col: 7, offset: 3678},
								offset: 307,
							},
							&ruleRefExpr{
								pos:    position{line: 153, col: 7, offset: 3688},
								offset: 279,
							},
							&ruleRefExpr{
								pos:    position{line: 154, col: 7, offset: 3706},
								offset: 280,
							},
							&ruleRefExpr{
								pos:    position{line: 155, col: 7, offset: 3726},
								offset: 82,
							},
							&ruleRefExpr{
								pos:    position{line: 156, col: 7, offset: 3746},
								offset: 255,
							},
							&ruleRefExpr{
								pos:    position{line: 157, col: 7, offset: 3770},
								offset: 95,
							},
							&ruleRefExpr{
								pos:    position{line: 158, col: 7, offset: 3782},
								offset: 277,
							},
							&ruleRefExpr{
								pos:    position{line: 159, col: 7, offset: 3806},
								offset: 88,
							},
							&ruleRefExpr{
								pos:    position{line: 160, col: 7, offset: 3818},
								offset: 41,
							},
							&ruleRefExpr{
								pos:    position{line: 161, col: 7, offset: 3844},
								offset: 72,
							},
							&ruleRefExpr{
								pos:    position{line: 163, col: 7, offset: 3873},
								offset: 305,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 166, col: 1, offset: 3898},
			expr: &actionExpr{
				pos: position{line: 166, col: 18, offset: 3915},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 166, col: 18, offset: 3915},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 166, col: 18, offset: 3915},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 22, offset: 3919},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 166, col: 28, offset: 3925},
								offset: 19,
							},
						},
						&litMatcher{
							pos:        position{line: 166, col: 48, offset: 3945},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:    position{line: 166, col: 52, offset: 3949},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 166, col: 62, offset: 3959},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 166, col: 69, offset: 3966},
								offset: 20,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 170, col: 1, offset: 4110},
			expr: &actionExpr{
				pos: position{line: 170, col: 22, offset: 4131},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 170, col: 22, offset: 4131},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 170, col: 22, offset: 4131},
							offset: 306,
						},
						&zeroOrMoreExpr{
							pos: position{line: 170, col: 41, offset: 4150},
							expr: &choiceExpr{
								pos: position{line: 170, col: 42, offset: 4151},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 170, col: 42, offset: 4151},
										offset: 306,
									},
									&litMatcher{
										pos:        position{line: 170, col: 63, offset: 4172},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 174, col: 1, offset: 4218},
			expr: &actionExpr{
				pos: position{line: 174, col: 26, offset: 4243},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 174, col: 26, offset: 4243},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 174, col: 32, offset: 4249},
						expr: &ruleRefExpr{
							pos:    position{line: 174, col: 32, offset: 4249},
							offset: 21,
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 178, col: 1, offset: 4343},
			expr: &choiceExpr{
				pos: position{line: 178, col: 26, offset: 4368},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 178, col: 26, offset: 4368},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 178, col: 26, offset: 4368},
								offset: 281,
							},
							&ruleRefExpr{
								pos:    position{line: 178, col: 36, offset: 4378},
								offset: 299,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 178, col: 48, offset: 4390},
						offset: 305,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 180, col: 1, offset: 4414},
			expr: &choiceExpr{
				pos: position{line: 180, col: 18, offset: 4431},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 180, col: 18, offset: 4431},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 180, col: 18, offset: 4431},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 180, col: 18, offset: 4431},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 180, col: 23, offset: 4436},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 180, col: 29, offset: 4442},
										offset: 19,
									},
								},
								&litMatcher{
									pos:        position{line: 180, col: 49, offset: 4462},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:    position{line: 180, col: 53, offset: 4466},
									offset: 303,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 4548},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 4548},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 182, col: 5, offset: 4548},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 182, col: 9, offset: 4552},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 182, col: 15, offset: 4558},
										offset: 19,
									},
								},
								&litMatcher{
									pos:        position{line: 182, col: 35, offset: 4578},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:    position{line: 182, col: 40, offset: 4583},
									offset: 303,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 187, col: 1, offset: 4743},
			expr: &actionExpr{
				pos: position{line: 187, col: 14, offset: 4756},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 187, col: 14, offset: 4756},
					exprs: []any{
						&notExpr{
							pos: position{line: 187, col: 14, offset: 4756},
							expr: &litMatcher{
								pos:        position{line: 187, col: 15, offset: 4757},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 187, col: 20, offset: 4762},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 187, col: 24, offset: 4766},
							expr: &litMatcher{
								pos:        position{line: 187, col: 25, offset: 4767},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 187, col: 29, offset: 4771},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 187, col: 41, offset: 4783},
								offset: 24,
							},
						},
						&litMatcher{
							pos:        position{line: 187, col: 56, offset: 4798},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 192, col: 1, offset: 4840},
			expr: &actionExpr{
				pos: position{line: 192, col: 17, offset: 4856},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 17, offset: 4856},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 192, col: 28, offset: 4867},
						expr: &ruleRefExpr{
							pos:    position{line: 192, col: 29, offset: 4868},
							offset: 25,
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 196, col: 1, offset: 4953},
			expr: &actionExpr{
				pos: position{line: 196, col: 21, offset: 4973},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 196, col: 21, offset: 4973},
					exprs: []any{
						&notExpr{
							pos: position{line: 196, col: 21, offset: 4973},
							expr: &litMatcher{
								pos:        position{line: 196, col: 22, offset: 4974},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 196, col: 26, offset: 4978},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 196, col: 36, offset: 4988},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 196, col: 47, offset: 4999},
								offset: 26,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 196, col: 58, offset: 5010},
							offset: 303,
						},
						&zeroOrOneExpr{
							pos: position{line: 196, col: 68, offset: 5020},
							expr: &litMatcher{
								pos:        position{line: 196, col: 68, offset: 5020},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 200, col: 1, offset: 5056},
			expr: &actionExpr{
				pos: position{line: 200, col: 13, offset: 5068},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 200, col: 13, offset: 5068},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 200, col: 13, offset: 5068},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 200, col: 18, offset: 5073},
								expr: &actionExpr{
									pos: position{line: 200, col: 20, offset: 5075},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 200, col: 21, offset: 5076},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 200, col: 21, offset: 5076},
												label: "name",
												expr: &ruleRefExpr{
													pos:    position{line: 200, col: 27, offset: 5082},
													offset: 40,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 200, col: 47, offset: 5102},
												offset: 303,
											},
											&litMatcher{
												pos:        position{line: 200, col: 57, offset: 5112},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:    position{line: 200, col: 61, offset: 5116},
												offset: 303,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 200, col: 95, offset: 5150},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 200, col: 102, offset: 5157},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 200, col: 102, offset: 5157},
										offset: 34,
									},
									&ruleRefExpr{
										pos:    position{line: 200, col: 130, offset: 5185},
										offset: 36,
									},
									&ruleRefExpr{
										pos:    position{line: 200, col: 158, offset: 5213},
										offset: 38,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 207, col: 1, offset: 5469},
			expr: &actionExpr{
				pos: position{line: 207, col: 23, offset: 5491},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 207, col: 23, offset: 5491},
					exprs: []any{
						&notExpr{
							pos: position{line: 207, col: 23, offset: 5491},
							expr: &litMatcher{
								pos:        position{line: 207, col: 24, offset: 5492},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 29, offset: 5497},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 207, col: 33, offset: 5501},
							expr: &litMatcher{
								pos:        position{line: 207, col: 34, offset: 5502},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 38, offset: 5506},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 207, col: 49, offset: 5517},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 69, offset: 5537},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 211, col: 1, offset: 5577},
			expr: &actionExpr{
				pos: position{line: 211, col: 22, offset: 5598},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 211, col: 22, offset: 5598},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 211, col: 22, offset: 5598},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 28, offset: 5604},
								expr: &ruleRefExpr{
									pos:    position{line: 211, col: 29, offset: 5605},
									offset: 33,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 211, col: 55, offset: 5631},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 211, col: 62, offset: 5638},
								expr: &choiceExpr{
									pos: position{line: 211, col: 63, offset: 5639},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 211, col: 63, offset: 5639},
											offset: 30,
										},
										&ruleRefExpr{
											pos:    position{line: 211, col: 77, offset: 5653},
											offset: 31,
										},
										&ruleRefExpr{
											pos:    position{line: 211, col: 93, offset: 5669},
											offset: 32,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 215, col: 1, offset: 5757},
			expr: &actionExpr{
				pos: position{line: 215, col: 18, offset: 5774},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 215, col: 18, offset: 5774},
					label: "value",
					expr: &ruleRefExpr{
						pos:    position{line: 215, col: 24, offset: 5780},
						offset: 33,
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 219, col: 1, offset: 5874},
			expr: &actionExpr{
				pos: position{line: 219, col: 15, offset: 5888},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 15, offset: 5888},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 219, col: 15, offset: 5888},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 19, offset: 5892},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 219, col: 25, offset: 5898},
								offset: 33,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 223, col: 1, offset: 5992},
			expr: &actionExpr{
				pos: position{line: 223, col: 17, offset: 6008},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 223, col: 17, offset: 6008},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 6008},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 21, offset: 6012},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 223, col: 27, offset: 6018},
								offset: 33,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 227, col: 1, offset: 6114},
			expr: &actionExpr{
				pos: position{line: 227, col: 19, offset: 6132},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 227, col: 19, offset: 6132},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 227, col: 19, offset: 6132},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 23, offset: 6136},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 227, col: 29, offset: 6142},
								offset: 33,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 231, col: 1, offset: 6240},
			expr: &choiceExpr{
				pos: position{line: 231, col: 28, offset: 6267},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 231, col: 28, offset: 6267},
						exprs: []any{
							&notExpr{
								pos: position{line: 231, col: 28, offset: 6267},
								expr: &litMatcher{
									pos:        position{line: 231, col: 29, offset: 6268},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
							&notExpr{
								pos: position{line: 231, col: 33, offset: 6272},
								expr: &litMatcher{
									pos:        position{line: 231, col: 34, offset: 6273},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
							},
							&notExpr{
								pos: position{line: 231, col: 38, offset: 6277},
								expr: &litMatcher{
									pos:        position{line: 231, col: 39, offset: 6278},
									val:        "%",
									ignoreCase: false,
									want:       "\"%\"",
								},
							},
							&ruleRefExpr{
								pos:    position{line: 231, col: 43, offset: 6282},
								offset: 34,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 231, col: 71, offset: 6310},
						offset: 36,
					},
					&ruleRefExpr{
						pos:    position{line: 231, col: 99, offset: 6338},
						offset: 38,
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 233, col: 1, offset: 6360},
			expr: &actionExpr{
				pos: position{line: 233, col: 29, offset: 6388},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 233, col: 29, offset: 6388},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 233, col: 29, offset: 6388},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 33, offset: 6392},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 233, col: 39, offset: 6398},
								expr: &ruleRefExpr{
									pos:    position{line: 233, col: 40, offset: 6399},
									offset: 35,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 75, offset: 6434},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 237, col: 1, offset: 6543},
			expr: &choiceExpr{
				pos: position{line: 238, col: 5, offset: 6584},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 6584},
						run: (*parser).callonSingleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 238, col: 5, offset: 6584},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 239, col: 5, offset: 6637},
						offset: 293,
					},
					&ruleRefExpr{
						pos:    position{line: 240, col: 5, offset: 6657},
						offset: 308,
					},
					&ruleRefExpr{
						pos:    position{line: 241, col: 5, offset: 6666},
						offset: 282,
					},
					&ruleRefExpr{
						pos:    position{line: 242, col: 5, offset: 6685},
						offset: 41,
					},
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 6710},
						run: (*parser).callonSingleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 243, col: 5, offset: 6710},
							expr: &charClassMatcher{
								pos:        position{line: 243, col: 5, offset: 6710},
								val:        "[^\\r\\n\\\\' ]",
								chars:      []rune{'\r', '\n', '\\', '\'', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 248, col: 1, offset: 6789},
			expr: &actionExpr{
				pos: position{line: 248, col: 29, offset: 6817},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 248, col: 29, offset: 6817},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 248, col: 29, offset: 6817},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 34, offset: 6822},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 248, col: 40, offset: 6828},
								expr: &ruleRefExpr{
									pos:    position{line: 248, col: 41, offset: 6829},
									offset: 37,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 248, col: 76, offset: 6864},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 252, col: 1, offset: 6974},
			expr: &choiceExpr{
				pos: position{line: 253, col: 5, offset: 7015},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 7015},
						run: (*parser).callonDoubleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 253, col: 5, offset: 7015},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 254, col: 5, offset: 7071},
						offset: 293,
					},
					&ruleRefExpr{
						pos:    position{line: 255, col: 5, offset: 7091},
						offset: 308,
					},
					&ruleRefExpr{
						pos:    position{line: 256, col: 5, offset: 7100},
						offset: 282,
					},
					&ruleRefExpr{
						pos:    position{line: 257, col: 5, offset: 7118},
						offset: 41,
					},
					&actionExpr{
						pos: position{line: 258, col: 5, offset: 7143},
						run: (*parser).callonDoubleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 258, col: 5, offset: 7143},
							expr: &charClassMatcher{
								pos:        position{line: 258, col: 5, offset: 7143},
								val:        "[^\\r\\n\\\\\" ]",
								chars:      []rune{'\r', '\n', '\\', '"', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 263, col: 1, offset: 7222},
			expr: &actionExpr{
				pos: position{line: 263, col: 23, offset: 7244},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 263, col: 23, offset: 7244},
					exprs: []any{
						&notExpr{
							pos: position{line: 263, col: 23, offset: 7244},
							expr: &ruleRefExpr{
								pos:    position{line: 263, col: 24, offset: 7245},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 263, col: 26, offset: 7247},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 263, col: 32, offset: 7253},
								expr: &choiceExpr{
									pos: position{line: 264, col: 5, offset: 7259},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 264, col: 5, offset: 7259},
											offset: 41,
										},
										&ruleRefExpr{
											pos:    position{line: 265, col: 5, offset: 7285},
											offset: 308,
										},
										&actionExpr{
											pos: position{line: 266, col: 5, offset: 7294},
											run: (*parser).callonNakedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 266, col: 5, offset: 7294},
												expr: &charClassMatcher{
													pos:        position{line: 266, col: 5, offset: 7294},
													val:        "[^=\\], ]",
													chars:      []rune{'=', ']', ',', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 273, col: 1, offset: 7507},
			expr: &actionExpr{
				pos: position{line: 273, col: 20, offset: 7526},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 20, offset: 7526},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 273, col: 20, offset: 7526},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 24, offset: 7530},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 273, col: 36, offset: 7542},
								offset: 24,
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 51, offset: 7557},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 277, col: 1, offset: 7597},
			expr: &actionExpr{
				pos: position{line: 277, col: 22, offset: 7618},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 277, col: 22, offset: 7618},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 277, col: 22, offset: 7618},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 35, offset: 7631},
							expr: &charClassMatcher{
								pos:        position{line: 277, col: 35, offset: 7631},
								val:        "[A-Za-z0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 281, col: 1, offset: 7686},
			expr: &choiceExpr{
				pos: position{line: 281, col: 22, offset: 7707},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 281, col: 22, offset: 7707},
						offset: 42,
					},
					&ruleRefExpr{
						pos:    position{line: 281, col: 48, offset: 7733},
						offset: 250,
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 283, col: 1, offset: 7742},
			expr: &actionExpr{
				pos: position{line: 283, col: 27, offset: 7768},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 283, col: 27, offset: 7768},
					exprs: []any{
						&notExpr{
							pos: position{line: 283, col: 27, offset: 7768},
							expr: &litMatcher{
								pos:        position{line: 283, col: 28, offset: 7769},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 33, offset: 7774},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 37, offset: 7778},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 283, col: 42, offset: 7783},
								offset: 19,
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 61, offset: 7802},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 291, col: 1, offset: 7898},
			expr: &choiceExpr{
				pos: position{line: 291, col: 13, offset: 7910},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 291, col: 13, offset: 7910},
						offset: 44,
					},
					&ruleRefExpr{
						pos:    position{line: 291, col: 30, offset: 7927},
						offset: 47,
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 293, col: 1, offset: 7944},
			expr: &actionExpr{
				pos: position{line: 293, col: 18, offset: 7961},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 293, col: 18, offset: 7961},
					exprs: []any{
						&notExpr{
							pos: position{line: 293, col: 18, offset: 7961},
							expr: &ruleRefExpr{
								pos:    position{line: 293, col: 19, offset: 7962},
								offset: 309,
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 26, offset: 7969},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 293, col: 30, offset: 7973},
							expr: &notExpr{
								pos: position{line: 293, col: 32, offset: 7975},
								expr: &litMatcher{
									pos:        position{line: 293, col: 33, offset: 7976},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 38, offset: 7981},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 293, col: 45, offset: 7988},
								offset: 45,
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 66, offset: 8009},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 293, col: 70, offset: 8013},
							expr: &litMatcher{
								pos:        position{line: 293, col: 71, offset: 8014},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 293, col: 75, offset: 8018},
							expr: &notExpr{
								pos: position{line: 293, col: 77, offset: 8020},
								expr: &ruleRefExpr{
									pos:    position{line: 293, col: 78, offset: 8021},
									offset: 293,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 297, col: 1, offset: 8066},
			expr: &actionExpr{
				pos: position{line: 297, col: 23, offset: 8088},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 297, col: 23, offset: 8088},
					exprs: []any{
						&notExpr{
							pos: position{line: 297, col: 23, offset: 8088},
							expr: &ruleRefExpr{
								pos:    position{line: 297, col: 24, offset: 8089},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 26, offset: 8091},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 297, col: 32, offset: 8097},
								expr: &actionExpr{
									pos: position{line: 297, col: 33, offset: 8098},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 297, col: 33, offset: 8098},
										exprs: []any{
											&notExpr{
												pos: position{line: 297, col: 33, offset: 8098},
												expr: &ruleRefExpr{
													pos:    position{line: 297, col: 34, offset: 8099},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 297, col: 36, offset: 8101},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 297, col: 42, offset: 8107},
													expr: &ruleRefExpr{
														pos:    position{line: 297, col: 43, offset: 8108},
														offset: 46,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 301, col: 1, offset: 8256},
			expr: &seqExpr{
				pos: position{line: 301, col: 25, offset: 8280},
				exprs: []any{
					&notExpr{
						pos: position{line: 301, col: 25, offset: 8280},
						expr: &seqExpr{
							pos: position{line: 301, col: 27, offset: 8282},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 301, col: 27, offset: 8282},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 301, col: 31, offset: 8286},
									expr: &litMatcher{
										pos:        position{line: 301, col: 32, offset: 8287},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 301, col: 37, offset: 8292},
						offset: 83,
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 303, col: 1, offset: 8314},
			expr: &actionExpr{
				pos: position{line: 303, col: 18, offset: 8331},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 303, col: 18, offset: 8331},
					exprs: []any{
						&notExpr{
							pos: position{line: 303, col: 18, offset: 8331},
							expr: &ruleRefExpr{
								pos:    position{line: 303, col: 19, offset: 8332},
								offset: 310,
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 32, offset: 8345},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 37, offset: 8350},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 303, col: 44, offset: 8357},
								offset: 48,
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 65, offset: 8378},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 307, col: 1, offset: 8415},
			expr: &actionExpr{
				pos: position{line: 307, col: 23, offset: 8437},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 307, col: 23, offset: 8437},
					exprs: []any{
						&notExpr{
							pos: position{line: 307, col: 23, offset: 8437},
							expr: &ruleRefExpr{
								pos:    position{line: 307, col: 24, offset: 8438},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 26, offset: 8440},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 307, col: 32, offset: 8446},
								expr: &actionExpr{
									pos: position{line: 307, col: 33, offset: 8447},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 307, col: 33, offset: 8447},
										exprs: []any{
											&notExpr{
												pos: position{line: 307, col: 33, offset: 8447},
												expr: &ruleRefExpr{
													pos:    position{line: 307, col: 34, offset: 8448},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 307, col: 36, offset: 8450},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 307, col: 42, offset: 8456},
													expr: &ruleRefExpr{
														pos:    position{line: 307, col: 43, offset: 8457},
														offset: 49,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 311, col: 1, offset: 8617},
			expr: &seqExpr{
				pos: position{line: 311, col: 25, offset: 8641},
				exprs: []any{
					&notExpr{
						pos: position{line: 311, col: 25, offset: 8641},
						expr: &litMatcher{
							pos:        position{line: 311, col: 27, offset: 8643},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 311, col: 33, offset: 8649},
						offset: 83,
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 314, col: 1, offset: 8672},
			expr: &choiceExpr{
				pos: position{line: 314, col: 15, offset: 8686},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 314, col: 15, offset: 8686},
						offset: 51,
					},
					&ruleRefExpr{
						pos:    position{line: 314, col: 34, offset: 8705},
						offset: 54,
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 316, col: 1, offset: 8724},
			expr: &actionExpr{
				pos: position{line: 316, col: 20, offset: 8743},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 316, col: 20, offset: 8743},
					exprs: []any{
						&notExpr{
							pos: position{line: 316, col: 20, offset: 8743},
							expr: &ruleRefExpr{
								pos:    position{line: 316, col: 21, offset: 8744},
								offset: 309,
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 28, offset: 8751},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 316, col: 32, offset: 8755},
							expr: &notExpr{
								pos: position{line: 316, col: 34, offset: 8757},
								expr: &litMatcher{
									pos:        position{line: 316, col: 35, offset: 8758},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 40, offset: 8763},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 316, col: 47, offset: 8770},
								offset: 52,
							},
						},
						&litMatcher{
							pos:        position{line: 316, col: 70, offset: 8793},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 316, col: 74, offset: 8797},
							expr: &litMatcher{
								pos:        position{line: 316, col: 75, offset: 8798},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 316, col: 79, offset: 8802},
							expr: &notExpr{
								pos: position{line: 316, col: 81, offset: 8804},
								expr: &ruleRefExpr{
									pos:    position{line: 316, col: 82, offset: 8805},
									offset: 293,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 320, col: 1, offset: 8850},
			expr: &actionExpr{
				pos: position{line: 320, col: 25, offset: 8874},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 320, col: 25, offset: 8874},
					exprs: []any{
						&notExpr{
							pos: position{line: 320, col: 25, offset: 8874},
							expr: &ruleRefExpr{
								pos:    position{line: 320, col: 26, offset: 8875},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 28, offset: 8877},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 320, col: 34, offset: 8883},
								expr: &actionExpr{
									pos: position{line: 320, col: 35, offset: 8884},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 320, col: 35, offset: 8884},
										exprs: []any{
											&notExpr{
												pos: position{line: 320, col: 35, offset: 8884},
												expr: &ruleRefExpr{
													pos:    position{line: 320, col: 36, offset: 8885},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 320, col: 38, offset: 8887},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 320, col: 44, offset: 8893},
													expr: &ruleRefExpr{
														pos:    position{line: 320, col: 45, offset: 8894},
														offset: 53,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 324, col: 1, offset: 9008},
			expr: &seqExpr{
				pos: position{line: 324, col: 27, offset: 9034},
				exprs: []any{
					&notExpr{
						pos: position{line: 324, col: 27, offset: 9034},
						expr: &seqExpr{
							pos: position{line: 324, col: 29, offset: 9036},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 324, col: 29, offset: 9036},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 324, col: 33, offset: 9040},
									expr: &litMatcher{
										pos:        position{line: 324, col: 34, offset: 9041},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 324, col: 39, offset: 9046},
						offset: 83,
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 326, col: 1, offset: 9068},
			expr: &actionExpr{
				pos: position{line: 326, col: 20, offset: 9087},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 326, col: 20, offset: 9087},
					exprs: []any{
						&notExpr{
							pos: position{line: 326, col: 20, offset: 9087},
							expr: &ruleRefExpr{
								pos:    position{line: 326, col: 21, offset: 9088},
								offset: 310,
							},
						},
						&litMatcher{
							pos:        position{line: 326, col: 34, offset: 9101},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 39, offset: 9106},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 326, col: 46, offset: 9113},
								offset: 55,
							},
						},
						&litMatcher{
							pos:        position{line: 326, col: 69, offset: 9136},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 330, col: 1, offset: 9173},
			expr: &actionExpr{
				pos: position{line: 330, col: 25, offset: 9197},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 330, col: 25, offset: 9197},
					exprs: []any{
						&notExpr{
							pos: position{line: 330, col: 25, offset: 9197},
							expr: &ruleRefExpr{
								pos:    position{line: 330, col: 26, offset: 9198},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 28, offset: 9200},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 330, col: 34, offset: 9206},
								expr: &actionExpr{
									pos: position{line: 330, col: 35, offset: 9207},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 330, col: 35, offset: 9207},
										exprs: []any{
											&notExpr{
												pos: position{line: 330, col: 35, offset: 9207},
												expr: &ruleRefExpr{
													pos:    position{line: 330, col: 36, offset: 9208},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 330, col: 38, offset: 9210},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 330, col: 44, offset: 9216},
													expr: &ruleRefExpr{
														pos:    position{line: 330, col: 45, offset: 9217},
														offset: 56,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 334, col: 1, offset: 9337},
			expr: &seqExpr{
				pos: position{line: 334, col: 27, offset: 9363},
				exprs: []any{
					&notExpr{
						pos: position{line: 334, col: 27, offset: 9363},
						expr: &litMatcher{
							pos:        position{line: 334, col: 29, offset: 9365},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 334, col: 35, offset: 9371},
						offset: 83,
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 339, col: 1, offset: 9396},
			expr: &actionExpr{
				pos: position{line: 339, col: 17, offset: 9412},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 339, col: 17, offset: 9412},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 339, col: 17, offset: 9412},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 339, col: 22, offset: 9417},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 339, col: 29, offset: 9424},
								offset: 58,
							},
						},
						&litMatcher{
							pos:        position{line: 339, col: 49, offset: 9444},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 343, col: 1, offset: 9479},
			expr: &actionExpr{
				pos: position{line: 343, col: 22, offset: 9500},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 343, col: 22, offset: 9500},
					exprs: []any{
						&notExpr{
							pos: position{line: 343, col: 22, offset: 9500},
							expr: &ruleRefExpr{
								pos:    position{line: 343, col: 23, offset: 9501},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 25, offset: 9503},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 343, col: 31, offset: 9509},
								expr: &actionExpr{
									pos: position{line: 343, col: 32, offset: 9510},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 343, col: 32, offset: 9510},
										exprs: []any{
											&notExpr{
												pos: position{line: 343, col: 32, offset: 9510},
												expr: &ruleRefExpr{
													pos:    position{line: 343, col: 33, offset: 9511},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 343, col: 35, offset: 9513},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 343, col: 41, offset: 9519},
													expr: &ruleRefExpr{
														pos:    position{line: 343, col: 42, offset: 9520},
														offset: 59,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 347, col: 1, offset: 9677},
			expr: &seqExpr{
				pos: position{line: 347, col: 24, offset: 9700},
				exprs: []any{
					&notExpr{
						pos: position{line: 347, col: 24, offset: 9700},
						expr: &litMatcher{
							pos:        position{line: 347, col: 26, offset: 9702},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 347, col: 32, offset: 9708},
						offset: 83,
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 349, col: 1, offset: 9732},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 9751},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 349, col: 21, offset: 9752},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 349, col: 21, offset: 9752},
							offset: 309,
						},
						&litMatcher{
							pos:        position{line: 349, col: 28, offset: 9759},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:    position{line: 349, col: 32, offset: 9763},
							offset: 58,
						},
						&litMatcher{
							pos:        position{line: 349, col: 51, offset: 9782},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 355, col: 1, offset: 9845},
			expr: &actionExpr{
				pos: position{line: 355, col: 19, offset: 9863},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 355, col: 19, offset: 9863},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 355, col: 19, offset: 9863},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 24, offset: 9868},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 355, col: 31, offset: 9875},
								offset: 62,
							},
						},
						&litMatcher{
							pos:        position{line: 355, col: 53, offset: 9897},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 359, col: 1, offset: 9932},
			expr: &actionExpr{
				pos: position{line: 359, col: 24, offset: 9955},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 359, col: 24, offset: 9955},
					exprs: []any{
						&notExpr{
							pos: position{line: 359, col: 24, offset: 9955},
							expr: &ruleRefExpr{
								pos:    position{line: 359, col: 25, offset: 9956},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 27, offset: 9958},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 359, col: 33, offset: 9964},
								expr: &actionExpr{
									pos: position{line: 359, col: 34, offset: 9965},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 359, col: 34, offset: 9965},
										exprs: []any{
											&notExpr{
												pos: position{line: 359, col: 34, offset: 9965},
												expr: &ruleRefExpr{
													pos:    position{line: 359, col: 35, offset: 9966},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 359, col: 37, offset: 9968},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 359, col: 43, offset: 9974},
													expr: &ruleRefExpr{
														pos:    position{line: 359, col: 44, offset: 9975},
														offset: 63,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 363, col: 1, offset: 10138},
			expr: &seqExpr{
				pos: position{line: 363, col: 26, offset: 10163},
				exprs: []any{
					&notExpr{
						pos: position{line: 363, col: 26, offset: 10163},
						expr: &litMatcher{
							pos:        position{line: 363, col: 28, offset: 10165},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 363, col: 34, offset: 10171},
						offset: 83,
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 365, col: 1, offset: 10195},
			expr: &actionExpr{
				pos: position{line: 365, col: 22, offset: 10216},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 365, col: 23, offset: 10217},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 365, col: 23, offset: 10217},
							offset: 309,
						},
						&litMatcher{
							pos:        position{line: 365, col: 30, offset: 10224},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 365, col: 34, offset: 10228},
							offset: 62,
						},
						&litMatcher{
							pos:        position{line: 365, col: 55, offset: 10249},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 370, col: 1, offset: 10311},
			expr: &choiceExpr{
				pos: position{line: 370, col: 18, offset: 10328},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 370, col: 18, offset: 10328},
						offset: 66,
					},
					&ruleRefExpr{
						pos:    position{line: 370, col: 40, offset: 10350},
						offset: 69,
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 372, col: 1, offset: 10372},
			expr: &actionExpr{
				pos: position{line: 372, col: 22, offset: 10393},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 372, col: 22, offset: 10393},
					exprs: []any{
						&notExpr{
							pos: position{line: 372, col: 22, offset: 10393},
							expr: &ruleRefExpr{
								pos:    position{line: 372, col: 23, offset: 10394},
								offset: 309,
							},
						},
						&litMatcher{
							pos:        position{line: 372, col: 30, offset: 10401},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 372, col: 34, offset: 10405},
							expr: &notExpr{
								pos: position{line: 372, col: 36, offset: 10407},
								expr: &litMatcher{
									pos:        position{line: 372, col: 37, offset: 10408},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 372, col: 42, offset: 10413},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 372, col: 49, offset: 10420},
								offset: 67,
							},
						},
						&litMatcher{
							pos:        position{line: 372, col: 75, offset: 10446},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 372, col: 79, offset: 10450},
							expr: &litMatcher{
								pos:        position{line: 372, col: 80, offset: 10451},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 372, col: 84, offset: 10455},
							expr: &notExpr{
								pos: position{line: 372, col: 86, offset: 10457},
								expr: &ruleRefExpr{
									pos:    position{line: 372, col: 87, offset: 10458},
									offset: 293,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 376, col: 1, offset: 10503},
			expr: &actionExpr{
				pos: position{line: 376, col: 28, offset: 10530},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 376, col: 28, offset: 10530},
					exprs: []any{
						&notExpr{
							pos: position{line: 376, col: 28, offset: 10530},
							expr: &ruleRefExpr{
								pos:    position{line: 376, col: 29, offset: 10531},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 376, col: 31, offset: 10533},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 376, col: 37, offset: 10539},
								expr: &actionExpr{
									pos: position{line: 376, col: 38, offset: 10540},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 376, col: 38, offset: 10540},
										exprs: []any{
											&notExpr{
												pos: position{line: 376, col: 38, offset: 10540},
												expr: &ruleRefExpr{
													pos:    position{line: 376, col: 39, offset: 10541},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 376, col: 41, offset: 10543},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 376, col: 47, offset: 10549},
													expr: &ruleRefExpr{
														pos:    position{line: 376, col: 48, offset: 10550},
														offset: 68,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 380, col: 1, offset: 10670},
			expr: &seqExpr{
				pos: position{line: 380, col: 30, offset: 10699},
				exprs: []any{
					&notExpr{
						pos: position{line: 380, col: 30, offset: 10699},
						expr: &seqExpr{
							pos: position{line: 380, col: 32, offset: 10701},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 380, col: 32, offset: 10701},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 380, col: 36, offset: 10705},
									expr: &litMatcher{
										pos:        position{line: 380, col: 37, offset: 10706},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 380, col: 42, offset: 10711},
						offset: 83,
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 382, col: 1, offset: 10733},
			expr: &actionExpr{
				pos: position{line: 382, col: 22, offset: 10754},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 382, col: 22, offset: 10754},
					exprs: []any{
						&notExpr{
							pos: position{line: 382, col: 22, offset: 10754},
							expr: &ruleRefExpr{
								pos:    position{line: 382, col: 23, offset: 10755},
								offset: 310,
							},
						},
						&litMatcher{
							pos:        position{line: 382, col: 36, offset: 10768},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 41, offset: 10773},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 382, col: 48, offset: 10780},
								offset: 70,
							},
						},
						&litMatcher{
							pos:        position{line: 382, col: 74, offset: 10806},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 386, col: 1, offset: 10843},
			expr: &actionExpr{
				pos: position{line: 386, col: 28, offset: 10870},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 386, col: 28, offset: 10870},
					exprs: []any{
						&notExpr{
							pos: position{line: 386, col: 28, offset: 10870},
							expr: &ruleRefExpr{
								pos:    position{line: 386, col: 29, offset: 10871},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 31, offset: 10873},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 386, col: 37, offset: 10879},
								expr: &actionExpr{
									pos: position{line: 386, col: 38, offset: 10880},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 386, col: 38, offset: 10880},
										exprs: []any{
											&notExpr{
												pos: position{line: 386, col: 38, offset: 10880},
												expr: &ruleRefExpr{
													pos:    position{line: 386, col: 39, offset: 10881},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 386, col: 41, offset: 10883},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 386, col: 47, offset: 10889},
													expr: &ruleRefExpr{
														pos:    position{line: 386, col: 48, offset: 10890},
														offset: 71,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 390, col: 1, offset: 11016},
			expr: &seqExpr{
				pos: position{line: 390, col: 30, offset: 11045},
				exprs: []any{
					&notExpr{
						pos: position{line: 390, col: 30, offset: 11045},
						expr: &litMatcher{
							pos:        position{line: 390, col: 32, offset: 11047},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 390, col: 38, offset: 11053},
						offset: 83,
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 393, col: 1, offset: 11076},
			expr: &actionExpr{
				pos: position{line: 393, col: 10, offset: 11085},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 393, col: 10, offset: 11085},
					exprs: []any{
						&notExpr{
							pos: position{line: 393, col: 10, offset: 11085},
							expr: &litMatcher{
								pos:        position{line: 393, col: 11, offset: 11086},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 16, offset: 11091},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 393, col: 21, offset: 11096},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 393, col: 25, offset: 11100},
								offset: 221,
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 43, offset: 11118},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 393, col: 49, offset: 11124},
								expr: &actionExpr{
									pos: position{line: 393, col: 50, offset: 11125},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 393, col: 50, offset: 11125},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 393, col: 50, offset: 11125},
												offset: 303,
											},
											&litMatcher{
												pos:        position{line: 393, col: 60, offset: 11135},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 393, col: 64, offset: 11139},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 393, col: 71, offset: 11146},
													offset: 74,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 107, offset: 11182},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 401, col: 1, offset: 11343},
			expr: &actionExpr{
				pos: position{line: 401, col: 19, offset: 11361},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 401, col: 19, offset: 11361},
					exprs: []any{
						&notExpr{
							pos: position{line: 401, col: 19, offset: 11361},
							expr: &litMatcher{
								pos:        position{line: 401, col: 20, offset: 11362},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 25, offset: 11367},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 30, offset: 11372},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 401, col: 34, offset: 11376},
								offset: 221,
							},
						},
						&labeledExpr{
							pos:   position{line: 401, col: 52, offset: 11394},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 401, col: 58, offset: 11400},
								expr: &actionExpr{
									pos: position{line: 401, col: 59, offset: 11401},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 401, col: 59, offset: 11401},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 401, col: 59, offset: 11401},
												offset: 303,
											},
											&litMatcher{
												pos:        position{line: 401, col: 69, offset: 11411},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 401, col: 73, offset: 11415},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 401, col: 80, offset: 11422},
													offset: 74,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 116, offset: 11458},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 409, col: 1, offset: 11662},
			expr: &oneOrMoreExpr{
				pos: position{line: 409, col: 15, offset: 11676},
				expr: &seqExpr{
					pos: position{line: 409, col: 17, offset: 11678},
					exprs: []any{
						&notExpr{
							pos: position{line: 409, col: 17, offset: 11678},
							expr: &litMatcher{
								pos:        position{line: 409, col: 18, offset: 11679},
								val:        "]]",
								ignoreCase: false,
								want:       "\"]]\"",
							},
						},
						&choiceExpr{
							pos: position{line: 410, col: 6, offset: 11689},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 410, col: 6, offset: 11689},
									expr: &charClassMatcher{
										pos:        position{line: 410, col: 6, offset: 11689},
										val:        "[^\\r\\n{\\]]",
										chars:      []rune{'\r', '\n', '{', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 411, col: 7, offset: 11708},
									offset: 41,
								},
								&litMatcher{
									pos:        position{line: 412, col: 7, offset: 11734},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 418, col: 1, offset: 11747},
			expr: &choiceExpr{
				pos: position{line: 418, col: 14, offset: 11760},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 418, col: 14, offset: 11760},
						run: (*parser).callonAdmonition2,
						expr: &seqExpr{
							pos: position{line: 418, col: 14, offset: 11760},
							exprs: []any{
								&ruleRefExpr{
									pos:    position{line: 418, col: 14, offset: 11760},
									offset: 296,
								},
								&litMatcher{
									pos:        position{line: 419, col: 5, offset: 11781},
									val:        "NOTE: ",
									ignoreCase: false,
									want:       "\"NOTE: \"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 420, col: 7, offset: 11864},
						run: (*parser).callonAdmonition6,
						expr: &litMatcher{
							pos:        position{line: 420, col: 7, offset: 11864},
							val:        "TIP: ",
							ignoreCase: false,
							want:       "\"TIP: \"",
						},
					},
					&actionExpr{
						pos: position{line: 421, col: 7, offset: 11945},
						run: (*parser).callonAdmonition8,
						expr: &litMatcher{
							pos:        position{line: 421, col: 7, offset: 11945},
							val:        "IMPORTANT: ",
							ignoreCase: false,
							want:       "\"IMPORTANT: \"",
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 7, offset: 12038},
						run: (*parser).callonAdmonition10,
						expr: &litMatcher{
							pos:        position{line: 422, col: 7, offset: 12038},
							val:        "CAUTON: ",
							ignoreCase: false,
							want:       "\"CAUTON: \"",
						},
					},
					&actionExpr{
						pos: position{line: 423, col: 7, offset: 12126},
						run: (*parser).callonAdmonition12,
						expr: &litMatcher{
							pos:        position{line: 423, col: 7, offset: 12126},
							val:        "WARNING: ",
							ignoreCase: false,
							want:       "\"WARNING: \"",
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 428, col: 1, offset: 12216},
			expr: &actionExpr{
				pos: position{line: 428, col: 18, offset: 12233},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 428, col: 18, offset: 12233},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 428, col: 18, offset: 12233},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 428, col: 26, offset: 12241},
								expr: &ruleRefExpr{
									pos:    position{line: 428, col: 27, offset: 12242},
									offset: 77,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 43, offset: 12258},
							label: "eol",
							expr: &ruleRefExpr{
								pos:    position{line: 428, col: 47, offset: 12262},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 436, col: 1, offset: 12419},
			expr: &choiceExpr{
				pos: position{line: 437, col: 5, offset: 12441},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 437, col: 5, offset: 12441},
						offset: 75,
					},
					&ruleRefExpr{
						pos:    position{line: 438, col: 5, offset: 12458},
						offset: 255,
					},
					&ruleRefExpr{
						pos:    position{line: 439, col: 5, offset: 12482},
						offset: 82,
					},
					&ruleRefExpr{
						pos:    position{line: 440, col: 5, offset: 12502},
						offset: 88,
					},
					&ruleRefExpr{
						pos:    position{line: 441, col: 5, offset: 12514},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 442, col: 5, offset: 12533},
						offset: 95,
					},
					&ruleRefExpr{
						pos:    position{line: 443, col: 5, offset: 12544},
						offset: 72,
					},
					&ruleRefExpr{
						pos:    position{line: 444, col: 5, offset: 12558},
						offset: 218,
					},
					&ruleRefExpr{
						pos:    position{line: 445, col: 5, offset: 12580},
						offset: 41,
					},
					&ruleRefExpr{
						pos:    position{line: 446, col: 5, offset: 12605},
						offset: 281,
					},
					&ruleRefExpr{
						pos:    position{line: 447, col: 5, offset: 12621},
						offset: 78,
					},
					&ruleRefExpr{
						pos:    position{line: 448, col: 5, offset: 12643},
						offset: 305,
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 451, col: 1, offset: 12674},
			expr: &actionExpr{
				pos: position{line: 451, col: 19, offset: 12692},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 451, col: 19, offset: 12692},
					expr: &seqExpr{
						pos: position{line: 451, col: 20, offset: 12693},
						exprs: []any{
							&notExpr{
								pos: position{line: 451, col: 20, offset: 12693},
								expr: &ruleRefExpr{
									pos:    position{line: 451, col: 21, offset: 12694},
									offset: 143,
								},
							},
							&notExpr{
								pos: position{line: 451, col: 31, offset: 12704},
								expr: &ruleRefExpr{
									pos:    position{line: 451, col: 32, offset: 12705},
									offset: 96,
								},
							},
							&notExpr{
								pos: position{line: 451, col: 42, offset: 12715},
								expr: &ruleRefExpr{
									pos:    position{line: 451, col: 43, offset: 12716},
									offset: 87,
								},
							},
							&charClassMatcher{
								pos:        position{line: 451, col: 64, offset: 12737},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 456, col: 1, offset: 12811},
			expr: &actionExpr{
				pos: position{line: 456, col: 12, offset: 12822},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 456, col: 12, offset: 12822},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 456, col: 12, offset: 12822},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 24, offset: 12834},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 27, offset: 12837},
								expr: &ruleRefExpr{
									pos:    position{line: 456, col: 28, offset: 12838},
									offset: 80,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 456, col: 41, offset: 12851},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 45, offset: 12855},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 456, col: 51, offset: 12861},
								expr: &ruleRefExpr{
									pos:    position{line: 456, col: 52, offset: 12862},
									offset: 81,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 456, col: 68, offset: 12878},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 460, col: 1, offset: 12952},
			expr: &actionExpr{
				pos: position{line: 460, col: 14, offset: 12965},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 460, col: 14, offset: 12965},
					expr: &ruleRefExpr{
						pos:    position{line: 460, col: 14, offset: 12965},
						offset: 293,
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 464, col: 1, offset: 13015},
			expr: &seqExpr{
				pos: position{line: 464, col: 17, offset: 13031},
				exprs: []any{
					&notExpr{
						pos: position{line: 464, col: 17, offset: 13031},
						expr: &litMatcher{
							pos:        position{line: 464, col: 18, offset: 13032},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&choiceExpr{
						pos: position{line: 464, col: 24, offset: 13038},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 464, col: 24, offset: 13038},
								offset: 300,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 37, offset: 13051},
								offset: 307,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 42, offset: 13056},
								offset: 279,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 55, offset: 13069},
								offset: 193,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 63, offset: 13077},
								offset: 280,
							},
							&ruleRefExpr{
								pos: position{line: 464, col: 77, offset: 13091},
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 85, offset: 13099},
								offset: 281,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 97, offset: 13111},
								offset: 41,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 118, offset: 13132},
								offset: 277,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 137, offset: 13151},
								offset: 285,
							},
							&ruleRefExpr{
								pos:    position{line: 464, col: 149, offset: 13163},
								offset: 305,
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 468, col: 1, offset: 13189},
			expr: &actionExpr{
				pos: position{line: 468, col: 17, offset: 13205},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 468, col: 17, offset: 13205},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 468, col: 17, offset: 13205},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 468, col: 28, offset: 13216},
								expr: &ruleRefExpr{
									pos:    position{line: 468, col: 29, offset: 13217},
									offset: 27,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 468, col: 52, offset: 13240},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 469, col: 5, offset: 13251},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 469, col: 5, offset: 13251},
										offset: 43,
									},
									&ruleRefExpr{
										pos:    position{line: 470, col: 7, offset: 13267},
										offset: 50,
									},
									&ruleRefExpr{
										pos:    position{line: 471, col: 7, offset: 13285},
										offset: 65,
									},
									&ruleRefExpr{
										pos:    position{line: 472, col: 7, offset: 13306},
										offset: 162,
									},
									&ruleRefExpr{
										pos:    position{line: 473, col: 7, offset: 13323},
										offset: 61,
									},
									&ruleRefExpr{
										pos:    position{line: 474, col: 7, offset: 13345},
										offset: 57,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 479, col: 1, offset: 13494},
			expr: &choiceExpr{
				pos: position{line: 480, col: 5, offset: 13523},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 480, col: 5, offset: 13523},
						offset: 300,
					},
					&ruleRefExpr{
						pos:    position{line: 481, col: 5, offset: 13541},
						offset: 307,
					},
					&ruleRefExpr{
						pos:    position{line: 482, col: 5, offset: 13551},
						offset: 279,
					},
					&ruleRefExpr{
						pos:    position{line: 483, col: 5, offset: 13569},
						offset: 280,
					},
					&ruleRefExpr{
						pos:    position{line: 484, col: 5, offset: 13588},
						offset: 41,
					},
					&ruleRefExpr{
						pos:    position{line: 485, col: 5, offset: 13614},
						offset: 82,
					},
					&ruleRefExpr{
						pos:    position{line: 486, col: 5, offset: 13635},
						offset: 88,
					},
					&ruleRefExpr{
						pos:    position{line: 487, col: 5, offset: 13647},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 488, col: 5, offset: 13666},
						offset: 95,
					},
					&ruleRefExpr{
						pos:    position{line: 489, col: 5, offset: 13677},
						offset: 72,
					},
					&ruleRefExpr{
						pos:    position{line: 490, col: 5, offset: 13691},
						offset: 218,
					},
					&ruleRefExpr{
						pos:    position{line: 491, col: 5, offset: 13713},
						offset: 277,
					},
					&ruleRefExpr{
						pos:    position{line: 492, col: 5, offset: 13737},
						offset: 305,
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 495, col: 1, offset: 13761},
			expr: &actionExpr{
				pos: position{line: 495, col: 20, offset: 13780},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 495, col: 20, offset: 13780},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 495, col: 20, offset: 13780},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 495, col: 24, offset: 13784},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 495, col: 36, offset: 13796},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 495, col: 56, offset: 13816},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 500, col: 1, offset: 13857},
			expr: &actionExpr{
				pos: position{line: 500, col: 14, offset: 13870},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 500, col: 14, offset: 13870},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 500, col: 14, offset: 13870},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 24, offset: 13880},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 500, col: 30, offset: 13886},
								offset: 146,
							},
						},
						&labeledExpr{
							pos:   position{line: 500, col: 36, offset: 13892},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 500, col: 48, offset: 13904},
								offset: 39,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 500, col: 66, offset: 13922},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 504, col: 1, offset: 14054},
			expr: &actionExpr{
				pos: position{line: 504, col: 15, offset: 14068},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 504, col: 15, offset: 14068},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 504, col: 15, offset: 14068},
							offset: 87,
						},
						&notExpr{
							pos: position{line: 504, col: 36, offset: 14089},
							expr: &litMatcher{
								pos:        position{line: 504, col: 37, offset: 14090},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 41, offset: 14094},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 504, col: 47, offset: 14100},
								offset: 146,
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 53, offset: 14106},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 504, col: 65, offset: 14118},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 508, col: 1, offset: 14260},
			expr: &litMatcher{
				pos:        position{line: 508, col: 24, offset: 14283},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 512, col: 1, offset: 14295},
			expr: &actionExpr{
				pos: position{line: 512, col: 8, offset: 14302},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 512, col: 8, offset: 14302},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 512, col: 8, offset: 14302},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 16, offset: 14310},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 512, col: 22, offset: 14316},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 512, col: 22, offset: 14316},
									expr: &choiceExpr{
										pos: position{line: 512, col: 23, offset: 14317},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 512, col: 23, offset: 14317},
												offset: 293,
											},
											&litMatcher{
												pos:        position{line: 512, col: 38, offset: 14332},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 512, col: 44, offset: 14338},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 81, offset: 14375},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 512, col: 93, offset: 14387},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 517, col: 1, offset: 14509},
			expr: &actionExpr{
				pos: position{line: 517, col: 15, offset: 14523},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 517, col: 15, offset: 14523},
					exprs: []any{
						&notExpr{
							pos: position{line: 517, col: 15, offset: 14523},
							expr: &litMatcher{
								pos:        position{line: 517, col: 16, offset: 14524},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 517, col: 21, offset: 14529},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 33, offset: 14541},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 517, col: 39, offset: 14547},
								offset: 90,
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 56, offset: 14564},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 517, col: 68, offset: 14576},
								offset: 39,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 517, col: 86, offset: 14594},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 517, col: 96, offset: 14604},
							expr: &ruleRefExpr{
								pos:    position{line: 517, col: 97, offset: 14605},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 522, col: 1, offset: 14762},
			expr: &actionExpr{
				pos: position{line: 522, col: 19, offset: 14780},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 522, col: 19, offset: 14780},
					exprs: []any{
						&notExpr{
							pos: position{line: 522, col: 19, offset: 14780},
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 20, offset: 14781},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 22, offset: 14783},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 27, offset: 14788},
								offset: 146,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParse",
			pos:  position{line: 527, col: 1, offset: 14820},
			expr: &actionExpr{
				pos: position{line: 527, col: 16, offset: 14835},
				run: (*parser).callonIncludeParse1,
				expr: &seqExpr{
					pos: position{line: 527, col: 16, offset: 14835},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 527, col: 16, offset: 14835},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 527, col: 24, offset: 14843},
								expr: &ruleRefExpr{
									pos:    position{line: 527, col: 25, offset: 14844},
									offset: 92,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 527, col: 47, offset: 14866},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseElement",
			pos:  position{line: 531, col: 1, offset: 14923},
			expr: &actionExpr{
				pos: position{line: 531, col: 23, offset: 14945},
				run: (*parser).callonIncludeParseElement1,
				expr: &seqExpr{
					pos: position{line: 531, col: 23, offset: 14945},
					exprs: []any{
						&notExpr{
							pos: position{line: 531, col: 23, offset: 14945},
							expr: &ruleRefExpr{
								pos:    position{line: 531, col: 24, offset: 14946},
								offset: 294,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 531, col: 34, offset: 14956},
							offset: 296,
						},
						&labeledExpr{
							pos:   position{line: 531, col: 50, offset: 14972},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 531, col: 59, offset: 14981},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 531, col: 59, offset: 14981},
										offset: 89,
									},
									&ruleRefExpr{
										pos:    position{line: 531, col: 73, offset: 14995},
										offset: 93,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 531, col: 91, offset: 15013},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLine",
			pos:  position{line: 535, col: 1, offset: 15052},
			expr: &actionExpr{
				pos: position{line: 535, col: 20, offset: 15071},
				run: (*parser).callonIncludeParseLine1,
				expr: &seqExpr{
					pos: position{line: 535, col: 20, offset: 15071},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 535, col: 20, offset: 15071},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 535, col: 28, offset: 15079},
								expr: &charClassMatcher{
									pos:        position{line: 535, col: 28, offset: 15079},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&andExpr{
							pos: position{line: 535, col: 37, offset: 15088},
							expr: &ruleRefExpr{
								pos:    position{line: 535, col: 38, offset: 15089},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLineElement",
			pos:  position{line: 539, col: 1, offset: 15176},
			expr: &oneOrMoreExpr{
				pos: position{line: 539, col: 28, offset: 15203},
				expr: &charClassMatcher{
					pos:        position{line: 539, col: 28, offset: 15203},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 544, col: 1, offset: 15218},
			expr: &actionExpr{
				pos: position{line: 544, col: 8, offset: 15225},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 544, col: 8, offset: 15225},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 544, col: 14, offset: 15231},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 544, col: 14, offset: 15231},
								offset: 97,
							},
							&ruleRefExpr{
								pos:    position{line: 544, col: 25, offset: 15242},
								offset: 98,
							},
							&ruleRefExpr{
								pos:    position{line: 544, col: 40, offset: 15257},
								offset: 99,
							},
							&ruleRefExpr{
								pos:    position{line: 544, col: 55, offset: 15272},
								offset: 148,
							},
						},
					},
				},
			},
		},
		{
			name: "LinkMacro",
			pos:  position{line: 548, col: 1, offset: 15313},
			expr: &litMatcher{
				pos:        position{line: 548, col: 13, offset: 15325},
				val:        "link:",
				ignoreCase: false,
				want:       "\"link:\"",
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 550, col: 1, offset: 15334},
			expr: &actionExpr{
				pos: position{line: 550, col: 12, offset: 15345},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 550, col: 12, offset: 15345},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 550, col: 12, offset: 15345},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 16, offset: 15349},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 550, col: 21, offset: 15354},
								offset: 145,
							},
						},
						&litMatcher{
							pos:        position{line: 550, col: 30, offset: 15363},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 554, col: 1, offset: 15429},
			expr: &actionExpr{
				pos: position{line: 554, col: 16, offset: 15444},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 554, col: 16, offset: 15444},
					exprs: []any{
						&notExpr{
							pos: position{line: 554, col: 16, offset: 15444},
							expr: &litMatcher{
								pos:        position{line: 554, col: 17, offset: 15445},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 554, col: 22, offset: 15450},
							offset: 96,
						},
						&labeledExpr{
							pos:   position{line: 554, col: 32, offset: 15460},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 554, col: 36, offset: 15464},
								offset: 144,
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 40, offset: 15468},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 554, col: 52, offset: 15480},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 559, col: 1, offset: 15621},
			expr: &actionExpr{
				pos: position{line: 559, col: 16, offset: 15636},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 559, col: 16, offset: 15636},
					exprs: []any{
						&notExpr{
							pos: position{line: 559, col: 16, offset: 15636},
							expr: &litMatcher{
								pos:        position{line: 559, col: 17, offset: 15637},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 22, offset: 15642},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 559, col: 27, offset: 15647},
								offset: 145,
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 36, offset: 15656},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 559, col: 47, offset: 15667},
								expr: &ruleRefExpr{
									pos:    position{line: 559, col: 48, offset: 15668},
									offset: 39,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 565, col: 1, offset: 15801},
			expr: &actionExpr{
				pos: position{line: 565, col: 9, offset: 15809},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 565, col: 9, offset: 15809},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 565, col: 9, offset: 15809},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 565, col: 20, offset: 15820},
								expr: &ruleRefExpr{
									pos:    position{line: 565, col: 21, offset: 15821},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 565, col: 46, offset: 15846},
							offset: 103,
						},
						&labeledExpr{
							pos:   position{line: 565, col: 57, offset: 15857},
							label: "cells",
							expr: &ruleRefExpr{
								pos:    position{line: 565, col: 64, offset: 15864},
								offset: 101,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 565, col: 79, offset: 15879},
							offset: 114,
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 573, col: 1, offset: 16036},
			expr: &zeroOrMoreExpr{
				pos: position{line: 573, col: 17, offset: 16052},
				expr: &ruleRefExpr{
					pos:    position{line: 573, col: 18, offset: 16053},
					offset: 102,
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 575, col: 1, offset: 16070},
			expr: &choiceExpr{
				pos: position{line: 576, col: 9, offset: 16095},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 576, col: 9, offset: 16095},
						offset: 104,
					},
					&ruleRefExpr{
						pos:    position{line: 577, col: 11, offset: 16121},
						offset: 105,
					},
					&ruleRefExpr{
						pos:    position{line: 578, col: 11, offset: 16143},
						offset: 115,
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 581, col: 1, offset: 16164},
			expr: &actionExpr{
				pos: position{line: 581, col: 14, offset: 16177},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 581, col: 14, offset: 16177},
					exprs: []any{
						&notExpr{
							pos: position{line: 581, col: 14, offset: 16177},
							expr: &litMatcher{
								pos:        position{line: 581, col: 15, offset: 16178},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 581, col: 20, offset: 16183},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 581, col: 27, offset: 16190},
							expr: &litMatcher{
								pos:        position{line: 581, col: 27, offset: 16190},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 581, col: 32, offset: 16195},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 581, col: 42, offset: 16205},
							expr: &ruleRefExpr{
								pos:    position{line: 581, col: 43, offset: 16206},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 585, col: 1, offset: 16277},
			expr: &actionExpr{
				pos: position{line: 585, col: 18, offset: 16294},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 585, col: 18, offset: 16294},
					exprs: []any{
						&notExpr{
							pos: position{line: 585, col: 18, offset: 16294},
							expr: &ruleRefExpr{
								pos:    position{line: 585, col: 19, offset: 16295},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 585, col: 28, offset: 16304},
							offset: 287,
						},
						&ruleRefExpr{
							pos:    position{line: 585, col: 36, offset: 16312},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 585, col: 46, offset: 16322},
							expr: &ruleRefExpr{
								pos:    position{line: 585, col: 48, offset: 16324},
								offset: 287,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 589, col: 1, offset: 16405},
			expr: &choiceExpr{
				pos: position{line: 589, col: 16, offset: 16420},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 589, col: 16, offset: 16420},
						offset: 106,
					},
					&ruleRefExpr{
						pos:    position{line: 589, col: 29, offset: 16433},
						offset: 107,
					},
					&ruleRefExpr{
						pos:    position{line: 589, col: 43, offset: 16447},
						offset: 108,
					},
					&ruleRefExpr{
						pos:    position{line: 589, col: 59, offset: 16463},
						offset: 109,
					},
					&ruleRefExpr{
						pos:    position{line: 589, col: 74, offset: 16478},
						offset: 110,
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 591, col: 1, offset: 16502},
			expr: &actionExpr{
				pos: position{line: 591, col: 14, offset: 16515},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 591, col: 14, offset: 16515},
					exprs: []any{
						&notExpr{
							pos: position{line: 591, col: 14, offset: 16515},
							expr: &ruleRefExpr{
								pos:    position{line: 591, col: 15, offset: 16516},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 591, col: 24, offset: 16525},
							offset: 287,
						},
						&ruleRefExpr{
							pos:    position{line: 591, col: 32, offset: 16533},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 591, col: 42, offset: 16543},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 591, col: 48, offset: 16549},
								offset: 262,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 595, col: 1, offset: 16612},
			expr: &actionExpr{
				pos: position{line: 595, col: 15, offset: 16626},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 595, col: 15, offset: 16626},
					exprs: []any{
						&notExpr{
							pos: position{line: 595, col: 15, offset: 16626},
							expr: &ruleRefExpr{
								pos:    position{line: 595, col: 16, offset: 16627},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 595, col: 25, offset: 16636},
							offset: 287,
						},
						&ruleRefExpr{
							pos:    position{line: 595, col: 33, offset: 16644},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 595, col: 43, offset: 16654},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 595, col: 50, offset: 16661},
								offset: 264,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 599, col: 1, offset: 16728},
			expr: &actionExpr{
				pos: position{line: 599, col: 17, offset: 16744},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 599, col: 17, offset: 16744},
					exprs: []any{
						&notExpr{
							pos: position{line: 599, col: 17, offset: 16744},
							expr: &ruleRefExpr{
								pos:    position{line: 599, col: 18, offset: 16745},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 599, col: 27, offset: 16754},
							offset: 287,
						},
						&ruleRefExpr{
							pos:    position{line: 599, col: 35, offset: 16762},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 599, col: 45, offset: 16772},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 599, col: 54, offset: 16781},
								offset: 267,
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 603, col: 1, offset: 16851},
			expr: &actionExpr{
				pos: position{line: 603, col: 16, offset: 16866},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 603, col: 16, offset: 16866},
					exprs: []any{
						&notExpr{
							pos: position{line: 603, col: 16, offset: 16866},
							expr: &ruleRefExpr{
								pos:    position{line: 603, col: 17, offset: 16867},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 603, col: 26, offset: 16876},
							offset: 287,
						},
						&labeledExpr{
							pos:   position{line: 603, col: 34, offset: 16884},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 603, col: 43, offset: 16893},
								offset: 241,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 607, col: 1, offset: 16984},
			expr: &actionExpr{
				pos: position{line: 607, col: 25, offset: 17008},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 607, col: 25, offset: 17008},
					exprs: []any{
						&notExpr{
							pos: position{line: 607, col: 25, offset: 17008},
							expr: &ruleRefExpr{
								pos:    position{line: 607, col: 26, offset: 17009},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 607, col: 35, offset: 17018},
							offset: 287,
						},
						&labeledExpr{
							pos:   position{line: 607, col: 43, offset: 17026},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 607, col: 52, offset: 17035},
								offset: 244,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 611, col: 1, offset: 17124},
			expr: &oneOrMoreExpr{
				pos: position{line: 611, col: 19, offset: 17142},
				expr: &ruleRefExpr{
					pos:    position{line: 611, col: 19, offset: 17142},
					offset: 104,
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 613, col: 1, offset: 17159},
			expr: &actionExpr{
				pos: position{line: 613, col: 26, offset: 17184},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 613, col: 26, offset: 17184},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 613, col: 26, offset: 17184},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 613, col: 34, offset: 17192},
								expr: &ruleRefExpr{
									pos:    position{line: 613, col: 35, offset: 17193},
									offset: 113,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 613, col: 67, offset: 17225},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 617, col: 1, offset: 17303},
			expr: &choiceExpr{
				pos: position{line: 618, col: 5, offset: 17340},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 618, col: 5, offset: 17340},
						offset: 82,
					},
					&ruleRefExpr{
						pos:    position{line: 619, col: 5, offset: 17360},
						offset: 88,
					},
					&ruleRefExpr{
						pos:    position{line: 620, col: 5, offset: 17372},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 621, col: 5, offset: 17391},
						offset: 95,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 5, offset: 17402},
						offset: 72,
					},
					&ruleRefExpr{
						pos:    position{line: 623, col: 5, offset: 17417},
						offset: 218,
					},
					&ruleRefExpr{
						pos:    position{line: 624, col: 5, offset: 17438},
						offset: 41,
					},
					&ruleRefExpr{
						pos:    position{line: 625, col: 5, offset: 17463},
						offset: 281,
					},
					&ruleRefExpr{
						pos:    position{line: 626, col: 5, offset: 17479},
						offset: 135,
					},
					&ruleRefExpr{
						pos:    position{line: 627, col: 5, offset: 17510},
						offset: 305,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 5, offset: 17537},
						offset: 287,
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 631, col: 1, offset: 17554},
			expr: &seqExpr{
				pos: position{line: 631, col: 12, offset: 17565},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 631, col: 12, offset: 17565},
						offset: 287,
					},
					&notExpr{
						pos: position{line: 631, col: 20, offset: 17573},
						expr: &litMatcher{
							pos:        position{line: 631, col: 21, offset: 17574},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&litMatcher{
						pos:        position{line: 631, col: 26, offset: 17579},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 631, col: 33, offset: 17586},
						expr: &litMatcher{
							pos:        position{line: 631, col: 33, offset: 17586},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 631, col: 38, offset: 17591},
						offset: 303,
					},
					&andExpr{
						pos: position{line: 631, col: 48, offset: 17601},
						expr: &ruleRefExpr{
							pos:    position{line: 631, col: 49, offset: 17602},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 633, col: 1, offset: 17615},
			expr: &actionExpr{
				pos: position{line: 633, col: 12, offset: 17626},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 633, col: 12, offset: 17626},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 633, col: 12, offset: 17626},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 633, col: 21, offset: 17635},
								offset: 117,
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 46, offset: 17660},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 633, col: 57, offset: 17671},
								expr: &ruleRefExpr{
									pos:    position{line: 633, col: 58, offset: 17672},
									offset: 118,
								},
							},
						},
						&andExpr{
							pos: position{line: 633, col: 86, offset: 17700},
							expr: &choiceExpr{
								pos: position{line: 633, col: 88, offset: 17702},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 633, col: 88, offset: 17702},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 633, col: 99, offset: 17713},
										offset: 116,
									},
									&ruleRefExpr{
										pos:    position{line: 633, col: 121, offset: 17735},
										offset: 287,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 642, col: 1, offset: 17975},
			expr: &choiceExpr{
				pos: position{line: 642, col: 23, offset: 17997},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 642, col: 23, offset: 17997},
						offset: 138,
					},
					&ruleRefExpr{
						pos:    position{line: 642, col: 54, offset: 18028},
						offset: 137,
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 644, col: 1, offset: 18056},
			expr: &actionExpr{
				pos: position{line: 644, col: 26, offset: 18081},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 644, col: 26, offset: 18081},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 644, col: 26, offset: 18081},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 644, col: 34, offset: 18089},
								offset: 137,
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 61, offset: 18116},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 644, col: 70, offset: 18125},
								offset: 121,
							},
						},
						&andExpr{
							pos: position{line: 644, col: 88, offset: 18143},
							expr: &choiceExpr{
								pos: position{line: 644, col: 90, offset: 18145},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 644, col: 90, offset: 18145},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 644, col: 101, offset: 18156},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 644, col: 119, offset: 18174},
										offset: 105,
									},
									&ruleRefExpr{
										pos:    position{line: 644, col: 133, offset: 18188},
										offset: 116,
									},
									&ruleRefExpr{
										pos:    position{line: 644, col: 155, offset: 18210},
										offset: 287,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 649, col: 1, offset: 18337},
			expr: &actionExpr{
				pos: position{line: 649, col: 30, offset: 18366},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 649, col: 30, offset: 18366},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 649, col: 30, offset: 18366},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 649, col: 38, offset: 18374},
								offset: 138,
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 68, offset: 18404},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 649, col: 77, offset: 18413},
								offset: 121,
							},
						},
						&andExpr{
							pos: position{line: 649, col: 95, offset: 18431},
							expr: &choiceExpr{
								pos: position{line: 649, col: 97, offset: 18433},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 649, col: 97, offset: 18433},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 649, col: 108, offset: 18444},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 649, col: 126, offset: 18462},
										offset: 105,
									},
									&ruleRefExpr{
										pos:    position{line: 649, col: 140, offset: 18476},
										offset: 116,
									},
									&ruleRefExpr{
										pos:    position{line: 649, col: 162, offset: 18498},
										offset: 287,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialBlockTableCell",
			pos:  position{line: 653, col: 1, offset: 18620},
			expr: &actionExpr{
				pos: position{line: 653, col: 25, offset: 18644},
				run: (*parser).callonInitialBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 653, col: 25, offset: 18644},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 653, col: 25, offset: 18644},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 653, col: 33, offset: 18652},
								offset: 137,
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 60, offset: 18679},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 653, col: 68, offset: 18687},
								expr: &choiceExpr{
									pos: position{line: 653, col: 69, offset: 18688},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 653, col: 69, offset: 18688},
											offset: 134,
										},
										&ruleRefExpr{
											pos:    position{line: 653, col: 89, offset: 18708},
											offset: 132,
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 653, col: 111, offset: 18730},
							expr: &choiceExpr{
								pos: position{line: 653, col: 113, offset: 18732},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 653, col: 113, offset: 18732},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 653, col: 124, offset: 18743},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 653, col: 142, offset: 18761},
										offset: 105,
									},
									&ruleRefExpr{
										pos:    position{line: 653, col: 156, offset: 18775},
										offset: 116,
									},
									&ruleRefExpr{
										pos:    position{line: 653, col: 178, offset: 18797},
										offset: 287,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 653, col: 189, offset: 18808},
							run: (*parser).callonInitialBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "AdditionalBlockTableCell",
			pos:  position{line: 660, col: 1, offset: 19088},
			expr: &actionExpr{
				pos: position{line: 660, col: 28, offset: 19115},
				run: (*parser).callonAdditionalBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 660, col: 28, offset: 19115},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 660, col: 28, offset: 19115},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 660, col: 36, offset: 19123},
								offset: 138,
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 66, offset: 19153},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 660, col: 74, offset: 19161},
								expr: &choiceExpr{
									pos: position{line: 660, col: 75, offset: 19162},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 660, col: 75, offset: 19162},
											offset: 134,
										},
										&ruleRefExpr{
											pos:    position{line: 660, col: 95, offset: 19182},
											offset: 132,
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 660, col: 117, offset: 19204},
							expr: &choiceExpr{
								pos: position{line: 660, col: 119, offset: 19206},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 660, col: 119, offset: 19206},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 660, col: 130, offset: 19217},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 660, col: 148, offset: 19235},
										offset: 105,
									},
									&ruleRefExpr{
										pos:    position{line: 660, col: 162, offset: 19249},
										offset: 116,
									},
									&ruleRefExpr{
										pos:    position{line: 660, col: 184, offset: 19271},
										offset: 287,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 660, col: 195, offset: 19282},
							run: (*parser).callonAdditionalBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 667, col: 1, offset: 19562},
			expr: &actionExpr{
				pos: position{line: 667, col: 20, offset: 19581},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 667, col: 20, offset: 19581},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 667, col: 29, offset: 19590},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 667, col: 29, offset: 19590},
								offset: 125,
							},
							&ruleRefExpr{
								pos:    position{line: 667, col: 50, offset: 19611},
								offset: 132,
							},
							&ruleRefExpr{
								pos:    position{line: 667, col: 72, offset: 19633},
								offset: 122,
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 671, col: 1, offset: 19677},
			expr: &actionExpr{
				pos: position{line: 671, col: 13, offset: 19689},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 671, col: 13, offset: 19689},
					expr: &choiceExpr{
						pos: position{line: 671, col: 15, offset: 19691},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 671, col: 15, offset: 19691},
								offset: 114,
							},
							&ruleRefExpr{
								pos:    position{line: 671, col: 26, offset: 19702},
								offset: 116,
							},
							&ruleRefExpr{
								pos:    position{line: 671, col: 48, offset: 19724},
								offset: 287,
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 675, col: 1, offset: 19773},
			expr: &seqExpr{
				pos: position{line: 675, col: 24, offset: 19796},
				exprs: []any{
					&notExpr{
						pos: position{line: 675, col: 24, offset: 19796},
						expr: &ruleRefExpr{
							pos:    position{line: 675, col: 25, offset: 19797},
							offset: 114,
						},
					},
					&notExpr{
						pos: position{line: 675, col: 34, offset: 19806},
						expr: &ruleRefExpr{
							pos:    position{line: 675, col: 35, offset: 19807},
							offset: 116,
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 677, col: 1, offset: 19828},
			expr: &seqExpr{
				pos: position{line: 677, col: 33, offset: 19860},
				exprs: []any{
					&notExpr{
						pos: position{line: 677, col: 33, offset: 19860},
						expr: &ruleRefExpr{
							pos:    position{line: 677, col: 34, offset: 19861},
							offset: 244,
						},
					},
					&notExpr{
						pos: position{line: 677, col: 51, offset: 19878},
						expr: &ruleRefExpr{
							pos:    position{line: 677, col: 52, offset: 19879},
							offset: 241,
						},
					},
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 679, col: 1, offset: 19898},
			expr: &actionExpr{
				pos: position{line: 679, col: 22, offset: 19919},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 679, col: 22, offset: 19919},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 679, col: 22, offset: 19919},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 679, col: 28, offset: 19925},
								expr: &ruleRefExpr{
									pos:    position{line: 679, col: 29, offset: 19926},
									offset: 126,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 51, offset: 19948},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 679, col: 60, offset: 19957},
								offset: 129,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 689, col: 1, offset: 20215},
			expr: &choiceExpr{
				pos: position{line: 689, col: 23, offset: 20237},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 689, col: 23, offset: 20237},
						offset: 128,
					},
					&ruleRefExpr{
						pos:    position{line: 689, col: 50, offset: 20264},
						offset: 127,
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 691, col: 1, offset: 20298},
			expr: &actionExpr{
				pos: position{line: 691, col: 35, offset: 20332},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 691, col: 35, offset: 20332},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 691, col: 35, offset: 20332},
							offset: 123,
						},
						&labeledExpr{
							pos:   position{line: 691, col: 56, offset: 20353},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 691, col: 64, offset: 20361},
								expr: &ruleRefExpr{
									pos:    position{line: 691, col: 64, offset: 20361},
									offset: 287,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 691, col: 73, offset: 20370},
							offset: 124,
						},
						&labeledExpr{
							pos:   position{line: 691, col: 103, offset: 20400},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 691, col: 111, offset: 20408},
								expr: &ruleRefExpr{
									pos:    position{line: 691, col: 112, offset: 20409},
									offset: 133,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 133, offset: 20430},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 691, col: 156, offset: 20453},
								expr: &actionExpr{
									pos: position{line: 691, col: 157, offset: 20454},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 691, col: 157, offset: 20454},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 691, col: 157, offset: 20454},
												label: "nl",
												expr: &ruleRefExpr{
													pos:    position{line: 691, col: 160, offset: 20457},
													offset: 287,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 691, col: 168, offset: 20465},
												offset: 303,
											},
											&andExpr{
												pos: position{line: 691, col: 178, offset: 20475},
												expr: &ruleRefExpr{
													pos:    position{line: 691, col: 180, offset: 20477},
													offset: 287,
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 691, col: 209, offset: 20506},
							expr: &ruleRefExpr{
								pos:    position{line: 691, col: 210, offset: 20507},
								offset: 287,
							},
						},
						&notExpr{
							pos: position{line: 691, col: 218, offset: 20515},
							expr: &choiceExpr{
								pos: position{line: 691, col: 220, offset: 20517},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 691, col: 220, offset: 20517},
										offset: 105,
									},
									&ruleRefExpr{
										pos:    position{line: 691, col: 234, offset: 20531},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 691, col: 245, offset: 20542},
										offset: 116,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 691, col: 267, offset: 20564},
							expr: &choiceExpr{
								pos: position{line: 691, col: 269, offset: 20566},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 691, col: 269, offset: 20566},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 691, col: 291, offset: 20588},
										offset: 129,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 704, col: 1, offset: 20945},
			expr: &actionExpr{
				pos: position{line: 704, col: 28, offset: 20972},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 704, col: 28, offset: 20972},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 704, col: 28, offset: 20972},
							offset: 123,
						},
						&ruleRefExpr{
							pos:    position{line: 704, col: 49, offset: 20993},
							offset: 287,
						},
						&ruleRefExpr{
							pos:    position{line: 704, col: 57, offset: 21001},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 704, col: 67, offset: 21011},
							expr: &ruleRefExpr{
								pos:    position{line: 704, col: 69, offset: 21013},
								offset: 287,
							},
						},
						&notExpr{
							pos: position{line: 704, col: 78, offset: 21022},
							expr: &ruleRefExpr{
								pos:    position{line: 704, col: 79, offset: 21023},
								offset: 114,
							},
						},
						&notExpr{
							pos: position{line: 704, col: 88, offset: 21032},
							expr: &ruleRefExpr{
								pos:    position{line: 704, col: 89, offset: 21033},
								offset: 116,
							},
						},
						&notExpr{
							pos: position{line: 704, col: 108, offset: 21052},
							expr: &ruleRefExpr{
								pos:    position{line: 704, col: 109, offset: 21053},
								offset: 105,
							},
						},
						&andExpr{
							pos: position{line: 704, col: 121, offset: 21065},
							expr: &choiceExpr{
								pos: position{line: 704, col: 123, offset: 21067},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 704, col: 123, offset: 21067},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 704, col: 145, offset: 21089},
										offset: 129,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 709, col: 1, offset: 21176},
			expr: &actionExpr{
				pos: position{line: 709, col: 27, offset: 21202},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 709, col: 27, offset: 21202},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 709, col: 27, offset: 21202},
							offset: 123,
						},
						&labeledExpr{
							pos:   position{line: 709, col: 48, offset: 21223},
							label: "nl",
							expr: &ruleRefExpr{
								pos:    position{line: 709, col: 51, offset: 21226},
								offset: 287,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 709, col: 59, offset: 21234},
							offset: 124,
						},
						&labeledExpr{
							pos:   position{line: 709, col: 89, offset: 21264},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 709, col: 97, offset: 21272},
								expr: &ruleRefExpr{
									pos:    position{line: 709, col: 98, offset: 21273},
									offset: 133,
								},
							},
						},
						&andExpr{
							pos: position{line: 709, col: 119, offset: 21294},
							expr: &choiceExpr{
								pos: position{line: 709, col: 121, offset: 21296},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 709, col: 121, offset: 21296},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 709, col: 132, offset: 21307},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 709, col: 150, offset: 21325},
										offset: 105,
									},
									&ruleRefExpr{
										pos:    position{line: 709, col: 164, offset: 21339},
										offset: 116,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLine",
			pos:  position{line: 716, col: 1, offset: 21514},
			expr: &actionExpr{
				pos: position{line: 716, col: 22, offset: 21535},
				run: (*parser).callonBlockTableCellLine1,
				expr: &labeledExpr{
					pos:   position{line: 716, col: 22, offset: 21535},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 716, col: 31, offset: 21544},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 716, col: 31, offset: 21544},
								offset: 134,
							},
							&ruleRefExpr{
								pos:    position{line: 716, col: 51, offset: 21564},
								offset: 127,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLastLine",
			pos:  position{line: 720, col: 1, offset: 21631},
			expr: &actionExpr{
				pos: position{line: 720, col: 26, offset: 21656},
				run: (*parser).callonBlockTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 720, col: 26, offset: 21656},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 720, col: 26, offset: 21656},
							offset: 123,
						},
						&ruleRefExpr{
							pos:    position{line: 720, col: 47, offset: 21677},
							offset: 287,
						},
						&labeledExpr{
							pos:   position{line: 720, col: 55, offset: 21685},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 720, col: 63, offset: 21693},
								expr: &ruleRefExpr{
									pos:    position{line: 720, col: 64, offset: 21694},
									offset: 133,
								},
							},
						},
						&andExpr{
							pos: position{line: 720, col: 85, offset: 21715},
							expr: &choiceExpr{
								pos: position{line: 720, col: 87, offset: 21717},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 720, col: 87, offset: 21717},
										offset: 114,
									},
									&ruleRefExpr{
										pos:    position{line: 720, col: 98, offset: 21728},
										offset: 116,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 725, col: 1, offset: 21816},
			expr: &actionExpr{
				pos: position{line: 725, col: 23, offset: 21838},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 725, col: 23, offset: 21838},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 725, col: 23, offset: 21838},
							offset: 123,
						},
						&labeledExpr{
							pos:   position{line: 725, col: 44, offset: 21859},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 725, col: 52, offset: 21867},
								expr: &ruleRefExpr{
									pos:    position{line: 725, col: 53, offset: 21868},
									offset: 133,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 730, col: 1, offset: 21961},
			expr: &actionExpr{
				pos: position{line: 730, col: 22, offset: 21982},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 730, col: 22, offset: 21982},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 730, col: 22, offset: 21982},
							offset: 123,
						},
						&labeledExpr{
							pos:   position{line: 730, col: 44, offset: 22004},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 731, col: 5, offset: 22018},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 731, col: 5, offset: 22018},
										offset: 135,
									},
									&ruleRefExpr{
										pos:    position{line: 732, col: 5, offset: 22049},
										offset: 136,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 737, col: 1, offset: 22114},
			expr: &actionExpr{
				pos: position{line: 737, col: 21, offset: 22134},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 737, col: 21, offset: 22134},
					exprs: []any{
						&notExpr{
							pos: position{line: 737, col: 21, offset: 22134},
							expr: &ruleRefExpr{
								pos:    position{line: 737, col: 22, offset: 22135},
								offset: 137,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 737, col: 48, offset: 22161},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 737, col: 59, offset: 22172},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 737, col: 68, offset: 22181},
								offset: 2,
							},
						},
						&notExpr{
							pos: position{line: 737, col: 82, offset: 22195},
							expr: &ruleRefExpr{
								pos:    position{line: 737, col: 83, offset: 22196},
								offset: 116,
							},
						},
						&notExpr{
							pos: position{line: 737, col: 103, offset: 22216},
							expr: &ruleRefExpr{
								pos:    position{line: 737, col: 104, offset: 22217},
								offset: 114,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 742, col: 1, offset: 22262},
			expr: &actionExpr{
				pos: position{line: 742, col: 28, offset: 22289},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 742, col: 28, offset: 22289},
					expr: &seqExpr{
						pos: position{line: 742, col: 29, offset: 22290},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 742, col: 29, offset: 22290},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&notExpr{
								pos: position{line: 742, col: 39, offset: 22300},
								expr: &ruleRefExpr{
									pos:    position{line: 742, col: 40, offset: 22301},
									offset: 116,
								},
							},
							&notExpr{
								pos: position{line: 742, col: 59, offset: 22320},
								expr: &ruleRefExpr{
									pos:    position{line: 742, col: 60, offset: 22321},
									offset: 114,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 746, col: 1, offset: 22393},
			expr: &actionExpr{
				pos: position{line: 746, col: 27, offset: 22419},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &choiceExpr{
					pos: position{line: 746, col: 28, offset: 22420},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 746, col: 28, offset: 22420},
							val:        "\\|",
							ignoreCase: false,
							want:       "\"\\\\|\"",
						},
						&charClassMatcher{
							pos:        position{line: 746, col: 36, offset: 22428},
							val:        "[^|\\r\\n]",
							chars:      []rune{'|', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 751, col: 1, offset: 22547},
			expr: &actionExpr{
				pos: position{line: 751, col: 29, offset: 22575},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 751, col: 29, offset: 22575},
					exprs: []any{
						&notExpr{
							pos: position{line: 751, col: 29, offset: 22575},
							expr: &ruleRefExpr{
								pos:    position{line: 751, col: 30, offset: 22576},
								offset: 114,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 751, col: 39, offset: 22585},
							offset: 287,
						},
						&ruleRefExpr{
							pos:    position{line: 751, col: 47, offset: 22593},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 751, col: 57, offset: 22603},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 751, col: 64, offset: 22610},
								expr: &ruleRefExpr{
									pos:    position{line: 751, col: 65, offset: 22611},
									offset: 142,
								},
							},
						},
						&notExpr{
							pos: position{line: 751, col: 83, offset: 22629},
							expr: &litMatcher{
								pos:        position{line: 751, col: 84, offset: 22630},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 751, col: 89, offset: 22635},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 758, col: 1, offset: 22751},
			expr: &actionExpr{
				pos: position{line: 758, col: 32, offset: 22782},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 758, col: 32, offset: 22782},
					exprs: []any{
						&notExpr{
							pos: position{line: 758, col: 32, offset: 22782},
							expr: &ruleRefExpr{
								pos:    position{line: 758, col: 33, offset: 22783},
								offset: 114,
							},
						},
						&labeledExpr{
							pos:   position{line: 758, col: 42, offset: 22792},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 758, col: 49, offset: 22799},
								expr: &ruleRefExpr{
									pos:    position{line: 758, col: 50, offset: 22800},
									offset: 140,
								},
							},
						},
						&notExpr{
							pos: position{line: 758, col: 78, offset: 22828},
							expr: &litMatcher{
								pos:        position{line: 758, col: 79, offset: 22829},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 758, col: 84, offset: 22834},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 763, col: 1, offset: 22939},
			expr: &actionExpr{
				pos: position{line: 763, col: 26, offset: 22964},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 763, col: 26, offset: 22964},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 763, col: 26, offset: 22964},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 763, col: 36, offset: 22974},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 763, col: 44, offset: 22982},
								offset: 142,
							},
						},
						&andCodeExpr{
							pos: position{line: 763, col: 61, offset: 22999},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 770, col: 1, offset: 23125},
			expr: &actionExpr{
				pos: position{line: 770, col: 29, offset: 23153},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 770, col: 29, offset: 23153},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 770, col: 29, offset: 23153},
							label: "lead",
							expr: &ruleRefExpr{
								pos:    position{line: 770, col: 35, offset: 23159},
								offset: 307,
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 39, offset: 23163},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 770, col: 47, offset: 23171},
								offset: 142,
							},
						},
						&andCodeExpr{
							pos: position{line: 770, col: 64, offset: 23188},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 776, col: 1, offset: 23274},
			expr: &actionExpr{
				pos: position{line: 776, col: 17, offset: 23290},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 776, col: 17, offset: 23290},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 776, col: 17, offset: 23290},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 776, col: 24, offset: 23297},
								expr: &actionExpr{
									pos: position{line: 776, col: 25, offset: 23298},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 776, col: 25, offset: 23298},
										label: "n",
										expr: &ruleRefExpr{
											pos:    position{line: 776, col: 27, offset: 23300},
											offset: 289,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 12, offset: 23371},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 778, col: 17, offset: 23376},
								expr: &actionExpr{
									pos: position{line: 778, col: 18, offset: 23377},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 778, col: 18, offset: 23377},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 778, col: 18, offset: 23377},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 778, col: 22, offset: 23381},
												label: "n",
												expr: &ruleRefExpr{
													pos:    position{line: 778, col: 24, offset: 23383},
													offset: 289,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 781, col: 11, offset: 23461},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 789, col: 1, offset: 23699},
			expr: &actionExpr{
				pos: position{line: 790, col: 5, offset: 23723},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 790, col: 5, offset: 23723},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 790, col: 5, offset: 23723},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 790, col: 16, offset: 23734},
								expr: &actionExpr{
									pos: position{line: 791, col: 9, offset: 23744},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 791, col: 9, offset: 23744},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 791, col: 9, offset: 23744},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 791, col: 21, offset: 23756},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 791, col: 21, offset: 23756},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 791, col: 21, offset: 23756},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 791, col: 26, offset: 23761},
																expr: &charClassMatcher{
																	pos:        position{line: 791, col: 26, offset: 23761},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 791, col: 63, offset: 23798},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 5, offset: 23880},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 795, col: 10, offset: 23885},
								expr: &actionExpr{
									pos: position{line: 796, col: 9, offset: 23895},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 796, col: 9, offset: 23895},
										label: "span",
										expr: &ruleRefExpr{
											pos:    position{line: 796, col: 15, offset: 23901},
											offset: 141,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 800, col: 5, offset: 23972},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 800, col: 21, offset: 23988},
								expr: &choiceExpr{
									pos: position{line: 801, col: 9, offset: 23998},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 801, col: 9, offset: 23998},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 801, col: 9, offset: 23998},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 802, col: 11, offset: 24066},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 802, col: 11, offset: 24066},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 803, col: 11, offset: 24135},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 803, col: 11, offset: 24135},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 5, offset: 24207},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 805, col: 19, offset: 24221},
								expr: &choiceExpr{
									pos: position{line: 806, col: 9, offset: 24231},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 806, col: 9, offset: 24231},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 806, col: 9, offset: 24231},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 807, col: 11, offset: 24297},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 807, col: 11, offset: 24297},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 808, col: 11, offset: 24366},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 808, col: 11, offset: 24366},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 5, offset: 24436},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 810, col: 11, offset: 24442},
								expr: &choiceExpr{
									pos: position{line: 811, col: 9, offset: 24452},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 811, col: 9, offset: 24452},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 811, col: 9, offset: 24452},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 812, col: 11, offset: 24514},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 812, col: 11, offset: 24514},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 813, col: 11, offset: 24575},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 813, col: 11, offset: 24575},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 814, col: 11, offset: 24638},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 814, col: 11, offset: 24638},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 815, col: 11, offset: 24699},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 815, col: 11, offset: 24699},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 816, col: 11, offset: 24761},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 816, col: 11, offset: 24761},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 817, col: 11, offset: 24825},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 817, col: 11, offset: 24825},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 819, col: 6, offset: 24888},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 836, col: 1, offset: 25591},
			expr: &choiceExpr{
				pos: position{line: 836, col: 14, offset: 25604},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 836, col: 14, offset: 25604},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 836, col: 27, offset: 25617},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 836, col: 39, offset: 25629},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 836, col: 50, offset: 25640},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 836, col: 61, offset: 25651},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 838, col: 1, offset: 25664},
			expr: &actionExpr{
				pos: position{line: 838, col: 7, offset: 25670},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 838, col: 7, offset: 25670},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 838, col: 7, offset: 25670},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 838, col: 14, offset: 25677},
								expr: &ruleRefExpr{
									pos:    position{line: 838, col: 15, offset: 25678},
									offset: 143,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 27, offset: 25690},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 838, col: 33, offset: 25696},
								offset: 146,
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 842, col: 1, offset: 25789},
			expr: &actionExpr{
				pos: position{line: 842, col: 11, offset: 25799},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 842, col: 11, offset: 25799},
					exprs: []any{
						&notExpr{
							pos: position{line: 842, col: 11, offset: 25799},
							expr: &litMatcher{
								pos:        position{line: 842, col: 12, offset: 25800},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 16, offset: 25804},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:    position{line: 842, col: 24, offset: 25812},
								offset: 143,
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 35, offset: 25823},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 842, col: 41, offset: 25829},
								offset: 146,
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 849, col: 1, offset: 25925},
			expr: &actionExpr{
				pos: position{line: 849, col: 8, offset: 25932},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 849, col: 8, offset: 25932},
					exprs: []any{
						&notExpr{
							pos: position{line: 849, col: 8, offset: 25932},
							expr: &litMatcher{
								pos:        position{line: 849, col: 9, offset: 25933},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 849, col: 13, offset: 25937},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 849, col: 24, offset: 25948},
								expr: &ruleRefExpr{
									pos:    position{line: 849, col: 24, offset: 25948},
									offset: 147,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 853, col: 1, offset: 26019},
			expr: &choiceExpr{
				pos: position{line: 853, col: 16, offset: 26034},
				alternatives: []any{
					&oneOrMoreExpr{
						pos: position{line: 853, col: 16, offset: 26034},
						expr: &charClassMatcher{
							pos:        position{line: 853, col: 17, offset: 26035},
							val:        "[^\\r\\n{.<>!?,;[\\] ]",
							chars:      []rune{'\r', '\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 854, col: 5, offset: 26062},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 854, col: 5, offset: 26062},
								val:        "[.?!;,]",
								chars:      []rune{'.', '?', '!', ';', ','},
								ignoreCase: false,
								inverted:   false,
							},
							&andExpr{
								pos: position{line: 854, col: 13, offset: 26070},
								expr: &seqExpr{
									pos: position{line: 854, col: 15, offset: 26072},
									exprs: []any{
										&notExpr{
											pos: position{line: 854, col: 15, offset: 26072},
											expr: &ruleRefExpr{
												pos:    position{line: 854, col: 16, offset: 26073},
												offset: 308,
											},
										},
										&notExpr{
											pos: position{line: 854, col: 18, offset: 26075},
											expr: &ruleRefExpr{
												pos:    position{line: 854, col: 19, offset: 26076},
												offset: 294,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 855, col: 4, offset: 26091},
						offset: 41,
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 859, col: 1, offset: 26115},
			expr: &actionExpr{
				pos: position{line: 859, col: 9, offset: 26123},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 859, col: 9, offset: 26123},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 859, col: 9, offset: 26123},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 859, col: 15, offset: 26129},
								offset: 149,
							},
						},
						&litMatcher{
							pos:        position{line: 859, col: 26, offset: 26140},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 859, col: 30, offset: 26144},
							label: "domain",
							expr: &ruleRefExpr{
								pos:    position{line: 859, col: 38, offset: 26152},
								offset: 150,
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 863, col: 1, offset: 26250},
			expr: &actionExpr{
				pos: position{line: 863, col: 13, offset: 26262},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 863, col: 13, offset: 26262},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 863, col: 13, offset: 26262},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 863, col: 19, offset: 26268},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 863, col: 19, offset: 26268},
									expr: &choiceExpr{
										pos: position{line: 863, col: 20, offset: 26269},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 863, col: 20, offset: 26269},
												offset: 293,
											},
											&charClassMatcher{
												pos:        position{line: 863, col: 35, offset: 26284},
												val:        "[!#$%&'*+-/=?^_`{|}~.]",
												chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:     []rune{'+', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 865, col: 4, offset: 26412},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 872, col: 1, offset: 26578},
			expr: &actionExpr{
				pos: position{line: 872, col: 15, offset: 26592},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 872, col: 15, offset: 26592},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 872, col: 15, offset: 26592},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 872, col: 23, offset: 26600},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 872, col: 24, offset: 26601},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 872, col: 24, offset: 26601},
											expr: &ruleRefExpr{
												pos:    position{line: 872, col: 25, offset: 26602},
												offset: 293,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 872, col: 40, offset: 26617},
											expr: &seqExpr{
												pos: position{line: 872, col: 41, offset: 26618},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 872, col: 41, offset: 26618},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 872, col: 45, offset: 26622},
														expr: &choiceExpr{
															pos: position{line: 872, col: 46, offset: 26623},
															alternatives: []any{
																&ruleRefExpr{
																	pos:    position{line: 872, col: 46, offset: 26623},
																	offset: 293,
																},
																&litMatcher{
																	pos:        position{line: 872, col: 61, offset: 26638},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 874, col: 4, offset: 26683},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 882, col: 1, offset: 26825},
			expr: &actionExpr{
				pos: position{line: 883, col: 5, offset: 26839},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 883, col: 5, offset: 26839},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 26839},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 883, col: 12, offset: 26846},
								offset: 152,
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 26864},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 884, col: 11, offset: 26870},
								expr: &ruleRefExpr{
									pos:    position{line: 884, col: 12, offset: 26871},
									offset: 156,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 885, col: 5, offset: 26889},
							offset: 153,
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 889, col: 1, offset: 27047},
			expr: &actionExpr{
				pos: position{line: 889, col: 16, offset: 27062},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 889, col: 16, offset: 27062},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 889, col: 16, offset: 27062},
							offset: 296,
						},
						&labeledExpr{
							pos:   position{line: 889, col: 32, offset: 27078},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 889, col: 42, offset: 27088},
								offset: 155,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 889, col: 59, offset: 27105},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 889, col: 69, offset: 27115},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 896, col: 1, offset: 27292},
			expr: &seqExpr{
				pos: position{line: 896, col: 14, offset: 27305},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 896, col: 14, offset: 27305},
						offset: 296,
					},
					&labeledExpr{
						pos:   position{line: 896, col: 30, offset: 27321},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 896, col: 40, offset: 27331},
							offset: 155,
						},
					},
					&andExpr{
						pos: position{line: 896, col: 57, offset: 27348},
						expr: &ruleRefExpr{
							pos:    position{line: 896, col: 58, offset: 27349},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 896, col: 68, offset: 27359},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 905, col: 1, offset: 27619},
			expr: &actionExpr{
				pos: position{line: 905, col: 18, offset: 27636},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 905, col: 18, offset: 27636},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 905, col: 18, offset: 27636},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 905, col: 27, offset: 27645},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 905, col: 27, offset: 27645},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 905, col: 34, offset: 27652},
										expr: &litMatcher{
											pos:        position{line: 905, col: 34, offset: 27652},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 905, col: 40, offset: 27658},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 912, col: 1, offset: 27777},
			expr: &actionExpr{
				pos: position{line: 912, col: 20, offset: 27796},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 912, col: 20, offset: 27796},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 912, col: 20, offset: 27796},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 912, col: 29, offset: 27805},
								offset: 154,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 913, col: 5, offset: 27826},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 918, col: 1, offset: 27953},
			expr: &actionExpr{
				pos: position{line: 918, col: 15, offset: 27967},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 918, col: 16, offset: 27968},
					exprs: []any{
						&notExpr{
							pos: position{line: 918, col: 16, offset: 27968},
							expr: &ruleRefExpr{
								pos:    position{line: 918, col: 17, offset: 27969},
								offset: 155,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 918, col: 34, offset: 27986},
							offset: 295,
						},
						&labeledExpr{
							pos:   position{line: 918, col: 47, offset: 27999},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 918, col: 52, offset: 28004},
								offset: 302,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 918, col: 60, offset: 28012},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 922, col: 1, offset: 28063},
			expr: &actionExpr{
				pos: position{line: 923, col: 5, offset: 28074},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 923, col: 5, offset: 28074},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 923, col: 5, offset: 28074},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 923, col: 12, offset: 28081},
								offset: 158,
							},
						},
						&labeledExpr{
							pos:   position{line: 924, col: 5, offset: 28096},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 924, col: 11, offset: 28102},
								expr: &seqExpr{
									pos: position{line: 924, col: 12, offset: 28103},
									exprs: []any{
										&notExpr{
											pos: position{line: 924, col: 12, offset: 28103},
											expr: &ruleRefExpr{
												pos:    position{line: 924, col: 13, offset: 28104},
												offset: 161,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 924, col: 27, offset: 28118},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 925, col: 5, offset: 28132},
							offset: 159,
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 929, col: 1, offset: 28281},
			expr: &actionExpr{
				pos: position{line: 929, col: 13, offset: 28293},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 929, col: 13, offset: 28293},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 929, col: 13, offset: 28293},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 929, col: 23, offset: 28303},
								offset: 161,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 929, col: 37, offset: 28317},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 929, col: 47, offset: 28327},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 936, col: 1, offset: 28501},
			expr: &seqExpr{
				pos: position{line: 936, col: 11, offset: 28511},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 936, col: 11, offset: 28511},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 936, col: 21, offset: 28521},
							offset: 161,
						},
					},
					&andExpr{
						pos: position{line: 936, col: 35, offset: 28535},
						expr: &ruleRefExpr{
							pos:    position{line: 936, col: 36, offset: 28536},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 936, col: 46, offset: 28546},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 945, col: 1, offset: 28800},
			expr: &actionExpr{
				pos: position{line: 945, col: 14, offset: 28813},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 945, col: 14, offset: 28813},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 945, col: 23, offset: 28822},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 950, col: 1, offset: 28878},
			expr: &actionExpr{
				pos: position{line: 950, col: 17, offset: 28894},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 950, col: 17, offset: 28894},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 950, col: 17, offset: 28894},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 950, col: 26, offset: 28903},
								offset: 160,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 951, col: 5, offset: 28920},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 957, col: 1, offset: 29053},
			expr: &choiceExpr{
				pos: position{line: 957, col: 15, offset: 29067},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 957, col: 15, offset: 29067},
						offset: 163,
					},
					&ruleRefExpr{
						pos:    position{line: 957, col: 34, offset: 29086},
						offset: 166,
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 959, col: 1, offset: 29105},
			expr: &actionExpr{
				pos: position{line: 959, col: 20, offset: 29124},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 959, col: 20, offset: 29124},
					exprs: []any{
						&notExpr{
							pos: position{line: 959, col: 20, offset: 29124},
							expr: &ruleRefExpr{
								pos:    position{line: 959, col: 21, offset: 29125},
								offset: 309,
							},
						},
						&litMatcher{
							pos:        position{line: 959, col: 28, offset: 29132},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 959, col: 32, offset: 29136},
							expr: &notExpr{
								pos: position{line: 959, col: 34, offset: 29138},
								expr: &litMatcher{
									pos:        position{line: 959, col: 35, offset: 29139},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 959, col: 40, offset: 29144},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 959, col: 47, offset: 29151},
								offset: 164,
							},
						},
						&litMatcher{
							pos:        position{line: 959, col: 70, offset: 29174},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 959, col: 74, offset: 29178},
							expr: &litMatcher{
								pos:        position{line: 959, col: 75, offset: 29179},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 959, col: 79, offset: 29183},
							expr: &notExpr{
								pos: position{line: 959, col: 81, offset: 29185},
								expr: &ruleRefExpr{
									pos:    position{line: 959, col: 82, offset: 29186},
									offset: 293,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 963, col: 1, offset: 29231},
			expr: &actionExpr{
				pos: position{line: 963, col: 25, offset: 29255},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 963, col: 25, offset: 29255},
					exprs: []any{
						&notExpr{
							pos: position{line: 963, col: 25, offset: 29255},
							expr: &ruleRefExpr{
								pos:    position{line: 963, col: 26, offset: 29256},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 963, col: 28, offset: 29258},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 963, col: 34, offset: 29264},
								expr: &actionExpr{
									pos: position{line: 963, col: 35, offset: 29265},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 963, col: 35, offset: 29265},
										exprs: []any{
											&notExpr{
												pos: position{line: 963, col: 35, offset: 29265},
												expr: &ruleRefExpr{
													pos:    position{line: 963, col: 36, offset: 29266},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 963, col: 38, offset: 29268},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 963, col: 44, offset: 29274},
													expr: &ruleRefExpr{
														pos:    position{line: 963, col: 45, offset: 29275},
														offset: 165,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 967, col: 1, offset: 29429},
			expr: &seqExpr{
				pos: position{line: 967, col: 27, offset: 29455},
				exprs: []any{
					&notExpr{
						pos: position{line: 967, col: 27, offset: 29455},
						expr: &seqExpr{
							pos: position{line: 967, col: 29, offset: 29457},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 967, col: 29, offset: 29457},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&notExpr{
									pos: position{line: 967, col: 33, offset: 29461},
									expr: &litMatcher{
										pos:        position{line: 967, col: 34, offset: 29462},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 967, col: 39, offset: 29467},
						offset: 83,
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 969, col: 1, offset: 29489},
			expr: &actionExpr{
				pos: position{line: 969, col: 20, offset: 29508},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 969, col: 20, offset: 29508},
					exprs: []any{
						&notExpr{
							pos: position{line: 969, col: 20, offset: 29508},
							expr: &ruleRefExpr{
								pos:    position{line: 969, col: 21, offset: 29509},
								offset: 310,
							},
						},
						&litMatcher{
							pos:        position{line: 969, col: 34, offset: 29522},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 969, col: 39, offset: 29527},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 969, col: 46, offset: 29534},
								offset: 167,
							},
						},
						&litMatcher{
							pos:        position{line: 969, col: 69, offset: 29557},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 973, col: 1, offset: 29594},
			expr: &actionExpr{
				pos: position{line: 973, col: 25, offset: 29618},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 973, col: 25, offset: 29618},
					exprs: []any{
						&notExpr{
							pos: position{line: 973, col: 25, offset: 29618},
							expr: &ruleRefExpr{
								pos:    position{line: 973, col: 26, offset: 29619},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 973, col: 28, offset: 29621},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 973, col: 34, offset: 29627},
								expr: &actionExpr{
									pos: position{line: 973, col: 35, offset: 29628},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 973, col: 35, offset: 29628},
										exprs: []any{
											&notExpr{
												pos: position{line: 973, col: 35, offset: 29628},
												expr: &ruleRefExpr{
													pos:    position{line: 973, col: 36, offset: 29629},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 973, col: 38, offset: 29631},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 973, col: 44, offset: 29637},
													expr: &ruleRefExpr{
														pos:    position{line: 973, col: 45, offset: 29638},
														offset: 168,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 977, col: 1, offset: 29804},
			expr: &seqExpr{
				pos: position{line: 977, col: 27, offset: 29830},
				exprs: []any{
					&notExpr{
						pos: position{line: 977, col: 27, offset: 29830},
						expr: &litMatcher{
							pos:        position{line: 977, col: 29, offset: 29832},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 977, col: 35, offset: 29838},
						offset: 83,
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 980, col: 1, offset: 29861},
			expr: &actionExpr{
				pos: position{line: 981, col: 5, offset: 29875},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 981, col: 5, offset: 29875},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 981, col: 5, offset: 29875},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 981, col: 12, offset: 29882},
								offset: 170,
							},
						},
						&labeledExpr{
							pos:   position{line: 982, col: 5, offset: 29900},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 982, col: 11, offset: 29906},
								expr: &seqExpr{
									pos: position{line: 982, col: 12, offset: 29907},
									exprs: []any{
										&notExpr{
											pos: position{line: 982, col: 12, offset: 29907},
											expr: &ruleRefExpr{
												pos:    position{line: 982, col: 13, offset: 29908},
												offset: 173,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 982, col: 30, offset: 29925},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 983, col: 5, offset: 29939},
							offset: 171,
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 987, col: 1, offset: 30097},
			expr: &actionExpr{
				pos: position{line: 987, col: 16, offset: 30112},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 987, col: 16, offset: 30112},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 987, col: 16, offset: 30112},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 987, col: 26, offset: 30122},
								offset: 173,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 987, col: 43, offset: 30139},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 987, col: 53, offset: 30149},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 994, col: 1, offset: 30334},
			expr: &seqExpr{
				pos: position{line: 994, col: 14, offset: 30347},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 994, col: 14, offset: 30347},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 994, col: 24, offset: 30357},
							offset: 173,
						},
					},
					&andExpr{
						pos: position{line: 994, col: 41, offset: 30374},
						expr: &ruleRefExpr{
							pos:    position{line: 994, col: 42, offset: 30375},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 994, col: 52, offset: 30385},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1003, col: 1, offset: 30653},
			expr: &actionExpr{
				pos: position{line: 1003, col: 17, offset: 30669},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1003, col: 17, offset: 30669},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1003, col: 17, offset: 30669},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1003, col: 26, offset: 30678},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1003, col: 26, offset: 30678},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1003, col: 33, offset: 30685},
										expr: &litMatcher{
											pos:        position{line: 1003, col: 33, offset: 30685},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1003, col: 39, offset: 30691},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1010, col: 1, offset: 30814},
			expr: &actionExpr{
				pos: position{line: 1010, col: 20, offset: 30833},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1010, col: 20, offset: 30833},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1010, col: 20, offset: 30833},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1010, col: 29, offset: 30842},
								offset: 172,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1011, col: 5, offset: 30862},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1016, col: 1, offset: 30993},
			expr: &actionExpr{
				pos: position{line: 1016, col: 15, offset: 31007},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 16, offset: 31008},
					exprs: []any{
						&notExpr{
							pos: position{line: 1016, col: 16, offset: 31008},
							expr: &ruleRefExpr{
								pos:    position{line: 1016, col: 17, offset: 31009},
								offset: 173,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1016, col: 34, offset: 31026},
							offset: 295,
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 47, offset: 31039},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1016, col: 52, offset: 31044},
								offset: 302,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1016, col: 60, offset: 31052},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1022, col: 1, offset: 31101},
			expr: &actionExpr{
				pos: position{line: 1023, col: 5, offset: 31115},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 5, offset: 31115},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1023, col: 5, offset: 31115},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1023, col: 12, offset: 31122},
								offset: 176,
							},
						},
						&labeledExpr{
							pos:   position{line: 1024, col: 5, offset: 31140},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1024, col: 11, offset: 31146},
								expr: &ruleRefExpr{
									pos:    position{line: 1024, col: 12, offset: 31147},
									offset: 180,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1025, col: 5, offset: 31165},
							offset: 177,
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1029, col: 1, offset: 31332},
			expr: &actionExpr{
				pos: position{line: 1029, col: 16, offset: 31347},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 16, offset: 31347},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1029, col: 16, offset: 31347},
							offset: 296,
						},
						&labeledExpr{
							pos:   position{line: 1029, col: 32, offset: 31363},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1029, col: 42, offset: 31373},
								offset: 179,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1029, col: 59, offset: 31390},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 1029, col: 69, offset: 31400},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1036, col: 1, offset: 31577},
			expr: &seqExpr{
				pos: position{line: 1036, col: 14, offset: 31590},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 1036, col: 14, offset: 31590},
						offset: 296,
					},
					&labeledExpr{
						pos:   position{line: 1036, col: 30, offset: 31606},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1036, col: 40, offset: 31616},
							offset: 179,
						},
					},
					&andExpr{
						pos: position{line: 1036, col: 57, offset: 31633},
						expr: &ruleRefExpr{
							pos:    position{line: 1036, col: 58, offset: 31634},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 1036, col: 68, offset: 31644},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1045, col: 1, offset: 31904},
			expr: &actionExpr{
				pos: position{line: 1045, col: 15, offset: 31918},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 15, offset: 31918},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1045, col: 15, offset: 31918},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1045, col: 21, offset: 31924},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1045, col: 21, offset: 31924},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1045, col: 28, offset: 31931},
										expr: &litMatcher{
											pos:        position{line: 1045, col: 28, offset: 31931},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1045, col: 34, offset: 31937},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1052, col: 1, offset: 32050},
			expr: &actionExpr{
				pos: position{line: 1052, col: 20, offset: 32069},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 20, offset: 32069},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1052, col: 20, offset: 32069},
							label: "dots",
							expr: &ruleRefExpr{
								pos:    position{line: 1052, col: 26, offset: 32075},
								offset: 178,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1053, col: 5, offset: 32093},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1058, col: 1, offset: 32217},
			expr: &actionExpr{
				pos: position{line: 1058, col: 15, offset: 32231},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 16, offset: 32232},
					exprs: []any{
						&notExpr{
							pos: position{line: 1058, col: 16, offset: 32232},
							expr: &ruleRefExpr{
								pos:    position{line: 1058, col: 17, offset: 32233},
								offset: 179,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1058, col: 34, offset: 32250},
							offset: 295,
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 47, offset: 32263},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1058, col: 52, offset: 32268},
								offset: 302,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1058, col: 60, offset: 32276},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1062, col: 1, offset: 32323},
			expr: &actionExpr{
				pos: position{line: 1063, col: 5, offset: 32337},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 5, offset: 32337},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1063, col: 5, offset: 32337},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1063, col: 12, offset: 32344},
								offset: 182,
							},
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 5, offset: 32362},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1064, col: 11, offset: 32368},
								expr: &seqExpr{
									pos: position{line: 1064, col: 12, offset: 32369},
									exprs: []any{
										&notExpr{
											pos: position{line: 1064, col: 12, offset: 32369},
											expr: &ruleRefExpr{
												pos:    position{line: 1064, col: 13, offset: 32370},
												offset: 185,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1064, col: 30, offset: 32387},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1065, col: 5, offset: 32401},
							offset: 183,
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1069, col: 1, offset: 32559},
			expr: &actionExpr{
				pos: position{line: 1069, col: 16, offset: 32574},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 16, offset: 32574},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1069, col: 16, offset: 32574},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1069, col: 26, offset: 32584},
								offset: 185,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1069, col: 43, offset: 32601},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 1069, col: 53, offset: 32611},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1076, col: 1, offset: 32788},
			expr: &seqExpr{
				pos: position{line: 1076, col: 14, offset: 32801},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1076, col: 14, offset: 32801},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1076, col: 24, offset: 32811},
							offset: 185,
						},
					},
					&andExpr{
						pos: position{line: 1076, col: 41, offset: 32828},
						expr: &ruleRefExpr{
							pos:    position{line: 1076, col: 42, offset: 32829},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 1076, col: 52, offset: 32839},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1085, col: 1, offset: 33099},
			expr: &actionExpr{
				pos: position{line: 1085, col: 20, offset: 33118},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1085, col: 20, offset: 33118},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1085, col: 20, offset: 33118},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1085, col: 31, offset: 33129},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1085, col: 31, offset: 33129},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1085, col: 38, offset: 33136},
										expr: &litMatcher{
											pos:        position{line: 1085, col: 38, offset: 33136},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1085, col: 44, offset: 33142},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1092, col: 1, offset: 33265},
			expr: &actionExpr{
				pos: position{line: 1092, col: 20, offset: 33284},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 20, offset: 33284},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1092, col: 20, offset: 33284},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:    position{line: 1092, col: 31, offset: 33295},
								offset: 184,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1093, col: 5, offset: 33318},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1099, col: 1, offset: 33448},
			expr: &actionExpr{
				pos: position{line: 1099, col: 12, offset: 33459},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 12, offset: 33459},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1099, col: 12, offset: 33459},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1099, col: 20, offset: 33467},
								expr: &ruleRefExpr{
									pos:    position{line: 1099, col: 21, offset: 33468},
									offset: 187,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1099, col: 39, offset: 33486},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1103, col: 1, offset: 33543},
			expr: &actionExpr{
				pos: position{line: 1103, col: 19, offset: 33561},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 19, offset: 33561},
					exprs: []any{
						&notExpr{
							pos: position{line: 1103, col: 19, offset: 33561},
							expr: &ruleRefExpr{
								pos:    position{line: 1103, col: 20, offset: 33562},
								offset: 294,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1103, col: 30, offset: 33572},
							offset: 296,
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 46, offset: 33588},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1103, col: 55, offset: 33597},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1103, col: 55, offset: 33597},
										offset: 190,
									},
									&ruleRefExpr{
										pos:    position{line: 1103, col: 68, offset: 33610},
										offset: 191,
									},
									&ruleRefExpr{
										pos:    position{line: 1103, col: 82, offset: 33624},
										offset: 192,
									},
									&ruleRefExpr{
										pos:    position{line: 1103, col: 96, offset: 33638},
										offset: 18,
									},
									&ruleRefExpr{
										pos:    position{line: 1103, col: 113, offset: 33655},
										offset: 22,
									},
									&ruleRefExpr{
										pos:    position{line: 1103, col: 130, offset: 33672},
										offset: 89,
									},
									&ruleRefExpr{
										pos:    position{line: 1103, col: 144, offset: 33686},
										offset: 188,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1103, col: 158, offset: 33700},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1107, col: 1, offset: 33739},
			expr: &actionExpr{
				pos: position{line: 1107, col: 16, offset: 33754},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 16, offset: 33754},
					exprs: []any{
						&notExpr{
							pos: position{line: 1107, col: 16, offset: 33754},
							expr: &ruleRefExpr{
								pos:    position{line: 1107, col: 17, offset: 33755},
								offset: 268,
							},
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 35, offset: 33773},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1107, col: 43, offset: 33781},
								expr: &ruleRefExpr{
									pos:    position{line: 1107, col: 43, offset: 33781},
									offset: 189,
								},
							},
						},
						&andExpr{
							pos: position{line: 1107, col: 64, offset: 33802},
							expr: &ruleRefExpr{
								pos:    position{line: 1107, col: 65, offset: 33803},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1111, col: 1, offset: 33890},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 4, offset: 33917},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1112, col: 4, offset: 33917},
						offset: 41,
					},
					&oneOrMoreExpr{
						pos: position{line: 1114, col: 6, offset: 33948},
						expr: &charClassMatcher{
							pos:        position{line: 1114, col: 6, offset: 33948},
							val:        "[^\\r\\n{]",
							chars:      []rune{'\r', '\n', '{'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&litMatcher{
						pos:        position{line: 1115, col: 7, offset: 33966},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1118, col: 1, offset: 33974},
			expr: &actionExpr{
				pos: position{line: 1118, col: 14, offset: 33987},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1118, col: 14, offset: 33987},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1118, col: 14, offset: 33987},
							offset: 263,
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 29, offset: 34002},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1118, col: 41, offset: 34014},
								offset: 269,
							},
						},
						&litMatcher{
							pos:        position{line: 1118, col: 64, offset: 34037},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1118, col: 69, offset: 34042},
							offset: 303,
						},
						&ruleRefExpr{
							pos:    position{line: 1118, col: 80, offset: 34053},
							offset: 299,
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 90, offset: 34063},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1118, col: 96, offset: 34069},
								expr: &ruleRefExpr{
									pos:    position{line: 1118, col: 97, offset: 34070},
									offset: 187,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1118, col: 116, offset: 34089},
							offset: 267,
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1123, col: 1, offset: 34277},
			expr: &actionExpr{
				pos: position{line: 1123, col: 15, offset: 34291},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 15, offset: 34291},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1123, col: 15, offset: 34291},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1123, col: 26, offset: 34302},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1123, col: 38, offset: 34314},
								offset: 269,
							},
						},
						&litMatcher{
							pos:        position{line: 1123, col: 61, offset: 34337},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1123, col: 66, offset: 34342},
							offset: 303,
						},
						&ruleRefExpr{
							pos:    position{line: 1123, col: 77, offset: 34353},
							offset: 299,
						},
						&labeledExpr{
							pos:   position{line: 1123, col: 87, offset: 34363},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1123, col: 93, offset: 34369},
								expr: &ruleRefExpr{
									pos:    position{line: 1123, col: 94, offset: 34370},
									offset: 187,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1123, col: 113, offset: 34389},
							offset: 267,
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1128, col: 1, offset: 34579},
			expr: &actionExpr{
				pos: position{line: 1128, col: 15, offset: 34593},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 15, offset: 34593},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1128, col: 15, offset: 34593},
							offset: 274,
						},
						&litMatcher{
							pos:        position{line: 1128, col: 31, offset: 34609},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1128, col: 35, offset: 34613},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 45, offset: 34623},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1128, col: 51, offset: 34629},
								offset: 275,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1128, col: 64, offset: 34642},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 75, offset: 34653},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1128, col: 84, offset: 34662},
								offset: 276,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1128, col: 100, offset: 34678},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 110, offset: 34688},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1128, col: 117, offset: 34695},
								offset: 275,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1128, col: 130, offset: 34708},
							offset: 303,
						},
						&litMatcher{
							pos:        position{line: 1128, col: 140, offset: 34718},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1128, col: 144, offset: 34722},
							offset: 303,
						},
						&ruleRefExpr{
							pos:    position{line: 1128, col: 155, offset: 34733},
							offset: 299,
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 165, offset: 34743},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1128, col: 171, offset: 34749},
								expr: &ruleRefExpr{
									pos:    position{line: 1128, col: 172, offset: 34750},
									offset: 187,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1128, col: 191, offset: 34769},
							offset: 267,
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1135, col: 1, offset: 34990},
			expr: &actionExpr{
				pos: position{line: 1136, col: 5, offset: 35002},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 5, offset: 35002},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1136, col: 5, offset: 35002},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1136, col: 12, offset: 35009},
								offset: 194,
							},
						},
						&labeledExpr{
							pos:   position{line: 1137, col: 5, offset: 35025},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1137, col: 11, offset: 35031},
								expr: &seqExpr{
									pos: position{line: 1137, col: 12, offset: 35032},
									exprs: []any{
										&notExpr{
											pos: position{line: 1137, col: 12, offset: 35032},
											expr: &ruleRefExpr{
												pos:    position{line: 1137, col: 13, offset: 35033},
												offset: 197,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1137, col: 28, offset: 35048},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1138, col: 5, offset: 35062},
							offset: 195,
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1142, col: 1, offset: 35214},
			expr: &actionExpr{
				pos: position{line: 1142, col: 14, offset: 35227},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 14, offset: 35227},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1142, col: 14, offset: 35227},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1142, col: 24, offset: 35237},
								offset: 197,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1142, col: 39, offset: 35252},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 1142, col: 49, offset: 35262},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1149, col: 1, offset: 35437},
			expr: &seqExpr{
				pos: position{line: 1149, col: 12, offset: 35448},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1149, col: 12, offset: 35448},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1149, col: 22, offset: 35458},
							offset: 197,
						},
					},
					&andExpr{
						pos: position{line: 1149, col: 37, offset: 35473},
						expr: &ruleRefExpr{
							pos:    position{line: 1149, col: 38, offset: 35474},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 1149, col: 48, offset: 35484},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1158, col: 1, offset: 35736},
			expr: &actionExpr{
				pos: position{line: 1158, col: 19, offset: 35754},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1158, col: 19, offset: 35754},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1158, col: 19, offset: 35754},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1158, col: 31, offset: 35766},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1158, col: 31, offset: 35766},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1158, col: 38, offset: 35773},
										expr: &litMatcher{
											pos:        position{line: 1158, col: 38, offset: 35773},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1158, col: 44, offset: 35779},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1165, col: 1, offset: 35904},
			expr: &actionExpr{
				pos: position{line: 1165, col: 18, offset: 35921},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 18, offset: 35921},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1165, col: 18, offset: 35921},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:    position{line: 1165, col: 30, offset: 35933},
								offset: 196,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1166, col: 5, offset: 35955},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1172, col: 1, offset: 36084},
			expr: &actionExpr{
				pos: position{line: 1172, col: 17, offset: 36100},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 17, offset: 36100},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1172, col: 17, offset: 36100},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1172, col: 22, offset: 36105},
								expr: &ruleRefExpr{
									pos:    position{line: 1172, col: 22, offset: 36105},
									offset: 77,
								},
							},
						},
						&andExpr{
							pos: position{line: 1172, col: 37, offset: 36120},
							expr: &ruleRefExpr{
								pos:    position{line: 1172, col: 38, offset: 36121},
								offset: 299,
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 48, offset: 36131},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1172, col: 54, offset: 36137},
								expr: &ruleRefExpr{
									pos:    position{line: 1172, col: 55, offset: 36138},
									offset: 202,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 70, offset: 36153},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1172, col: 85, offset: 36168},
								expr: &ruleRefExpr{
									pos:    position{line: 1172, col: 86, offset: 36169},
									offset: 203,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlock",
			pos:  position{line: 1183, col: 1, offset: 36401},
			expr: &actionExpr{
				pos: position{line: 1183, col: 17, offset: 36417},
				run: (*parser).callonAttachedBlock1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 17, offset: 36417},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1183, col: 17, offset: 36417},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1183, col: 26, offset: 36426},
								offset: 200,
							},
						},
						&andExpr{
							pos: position{line: 1183, col: 48, offset: 36448},
							expr: &ruleRefExpr{
								pos:    position{line: 1183, col: 49, offset: 36449},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1187, col: 1, offset: 36488},
			expr: &actionExpr{
				pos: position{line: 1187, col: 24, offset: 36511},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 24, offset: 36511},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1187, col: 24, offset: 36511},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1187, col: 28, offset: 36515},
							offset: 303,
						},
						&ruleRefExpr{
							pos:    position{line: 1187, col: 38, offset: 36525},
							offset: 287,
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 46, offset: 36533},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1187, col: 53, offset: 36540},
								offset: 3,
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1191, col: 1, offset: 36628},
			expr: &actionExpr{
				pos: position{line: 1191, col: 20, offset: 36647},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 20, offset: 36647},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1191, col: 20, offset: 36647},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1191, col: 24, offset: 36651},
							offset: 303,
						},
						&ruleRefExpr{
							pos:    position{line: 1191, col: 34, offset: 36661},
							offset: 287,
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 42, offset: 36669},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1191, col: 48, offset: 36675},
								offset: 2,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1195, col: 1, offset: 36771},
			expr: &actionExpr{
				pos: position{line: 1195, col: 16, offset: 36786},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 16, offset: 36786},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1195, col: 16, offset: 36786},
							offset: 299,
						},
						&notExpr{
							pos: position{line: 1195, col: 26, offset: 36796},
							expr: &ruleRefExpr{
								pos:    position{line: 1195, col: 27, offset: 36797},
								offset: 233,
							},
						},
						&notExpr{
							pos: position{line: 1195, col: 45, offset: 36815},
							expr: &ruleRefExpr{
								pos:    position{line: 1195, col: 46, offset: 36816},
								offset: 235,
							},
						},
						&notExpr{
							pos: position{line: 1195, col: 66, offset: 36836},
							expr: &ruleRefExpr{
								pos:    position{line: 1195, col: 67, offset: 36837},
								offset: 14,
							},
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 84, offset: 36854},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1195, col: 92, offset: 36862},
								expr: &ruleRefExpr{
									pos:    position{line: 1195, col: 92, offset: 36862},
									offset: 77,
								},
							},
						},
						&andExpr{
							pos: position{line: 1195, col: 107, offset: 36877},
							expr: &ruleRefExpr{
								pos:    position{line: 1195, col: 108, offset: 36878},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1199, col: 1, offset: 36945},
			expr: &actionExpr{
				pos: position{line: 1199, col: 18, offset: 36962},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 18, offset: 36962},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1199, col: 18, offset: 36962},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1199, col: 25, offset: 36969},
								expr: &ruleRefExpr{
									pos:    position{line: 1199, col: 26, offset: 36970},
									offset: 200,
								},
							},
						},
						&andExpr{
							pos: position{line: 1199, col: 49, offset: 36993},
							expr: &ruleRefExpr{
								pos:    position{line: 1199, col: 50, offset: 36994},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1204, col: 1, offset: 37033},
			expr: &actionExpr{
				pos: position{line: 1204, col: 17, offset: 37049},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 17, offset: 37049},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1204, col: 18, offset: 37050},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1204, col: 18, offset: 37050},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1204, col: 26, offset: 37058},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1204, col: 26, offset: 37058},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1204, col: 30, offset: 37062},
											expr: &ruleRefExpr{
												pos:    position{line: 1204, col: 30, offset: 37062},
												offset: 308,
											},
										},
										&litMatcher{
											pos:        position{line: 1204, col: 33, offset: 37065},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1204, col: 37, offset: 37069},
											expr: &ruleRefExpr{
												pos:    position{line: 1204, col: 37, offset: 37069},
												offset: 308,
											},
										},
										&litMatcher{
											pos:        position{line: 1204, col: 40, offset: 37072},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1204, col: 46, offset: 37078},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1204, col: 46, offset: 37078},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1204, col: 50, offset: 37082},
											expr: &ruleRefExpr{
												pos:    position{line: 1204, col: 50, offset: 37082},
												offset: 308,
											},
										},
										&litMatcher{
											pos:        position{line: 1204, col: 53, offset: 37085},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1204, col: 57, offset: 37089},
											expr: &ruleRefExpr{
												pos:    position{line: 1204, col: 57, offset: 37089},
												offset: 308,
											},
										},
										&litMatcher{
											pos:        position{line: 1204, col: 60, offset: 37092},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1204, col: 66, offset: 37098},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1204, col: 66, offset: 37098},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1204, col: 70, offset: 37102},
											expr: &ruleRefExpr{
												pos:    position{line: 1204, col: 70, offset: 37102},
												offset: 308,
											},
										},
										&litMatcher{
											pos:        position{line: 1204, col: 73, offset: 37105},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1204, col: 77, offset: 37109},
											expr: &ruleRefExpr{
												pos:    position{line: 1204, col: 77, offset: 37109},
												offset: 308,
											},
										},
										&litMatcher{
											pos:        position{line: 1204, col: 80, offset: 37112},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1204, col: 85, offset: 37117},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 1204, col: 95, offset: 37127},
							expr: &ruleRefExpr{
								pos:    position{line: 1204, col: 96, offset: 37128},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1209, col: 1, offset: 37199},
			expr: &actionExpr{
				pos: position{line: 1209, col: 13, offset: 37211},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 13, offset: 37211},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1209, col: 14, offset: 37212},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1209, col: 21, offset: 37219},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 1209, col: 31, offset: 37229},
							expr: &ruleRefExpr{
								pos:    position{line: 1209, col: 32, offset: 37230},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1214, col: 1, offset: 37297},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 37310},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 37310},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 37310},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1215, col: 12, offset: 37317},
								offset: 207,
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 37334},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1216, col: 11, offset: 37340},
								expr: &seqExpr{
									pos: position{line: 1216, col: 12, offset: 37341},
									exprs: []any{
										&notExpr{
											pos: position{line: 1216, col: 12, offset: 37341},
											expr: &ruleRefExpr{
												pos:    position{line: 1216, col: 13, offset: 37342},
												offset: 210,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1216, col: 29, offset: 37358},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1217, col: 5, offset: 37372},
							offset: 208,
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1221, col: 1, offset: 37527},
			expr: &actionExpr{
				pos: position{line: 1221, col: 15, offset: 37541},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 15, offset: 37541},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1221, col: 15, offset: 37541},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1221, col: 25, offset: 37551},
								offset: 210,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1221, col: 41, offset: 37567},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 1221, col: 51, offset: 37577},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1228, col: 1, offset: 37761},
			expr: &seqExpr{
				pos: position{line: 1228, col: 13, offset: 37773},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1228, col: 13, offset: 37773},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1228, col: 23, offset: 37783},
							offset: 210,
						},
					},
					&andExpr{
						pos: position{line: 1228, col: 39, offset: 37799},
						expr: &ruleRefExpr{
							pos:    position{line: 1228, col: 40, offset: 37800},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 1228, col: 50, offset: 37810},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1237, col: 1, offset: 38076},
			expr: &actionExpr{
				pos: position{line: 1237, col: 19, offset: 38094},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 19, offset: 38094},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1237, col: 19, offset: 38094},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1237, col: 30, offset: 38105},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1237, col: 30, offset: 38105},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1237, col: 36, offset: 38111},
										expr: &litMatcher{
											pos:        position{line: 1237, col: 36, offset: 38111},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1237, col: 42, offset: 38117},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1244, col: 1, offset: 38244},
			expr: &actionExpr{
				pos: position{line: 1244, col: 19, offset: 38262},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 19, offset: 38262},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1244, col: 19, offset: 38262},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1244, col: 28, offset: 38271},
								offset: 209,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1245, col: 5, offset: 38293},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1250, col: 1, offset: 38423},
			expr: &actionExpr{
				pos: position{line: 1250, col: 14, offset: 38436},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 15, offset: 38437},
					exprs: []any{
						&notExpr{
							pos: position{line: 1250, col: 15, offset: 38437},
							expr: &ruleRefExpr{
								pos:    position{line: 1250, col: 16, offset: 38438},
								offset: 210,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1250, col: 32, offset: 38454},
							offset: 295,
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 45, offset: 38467},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1250, col: 50, offset: 38472},
								offset: 302,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1250, col: 58, offset: 38480},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1256, col: 1, offset: 38529},
			expr: &actionExpr{
				pos: position{line: 1257, col: 5, offset: 38540},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1257, col: 5, offset: 38540},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1257, col: 5, offset: 38540},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1257, col: 12, offset: 38547},
								offset: 213,
							},
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 5, offset: 38562},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1258, col: 11, offset: 38568},
								expr: &ruleRefExpr{
									pos:    position{line: 1258, col: 12, offset: 38569},
									offset: 217,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1259, col: 5, offset: 38584},
							offset: 214,
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1263, col: 1, offset: 38743},
			expr: &actionExpr{
				pos: position{line: 1263, col: 13, offset: 38755},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 13, offset: 38755},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1263, col: 13, offset: 38755},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1263, col: 23, offset: 38765},
								offset: 216,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1263, col: 37, offset: 38779},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 1263, col: 47, offset: 38789},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1270, col: 1, offset: 38963},
			expr: &seqExpr{
				pos: position{line: 1270, col: 11, offset: 38973},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1270, col: 11, offset: 38973},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1270, col: 21, offset: 38983},
							offset: 216,
						},
					},
					&andExpr{
						pos: position{line: 1270, col: 35, offset: 38997},
						expr: &ruleRefExpr{
							pos:    position{line: 1270, col: 36, offset: 38998},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 1270, col: 46, offset: 39008},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1279, col: 1, offset: 39262},
			expr: &actionExpr{
				pos: position{line: 1279, col: 14, offset: 39275},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1279, col: 14, offset: 39275},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1279, col: 14, offset: 39275},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1279, col: 22, offset: 39283},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1279, col: 22, offset: 39283},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1279, col: 29, offset: 39290},
										expr: &litMatcher{
											pos:        position{line: 1279, col: 29, offset: 39290},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1279, col: 35, offset: 39296},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1286, col: 1, offset: 39413},
			expr: &actionExpr{
				pos: position{line: 1286, col: 17, offset: 39429},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 17, offset: 39429},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1286, col: 17, offset: 39429},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:    position{line: 1286, col: 25, offset: 39437},
								offset: 215,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1287, col: 5, offset: 39454},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1292, col: 1, offset: 39577},
			expr: &actionExpr{
				pos: position{line: 1292, col: 12, offset: 39588},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 13, offset: 39589},
					exprs: []any{
						&notExpr{
							pos: position{line: 1292, col: 13, offset: 39589},
							expr: &ruleRefExpr{
								pos:    position{line: 1292, col: 14, offset: 39590},
								offset: 216,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1292, col: 28, offset: 39604},
							offset: 295,
						},
						&labeledExpr{
							pos:   position{line: 1292, col: 41, offset: 39617},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1292, col: 46, offset: 39622},
								offset: 302,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1292, col: 54, offset: 39630},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1300, col: 1, offset: 39681},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 18, offset: 39698},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1300, col: 18, offset: 39698},
						offset: 219,
					},
					&ruleRefExpr{
						pos:    position{line: 1300, col: 43, offset: 39723},
						offset: 223,
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1302, col: 1, offset: 39747},
			expr: &actionExpr{
				pos: position{line: 1302, col: 26, offset: 39772},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1302, col: 26, offset: 39772},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1302, col: 26, offset: 39772},
							offset: 220,
						},
						&labeledExpr{
							pos:   position{line: 1302, col: 46, offset: 39792},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 1302, col: 50, offset: 39796},
								offset: 221,
							},
						},
						&labeledExpr{
							pos:   position{line: 1302, col: 68, offset: 39814},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1302, col: 74, offset: 39820},
								expr: &actionExpr{
									pos: position{line: 1302, col: 75, offset: 39821},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1302, col: 75, offset: 39821},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 1302, col: 75, offset: 39821},
												offset: 303,
											},
											&litMatcher{
												pos:        position{line: 1302, col: 85, offset: 39831},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1302, col: 89, offset: 39835},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1302, col: 96, offset: 39842},
													exprs: []any{
														&ruleRefExpr{
															pos:    position{line: 1302, col: 96, offset: 39842},
															offset: 303,
														},
														&ruleRefExpr{
															pos:    position{line: 1302, col: 106, offset: 39852},
															offset: 222,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1302, col: 150, offset: 39896},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1310, col: 1, offset: 40100},
			expr: &litMatcher{
				pos:        position{line: 1310, col: 23, offset: 40122},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1312, col: 1, offset: 40129},
			expr: &actionExpr{
				pos: position{line: 1312, col: 21, offset: 40149},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 21, offset: 40149},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1312, col: 22, offset: 40150},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 1312, col: 22, offset: 40150},
									offset: 292,
								},
								&charClassMatcher{
									pos:        position{line: 1312, col: 30, offset: 40158},
									val:        "[:_]",
									chars:      []rune{':', '_'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1312, col: 36, offset: 40164},
							expr: &charClassMatcher{
								pos:        position{line: 1312, col: 36, offset: 40164},
								val:        "[\\p{L}\\p{N} _:.-]",
								chars:      []rune{' ', '_', ':', '.', '-'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1317, col: 1, offset: 40316},
			expr: &oneOrMoreExpr{
				pos: position{line: 1317, col: 23, offset: 40338},
				expr: &choiceExpr{
					pos: position{line: 1318, col: 5, offset: 40344},
					alternatives: []any{
						&oneOrMoreExpr{
							pos: position{line: 1318, col: 6, offset: 40345},
							expr: &charClassMatcher{
								pos:        position{line: 1318, col: 6, offset: 40345},
								val:        "[^<>{[\\]]",
								chars:      []rune{'<', '>', '{', '[', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1319, col: 7, offset: 40363},
							offset: 41,
						},
						&litMatcher{
							pos:        position{line: 1320, col: 7, offset: 40389},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentCrossReference",
			pos:  position{line: 1323, col: 1, offset: 40398},
			expr: &actionExpr{
				pos: position{line: 1323, col: 26, offset: 40423},
				run: (*parser).callonDocumentCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 26, offset: 40423},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1323, col: 26, offset: 40423},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 34, offset: 40431},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 1323, col: 40, offset: 40437},
								offset: 146,
							},
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 46, offset: 40443},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1323, col: 58, offset: 40455},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1330, col: 1, offset: 40621},
			expr: &actionExpr{
				pos: position{line: 1330, col: 18, offset: 40638},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 18, offset: 40638},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1330, col: 18, offset: 40638},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1330, col: 28, offset: 40648},
								expr: &litMatcher{
									pos:        position{line: 1330, col: 28, offset: 40648},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 33, offset: 40653},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1330, col: 42, offset: 40662},
								expr: &ruleRefExpr{
									pos:    position{line: 1330, col: 42, offset: 40662},
									offset: 225,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 66, offset: 40686},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1330, col: 71, offset: 40691},
								expr: &ruleRefExpr{
									pos:    position{line: 1330, col: 72, offset: 40692},
									offset: 226,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 93, offset: 40713},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1330, col: 98, offset: 40718},
								expr: &ruleRefExpr{
									pos:    position{line: 1330, col: 99, offset: 40719},
									offset: 227,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1330, col: 120, offset: 40740},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1337, col: 1, offset: 40864},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 5, offset: 40895},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1338, col: 5, offset: 40895},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1339, col: 7, offset: 40906},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1340, col: 8, offset: 40918},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1340, col: 8, offset: 40918},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1340, col: 12, offset: 40922},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1340, col: 21, offset: 40931},
									expr: &litMatcher{
										pos:        position{line: 1340, col: 21, offset: 40931},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1340, col: 26, offset: 40936},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1343, col: 1, offset: 40982},
			expr: &choiceExpr{
				pos: position{line: 1344, col: 5, offset: 41009},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1344, col: 5, offset: 41009},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1345, col: 7, offset: 41020},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1346, col: 8, offset: 41032},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1346, col: 8, offset: 41032},
								expr: &litMatcher{
									pos:        position{line: 1346, col: 8, offset: 41032},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1346, col: 13, offset: 41037},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1346, col: 18, offset: 41042},
									expr: &litMatcher{
										pos:        position{line: 1346, col: 18, offset: 41042},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1346, col: 23, offset: 41047},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1349, col: 1, offset: 41089},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 5, offset: 41116},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1350, col: 5, offset: 41116},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1351, col: 7, offset: 41127},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1352, col: 8, offset: 41139},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1352, col: 8, offset: 41139},
								expr: &litMatcher{
									pos:        position{line: 1352, col: 8, offset: 41139},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1352, col: 13, offset: 41144},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1352, col: 18, offset: 41149},
									expr: &litMatcher{
										pos:        position{line: 1352, col: 18, offset: 41149},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1352, col: 23, offset: 41154},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1355, col: 1, offset: 41196},
			expr: &actionExpr{
				pos: position{line: 1355, col: 18, offset: 41213},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1355, col: 18, offset: 41213},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1355, col: 18, offset: 41213},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1355, col: 28, offset: 41223},
								expr: &litMatcher{
									pos:        position{line: 1355, col: 28, offset: 41223},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1355, col: 33, offset: 41228},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1355, col: 42, offset: 41237},
								expr: &ruleRefExpr{
									pos:    position{line: 1355, col: 42, offset: 41237},
									offset: 229,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1355, col: 66, offset: 41261},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1355, col: 71, offset: 41266},
								expr: &ruleRefExpr{
									pos:    position{line: 1355, col: 72, offset: 41267},
									offset: 230,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1355, col: 93, offset: 41288},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1355, col: 98, offset: 41293},
								expr: &ruleRefExpr{
									pos:    position{line: 1355, col: 99, offset: 41294},
									offset: 231,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1355, col: 120, offset: 41315},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1362, col: 1, offset: 41439},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 5, offset: 41470},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1363, col: 5, offset: 41470},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1364, col: 7, offset: 41481},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1365, col: 8, offset: 41493},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1365, col: 8, offset: 41493},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1365, col: 12, offset: 41497},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1365, col: 21, offset: 41506},
									expr: &litMatcher{
										pos:        position{line: 1365, col: 21, offset: 41506},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1365, col: 26, offset: 41511},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1368, col: 1, offset: 41557},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 5, offset: 41584},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1369, col: 5, offset: 41584},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1370, col: 7, offset: 41595},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1371, col: 8, offset: 41607},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1371, col: 8, offset: 41607},
								expr: &litMatcher{
									pos:        position{line: 1371, col: 8, offset: 41607},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1371, col: 13, offset: 41612},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1371, col: 18, offset: 41617},
									expr: &litMatcher{
										pos:        position{line: 1371, col: 18, offset: 41617},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1371, col: 23, offset: 41622},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1374, col: 1, offset: 41664},
			expr: &choiceExpr{
				pos: position{line: 1375, col: 5, offset: 41691},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1375, col: 5, offset: 41691},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1376, col: 7, offset: 41702},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1377, col: 8, offset: 41714},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1377, col: 8, offset: 41714},
								expr: &litMatcher{
									pos:        position{line: 1377, col: 8, offset: 41714},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1377, col: 13, offset: 41719},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1377, col: 18, offset: 41724},
									expr: &litMatcher{
										pos:        position{line: 1377, col: 18, offset: 41724},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1377, col: 23, offset: 41729},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1382, col: 1, offset: 41773},
			expr: &actionExpr{
				pos: position{line: 1382, col: 19, offset: 41791},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 19, offset: 41791},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1382, col: 19, offset: 41791},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1382, col: 27, offset: 41799},
								offset: 233,
							},
						},
						&labeledExpr{
							pos:   position{line: 1382, col: 47, offset: 41819},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1382, col: 54, offset: 41826},
								offset: 198,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1388, col: 1, offset: 42015},
			expr: &actionExpr{
				pos: position{line: 1388, col: 21, offset: 42035},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1388, col: 21, offset: 42035},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1388, col: 21, offset: 42035},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1388, col: 29, offset: 42043},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 1388, col: 40, offset: 42054},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1388, col: 48, offset: 42062},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1388, col: 48, offset: 42062},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1388, col: 48, offset: 42062},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1388, col: 48, offset: 42062},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1388, col: 57, offset: 42071},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1388, col: 58, offset: 42072},
															expr: &litMatcher{
																pos:        position{line: 1388, col: 58, offset: 42072},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1390, col: 4, offset: 42118},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1396, col: 3, offset: 42213},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1396, col: 3, offset: 42213},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1396, col: 3, offset: 42213},
													expr: &charClassMatcher{
														pos:        position{line: 1396, col: 3, offset: 42213},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1396, col: 10, offset: 42220},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1397, col: 3, offset: 42257},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1397, col: 3, offset: 42257},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1397, col: 3, offset: 42257},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1397, col: 9, offset: 42263},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1398, col: 3, offset: 42300},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1398, col: 3, offset: 42300},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1398, col: 3, offset: 42300},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1398, col: 9, offset: 42306},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1399, col: 3, offset: 42343},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1399, col: 3, offset: 42343},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1399, col: 3, offset: 42343},
													offset: 228,
												},
												&litMatcher{
													pos:        position{line: 1399, col: 18, offset: 42358},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1400, col: 3, offset: 42395},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1400, col: 3, offset: 42395},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1400, col: 3, offset: 42395},
													offset: 224,
												},
												&litMatcher{
													pos:        position{line: 1400, col: 18, offset: 42410},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1402, col: 1, offset: 42447},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1410, col: 1, offset: 42538},
			expr: &actionExpr{
				pos: position{line: 1410, col: 21, offset: 42558},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1410, col: 21, offset: 42558},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1410, col: 21, offset: 42558},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1410, col: 29, offset: 42566},
								offset: 235,
							},
						},
						&labeledExpr{
							pos:   position{line: 1410, col: 50, offset: 42587},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1410, col: 60, offset: 42597},
								expr: &ruleRefExpr{
									pos:    position{line: 1410, col: 61, offset: 42598},
									offset: 236,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1410, col: 73, offset: 42610},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1410, col: 80, offset: 42617},
								offset: 198,
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1417, col: 1, offset: 42856},
			expr: &actionExpr{
				pos: position{line: 1417, col: 23, offset: 42878},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 23, offset: 42878},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1417, col: 23, offset: 42878},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1417, col: 31, offset: 42886},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 1417, col: 42, offset: 42897},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1417, col: 50, offset: 42905},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1417, col: 51, offset: 42906},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1417, col: 51, offset: 42906},
											expr: &litMatcher{
												pos:        position{line: 1417, col: 51, offset: 42906},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1417, col: 58, offset: 42913},
											expr: &litMatcher{
												pos:        position{line: 1417, col: 58, offset: 42913},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1419, col: 4, offset: 42955},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:    position{line: 1422, col: 1, offset: 43004},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1428, col: 1, offset: 43089},
			expr: &actionExpr{
				pos: position{line: 1428, col: 13, offset: 43101},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 13, offset: 43101},
					exprs: []any{
						&andExpr{
							pos: position{line: 1428, col: 13, offset: 43101},
							expr: &litMatcher{
								pos:        position{line: 1428, col: 14, offset: 43102},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1429, col: 1, offset: 43107},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1430, col: 7, offset: 43125},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1430, col: 7, offset: 43125},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1430, col: 7, offset: 43125},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1431, col: 7, offset: 43182},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1431, col: 7, offset: 43182},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1432, col: 7, offset: 43237},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1432, col: 7, offset: 43237},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1433, col: 7, offset: 43291},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1438, col: 1, offset: 43334},
			expr: &actionExpr{
				pos: position{line: 1438, col: 23, offset: 43356},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 23, offset: 43356},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1438, col: 23, offset: 43356},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1438, col: 36, offset: 43369},
								expr: &ruleRefExpr{
									pos:    position{line: 1438, col: 37, offset: 43370},
									offset: 73,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 55, offset: 43388},
							label: "term",
							expr: &ruleRefExpr{
								pos:    position{line: 1438, col: 61, offset: 43394},
								offset: 238,
							},
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 82, offset: 43415},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1438, col: 90, offset: 43423},
								offset: 239,
							},
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 113, offset: 43446},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1438, col: 124, offset: 43457},
								expr: &choiceExpr{
									pos: position{line: 1438, col: 125, offset: 43458},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1438, col: 125, offset: 43458},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:    position{line: 1438, col: 125, offset: 43458},
												offset: 308,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1438, col: 180, offset: 43513},
											offset: 287,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 190, offset: 43523},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1438, col: 197, offset: 43530},
								offset: 240,
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1449, col: 1, offset: 44042},
			expr: &actionExpr{
				pos: position{line: 1449, col: 23, offset: 44064},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1449, col: 23, offset: 44064},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1449, col: 28, offset: 44069},
						expr: &seqExpr{
							pos: position{line: 1449, col: 29, offset: 44070},
							exprs: []any{
								&notExpr{
									pos: position{line: 1449, col: 29, offset: 44070},
									expr: &ruleRefExpr{
										pos:    position{line: 1449, col: 30, offset: 44071},
										offset: 239,
									},
								},
								&notExpr{
									pos: position{line: 1449, col: 52, offset: 44093},
									expr: &ruleRefExpr{
										pos:    position{line: 1449, col: 53, offset: 44094},
										offset: 299,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 1449, col: 63, offset: 44104},
									offset: 77,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1453, col: 1, offset: 44160},
			expr: &actionExpr{
				pos: position{line: 1453, col: 25, offset: 44184},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1453, col: 25, offset: 44184},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1453, col: 25, offset: 44184},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 1453, col: 35, offset: 44194},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1453, col: 43, offset: 44202},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1453, col: 43, offset: 44202},
									expr: &choiceExpr{
										pos: position{line: 1453, col: 44, offset: 44203},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1453, col: 44, offset: 44203},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1453, col: 50, offset: 44209},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1455, col: 4, offset: 44251},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:    position{line: 1462, col: 1, offset: 44378},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1467, col: 1, offset: 44425},
			expr: &actionExpr{
				pos: position{line: 1467, col: 28, offset: 44452},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1467, col: 28, offset: 44452},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1467, col: 28, offset: 44452},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1467, col: 34, offset: 44458},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1467, col: 34, offset: 44458},
										expr: &ruleRefExpr{
											pos:    position{line: 1467, col: 34, offset: 44458},
											offset: 77,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1467, col: 51, offset: 44475},
										offset: 2,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1467, col: 65, offset: 44489},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1467, col: 80, offset: 44504},
								expr: &ruleRefExpr{
									pos:    position{line: 1467, col: 81, offset: 44505},
									offset: 203,
								},
							},
						},
						&andExpr{
							pos: position{line: 1467, col: 99, offset: 44523},
							expr: &ruleRefExpr{
								pos:    position{line: 1467, col: 100, offset: 44524},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1476, col: 1, offset: 44685},
			expr: &actionExpr{
				pos: position{line: 1476, col: 21, offset: 44705},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1476, col: 21, offset: 44705},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1476, col: 21, offset: 44705},
							offset: 242,
						},
						&notExpr{
							pos: position{line: 1476, col: 48, offset: 44732},
							expr: &litMatcher{
								pos:        position{line: 1476, col: 49, offset: 44733},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 54, offset: 44738},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 1476, col: 63, offset: 44747},
								offset: 243,
							},
						},
						&andExpr{
							pos: position{line: 1476, col: 89, offset: 44773},
							expr: &ruleRefExpr{
								pos:    position{line: 1476, col: 90, offset: 44774},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1480, col: 1, offset: 44864},
			expr: &actionExpr{
				pos: position{line: 1480, col: 30, offset: 44893},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1480, col: 30, offset: 44893},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1484, col: 1, offset: 44938},
			expr: &actionExpr{
				pos: position{line: 1484, col: 28, offset: 44965},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1484, col: 28, offset: 44965},
					expr: &charClassMatcher{
						pos:        position{line: 1484, col: 28, offset: 44965},
						val:        "[^\\n]",
						chars:      []rune{'\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1488, col: 1, offset: 45012},
			expr: &actionExpr{
				pos: position{line: 1489, col: 5, offset: 45035},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 5, offset: 45035},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1489, col: 5, offset: 45035},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1489, col: 12, offset: 45042},
								offset: 245,
							},
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 5, offset: 45069},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1490, col: 11, offset: 45075},
								expr: &ruleRefExpr{
									pos:    position{line: 1490, col: 12, offset: 45076},
									offset: 249,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1491, col: 5, offset: 45103},
							offset: 246,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1495, col: 1, offset: 45288},
			expr: &actionExpr{
				pos: position{line: 1495, col: 25, offset: 45312},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1495, col: 25, offset: 45312},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1495, col: 25, offset: 45312},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1495, col: 35, offset: 45322},
								offset: 248,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1495, col: 61, offset: 45348},
							offset: 299,
						},
						&andCodeExpr{
							pos: position{line: 1495, col: 72, offset: 45359},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1502, col: 1, offset: 45549},
			expr: &seqExpr{
				pos: position{line: 1502, col: 23, offset: 45571},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1502, col: 23, offset: 45571},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1502, col: 33, offset: 45581},
							offset: 248,
						},
					},
					&andExpr{
						pos: position{line: 1502, col: 59, offset: 45607},
						expr: &ruleRefExpr{
							pos:    position{line: 1502, col: 60, offset: 45608},
							offset: 299,
						},
					},
					&andCodeExpr{
						pos: position{line: 1502, col: 70, offset: 45618},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1511, col: 1, offset: 45904},
			expr: &actionExpr{
				pos: position{line: 1511, col: 34, offset: 45937},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1511, col: 34, offset: 45937},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1511, col: 34, offset: 45937},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1511, col: 50, offset: 45953},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1511, col: 50, offset: 45953},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1511, col: 57, offset: 45960},
										expr: &litMatcher{
											pos:        position{line: 1511, col: 57, offset: 45960},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1511, col: 63, offset: 45966},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1518, col: 1, offset: 46111},
			expr: &actionExpr{
				pos: position{line: 1518, col: 29, offset: 46139},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 29, offset: 46139},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1518, col: 29, offset: 46139},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:    position{line: 1518, col: 45, offset: 46155},
								offset: 247,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1519, col: 5, offset: 46192},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1524, col: 1, offset: 46343},
			expr: &actionExpr{
				pos: position{line: 1524, col: 24, offset: 46366},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1524, col: 25, offset: 46367},
					exprs: []any{
						&notExpr{
							pos: position{line: 1524, col: 25, offset: 46367},
							expr: &ruleRefExpr{
								pos:    position{line: 1524, col: 26, offset: 46368},
								offset: 248,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1524, col: 52, offset: 46394},
							offset: 295,
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 65, offset: 46407},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1524, col: 70, offset: 46412},
								offset: 302,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1524, col: 78, offset: 46420},
							offset: 299,
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1530, col: 1, offset: 46469},
			expr: &choiceExpr{
				pos: position{line: 1530, col: 11, offset: 46479},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1530, col: 11, offset: 46479},
						offset: 251,
					},
					&ruleRefExpr{
						pos:    position{line: 1530, col: 30, offset: 46498},
						offset: 252,
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1532, col: 1, offset: 46522},
			expr: &actionExpr{
				pos: position{line: 1532, col: 20, offset: 46541},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 20, offset: 46541},
					exprs: []any{
						&notExpr{
							pos: position{line: 1532, col: 20, offset: 46541},
							expr: &litMatcher{
								pos:        position{line: 1532, col: 21, offset: 46542},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1532, col: 26, offset: 46547},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 38, offset: 46559},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1532, col: 43, offset: 46564},
								offset: 19,
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 62, offset: 46583},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1532, col: 75, offset: 46596},
								expr: &ruleRefExpr{
									pos:    position{line: 1532, col: 76, offset: 46597},
									offset: 253,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1532, col: 98, offset: 46619},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1536, col: 1, offset: 46720},
			expr: &actionExpr{
				pos: position{line: 1536, col: 26, offset: 46745},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 26, offset: 46745},
					exprs: []any{
						&notExpr{
							pos: position{line: 1536, col: 26, offset: 46745},
							expr: &litMatcher{
								pos:        position{line: 1536, col: 27, offset: 46746},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1536, col: 32, offset: 46751},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 45, offset: 46764},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1536, col: 50, offset: 46769},
								offset: 19,
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 69, offset: 46788},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1536, col: 82, offset: 46801},
								expr: &ruleRefExpr{
									pos:    position{line: 1536, col: 83, offset: 46802},
									offset: 253,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1536, col: 105, offset: 46824},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1540, col: 1, offset: 46926},
			expr: &actionExpr{
				pos: position{line: 1540, col: 23, offset: 46948},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 23, offset: 46948},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1540, col: 23, offset: 46948},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 27, offset: 46952},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:    position{line: 1540, col: 40, offset: 46965},
								offset: 254,
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1544, col: 1, offset: 47018},
			expr: &choiceExpr{
				pos: position{line: 1544, col: 23, offset: 47040},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1544, col: 23, offset: 47040},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:        position{line: 1544, col: 23, offset: 47040},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1547, col: 7, offset: 47096},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1547, col: 7, offset: 47096},
							expr: &charClassMatcher{
								pos:        position{line: 1547, col: 7, offset: 47096},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1554, col: 1, offset: 47162},
			expr: &actionExpr{
				pos: position{line: 1554, col: 21, offset: 47182},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 21, offset: 47182},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1554, col: 21, offset: 47182},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1554, col: 32, offset: 47193},
								expr: &ruleRefExpr{
									pos:    position{line: 1554, col: 33, offset: 47194},
									offset: 84,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 53, offset: 47214},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1554, col: 59, offset: 47220},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1554, col: 59, offset: 47220},
										offset: 256,
									},
									&ruleRefExpr{
										pos:    position{line: 1554, col: 85, offset: 47246},
										offset: 259,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1558, col: 1, offset: 47392},
			expr: &actionExpr{
				pos: position{line: 1558, col: 27, offset: 47418},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 27, offset: 47418},
					exprs: []any{
						&notExpr{
							pos: position{line: 1558, col: 27, offset: 47418},
							expr: &ruleRefExpr{
								pos:    position{line: 1558, col: 28, offset: 47419},
								offset: 309,
							},
						},
						&litMatcher{
							pos:        position{line: 1558, col: 35, offset: 47426},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1558, col: 39, offset: 47430},
							expr: &notExpr{
								pos: position{line: 1558, col: 41, offset: 47432},
								expr: &litMatcher{
									pos:        position{line: 1558, col: 42, offset: 47433},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 47, offset: 47438},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1558, col: 54, offset: 47445},
								offset: 257,
							},
						},
						&litMatcher{
							pos:        position{line: 1558, col: 82, offset: 47473},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1558, col: 86, offset: 47477},
							expr: &litMatcher{
								pos:        position{line: 1558, col: 87, offset: 47478},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1558, col: 91, offset: 47482},
							expr: &notExpr{
								pos: position{line: 1558, col: 93, offset: 47484},
								expr: &ruleRefExpr{
									pos:    position{line: 1558, col: 94, offset: 47485},
									offset: 293,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1562, col: 1, offset: 47530},
			expr: &actionExpr{
				pos: position{line: 1562, col: 30, offset: 47559},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 30, offset: 47559},
					exprs: []any{
						&notExpr{
							pos: position{line: 1562, col: 30, offset: 47559},
							expr: &ruleRefExpr{
								pos:    position{line: 1562, col: 31, offset: 47560},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 33, offset: 47562},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1562, col: 39, offset: 47568},
								expr: &actionExpr{
									pos: position{line: 1562, col: 40, offset: 47569},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1562, col: 40, offset: 47569},
										exprs: []any{
											&notExpr{
												pos: position{line: 1562, col: 40, offset: 47569},
												expr: &ruleRefExpr{
													pos:    position{line: 1562, col: 41, offset: 47570},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 1562, col: 43, offset: 47572},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1562, col: 49, offset: 47578},
													expr: &ruleRefExpr{
														pos:    position{line: 1562, col: 50, offset: 47579},
														offset: 258,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1566, col: 1, offset: 47760},
			expr: &seqExpr{
				pos: position{line: 1566, col: 32, offset: 47791},
				exprs: []any{
					&notExpr{
						pos: position{line: 1566, col: 32, offset: 47791},
						expr: &seqExpr{
							pos: position{line: 1566, col: 34, offset: 47793},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1566, col: 34, offset: 47793},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&notExpr{
									pos: position{line: 1566, col: 38, offset: 47797},
									expr: &litMatcher{
										pos:        position{line: 1566, col: 39, offset: 47798},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1566, col: 44, offset: 47803},
						offset: 83,
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1568, col: 1, offset: 47825},
			expr: &actionExpr{
				pos: position{line: 1568, col: 27, offset: 47851},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1568, col: 27, offset: 47851},
					exprs: []any{
						&notExpr{
							pos: position{line: 1568, col: 27, offset: 47851},
							expr: &ruleRefExpr{
								pos:    position{line: 1568, col: 28, offset: 47852},
								offset: 310,
							},
						},
						&litMatcher{
							pos:        position{line: 1568, col: 41, offset: 47865},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 46, offset: 47870},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1568, col: 53, offset: 47877},
								offset: 260,
							},
						},
						&litMatcher{
							pos:        position{line: 1568, col: 81, offset: 47905},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1572, col: 1, offset: 47942},
			expr: &actionExpr{
				pos: position{line: 1572, col: 30, offset: 47971},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 30, offset: 47971},
					exprs: []any{
						&notExpr{
							pos: position{line: 1572, col: 30, offset: 47971},
							expr: &ruleRefExpr{
								pos:    position{line: 1572, col: 31, offset: 47972},
								offset: 308,
							},
						},
						&labeledExpr{
							pos:   position{line: 1572, col: 33, offset: 47974},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1572, col: 39, offset: 47980},
								expr: &actionExpr{
									pos: position{line: 1572, col: 40, offset: 47981},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1572, col: 40, offset: 47981},
										exprs: []any{
											&notExpr{
												pos: position{line: 1572, col: 40, offset: 47981},
												expr: &ruleRefExpr{
													pos:    position{line: 1572, col: 41, offset: 47982},
													offset: 308,
												},
											},
											&labeledExpr{
												pos:   position{line: 1572, col: 43, offset: 47984},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1572, col: 49, offset: 47990},
													expr: &ruleRefExpr{
														pos:    position{line: 1572, col: 50, offset: 47991},
														offset: 261,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1576, col: 1, offset: 48184},
			expr: &seqExpr{
				pos: position{line: 1576, col: 32, offset: 48215},
				exprs: []any{
					&notExpr{
						pos: position{line: 1576, col: 32, offset: 48215},
						expr: &litMatcher{
							pos:        position{line: 1576, col: 34, offset: 48217},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1576, col: 40, offset: 48223},
						offset: 83,
					},
				},
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1579, col: 1, offset: 48246},
			expr: &actionExpr{
				pos: position{line: 1579, col: 9, offset: 48254},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 9, offset: 48254},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1579, col: 9, offset: 48254},
							offset: 263,
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 24, offset: 48269},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1579, col: 36, offset: 48281},
								offset: 269,
							},
						},
						&litMatcher{
							pos:        position{line: 1579, col: 59, offset: 48304},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1579, col: 64, offset: 48309},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 1579, col: 75, offset: 48320},
							expr: &ruleRefExpr{
								pos:    position{line: 1579, col: 76, offset: 48321},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1584, col: 1, offset: 48441},
			expr: &litMatcher{
				pos:        position{line: 1584, col: 18, offset: 48458},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1586, col: 1, offset: 48470},
			expr: &actionExpr{
				pos: position{line: 1586, col: 10, offset: 48479},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1586, col: 10, offset: 48479},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1586, col: 10, offset: 48479},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 21, offset: 48490},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1586, col: 33, offset: 48502},
								offset: 269,
							},
						},
						&litMatcher{
							pos:        position{line: 1586, col: 56, offset: 48525},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1586, col: 61, offset: 48530},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 1586, col: 72, offset: 48541},
							expr: &ruleRefExpr{
								pos:    position{line: 1586, col: 73, offset: 48542},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1591, col: 1, offset: 48664},
			expr: &actionExpr{
				pos: position{line: 1591, col: 15, offset: 48678},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 15, offset: 48678},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1591, col: 15, offset: 48678},
							val:        "ifdef::",
							ignoreCase: false,
							want:       "\"ifdef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 25, offset: 48688},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1591, col: 37, offset: 48700},
								offset: 269,
							},
						},
						&litMatcher{
							pos:        position{line: 1591, col: 60, offset: 48723},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 64, offset: 48727},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1591, col: 73, offset: 48736},
								offset: 272,
							},
						},
						&litMatcher{
							pos:        position{line: 1591, col: 99, offset: 48762},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1591, col: 103, offset: 48766},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1596, col: 1, offset: 48932},
			expr: &actionExpr{
				pos: position{line: 1596, col: 16, offset: 48947},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 16, offset: 48947},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1596, col: 16, offset: 48947},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 27, offset: 48958},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1596, col: 39, offset: 48970},
								offset: 269,
							},
						},
						&litMatcher{
							pos:        position{line: 1596, col: 62, offset: 48993},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 66, offset: 48997},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1596, col: 75, offset: 49006},
								offset: 272,
							},
						},
						&litMatcher{
							pos:        position{line: 1596, col: 101, offset: 49032},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1596, col: 105, offset: 49036},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1601, col: 1, offset: 49204},
			expr: &actionExpr{
				pos: position{line: 1601, col: 12, offset: 49215},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 12, offset: 49215},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1601, col: 12, offset: 49215},
							offset: 268,
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 30, offset: 49233},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1601, col: 41, offset: 49244},
								expr: &ruleRefExpr{
									pos:    position{line: 1601, col: 42, offset: 49245},
									offset: 269,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1601, col: 66, offset: 49269},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1601, col: 72, offset: 49275},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 1601, col: 82, offset: 49285},
							expr: &ruleRefExpr{
								pos:    position{line: 1601, col: 83, offset: 49286},
								offset: 299,
							},
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1611, col: 1, offset: 49573},
			expr: &litMatcher{
				pos:        position{line: 1611, col: 21, offset: 49593},
				val:        "endif::",
				ignoreCase: false,
				want:       "\"endif::\"",
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1613, col: 1, offset: 49605},
			expr: &choiceExpr{
				pos: position{line: 1613, col: 25, offset: 49629},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1613, col: 25, offset: 49629},
						offset: 270,
					},
					&ruleRefExpr{
						pos:    position{line: 1613, col: 52, offset: 49656},
						offset: 271,
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1615, col: 1, offset: 49682},
			expr: &actionExpr{
				pos: position{line: 1615, col: 28, offset: 49709},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1615, col: 28, offset: 49709},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1615, col: 34, offset: 49715},
						expr: &actionExpr{
							pos: position{line: 1616, col: 5, offset: 49721},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1616, col: 5, offset: 49721},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1616, col: 5, offset: 49721},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1616, col: 10, offset: 49726},
											offset: 19,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1616, col: 29, offset: 49745},
										offset: 303,
									},
									&zeroOrOneExpr{
										pos: position{line: 1616, col: 39, offset: 49755},
										expr: &litMatcher{
											pos:        position{line: 1616, col: 39, offset: 49755},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1616, col: 44, offset: 49760},
										offset: 303,
									},
									&andCodeExpr{
										pos: position{line: 1617, col: 5, offset: 49775},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1627, col: 1, offset: 50036},
			expr: &actionExpr{
				pos: position{line: 1627, col: 28, offset: 50063},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1627, col: 28, offset: 50063},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1627, col: 34, offset: 50069},
						expr: &actionExpr{
							pos: position{line: 1628, col: 5, offset: 50075},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1628, col: 5, offset: 50075},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1628, col: 5, offset: 50075},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1628, col: 10, offset: 50080},
											offset: 19,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1628, col: 29, offset: 50099},
										offset: 303,
									},
									&zeroOrOneExpr{
										pos: position{line: 1628, col: 39, offset: 50109},
										expr: &litMatcher{
											pos:        position{line: 1628, col: 39, offset: 50109},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1628, col: 44, offset: 50114},
										offset: 303,
									},
									&andCodeExpr{
										pos: position{line: 1629, col: 5, offset: 50129},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1639, col: 1, offset: 50390},
			expr: &seqExpr{
				pos: position{line: 1639, col: 28, offset: 50417},
				exprs: []any{
					&notExpr{
						pos: position{line: 1639, col: 28, offset: 50417},
						expr: &litMatcher{
							pos:        position{line: 1639, col: 29, offset: 50418},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1639, col: 33, offset: 50422},
						expr: &ruleRefExpr{
							pos:    position{line: 1639, col: 33, offset: 50422},
							offset: 77,
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1641, col: 1, offset: 50439},
			expr: &actionExpr{
				pos: position{line: 1641, col: 10, offset: 50448},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1641, col: 10, offset: 50448},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1641, col: 10, offset: 50448},
							offset: 274,
						},
						&litMatcher{
							pos:        position{line: 1641, col: 26, offset: 50464},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1641, col: 30, offset: 50468},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 40, offset: 50478},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1641, col: 46, offset: 50484},
								offset: 275,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1641, col: 59, offset: 50497},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 70, offset: 50508},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1641, col: 79, offset: 50517},
								offset: 276,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1641, col: 95, offset: 50533},
							offset: 303,
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 105, offset: 50543},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1641, col: 112, offset: 50550},
								offset: 275,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1641, col: 125, offset: 50563},
							offset: 303,
						},
						&litMatcher{
							pos:        position{line: 1641, col: 135, offset: 50573},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1641, col: 139, offset: 50577},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1645, col: 1, offset: 50732},
			expr: &actionExpr{
				pos: position{line: 1645, col: 19, offset: 50750},
				run: (*parser).callonIfEvalStatement1,
				expr: &litMatcher{
					pos:        position{line: 1645, col: 19, offset: 50750},
					val:        "ifeval::",
					ignoreCase: false,
					want:       "\"ifeval::\"",
				},
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1649, col: 1, offset: 50801},
			expr: &actionExpr{
				pos: position{line: 1649, col: 15, offset: 50815},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1649, col: 15, offset: 50815},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1649, col: 20, offset: 50820},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 1649, col: 20, offset: 50820},
								offset: 34,
							},
							&ruleRefExpr{
								pos:    position{line: 1649, col: 48, offset: 50848},
								offset: 36,
							},
							&ruleRefExpr{
								pos:    position{line: 1649, col: 76, offset: 50876},
								offset: 38,
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1653, col: 1, offset: 51009},
			expr: &choiceExpr{
				pos: position{line: 1654, col: 7, offset: 51033},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1654, col: 8, offset: 51034},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1654, col: 8, offset: 51034},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1655, col: 8, offset: 51097},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1655, col: 8, offset: 51097},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1656, col: 8, offset: 51163},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1656, col: 8, offset: 51163},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1657, col: 8, offset: 51229},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1657, col: 8, offset: 51229},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1658, col: 8, offset: 51302},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1658, col: 8, offset: 51302},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1659, col: 8, offset: 51371},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1659, col: 8, offset: 51371},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1662, col: 1, offset: 51442},
			expr: &actionExpr{
				pos: position{line: 1662, col: 20, offset: 51461},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1662, col: 21, offset: 51462},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1662, col: 21, offset: 51462},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1662, col: 27, offset: 51468},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1662, col: 33, offset: 51474},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1666, col: 1, offset: 51545},
			expr: &seqExpr{
				pos: position{line: 1666, col: 15, offset: 51559},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1666, col: 15, offset: 51559},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1666, col: 19, offset: 51563},
						expr: &notExpr{
							pos: position{line: 1666, col: 21, offset: 51565},
							expr: &litMatcher{
								pos:        position{line: 1666, col: 22, offset: 51566},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1668, col: 1, offset: 51572},
			expr: &choiceExpr{
				pos: position{line: 1668, col: 15, offset: 51586},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1668, col: 15, offset: 51586},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1668, col: 15, offset: 51586},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1668, col: 15, offset: 51586},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1668, col: 21, offset: 51592},
									expr: &charClassMatcher{
										pos:        position{line: 1668, col: 22, offset: 51593},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1670, col: 9, offset: 51651},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1670, col: 9, offset: 51651},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1670, col: 9, offset: 51651},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1670, col: 13, offset: 51655},
									expr: &charClassMatcher{
										pos:        position{line: 1670, col: 14, offset: 51656},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1675, col: 1, offset: 51719},
			expr: &actionExpr{
				pos: position{line: 1675, col: 15, offset: 51733},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1675, col: 17, offset: 51735},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 1675, col: 18, offset: 51736},
							val:        "[,;.?)/:!=\"'@-[\\]]",
							chars:      []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:     []rune{'@', '['},
							ignoreCase: false,
							inverted:   false,
						},
						&seqExpr{
							pos: position{line: 1675, col: 41, offset: 51759},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1675, col: 41, offset: 51759},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1675, col: 45, offset: 51763},
									expr: &litMatcher{
										pos:        position{line: 1675, col: 46, offset: 51764},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1679, col: 1, offset: 51831},
			expr: &actionExpr{
				pos: position{line: 1679, col: 13, offset: 51843},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1679, col: 13, offset: 51843},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1679, col: 13, offset: 51843},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1679, col: 17, offset: 51847},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 1679, col: 27, offset: 51857},
							expr: &ruleRefExpr{
								pos:    position{line: 1679, col: 29, offset: 51859},
								offset: 299,
							},
						},
						&andCodeExpr{
							pos: position{line: 1679, col: 40, offset: 51870},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1685, col: 1, offset: 51971},
			expr: &choiceExpr{
				pos: position{line: 1685, col: 16, offset: 51986},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1685, col: 16, offset: 51986},
						offset: 284,
					},
					&ruleRefExpr{
						pos:    position{line: 1685, col: 36, offset: 52006},
						offset: 283,
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1687, col: 1, offset: 52026},
			expr: &choiceExpr{
				pos: position{line: 1687, col: 22, offset: 52047},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1687, col: 22, offset: 52047},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&litMatcher{
						pos:        position{line: 1687, col: 30, offset: 52055},
						val:        "`\"",
						ignoreCase: false,
						want:       "\"`\\\"\"",
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1689, col: 1, offset: 52064},
			expr: &choiceExpr{
				pos: position{line: 1689, col: 22, offset: 52085},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1689, col: 22, offset: 52085},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&litMatcher{
						pos:        position{line: 1689, col: 29, offset: 52092},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1691, col: 1, offset: 52100},
			expr: &actionExpr{
				pos: position{line: 1691, col: 13, offset: 52112},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1691, col: 13, offset: 52112},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1691, col: 13, offset: 52112},
							offset: 296,
						},
						&ruleRefExpr{
							pos:    position{line: 1691, col: 29, offset: 52128},
							offset: 303,
						},
						&ruleRefExpr{
							pos:    position{line: 1691, col: 39, offset: 52138},
							offset: 287,
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1695, col: 1, offset: 52228},
			expr: &seqExpr{
				pos: position{line: 1695, col: 15, offset: 52242},
				exprs: []any{
					&notExpr{
						pos: position{line: 1695, col: 15, offset: 52242},
						expr: &litMatcher{
							pos:        position{line: 1695, col: 16, offset: 52243},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1695, col: 21, offset: 52248},
						offset: 287,
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1697, col: 1, offset: 52257},
			expr: &actionExpr{
				pos: position{line: 1697, col: 11, offset: 52267},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1697, col: 12, offset: 52268},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1697, col: 12, offset: 52268},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1697, col: 19, offset: 52275},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
						&litMatcher{
							pos:        position{line: 1697, col: 26, offset: 52282},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1701, col: 1, offset: 52344},
			expr: &actionExpr{
				pos: position{line: 1701, col: 15, offset: 52358},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1701, col: 15, offset: 52358},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1701, col: 15, offset: 52358},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:    position{line: 1701, col: 26, offset: 52369},
								offset: 289,
							},
						},
						&litMatcher{
							pos:        position{line: 1701, col: 42, offset: 52385},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1705, col: 1, offset: 52421},
			expr: &actionExpr{
				pos: position{line: 1705, col: 20, offset: 52440},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 20, offset: 52440},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1705, col: 21, offset: 52441},
							expr: &charClassMatcher{
								pos:        position{line: 1705, col: 21, offset: 52441},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1705, col: 29, offset: 52449},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1711, col: 1, offset: 52540},
			expr: &notExpr{
				pos: position{line: 1711, col: 14, offset: 52553},
				expr: &ruleRefExpr{
					pos:    position{line: 1711, col: 15, offset: 52554},
					offset: 287,
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1713, col: 1, offset: 52563},
			expr: &notExpr{
				pos: position{line: 1713, col: 12, offset: 52574},
				expr: &ruleRefExpr{
					pos:    position{line: 1713, col: 13, offset: 52575},
					offset: 308,
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1715, col: 1, offset: 52578},
			expr: &charClassMatcher{
				pos:        position{line: 1715, col: 9, offset: 52586},
				val:        "[\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1717, col: 1, offset: 52595},
			expr: &charClassMatcher{
				pos:        position{line: 1717, col: 16, offset: 52610},
				val:        "[\\p{L}\\p{N}]",
				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1719, col: 1, offset: 52624},
			expr: &notExpr{
				pos: position{line: 1719, col: 13, offset: 52636},
				expr: &anyMatcher{
					line: 1719, col: 14, offset: 52637,
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1721, col: 1, offset: 52641},
			expr: &andExpr{
				pos: position{line: 1721, col: 16, offset: 52656},
				expr: &anyMatcher{
					line: 1721, col: 18, offset: 52658,
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1723, col: 1, offset: 52662},
			expr: &notExpr{
				pos: position{line: 1723, col: 19, offset: 52680},
				expr: &ruleRefExpr{
					pos:    position{line: 1723, col: 20, offset: 52681},
					offset: 297,
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1725, col: 1, offset: 52698},
			expr: &seqExpr{
				pos: position{line: 1725, col: 19, offset: 52716},
				exprs: []any{
					&anyMatcher{
						line: 1725, col: 19, offset: 52716,
					},
					&andCodeExpr{
						pos: position{line: 1725, col: 21, offset: 52718},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1729, col: 1, offset: 52766},
			expr: &actionExpr{
				pos: position{line: 1729, col: 10, offset: 52775},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1729, col: 10, offset: 52775},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1729, col: 10, offset: 52775},
							offset: 303,
						},
						&andExpr{
							pos: position{line: 1729, col: 20, offset: 52785},
							expr: &notExpr{
								pos: position{line: 1729, col: 22, offset: 52787},
								expr: &ruleRefExpr{
									pos:    position{line: 1729, col: 23, offset: 52788},
									offset: 308,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1729, col: 26, offset: 52791},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1735, col: 1, offset: 52860},
			expr: &choiceExpr{
				pos: position{line: 1735, col: 13, offset: 52872},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1735, col: 13, offset: 52872},
						offset: 287,
					},
					&ruleRefExpr{
						pos:    position{line: 1735, col: 23, offset: 52882},
						offset: 294,
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1737, col: 1, offset: 52893},
			expr: &labeledExpr{
				pos:   position{line: 1737, col: 14, offset: 52906},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1737, col: 20, offset: 52912},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1737, col: 20, offset: 52912},
						expr: &ruleRefExpr{
							pos:    position{line: 1737, col: 20, offset: 52912},
							offset: 293,
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1739, col: 1, offset: 52958},
			expr: &actionExpr{
				pos: position{line: 1739, col: 16, offset: 52973},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1739, col: 16, offset: 52973},
					expr: &ruleRefExpr{
						pos:    position{line: 1739, col: 16, offset: 52973},
						offset: 305,
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1743, col: 1, offset: 53035},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1743, col: 11, offset: 53045},
				expr: &charClassMatcher{
					pos:        position{line: 1743, col: 11, offset: 53045},
					val:        "[^\\n]",
					chars:      []rune{'\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1745, col: 1, offset: 53054},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1745, col: 13, offset: 53066},
				expr: &charClassMatcher{
					pos:        position{line: 1745, col: 13, offset: 53066},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1747, col: 1, offset: 53075},
			expr: &actionExpr{
				pos: position{line: 1747, col: 21, offset: 53095},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1747, col: 22, offset: 53096},
					alternatives: []any{
						&anyMatcher{
							line: 1747, col: 22, offset: 53096,
						},
						&ruleRefExpr{
							pos:    position{line: 1747, col: 26, offset: 53100},
							offset: 287,
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1751, col: 1, offset: 53149},
			expr: &charClassMatcher{
				pos:        position{line: 1751, col: 24, offset: 53172},
				val:        "[^\\n]",
				chars:      []rune{'\n'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1753, col: 1, offset: 53180},
			expr: &charClassMatcher{
				pos:        position{line: 1753, col: 22, offset: 53201},
				val:        "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "__",
			pos:  position{line: 1755, col: 1, offset: 53244},
			expr: &actionExpr{
				pos: position{line: 1755, col: 6, offset: 53249},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1755, col: 6, offset: 53249},
					expr: &charClassMatcher{
						pos:        position{line: 1755, col: 6, offset: 53249},
						val:        "[ \\t]",
						chars:      []rune{' ', '\t'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1759, col: 1, offset: 53296},
			expr: &actionExpr{
				pos: position{line: 1759, col: 5, offset: 53300},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:        position{line: 1759, col: 5, offset: 53300},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1763, col: 1, offset: 53346},
			expr: &litMatcher{
				pos:        position{line: 1763, col: 10, offset: 53355},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1765, col: 1, offset: 53362},
			expr: &litMatcher{
				pos:        position{line: 1765, col: 16, offset: 53377},
				val:        "\\\\",
				ignoreCase: false,
				want:       "\"\\\\\\\\\"",
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Set))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join[asciidoc.Element](flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement2()
}

func (c *current) onSingleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonSingleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement8()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("\""), nil
}

func (p *parser) callonDoubleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement2()
}

func (c *current) onDoubleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonDoubleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement8()
}

func (c *current) onNakedAttributeValue10() (any, error) {
	// Stop on commas, equals, spaces or end bracket
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonNakedAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue10()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join[asciidoc.Element](flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(string), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(asciidoc.NewString(id.(string)), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAdmonition2() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition2()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Set)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Set)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onIncludeParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonIncludeParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParse1(stack["content"])
}

func (c *current) onIncludeParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonIncludeParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseElement1(stack["element"])
}

func (c *current) onIncludeParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonIncludeParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseLine1(stack["content"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLinkMacro(url.(asciidoc.URL)), setAttributes[*asciidoc.LinkMacro](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonInitialBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonInitialBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonAdditionalBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonAdditionalBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Set{}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Set
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Set{asciidoc.EmptyLine{}}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onBlockTableCellLine1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonBlockTableCellLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLine1(stack["content"])
}

func (c *current) onBlockTableCellLastLine1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonBlockTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLastLine1(stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe[int](column, span.Column.Value)
	span.Row = asciidoc.Maybe[int](row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe[int](multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe[asciidoc.TableCellHorizontalAlign](horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe[asciidoc.TableCellVerticalAlign](verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe[asciidoc.TableCellStyle](style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Set)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Set)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlock1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonAttachedBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlock1(stack["element"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return []any{&asciidoc.NewLine{}, element}, nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(string)), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceID1() (any, error) {

	// See: https://docs.asciidoctor.org/asciidoc/latest/attributes/id/#valid-id-characters
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1()
}

func (c *current) onDocumentCrossReference1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewDocumentCrossReference(path.(asciidoc.Set)), setAttributes[*asciidoc.DocumentCrossReference](attributes))
}

func (p *parser) callonDocumentCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentCrossReference1(stack["path"], stack["attributes"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 10, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 10, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Set))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Set)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Set(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIfEvalStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalStatement1()
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
	delimitedBlockState delimitedBlockState
	tableColumnsAttribute *asciidoc.TableColumnsAttribute
	parser *parser
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	//basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
	offset position
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
