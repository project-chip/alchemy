// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 99},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 110},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 110},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 110},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 118},
								expr: &ruleRefExpr{
									pos:    position{line: 14, col: 21, offset: 119},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 14, col: 31, offset: 129},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 184},
			expr: &choiceExpr{
				pos: position{line: 18, col: 12, offset: 195},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 18, col: 12, offset: 195},
						offset: 2,
					},
					&ruleRefExpr{
						pos:    position{line: 18, col: 27, offset: 210},
						offset: 80,
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 21, col: 1, offset: 228},
			expr: &actionExpr{
				pos: position{line: 21, col: 16, offset: 243},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 21, col: 16, offset: 243},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 21, col: 16, offset: 243},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 21, col: 32, offset: 259},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 21, col: 41, offset: 268},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 21, col: 56, offset: 283},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 22, col: 1, offset: 293},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 28, col: 1, offset: 392},
			expr: &choiceExpr{
				pos: position{line: 29, col: 5, offset: 414},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 29, col: 5, offset: 414},
						offset: 15,
					},
					&ruleRefExpr{
						pos:    position{line: 30, col: 5, offset: 434},
						offset: 9,
					},
					&ruleRefExpr{
						pos:    position{line: 31, col: 5, offset: 455},
						offset: 5,
					},
					&ruleRefExpr{
						pos:    position{line: 32, col: 5, offset: 480},
						offset: 104,
					},
					&ruleRefExpr{
						pos:    position{line: 33, col: 5, offset: 492},
						offset: 4,
					},
					&ruleRefExpr{
						pos:    position{line: 34, col: 5, offset: 510},
						offset: 13,
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 37, col: 1, offset: 535},
			expr: &choiceExpr{
				pos: position{line: 38, col: 5, offset: 555},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 38, col: 5, offset: 555},
						offset: 255,
					},
					&ruleRefExpr{
						pos:    position{line: 39, col: 5, offset: 579},
						offset: 252,
					},
					&ruleRefExpr{
						pos:    position{line: 40, col: 5, offset: 603},
						offset: 22,
					},
					&ruleRefExpr{
						pos:    position{line: 41, col: 5, offset: 625},
						offset: 26,
					},
					&ruleRefExpr{
						pos:    position{line: 42, col: 5, offset: 646},
						offset: 274,
					},
					&ruleRefExpr{
						pos:    position{line: 43, col: 5, offset: 658},
						offset: 276,
					},
					&ruleRefExpr{
						pos:    position{line: 44, col: 5, offset: 672},
						offset: 285,
					},
					&ruleRefExpr{
						pos:    position{line: 45, col: 5, offset: 685},
						offset: 280,
					},
					&ruleRefExpr{
						pos:    position{line: 46, col: 5, offset: 700},
						offset: 93,
					},
					&ruleRefExpr{
						pos:    position{line: 47, col: 5, offset: 718},
						offset: 248,
					},
					&ruleRefExpr{
						pos:    position{line: 48, col: 5, offset: 744},
						offset: 212,
					},
					&ruleRefExpr{
						pos:    position{line: 49, col: 5, offset: 767},
						offset: 300,
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 52, col: 1, offset: 779},
			expr: &actionExpr{
				pos: position{line: 52, col: 22, offset: 800},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 52, col: 22, offset: 800},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 52, col: 22, offset: 800},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 52, col: 33, offset: 811},
								expr: &ruleRefExpr{
									pos:    position{line: 52, col: 34, offset: 812},
									offset: 12,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 52, col: 59, offset: 837},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 53, col: 5, offset: 852},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 53, col: 5, offset: 852},
										offset: 162,
									},
									&ruleRefExpr{
										pos:    position{line: 54, col: 5, offset: 867},
										offset: 168,
									},
									&ruleRefExpr{
										pos:    position{line: 55, col: 5, offset: 878},
										offset: 180,
									},
									&ruleRefExpr{
										pos:    position{line: 56, col: 5, offset: 892},
										offset: 192,
									},
									&ruleRefExpr{
										pos:    position{line: 57, col: 5, offset: 906},
										offset: 204,
									},
									&ruleRefExpr{
										pos:    position{line: 58, col: 5, offset: 918},
										offset: 186,
									},
									&ruleRefExpr{
										pos:    position{line: 59, col: 5, offset: 932},
										offset: 223,
									},
									&ruleRefExpr{
										pos:    position{line: 60, col: 5, offset: 943},
										offset: 19,
									},
									&ruleRefExpr{
										pos:    position{line: 61, col: 5, offset: 958},
										offset: 215,
									},
									&ruleRefExpr{
										pos:    position{line: 62, col: 5, offset: 978},
										offset: 216,
									},
									&ruleRefExpr{
										pos:    position{line: 63, col: 5, offset: 994},
										offset: 89,
									},
									&ruleRefExpr{
										pos:    position{line: 64, col: 5, offset: 1011},
										offset: 243,
									},
									&ruleRefExpr{
										pos:    position{line: 65, col: 5, offset: 1034},
										offset: 245,
									},
									&ruleRefExpr{
										pos:    position{line: 66, col: 5, offset: 1059},
										offset: 248,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 67, col: 9, offset: 1088},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 80, col: 1, offset: 1487},
			expr: &choiceExpr{
				pos: position{line: 80, col: 19, offset: 1505},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 80, col: 19, offset: 1505},
						offset: 77,
					},
					&ruleRefExpr{
						pos:    position{line: 80, col: 37, offset: 1523},
						offset: 7,
					},
					&ruleRefExpr{
						pos:    position{line: 80, col: 50, offset: 1536},
						offset: 27,
					},
					&ruleRefExpr{
						pos:    position{line: 80, col: 63, offset: 1549},
						offset: 31,
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 82, col: 1, offset: 1570},
			expr: &actionExpr{
				pos: position{line: 82, col: 14, offset: 1583},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 82, col: 14, offset: 1583},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 82, col: 14, offset: 1583},
							offset: 310,
						},
						&litMatcher{
							pos:        position{line: 82, col: 30, offset: 1599},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 82, col: 34, offset: 1603},
							expr: &charClassMatcher{
								pos:        position{line: 82, col: 35, offset: 1604},
								val:        "[ .]",
								chars:      []rune{' ', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 82, col: 40, offset: 1609},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 82, col: 49, offset: 1618},
								offset: 8,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 90, col: 1, offset: 1793},
			expr: &actionExpr{
				pos: position{line: 90, col: 21, offset: 1813},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 90, col: 21, offset: 1813},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 90, col: 29, offset: 1821},
						expr: &choiceExpr{
							pos: position{line: 90, col: 30, offset: 1822},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 90, col: 30, offset: 1822},
									offset: 82,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 48, offset: 1840},
									offset: 306,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 63, offset: 1855},
									offset: 322,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 67, offset: 1859},
									offset: 293,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 81, offset: 1873},
									offset: 45,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 102, offset: 1894},
									offset: 319,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 94, col: 1, offset: 1961},
			expr: &actionExpr{
				pos: position{line: 94, col: 18, offset: 1978},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 94, col: 18, offset: 1978},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 94, col: 18, offset: 1978},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 94, col: 28, offset: 1988},
							expr: &ruleRefExpr{
								pos:    position{line: 94, col: 29, offset: 1989},
								offset: 300,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 98, col: 1, offset: 2067},
			expr: &actionExpr{
				pos: position{line: 98, col: 25, offset: 2091},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 98, col: 25, offset: 2091},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 98, col: 25, offset: 2091},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 98, col: 37, offset: 2103},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 98, col: 54, offset: 2120},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 98, col: 64, offset: 2130},
							expr: &ruleRefExpr{
								pos:    position{line: 98, col: 65, offset: 2131},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 102, col: 1, offset: 2177},
			expr: &actionExpr{
				pos: position{line: 102, col: 35, offset: 2211},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 102, col: 35, offset: 2211},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 102, col: 35, offset: 2211},
							offset: 300,
						},
						&labeledExpr{
							pos:   position{line: 102, col: 43, offset: 2219},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 102, col: 55, offset: 2231},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 102, col: 72, offset: 2248},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 102, col: 82, offset: 2258},
							expr: &ruleRefExpr{
								pos:    position{line: 102, col: 83, offset: 2259},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 106, col: 1, offset: 2305},
			expr: &actionExpr{
				pos: position{line: 106, col: 26, offset: 2330},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 106, col: 26, offset: 2330},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 106, col: 26, offset: 2330},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 106, col: 37, offset: 2341},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 60, offset: 2364},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 106, col: 81, offset: 2385},
								expr: &ruleRefExpr{
									pos:    position{line: 106, col: 82, offset: 2386},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 106, col: 116, offset: 2420},
							offset: 313,
						},
						&zeroOrMoreExpr{
							pos: position{line: 106, col: 126, offset: 2430},
							expr: &ruleRefExpr{
								pos:    position{line: 106, col: 126, offset: 2430},
								offset: 298,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 114, col: 1, offset: 2647},
			expr: &actionExpr{
				pos: position{line: 114, col: 24, offset: 2670},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 114, col: 24, offset: 2670},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 114, col: 24, offset: 2670},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 114, col: 35, offset: 2681},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 58, offset: 2704},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 114, col: 79, offset: 2725},
								expr: &ruleRefExpr{
									pos:    position{line: 114, col: 80, offset: 2726},
									offset: 11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 126, col: 1, offset: 3068},
			expr: &seqExpr{
				pos: position{line: 127, col: 5, offset: 3091},
				exprs: []any{
					&notExpr{
						pos: position{line: 127, col: 5, offset: 3091},
						expr: &ruleRefExpr{
							pos:    position{line: 127, col: 6, offset: 3092},
							offset: 306,
						},
					},
					&choiceExpr{
						pos: position{line: 129, col: 9, offset: 3122},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 129, col: 9, offset: 3122},
								offset: 258,
							},
							&ruleRefExpr{
								pos:    position{line: 130, col: 11, offset: 3163},
								offset: 183,
							},
							&ruleRefExpr{
								pos:    position{line: 131, col: 11, offset: 3187},
								offset: 220,
							},
							&ruleRefExpr{
								pos:    position{line: 132, col: 11, offset: 3213},
								offset: 165,
							},
							&ruleRefExpr{
								pos:    position{line: 133, col: 11, offset: 3238},
								offset: 189,
							},
							&ruleRefExpr{
								pos:    position{line: 134, col: 11, offset: 3260},
								offset: 226,
							},
							&ruleRefExpr{
								pos:    position{line: 135, col: 11, offset: 3281},
								offset: 207,
							},
							&ruleRefExpr{
								pos:    position{line: 136, col: 11, offset: 3307},
								offset: 195,
							},
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscape",
			pos:  position{line: 140, col: 1, offset: 3332},
			expr: &actionExpr{
				pos: position{line: 141, col: 5, offset: 3352},
				run: (*parser).callonAlchemyEscape1,
				expr: &seqExpr{
					pos: position{line: 141, col: 5, offset: 3352},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 141, col: 5, offset: 3352},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 141, col: 12, offset: 3359},
								offset: 16,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 142, col: 5, offset: 3384},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 142, col: 15, offset: 3394},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 142, col: 22, offset: 3401},
								offset: 24,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 142, col: 46, offset: 3425},
							offset: 313,
						},
						&labeledExpr{
							pos:   position{line: 143, col: 5, offset: 3439},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 143, col: 11, offset: 3445},
								expr: &ruleRefExpr{
									pos:    position{line: 143, col: 12, offset: 3446},
									offset: 17,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 144, col: 5, offset: 3470},
							offset: 18,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeStart",
			pos:  position{line: 148, col: 1, offset: 3665},
			expr: &litMatcher{
				pos:        position{line: 148, col: 22, offset: 3686},
				val:        ":alchemy-escape:",
				ignoreCase: false,
				want:       "\":alchemy-escape:\"",
			},
		},
		{
			name: "AlchemyEscapeLine",
			pos:  position{line: 150, col: 1, offset: 3707},
			expr: &actionExpr{
				pos: position{line: 150, col: 21, offset: 3727},
				run: (*parser).callonAlchemyEscapeLine1,
				expr: &seqExpr{
					pos: position{line: 150, col: 22, offset: 3728},
					exprs: []any{
						&notExpr{
							pos: position{line: 150, col: 22, offset: 3728},
							expr: &ruleRefExpr{
								pos:    position{line: 150, col: 23, offset: 3729},
								offset: 18,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 150, col: 40, offset: 3746},
							offset: 308,
						},
						&labeledExpr{
							pos:   position{line: 150, col: 53, offset: 3759},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 150, col: 58, offset: 3764},
								offset: 316,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 150, col: 66, offset: 3772},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeEnd",
			pos:  position{line: 154, col: 1, offset: 3819},
			expr: &choiceExpr{
				pos: position{line: 154, col: 20, offset: 3838},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 154, col: 20, offset: 3838},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 154, col: 20, offset: 3838},
								val:        ":!alchemy-escape:",
								ignoreCase: false,
								want:       "\":!alchemy-escape:\"",
							},
							&andExpr{
								pos: position{line: 154, col: 40, offset: 3858},
								expr: &ruleRefExpr{
									pos:    position{line: 154, col: 41, offset: 3859},
									offset: 313,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 154, col: 53, offset: 3871},
						offset: 307,
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 156, col: 1, offset: 3882},
			expr: &actionExpr{
				pos: position{line: 156, col: 11, offset: 3892},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 156, col: 11, offset: 3892},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 156, col: 11, offset: 3892},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 156, col: 18, offset: 3899},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 156, col: 18, offset: 3899},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 18, offset: 3899},
										val:        "[=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 159, col: 5, offset: 3958},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:    position{line: 162, col: 5, offset: 4015},
							offset: 321,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 8, offset: 4018},
							label: "title",
							expr: &ruleRefExpr{
								pos:    position{line: 162, col: 15, offset: 4025},
								offset: 20,
							},
						},
						&andExpr{
							pos: position{line: 162, col: 29, offset: 4039},
							expr: &ruleRefExpr{
								pos:    position{line: 162, col: 30, offset: 4040},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 166, col: 1, offset: 4155},
			expr: &oneOrMoreExpr{
				pos: position{line: 166, col: 16, offset: 4170},
				expr: &ruleRefExpr{
					pos:    position{line: 166, col: 17, offset: 4171},
					offset: 21,
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 168, col: 1, offset: 4192},
			expr: &seqExpr{
				pos: position{line: 168, col: 21, offset: 4212},
				exprs: []any{
					&notExpr{
						pos: position{line: 168, col: 21, offset: 4212},
						expr: &ruleRefExpr{
							pos:    position{line: 168, col: 22, offset: 4213},
							offset: 313,
						},
					},
					&choiceExpr{
						pos: position{line: 169, col: 5, offset: 4229},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 169, col: 5, offset: 4229},
								offset: 315,
							},
							&ruleRefExpr{
								pos:    position{line: 170, col: 7, offset: 4249},
								offset: 321,
							},
							&ruleRefExpr{
								pos:    position{line: 171, col: 7, offset: 4259},
								offset: 292,
							},
							&ruleRefExpr{
								pos:    position{line: 172, col: 7, offset: 4277},
								offset: 293,
							},
							&ruleRefExpr{
								pos:    position{line: 173, col: 7, offset: 4297},
								offset: 86,
							},
							&ruleRefExpr{
								pos:    position{line: 174, col: 7, offset: 4317},
								offset: 266,
							},
							&ruleRefExpr{
								pos:    position{line: 175, col: 7, offset: 4341},
								offset: 99,
							},
							&ruleRefExpr{
								pos:    position{line: 176, col: 7, offset: 4353},
								offset: 290,
							},
							&ruleRefExpr{
								pos:    position{line: 177, col: 7, offset: 4377},
								offset: 92,
							},
							&ruleRefExpr{
								pos:    position{line: 178, col: 7, offset: 4389},
								offset: 45,
							},
							&ruleRefExpr{
								pos:    position{line: 179, col: 7, offset: 4415},
								offset: 76,
							},
							&ruleRefExpr{
								pos:    position{line: 181, col: 7, offset: 4444},
								offset: 319,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 184, col: 1, offset: 4469},
			expr: &actionExpr{
				pos: position{line: 184, col: 18, offset: 4486},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 184, col: 18, offset: 4486},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 184, col: 18, offset: 4486},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 22, offset: 4490},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 184, col: 28, offset: 4496},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 184, col: 48, offset: 4516},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:    position{line: 184, col: 52, offset: 4520},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 184, col: 62, offset: 4530},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 184, col: 69, offset: 4537},
								offset: 24,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 188, col: 1, offset: 4681},
			expr: &actionExpr{
				pos: position{line: 188, col: 22, offset: 4702},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 188, col: 22, offset: 4702},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 188, col: 22, offset: 4702},
							offset: 320,
						},
						&zeroOrMoreExpr{
							pos: position{line: 188, col: 41, offset: 4721},
							expr: &choiceExpr{
								pos: position{line: 188, col: 42, offset: 4722},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 188, col: 42, offset: 4722},
										offset: 320,
									},
									&litMatcher{
										pos:        position{line: 188, col: 63, offset: 4743},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 192, col: 1, offset: 4789},
			expr: &actionExpr{
				pos: position{line: 192, col: 26, offset: 4814},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 26, offset: 4814},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 192, col: 32, offset: 4820},
						expr: &ruleRefExpr{
							pos:    position{line: 192, col: 32, offset: 4820},
							offset: 25,
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 196, col: 1, offset: 4914},
			expr: &choiceExpr{
				pos: position{line: 196, col: 26, offset: 4939},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 196, col: 26, offset: 4939},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 196, col: 26, offset: 4939},
								offset: 294,
							},
							&ruleRefExpr{
								pos:    position{line: 196, col: 36, offset: 4949},
								offset: 313,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 196, col: 48, offset: 4961},
						offset: 319,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 198, col: 1, offset: 4985},
			expr: &choiceExpr{
				pos: position{line: 198, col: 18, offset: 5002},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 198, col: 18, offset: 5002},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 198, col: 18, offset: 5002},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 198, col: 18, offset: 5002},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 198, col: 23, offset: 5007},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 198, col: 29, offset: 5013},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 198, col: 49, offset: 5033},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:    position{line: 198, col: 53, offset: 5037},
									offset: 317,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 200, col: 5, offset: 5119},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 200, col: 5, offset: 5119},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 200, col: 5, offset: 5119},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 200, col: 9, offset: 5123},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 200, col: 15, offset: 5129},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 200, col: 35, offset: 5149},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:    position{line: 200, col: 40, offset: 5154},
									offset: 317,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 205, col: 1, offset: 5314},
			expr: &actionExpr{
				pos: position{line: 205, col: 14, offset: 5327},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 205, col: 14, offset: 5327},
					exprs: []any{
						&notExpr{
							pos: position{line: 205, col: 14, offset: 5327},
							expr: &litMatcher{
								pos:        position{line: 205, col: 15, offset: 5328},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 20, offset: 5333},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 205, col: 24, offset: 5337},
							expr: &litMatcher{
								pos:        position{line: 205, col: 25, offset: 5338},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 205, col: 29, offset: 5342},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 205, col: 41, offset: 5354},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 56, offset: 5369},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 210, col: 1, offset: 5411},
			expr: &actionExpr{
				pos: position{line: 210, col: 17, offset: 5427},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 210, col: 17, offset: 5427},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 210, col: 28, offset: 5438},
						expr: &ruleRefExpr{
							pos:    position{line: 210, col: 29, offset: 5439},
							offset: 29,
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 214, col: 1, offset: 5524},
			expr: &actionExpr{
				pos: position{line: 214, col: 21, offset: 5544},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 214, col: 21, offset: 5544},
					exprs: []any{
						&notExpr{
							pos: position{line: 214, col: 21, offset: 5544},
							expr: &litMatcher{
								pos:        position{line: 214, col: 22, offset: 5545},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 214, col: 26, offset: 5549},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 214, col: 36, offset: 5559},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 214, col: 47, offset: 5570},
								offset: 30,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 214, col: 58, offset: 5581},
							offset: 317,
						},
						&zeroOrOneExpr{
							pos: position{line: 214, col: 68, offset: 5591},
							expr: &litMatcher{
								pos:        position{line: 214, col: 68, offset: 5591},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 218, col: 1, offset: 5627},
			expr: &actionExpr{
				pos: position{line: 218, col: 13, offset: 5639},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 218, col: 13, offset: 5639},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 218, col: 13, offset: 5639},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 218, col: 18, offset: 5644},
								expr: &actionExpr{
									pos: position{line: 218, col: 20, offset: 5646},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 218, col: 21, offset: 5647},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 218, col: 21, offset: 5647},
												label: "name",
												expr: &ruleRefExpr{
													pos:    position{line: 218, col: 27, offset: 5653},
													offset: 44,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 218, col: 47, offset: 5673},
												offset: 317,
											},
											&litMatcher{
												pos:        position{line: 218, col: 57, offset: 5683},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:    position{line: 218, col: 61, offset: 5687},
												offset: 317,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 95, offset: 5721},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 218, col: 102, offset: 5728},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 218, col: 102, offset: 5728},
										offset: 38,
									},
									&ruleRefExpr{
										pos:    position{line: 218, col: 130, offset: 5756},
										offset: 40,
									},
									&ruleRefExpr{
										pos:    position{line: 218, col: 158, offset: 5784},
										offset: 42,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 225, col: 1, offset: 6040},
			expr: &actionExpr{
				pos: position{line: 225, col: 23, offset: 6062},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 225, col: 23, offset: 6062},
					exprs: []any{
						&notExpr{
							pos: position{line: 225, col: 23, offset: 6062},
							expr: &litMatcher{
								pos:        position{line: 225, col: 24, offset: 6063},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 29, offset: 6068},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 225, col: 33, offset: 6072},
							expr: &litMatcher{
								pos:        position{line: 225, col: 34, offset: 6073},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 38, offset: 6077},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 225, col: 49, offset: 6088},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 69, offset: 6108},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 229, col: 1, offset: 6148},
			expr: &actionExpr{
				pos: position{line: 229, col: 22, offset: 6169},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 229, col: 22, offset: 6169},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 229, col: 22, offset: 6169},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 229, col: 28, offset: 6175},
								expr: &ruleRefExpr{
									pos:    position{line: 229, col: 29, offset: 6176},
									offset: 37,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 229, col: 55, offset: 6202},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 229, col: 62, offset: 6209},
								expr: &choiceExpr{
									pos: position{line: 229, col: 63, offset: 6210},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 229, col: 63, offset: 6210},
											offset: 34,
										},
										&ruleRefExpr{
											pos:    position{line: 229, col: 77, offset: 6224},
											offset: 35,
										},
										&ruleRefExpr{
											pos:    position{line: 229, col: 93, offset: 6240},
											offset: 36,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 233, col: 1, offset: 6328},
			expr: &actionExpr{
				pos: position{line: 233, col: 18, offset: 6345},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 233, col: 18, offset: 6345},
					label: "value",
					expr: &ruleRefExpr{
						pos:    position{line: 233, col: 24, offset: 6351},
						offset: 37,
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 237, col: 1, offset: 6445},
			expr: &actionExpr{
				pos: position{line: 237, col: 15, offset: 6459},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 237, col: 15, offset: 6459},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 237, col: 15, offset: 6459},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 19, offset: 6463},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 237, col: 25, offset: 6469},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 241, col: 1, offset: 6563},
			expr: &actionExpr{
				pos: position{line: 241, col: 17, offset: 6579},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 241, col: 17, offset: 6579},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 241, col: 17, offset: 6579},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 241, col: 21, offset: 6583},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 241, col: 27, offset: 6589},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 245, col: 1, offset: 6685},
			expr: &actionExpr{
				pos: position{line: 245, col: 19, offset: 6703},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 245, col: 19, offset: 6703},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 19, offset: 6703},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 23, offset: 6707},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 245, col: 29, offset: 6713},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 249, col: 1, offset: 6811},
			expr: &choiceExpr{
				pos: position{line: 249, col: 28, offset: 6838},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 249, col: 28, offset: 6838},
						exprs: []any{
							&notExpr{
								pos: position{line: 249, col: 28, offset: 6838},
								expr: &litMatcher{
									pos:        position{line: 249, col: 29, offset: 6839},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
							&notExpr{
								pos: position{line: 249, col: 33, offset: 6843},
								expr: &litMatcher{
									pos:        position{line: 249, col: 34, offset: 6844},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
							},
							&notExpr{
								pos: position{line: 249, col: 38, offset: 6848},
								expr: &litMatcher{
									pos:        position{line: 249, col: 39, offset: 6849},
									val:        "%",
									ignoreCase: false,
									want:       "\"%\"",
								},
							},
							&ruleRefExpr{
								pos:    position{line: 249, col: 43, offset: 6853},
								offset: 38,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 249, col: 71, offset: 6881},
						offset: 40,
					},
					&ruleRefExpr{
						pos:    position{line: 249, col: 99, offset: 6909},
						offset: 42,
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 251, col: 1, offset: 6931},
			expr: &actionExpr{
				pos: position{line: 251, col: 29, offset: 6959},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 251, col: 29, offset: 6959},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 251, col: 29, offset: 6959},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 33, offset: 6963},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 39, offset: 6969},
								expr: &ruleRefExpr{
									pos:    position{line: 251, col: 40, offset: 6970},
									offset: 39,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 75, offset: 7005},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 255, col: 1, offset: 7114},
			expr: &choiceExpr{
				pos: position{line: 256, col: 5, offset: 7155},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 7155},
						run: (*parser).callonSingleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 256, col: 5, offset: 7155},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 257, col: 5, offset: 7208},
						offset: 306,
					},
					&ruleRefExpr{
						pos:    position{line: 258, col: 5, offset: 7228},
						offset: 322,
					},
					&ruleRefExpr{
						pos:    position{line: 259, col: 5, offset: 7237},
						offset: 295,
					},
					&ruleRefExpr{
						pos:    position{line: 260, col: 5, offset: 7256},
						offset: 45,
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7281},
						run: (*parser).callonSingleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 261, col: 5, offset: 7281},
							expr: &charClassMatcher{
								pos:        position{line: 261, col: 5, offset: 7281},
								val:        "[^\\r\\n\\\\' ]",
								chars:      []rune{'\r', '\n', '\\', '\'', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 266, col: 1, offset: 7360},
			expr: &actionExpr{
				pos: position{line: 266, col: 29, offset: 7388},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 266, col: 29, offset: 7388},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 266, col: 29, offset: 7388},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 34, offset: 7393},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 40, offset: 7399},
								expr: &ruleRefExpr{
									pos:    position{line: 266, col: 41, offset: 7400},
									offset: 41,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 76, offset: 7435},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 270, col: 1, offset: 7545},
			expr: &choiceExpr{
				pos: position{line: 271, col: 5, offset: 7586},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 7586},
						run: (*parser).callonDoubleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 271, col: 5, offset: 7586},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 272, col: 5, offset: 7642},
						offset: 306,
					},
					&ruleRefExpr{
						pos:    position{line: 273, col: 5, offset: 7662},
						offset: 322,
					},
					&ruleRefExpr{
						pos:    position{line: 274, col: 5, offset: 7671},
						offset: 295,
					},
					&ruleRefExpr{
						pos:    position{line: 275, col: 5, offset: 7689},
						offset: 45,
					},
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 7714},
						run: (*parser).callonDoubleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 276, col: 5, offset: 7714},
							expr: &charClassMatcher{
								pos:        position{line: 276, col: 5, offset: 7714},
								val:        "[^\\r\\n\\\\\" ]",
								chars:      []rune{'\r', '\n', '\\', '"', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 281, col: 1, offset: 7793},
			expr: &actionExpr{
				pos: position{line: 281, col: 23, offset: 7815},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 281, col: 23, offset: 7815},
					exprs: []any{
						&notExpr{
							pos: position{line: 281, col: 23, offset: 7815},
							expr: &ruleRefExpr{
								pos:    position{line: 281, col: 24, offset: 7816},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 26, offset: 7818},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 281, col: 32, offset: 7824},
								expr: &choiceExpr{
									pos: position{line: 282, col: 5, offset: 7830},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 282, col: 5, offset: 7830},
											offset: 45,
										},
										&ruleRefExpr{
											pos:    position{line: 283, col: 5, offset: 7856},
											offset: 322,
										},
										&actionExpr{
											pos: position{line: 284, col: 5, offset: 7865},
											run: (*parser).callonNakedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 284, col: 5, offset: 7865},
												expr: &charClassMatcher{
													pos:        position{line: 284, col: 5, offset: 7865},
													val:        "[^=\\], ]",
													chars:      []rune{'=', ']', ',', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 291, col: 1, offset: 8078},
			expr: &actionExpr{
				pos: position{line: 291, col: 20, offset: 8097},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 20, offset: 8097},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 291, col: 20, offset: 8097},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 291, col: 24, offset: 8101},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 291, col: 36, offset: 8113},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 51, offset: 8128},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 295, col: 1, offset: 8168},
			expr: &actionExpr{
				pos: position{line: 295, col: 22, offset: 8189},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 295, col: 22, offset: 8189},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 295, col: 22, offset: 8189},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 35, offset: 8202},
							expr: &charClassMatcher{
								pos:        position{line: 295, col: 35, offset: 8202},
								val:        "[A-Za-z0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 299, col: 1, offset: 8257},
			expr: &choiceExpr{
				pos: position{line: 299, col: 22, offset: 8278},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 299, col: 22, offset: 8278},
						offset: 46,
					},
					&ruleRefExpr{
						pos:    position{line: 299, col: 48, offset: 8304},
						offset: 261,
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 301, col: 1, offset: 8313},
			expr: &actionExpr{
				pos: position{line: 301, col: 27, offset: 8339},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 301, col: 27, offset: 8339},
					exprs: []any{
						&notExpr{
							pos: position{line: 301, col: 27, offset: 8339},
							expr: &litMatcher{
								pos:        position{line: 301, col: 28, offset: 8340},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 33, offset: 8345},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 37, offset: 8349},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 301, col: 42, offset: 8354},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 61, offset: 8373},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 309, col: 1, offset: 8469},
			expr: &choiceExpr{
				pos: position{line: 309, col: 13, offset: 8481},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 309, col: 13, offset: 8481},
						offset: 48,
					},
					&ruleRefExpr{
						pos:    position{line: 309, col: 30, offset: 8498},
						offset: 51,
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 311, col: 1, offset: 8515},
			expr: &actionExpr{
				pos: position{line: 311, col: 18, offset: 8532},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 311, col: 18, offset: 8532},
					exprs: []any{
						&notExpr{
							pos: position{line: 311, col: 18, offset: 8532},
							expr: &ruleRefExpr{
								pos:    position{line: 311, col: 19, offset: 8533},
								offset: 323,
							},
						},
						&litMatcher{
							pos:        position{line: 311, col: 26, offset: 8540},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 311, col: 30, offset: 8544},
							expr: &notExpr{
								pos: position{line: 311, col: 32, offset: 8546},
								expr: &litMatcher{
									pos:        position{line: 311, col: 33, offset: 8547},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 38, offset: 8552},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 311, col: 45, offset: 8559},
								offset: 49,
							},
						},
						&litMatcher{
							pos:        position{line: 311, col: 66, offset: 8580},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 311, col: 70, offset: 8584},
							expr: &litMatcher{
								pos:        position{line: 311, col: 71, offset: 8585},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 311, col: 75, offset: 8589},
							expr: &notExpr{
								pos: position{line: 311, col: 77, offset: 8591},
								expr: &ruleRefExpr{
									pos:    position{line: 311, col: 78, offset: 8592},
									offset: 306,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 315, col: 1, offset: 8637},
			expr: &actionExpr{
				pos: position{line: 315, col: 23, offset: 8659},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 315, col: 23, offset: 8659},
					exprs: []any{
						&notExpr{
							pos: position{line: 315, col: 23, offset: 8659},
							expr: &ruleRefExpr{
								pos:    position{line: 315, col: 24, offset: 8660},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 315, col: 26, offset: 8662},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 315, col: 32, offset: 8668},
								expr: &actionExpr{
									pos: position{line: 315, col: 33, offset: 8669},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 315, col: 33, offset: 8669},
										exprs: []any{
											&notExpr{
												pos: position{line: 315, col: 33, offset: 8669},
												expr: &ruleRefExpr{
													pos:    position{line: 315, col: 34, offset: 8670},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 315, col: 36, offset: 8672},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 315, col: 42, offset: 8678},
													expr: &ruleRefExpr{
														pos:    position{line: 315, col: 43, offset: 8679},
														offset: 50,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 319, col: 1, offset: 8827},
			expr: &seqExpr{
				pos: position{line: 319, col: 25, offset: 8851},
				exprs: []any{
					&notExpr{
						pos: position{line: 319, col: 25, offset: 8851},
						expr: &seqExpr{
							pos: position{line: 319, col: 27, offset: 8853},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 319, col: 27, offset: 8853},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 319, col: 31, offset: 8857},
									expr: &litMatcher{
										pos:        position{line: 319, col: 32, offset: 8858},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 319, col: 37, offset: 8863},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 321, col: 1, offset: 8885},
			expr: &actionExpr{
				pos: position{line: 321, col: 18, offset: 8902},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 321, col: 18, offset: 8902},
					exprs: []any{
						&notExpr{
							pos: position{line: 321, col: 18, offset: 8902},
							expr: &ruleRefExpr{
								pos:    position{line: 321, col: 19, offset: 8903},
								offset: 324,
							},
						},
						&litMatcher{
							pos:        position{line: 321, col: 32, offset: 8916},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 37, offset: 8921},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 321, col: 44, offset: 8928},
								offset: 52,
							},
						},
						&litMatcher{
							pos:        position{line: 321, col: 65, offset: 8949},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 325, col: 1, offset: 8986},
			expr: &actionExpr{
				pos: position{line: 325, col: 23, offset: 9008},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 325, col: 23, offset: 9008},
					exprs: []any{
						&notExpr{
							pos: position{line: 325, col: 23, offset: 9008},
							expr: &ruleRefExpr{
								pos:    position{line: 325, col: 24, offset: 9009},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 26, offset: 9011},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 325, col: 32, offset: 9017},
								expr: &actionExpr{
									pos: position{line: 325, col: 33, offset: 9018},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 325, col: 33, offset: 9018},
										exprs: []any{
											&notExpr{
												pos: position{line: 325, col: 33, offset: 9018},
												expr: &ruleRefExpr{
													pos:    position{line: 325, col: 34, offset: 9019},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 325, col: 36, offset: 9021},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 325, col: 42, offset: 9027},
													expr: &ruleRefExpr{
														pos:    position{line: 325, col: 43, offset: 9028},
														offset: 53,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 329, col: 1, offset: 9188},
			expr: &seqExpr{
				pos: position{line: 329, col: 25, offset: 9212},
				exprs: []any{
					&notExpr{
						pos: position{line: 329, col: 25, offset: 9212},
						expr: &litMatcher{
							pos:        position{line: 329, col: 27, offset: 9214},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 329, col: 33, offset: 9220},
						offset: 87,
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 332, col: 1, offset: 9243},
			expr: &choiceExpr{
				pos: position{line: 332, col: 15, offset: 9257},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 332, col: 15, offset: 9257},
						offset: 55,
					},
					&ruleRefExpr{
						pos:    position{line: 332, col: 34, offset: 9276},
						offset: 58,
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 334, col: 1, offset: 9295},
			expr: &actionExpr{
				pos: position{line: 334, col: 20, offset: 9314},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 334, col: 20, offset: 9314},
					exprs: []any{
						&notExpr{
							pos: position{line: 334, col: 20, offset: 9314},
							expr: &ruleRefExpr{
								pos:    position{line: 334, col: 21, offset: 9315},
								offset: 323,
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 28, offset: 9322},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 334, col: 32, offset: 9326},
							expr: &notExpr{
								pos: position{line: 334, col: 34, offset: 9328},
								expr: &litMatcher{
									pos:        position{line: 334, col: 35, offset: 9329},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 40, offset: 9334},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 334, col: 47, offset: 9341},
								offset: 56,
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 70, offset: 9364},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 334, col: 74, offset: 9368},
							expr: &litMatcher{
								pos:        position{line: 334, col: 75, offset: 9369},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 334, col: 79, offset: 9373},
							expr: &notExpr{
								pos: position{line: 334, col: 81, offset: 9375},
								expr: &ruleRefExpr{
									pos:    position{line: 334, col: 82, offset: 9376},
									offset: 306,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 338, col: 1, offset: 9421},
			expr: &actionExpr{
				pos: position{line: 338, col: 25, offset: 9445},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 338, col: 25, offset: 9445},
					exprs: []any{
						&notExpr{
							pos: position{line: 338, col: 25, offset: 9445},
							expr: &ruleRefExpr{
								pos:    position{line: 338, col: 26, offset: 9446},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 28, offset: 9448},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 338, col: 34, offset: 9454},
								expr: &actionExpr{
									pos: position{line: 338, col: 35, offset: 9455},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 338, col: 35, offset: 9455},
										exprs: []any{
											&notExpr{
												pos: position{line: 338, col: 35, offset: 9455},
												expr: &ruleRefExpr{
													pos:    position{line: 338, col: 36, offset: 9456},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 338, col: 38, offset: 9458},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 338, col: 44, offset: 9464},
													expr: &ruleRefExpr{
														pos:    position{line: 338, col: 45, offset: 9465},
														offset: 57,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 342, col: 1, offset: 9579},
			expr: &seqExpr{
				pos: position{line: 342, col: 27, offset: 9605},
				exprs: []any{
					&notExpr{
						pos: position{line: 342, col: 27, offset: 9605},
						expr: &seqExpr{
							pos: position{line: 342, col: 29, offset: 9607},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 342, col: 29, offset: 9607},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 342, col: 33, offset: 9611},
									expr: &litMatcher{
										pos:        position{line: 342, col: 34, offset: 9612},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 342, col: 39, offset: 9617},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 344, col: 1, offset: 9639},
			expr: &actionExpr{
				pos: position{line: 344, col: 20, offset: 9658},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 344, col: 20, offset: 9658},
					exprs: []any{
						&notExpr{
							pos: position{line: 344, col: 20, offset: 9658},
							expr: &ruleRefExpr{
								pos:    position{line: 344, col: 21, offset: 9659},
								offset: 324,
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 34, offset: 9672},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 39, offset: 9677},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 344, col: 46, offset: 9684},
								offset: 59,
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 69, offset: 9707},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 348, col: 1, offset: 9744},
			expr: &actionExpr{
				pos: position{line: 348, col: 25, offset: 9768},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 348, col: 25, offset: 9768},
					exprs: []any{
						&notExpr{
							pos: position{line: 348, col: 25, offset: 9768},
							expr: &ruleRefExpr{
								pos:    position{line: 348, col: 26, offset: 9769},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 28, offset: 9771},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 348, col: 34, offset: 9777},
								expr: &actionExpr{
									pos: position{line: 348, col: 35, offset: 9778},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 348, col: 35, offset: 9778},
										exprs: []any{
											&notExpr{
												pos: position{line: 348, col: 35, offset: 9778},
												expr: &ruleRefExpr{
													pos:    position{line: 348, col: 36, offset: 9779},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 348, col: 38, offset: 9781},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 348, col: 44, offset: 9787},
													expr: &ruleRefExpr{
														pos:    position{line: 348, col: 45, offset: 9788},
														offset: 60,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 352, col: 1, offset: 9908},
			expr: &seqExpr{
				pos: position{line: 352, col: 27, offset: 9934},
				exprs: []any{
					&notExpr{
						pos: position{line: 352, col: 27, offset: 9934},
						expr: &litMatcher{
							pos:        position{line: 352, col: 29, offset: 9936},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 352, col: 35, offset: 9942},
						offset: 87,
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 357, col: 1, offset: 9967},
			expr: &actionExpr{
				pos: position{line: 357, col: 17, offset: 9983},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 357, col: 17, offset: 9983},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 357, col: 17, offset: 9983},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 22, offset: 9988},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 357, col: 29, offset: 9995},
								offset: 62,
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 49, offset: 10015},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 361, col: 1, offset: 10050},
			expr: &actionExpr{
				pos: position{line: 361, col: 22, offset: 10071},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 361, col: 22, offset: 10071},
					exprs: []any{
						&notExpr{
							pos: position{line: 361, col: 22, offset: 10071},
							expr: &ruleRefExpr{
								pos:    position{line: 361, col: 23, offset: 10072},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 25, offset: 10074},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 361, col: 31, offset: 10080},
								expr: &actionExpr{
									pos: position{line: 361, col: 32, offset: 10081},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 361, col: 32, offset: 10081},
										exprs: []any{
											&notExpr{
												pos: position{line: 361, col: 32, offset: 10081},
												expr: &ruleRefExpr{
													pos:    position{line: 361, col: 33, offset: 10082},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 361, col: 35, offset: 10084},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 361, col: 41, offset: 10090},
													expr: &ruleRefExpr{
														pos:    position{line: 361, col: 42, offset: 10091},
														offset: 63,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 365, col: 1, offset: 10248},
			expr: &seqExpr{
				pos: position{line: 365, col: 24, offset: 10271},
				exprs: []any{
					&notExpr{
						pos: position{line: 365, col: 24, offset: 10271},
						expr: &litMatcher{
							pos:        position{line: 365, col: 26, offset: 10273},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 365, col: 32, offset: 10279},
						offset: 87,
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 367, col: 1, offset: 10303},
			expr: &actionExpr{
				pos: position{line: 367, col: 20, offset: 10322},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 367, col: 21, offset: 10323},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 367, col: 21, offset: 10323},
							offset: 323,
						},
						&litMatcher{
							pos:        position{line: 367, col: 28, offset: 10330},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:    position{line: 367, col: 32, offset: 10334},
							offset: 62,
						},
						&litMatcher{
							pos:        position{line: 367, col: 51, offset: 10353},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 373, col: 1, offset: 10416},
			expr: &actionExpr{
				pos: position{line: 373, col: 19, offset: 10434},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 373, col: 19, offset: 10434},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 373, col: 19, offset: 10434},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 24, offset: 10439},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 373, col: 31, offset: 10446},
								offset: 66,
							},
						},
						&litMatcher{
							pos:        position{line: 373, col: 53, offset: 10468},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 377, col: 1, offset: 10503},
			expr: &actionExpr{
				pos: position{line: 377, col: 24, offset: 10526},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 377, col: 24, offset: 10526},
					exprs: []any{
						&notExpr{
							pos: position{line: 377, col: 24, offset: 10526},
							expr: &ruleRefExpr{
								pos:    position{line: 377, col: 25, offset: 10527},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 27, offset: 10529},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 377, col: 33, offset: 10535},
								expr: &actionExpr{
									pos: position{line: 377, col: 34, offset: 10536},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 377, col: 34, offset: 10536},
										exprs: []any{
											&notExpr{
												pos: position{line: 377, col: 34, offset: 10536},
												expr: &ruleRefExpr{
													pos:    position{line: 377, col: 35, offset: 10537},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 377, col: 37, offset: 10539},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 377, col: 43, offset: 10545},
													expr: &ruleRefExpr{
														pos:    position{line: 377, col: 44, offset: 10546},
														offset: 67,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 381, col: 1, offset: 10709},
			expr: &seqExpr{
				pos: position{line: 381, col: 26, offset: 10734},
				exprs: []any{
					&notExpr{
						pos: position{line: 381, col: 26, offset: 10734},
						expr: &litMatcher{
							pos:        position{line: 381, col: 28, offset: 10736},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 381, col: 34, offset: 10742},
						offset: 87,
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 383, col: 1, offset: 10766},
			expr: &actionExpr{
				pos: position{line: 383, col: 22, offset: 10787},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 383, col: 23, offset: 10788},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 383, col: 23, offset: 10788},
							offset: 323,
						},
						&litMatcher{
							pos:        position{line: 383, col: 30, offset: 10795},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 383, col: 34, offset: 10799},
							offset: 66,
						},
						&litMatcher{
							pos:        position{line: 383, col: 55, offset: 10820},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 388, col: 1, offset: 10882},
			expr: &choiceExpr{
				pos: position{line: 388, col: 18, offset: 10899},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 388, col: 18, offset: 10899},
						offset: 70,
					},
					&ruleRefExpr{
						pos:    position{line: 388, col: 40, offset: 10921},
						offset: 73,
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 390, col: 1, offset: 10943},
			expr: &actionExpr{
				pos: position{line: 390, col: 22, offset: 10964},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 390, col: 22, offset: 10964},
					exprs: []any{
						&notExpr{
							pos: position{line: 390, col: 22, offset: 10964},
							expr: &ruleRefExpr{
								pos:    position{line: 390, col: 23, offset: 10965},
								offset: 323,
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 30, offset: 10972},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 390, col: 34, offset: 10976},
							expr: &notExpr{
								pos: position{line: 390, col: 36, offset: 10978},
								expr: &litMatcher{
									pos:        position{line: 390, col: 37, offset: 10979},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 390, col: 42, offset: 10984},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 390, col: 49, offset: 10991},
								offset: 71,
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 75, offset: 11017},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 390, col: 79, offset: 11021},
							expr: &litMatcher{
								pos:        position{line: 390, col: 80, offset: 11022},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 390, col: 84, offset: 11026},
							expr: &notExpr{
								pos: position{line: 390, col: 86, offset: 11028},
								expr: &ruleRefExpr{
									pos:    position{line: 390, col: 87, offset: 11029},
									offset: 306,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 394, col: 1, offset: 11074},
			expr: &actionExpr{
				pos: position{line: 394, col: 28, offset: 11101},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 394, col: 28, offset: 11101},
					exprs: []any{
						&notExpr{
							pos: position{line: 394, col: 28, offset: 11101},
							expr: &ruleRefExpr{
								pos:    position{line: 394, col: 29, offset: 11102},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 394, col: 31, offset: 11104},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 394, col: 37, offset: 11110},
								expr: &actionExpr{
									pos: position{line: 394, col: 38, offset: 11111},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 394, col: 38, offset: 11111},
										exprs: []any{
											&notExpr{
												pos: position{line: 394, col: 38, offset: 11111},
												expr: &ruleRefExpr{
													pos:    position{line: 394, col: 39, offset: 11112},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 394, col: 41, offset: 11114},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 394, col: 47, offset: 11120},
													expr: &ruleRefExpr{
														pos:    position{line: 394, col: 48, offset: 11121},
														offset: 72,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 398, col: 1, offset: 11241},
			expr: &seqExpr{
				pos: position{line: 398, col: 30, offset: 11270},
				exprs: []any{
					&notExpr{
						pos: position{line: 398, col: 30, offset: 11270},
						expr: &seqExpr{
							pos: position{line: 398, col: 32, offset: 11272},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 398, col: 32, offset: 11272},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 398, col: 36, offset: 11276},
									expr: &litMatcher{
										pos:        position{line: 398, col: 37, offset: 11277},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 398, col: 42, offset: 11282},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 400, col: 1, offset: 11304},
			expr: &actionExpr{
				pos: position{line: 400, col: 22, offset: 11325},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 400, col: 22, offset: 11325},
					exprs: []any{
						&notExpr{
							pos: position{line: 400, col: 22, offset: 11325},
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 23, offset: 11326},
								offset: 324,
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 36, offset: 11339},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 41, offset: 11344},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 48, offset: 11351},
								offset: 74,
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 74, offset: 11377},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 404, col: 1, offset: 11414},
			expr: &actionExpr{
				pos: position{line: 404, col: 28, offset: 11441},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 404, col: 28, offset: 11441},
					exprs: []any{
						&notExpr{
							pos: position{line: 404, col: 28, offset: 11441},
							expr: &ruleRefExpr{
								pos:    position{line: 404, col: 29, offset: 11442},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 31, offset: 11444},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 404, col: 37, offset: 11450},
								expr: &actionExpr{
									pos: position{line: 404, col: 38, offset: 11451},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 404, col: 38, offset: 11451},
										exprs: []any{
											&notExpr{
												pos: position{line: 404, col: 38, offset: 11451},
												expr: &ruleRefExpr{
													pos:    position{line: 404, col: 39, offset: 11452},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 404, col: 41, offset: 11454},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 404, col: 47, offset: 11460},
													expr: &ruleRefExpr{
														pos:    position{line: 404, col: 48, offset: 11461},
														offset: 75,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 408, col: 1, offset: 11587},
			expr: &seqExpr{
				pos: position{line: 408, col: 30, offset: 11616},
				exprs: []any{
					&notExpr{
						pos: position{line: 408, col: 30, offset: 11616},
						expr: &litMatcher{
							pos:        position{line: 408, col: 32, offset: 11618},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 408, col: 38, offset: 11624},
						offset: 87,
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 411, col: 1, offset: 11647},
			expr: &actionExpr{
				pos: position{line: 411, col: 10, offset: 11656},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 411, col: 10, offset: 11656},
					exprs: []any{
						&notExpr{
							pos: position{line: 411, col: 10, offset: 11656},
							expr: &litMatcher{
								pos:        position{line: 411, col: 11, offset: 11657},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 16, offset: 11662},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 21, offset: 11667},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 411, col: 25, offset: 11671},
								offset: 232,
							},
						},
						&labeledExpr{
							pos:   position{line: 411, col: 43, offset: 11689},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 49, offset: 11695},
								expr: &actionExpr{
									pos: position{line: 411, col: 50, offset: 11696},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 411, col: 50, offset: 11696},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 411, col: 50, offset: 11696},
												offset: 317,
											},
											&litMatcher{
												pos:        position{line: 411, col: 60, offset: 11706},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 411, col: 64, offset: 11710},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 411, col: 71, offset: 11717},
													offset: 78,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 107, offset: 11753},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 419, col: 1, offset: 11914},
			expr: &actionExpr{
				pos: position{line: 419, col: 19, offset: 11932},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 19, offset: 11932},
					exprs: []any{
						&notExpr{
							pos: position{line: 419, col: 19, offset: 11932},
							expr: &litMatcher{
								pos:        position{line: 419, col: 20, offset: 11933},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 419, col: 25, offset: 11938},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 30, offset: 11943},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 419, col: 34, offset: 11947},
								offset: 232,
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 52, offset: 11965},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 419, col: 58, offset: 11971},
								expr: &actionExpr{
									pos: position{line: 419, col: 59, offset: 11972},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 419, col: 59, offset: 11972},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 419, col: 59, offset: 11972},
												offset: 317,
											},
											&litMatcher{
												pos:        position{line: 419, col: 69, offset: 11982},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 419, col: 73, offset: 11986},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 419, col: 80, offset: 11993},
													offset: 78,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 419, col: 116, offset: 12029},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 427, col: 1, offset: 12233},
			expr: &oneOrMoreExpr{
				pos: position{line: 427, col: 15, offset: 12247},
				expr: &seqExpr{
					pos: position{line: 427, col: 17, offset: 12249},
					exprs: []any{
						&notExpr{
							pos: position{line: 427, col: 17, offset: 12249},
							expr: &litMatcher{
								pos:        position{line: 427, col: 18, offset: 12250},
								val:        "]]",
								ignoreCase: false,
								want:       "\"]]\"",
							},
						},
						&choiceExpr{
							pos: position{line: 428, col: 6, offset: 12260},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 428, col: 6, offset: 12260},
									expr: &charClassMatcher{
										pos:        position{line: 428, col: 6, offset: 12260},
										val:        "[^\\r\\n{\\]]",
										chars:      []rune{'\r', '\n', '{', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 429, col: 7, offset: 12279},
									offset: 45,
								},
								&litMatcher{
									pos:        position{line: 430, col: 7, offset: 12305},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 436, col: 1, offset: 12318},
			expr: &choiceExpr{
				pos: position{line: 436, col: 14, offset: 12331},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 436, col: 14, offset: 12331},
						run: (*parser).callonAdmonition2,
						expr: &seqExpr{
							pos: position{line: 436, col: 14, offset: 12331},
							exprs: []any{
								&ruleRefExpr{
									pos:    position{line: 436, col: 14, offset: 12331},
									offset: 310,
								},
								&litMatcher{
									pos:        position{line: 437, col: 5, offset: 12352},
									val:        "NOTE: ",
									ignoreCase: false,
									want:       "\"NOTE: \"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 7, offset: 12435},
						run: (*parser).callonAdmonition6,
						expr: &litMatcher{
							pos:        position{line: 438, col: 7, offset: 12435},
							val:        "TIP: ",
							ignoreCase: false,
							want:       "\"TIP: \"",
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 7, offset: 12516},
						run: (*parser).callonAdmonition8,
						expr: &litMatcher{
							pos:        position{line: 439, col: 7, offset: 12516},
							val:        "IMPORTANT: ",
							ignoreCase: false,
							want:       "\"IMPORTANT: \"",
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 7, offset: 12609},
						run: (*parser).callonAdmonition10,
						expr: &litMatcher{
							pos:        position{line: 440, col: 7, offset: 12609},
							val:        "CAUTON: ",
							ignoreCase: false,
							want:       "\"CAUTON: \"",
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 7, offset: 12697},
						run: (*parser).callonAdmonition12,
						expr: &litMatcher{
							pos:        position{line: 441, col: 7, offset: 12697},
							val:        "WARNING: ",
							ignoreCase: false,
							want:       "\"WARNING: \"",
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 446, col: 1, offset: 12787},
			expr: &actionExpr{
				pos: position{line: 446, col: 18, offset: 12804},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 446, col: 18, offset: 12804},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 446, col: 18, offset: 12804},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 446, col: 26, offset: 12812},
								expr: &ruleRefExpr{
									pos:    position{line: 446, col: 27, offset: 12813},
									offset: 81,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 43, offset: 12829},
							label: "eol",
							expr: &ruleRefExpr{
								pos:    position{line: 446, col: 47, offset: 12833},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 454, col: 1, offset: 12990},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13012},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 455, col: 5, offset: 13012},
						offset: 79,
					},
					&ruleRefExpr{
						pos:    position{line: 456, col: 5, offset: 13029},
						offset: 266,
					},
					&ruleRefExpr{
						pos:    position{line: 457, col: 5, offset: 13053},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 458, col: 5, offset: 13073},
						offset: 92,
					},
					&ruleRefExpr{
						pos:    position{line: 459, col: 5, offset: 13085},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 460, col: 5, offset: 13104},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 461, col: 5, offset: 13115},
						offset: 76,
					},
					&ruleRefExpr{
						pos:    position{line: 462, col: 5, offset: 13129},
						offset: 229,
					},
					&ruleRefExpr{
						pos:    position{line: 463, col: 5, offset: 13151},
						offset: 45,
					},
					&ruleRefExpr{
						pos:    position{line: 464, col: 5, offset: 13176},
						offset: 294,
					},
					&ruleRefExpr{
						pos:    position{line: 465, col: 5, offset: 13192},
						offset: 82,
					},
					&ruleRefExpr{
						pos:    position{line: 466, col: 5, offset: 13214},
						offset: 319,
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 469, col: 1, offset: 13245},
			expr: &actionExpr{
				pos: position{line: 469, col: 19, offset: 13263},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 469, col: 19, offset: 13263},
					expr: &seqExpr{
						pos: position{line: 469, col: 20, offset: 13264},
						exprs: []any{
							&notExpr{
								pos: position{line: 469, col: 20, offset: 13264},
								expr: &ruleRefExpr{
									pos:    position{line: 469, col: 21, offset: 13265},
									offset: 154,
								},
							},
							&notExpr{
								pos: position{line: 469, col: 31, offset: 13275},
								expr: &ruleRefExpr{
									pos:    position{line: 469, col: 32, offset: 13276},
									offset: 100,
								},
							},
							&notExpr{
								pos: position{line: 469, col: 42, offset: 13286},
								expr: &ruleRefExpr{
									pos:    position{line: 469, col: 43, offset: 13287},
									offset: 91,
								},
							},
							&charClassMatcher{
								pos:        position{line: 469, col: 64, offset: 13308},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 474, col: 1, offset: 13382},
			expr: &actionExpr{
				pos: position{line: 474, col: 12, offset: 13393},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 474, col: 12, offset: 13393},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 474, col: 12, offset: 13393},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 24, offset: 13405},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 474, col: 27, offset: 13408},
								expr: &ruleRefExpr{
									pos:    position{line: 474, col: 28, offset: 13409},
									offset: 84,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 474, col: 41, offset: 13422},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 45, offset: 13426},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 474, col: 51, offset: 13432},
								expr: &ruleRefExpr{
									pos:    position{line: 474, col: 52, offset: 13433},
									offset: 85,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 474, col: 68, offset: 13449},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 478, col: 1, offset: 13523},
			expr: &actionExpr{
				pos: position{line: 478, col: 14, offset: 13536},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 478, col: 14, offset: 13536},
					expr: &ruleRefExpr{
						pos:    position{line: 478, col: 14, offset: 13536},
						offset: 306,
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 482, col: 1, offset: 13586},
			expr: &seqExpr{
				pos: position{line: 482, col: 17, offset: 13602},
				exprs: []any{
					&notExpr{
						pos: position{line: 482, col: 17, offset: 13602},
						expr: &litMatcher{
							pos:        position{line: 482, col: 18, offset: 13603},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&choiceExpr{
						pos: position{line: 482, col: 24, offset: 13609},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 482, col: 24, offset: 13609},
								offset: 314,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 37, offset: 13622},
								offset: 321,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 42, offset: 13627},
								offset: 292,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 55, offset: 13640},
								offset: 204,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 63, offset: 13648},
								offset: 293,
							},
							&ruleRefExpr{
								pos: position{line: 482, col: 77, offset: 13662},
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 85, offset: 13670},
								offset: 294,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 97, offset: 13682},
								offset: 45,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 118, offset: 13703},
								offset: 290,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 137, offset: 13722},
								offset: 298,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 149, offset: 13734},
								offset: 319,
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 486, col: 1, offset: 13760},
			expr: &actionExpr{
				pos: position{line: 486, col: 17, offset: 13776},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 486, col: 17, offset: 13776},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 486, col: 17, offset: 13776},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 28, offset: 13787},
								expr: &ruleRefExpr{
									pos:    position{line: 486, col: 29, offset: 13788},
									offset: 31,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 52, offset: 13811},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 487, col: 5, offset: 13822},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 487, col: 5, offset: 13822},
										offset: 47,
									},
									&ruleRefExpr{
										pos:    position{line: 488, col: 7, offset: 13838},
										offset: 54,
									},
									&ruleRefExpr{
										pos:    position{line: 489, col: 7, offset: 13856},
										offset: 69,
									},
									&ruleRefExpr{
										pos:    position{line: 490, col: 7, offset: 13877},
										offset: 173,
									},
									&ruleRefExpr{
										pos:    position{line: 491, col: 7, offset: 13894},
										offset: 65,
									},
									&ruleRefExpr{
										pos:    position{line: 492, col: 7, offset: 13916},
										offset: 61,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 497, col: 1, offset: 14065},
			expr: &choiceExpr{
				pos: position{line: 498, col: 5, offset: 14094},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 498, col: 5, offset: 14094},
						offset: 314,
					},
					&ruleRefExpr{
						pos:    position{line: 499, col: 5, offset: 14112},
						offset: 321,
					},
					&ruleRefExpr{
						pos:    position{line: 500, col: 5, offset: 14122},
						offset: 292,
					},
					&ruleRefExpr{
						pos:    position{line: 501, col: 5, offset: 14140},
						offset: 293,
					},
					&ruleRefExpr{
						pos:    position{line: 502, col: 5, offset: 14159},
						offset: 45,
					},
					&ruleRefExpr{
						pos:    position{line: 503, col: 5, offset: 14185},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 504, col: 5, offset: 14206},
						offset: 92,
					},
					&ruleRefExpr{
						pos:    position{line: 505, col: 5, offset: 14218},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 506, col: 5, offset: 14237},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 507, col: 5, offset: 14248},
						offset: 76,
					},
					&ruleRefExpr{
						pos:    position{line: 508, col: 5, offset: 14262},
						offset: 229,
					},
					&ruleRefExpr{
						pos:    position{line: 509, col: 5, offset: 14284},
						offset: 290,
					},
					&ruleRefExpr{
						pos:    position{line: 510, col: 5, offset: 14308},
						offset: 319,
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 513, col: 1, offset: 14332},
			expr: &actionExpr{
				pos: position{line: 513, col: 20, offset: 14351},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 513, col: 20, offset: 14351},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 513, col: 20, offset: 14351},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 24, offset: 14355},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 513, col: 36, offset: 14367},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 513, col: 56, offset: 14387},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 518, col: 1, offset: 14428},
			expr: &actionExpr{
				pos: position{line: 518, col: 14, offset: 14441},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 518, col: 14, offset: 14441},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 518, col: 14, offset: 14441},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 24, offset: 14451},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 518, col: 30, offset: 14457},
								offset: 157,
							},
						},
						&labeledExpr{
							pos:   position{line: 518, col: 36, offset: 14463},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 518, col: 48, offset: 14475},
								offset: 43,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 518, col: 66, offset: 14493},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 522, col: 1, offset: 14625},
			expr: &actionExpr{
				pos: position{line: 522, col: 15, offset: 14639},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 522, col: 15, offset: 14639},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 522, col: 15, offset: 14639},
							offset: 91,
						},
						&notExpr{
							pos: position{line: 522, col: 36, offset: 14660},
							expr: &litMatcher{
								pos:        position{line: 522, col: 37, offset: 14661},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 41, offset: 14665},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 47, offset: 14671},
								offset: 157,
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 53, offset: 14677},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 65, offset: 14689},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 526, col: 1, offset: 14831},
			expr: &litMatcher{
				pos:        position{line: 526, col: 24, offset: 14854},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 530, col: 1, offset: 14866},
			expr: &actionExpr{
				pos: position{line: 530, col: 8, offset: 14873},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 530, col: 8, offset: 14873},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 530, col: 8, offset: 14873},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 16, offset: 14881},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 530, col: 22, offset: 14887},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 530, col: 22, offset: 14887},
									expr: &choiceExpr{
										pos: position{line: 530, col: 23, offset: 14888},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 530, col: 23, offset: 14888},
												offset: 306,
											},
											&litMatcher{
												pos:        position{line: 530, col: 38, offset: 14903},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 530, col: 44, offset: 14909},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 81, offset: 14946},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 530, col: 93, offset: 14958},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 535, col: 1, offset: 15080},
			expr: &actionExpr{
				pos: position{line: 535, col: 15, offset: 15094},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 535, col: 15, offset: 15094},
					exprs: []any{
						&notExpr{
							pos: position{line: 535, col: 15, offset: 15094},
							expr: &litMatcher{
								pos:        position{line: 535, col: 16, offset: 15095},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 535, col: 21, offset: 15100},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 33, offset: 15112},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 535, col: 39, offset: 15118},
								offset: 94,
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 56, offset: 15135},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 535, col: 68, offset: 15147},
								offset: 43,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 535, col: 86, offset: 15165},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 535, col: 96, offset: 15175},
							expr: &ruleRefExpr{
								pos:    position{line: 535, col: 97, offset: 15176},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 540, col: 1, offset: 15333},
			expr: &actionExpr{
				pos: position{line: 540, col: 19, offset: 15351},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 540, col: 19, offset: 15351},
					exprs: []any{
						&notExpr{
							pos: position{line: 540, col: 19, offset: 15351},
							expr: &ruleRefExpr{
								pos:    position{line: 540, col: 20, offset: 15352},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 22, offset: 15354},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 540, col: 27, offset: 15359},
								offset: 157,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParse",
			pos:  position{line: 545, col: 1, offset: 15391},
			expr: &actionExpr{
				pos: position{line: 545, col: 16, offset: 15406},
				run: (*parser).callonIncludeParse1,
				expr: &seqExpr{
					pos: position{line: 545, col: 16, offset: 15406},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 545, col: 16, offset: 15406},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 545, col: 24, offset: 15414},
								expr: &ruleRefExpr{
									pos:    position{line: 545, col: 25, offset: 15415},
									offset: 96,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 545, col: 47, offset: 15437},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseElement",
			pos:  position{line: 549, col: 1, offset: 15494},
			expr: &actionExpr{
				pos: position{line: 549, col: 23, offset: 15516},
				run: (*parser).callonIncludeParseElement1,
				expr: &seqExpr{
					pos: position{line: 549, col: 23, offset: 15516},
					exprs: []any{
						&notExpr{
							pos: position{line: 549, col: 23, offset: 15516},
							expr: &ruleRefExpr{
								pos:    position{line: 549, col: 24, offset: 15517},
								offset: 307,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 549, col: 34, offset: 15527},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 549, col: 50, offset: 15543},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 549, col: 59, offset: 15552},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 549, col: 59, offset: 15552},
										offset: 93,
									},
									&ruleRefExpr{
										pos:    position{line: 549, col: 73, offset: 15566},
										offset: 97,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 549, col: 91, offset: 15584},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLine",
			pos:  position{line: 553, col: 1, offset: 15623},
			expr: &actionExpr{
				pos: position{line: 553, col: 20, offset: 15642},
				run: (*parser).callonIncludeParseLine1,
				expr: &seqExpr{
					pos: position{line: 553, col: 20, offset: 15642},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 553, col: 20, offset: 15642},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 553, col: 28, offset: 15650},
								expr: &charClassMatcher{
									pos:        position{line: 553, col: 28, offset: 15650},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&andExpr{
							pos: position{line: 553, col: 37, offset: 15659},
							expr: &ruleRefExpr{
								pos:    position{line: 553, col: 38, offset: 15660},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLineElement",
			pos:  position{line: 557, col: 1, offset: 15747},
			expr: &oneOrMoreExpr{
				pos: position{line: 557, col: 28, offset: 15774},
				expr: &charClassMatcher{
					pos:        position{line: 557, col: 28, offset: 15774},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 562, col: 1, offset: 15789},
			expr: &actionExpr{
				pos: position{line: 562, col: 8, offset: 15796},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 562, col: 8, offset: 15796},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 562, col: 14, offset: 15802},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 562, col: 14, offset: 15802},
								offset: 101,
							},
							&ruleRefExpr{
								pos:    position{line: 562, col: 25, offset: 15813},
								offset: 102,
							},
							&ruleRefExpr{
								pos:    position{line: 562, col: 40, offset: 15828},
								offset: 103,
							},
							&ruleRefExpr{
								pos:    position{line: 562, col: 55, offset: 15843},
								offset: 159,
							},
						},
					},
				},
			},
		},
		{
			name: "LinkMacro",
			pos:  position{line: 566, col: 1, offset: 15884},
			expr: &litMatcher{
				pos:        position{line: 566, col: 13, offset: 15896},
				val:        "link:",
				ignoreCase: false,
				want:       "\"link:\"",
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 568, col: 1, offset: 15905},
			expr: &actionExpr{
				pos: position{line: 568, col: 12, offset: 15916},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 568, col: 12, offset: 15916},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 12, offset: 15916},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 16, offset: 15920},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 568, col: 21, offset: 15925},
								offset: 156,
							},
						},
						&litMatcher{
							pos:        position{line: 568, col: 30, offset: 15934},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 572, col: 1, offset: 16000},
			expr: &actionExpr{
				pos: position{line: 572, col: 16, offset: 16015},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 572, col: 16, offset: 16015},
					exprs: []any{
						&notExpr{
							pos: position{line: 572, col: 16, offset: 16015},
							expr: &litMatcher{
								pos:        position{line: 572, col: 17, offset: 16016},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 572, col: 22, offset: 16021},
							offset: 100,
						},
						&labeledExpr{
							pos:   position{line: 572, col: 32, offset: 16031},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 572, col: 36, offset: 16035},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 40, offset: 16039},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 572, col: 52, offset: 16051},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 577, col: 1, offset: 16192},
			expr: &actionExpr{
				pos: position{line: 577, col: 16, offset: 16207},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 577, col: 16, offset: 16207},
					exprs: []any{
						&notExpr{
							pos: position{line: 577, col: 16, offset: 16207},
							expr: &litMatcher{
								pos:        position{line: 577, col: 17, offset: 16208},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 22, offset: 16213},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 577, col: 27, offset: 16218},
								offset: 156,
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 36, offset: 16227},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 47, offset: 16238},
								expr: &ruleRefExpr{
									pos:    position{line: 577, col: 48, offset: 16239},
									offset: 43,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 583, col: 1, offset: 16372},
			expr: &actionExpr{
				pos: position{line: 583, col: 9, offset: 16380},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 583, col: 9, offset: 16380},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 583, col: 9, offset: 16380},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 583, col: 20, offset: 16391},
								expr: &ruleRefExpr{
									pos:    position{line: 583, col: 21, offset: 16392},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 583, col: 46, offset: 16417},
							offset: 109,
						},
						&labeledExpr{
							pos:   position{line: 583, col: 57, offset: 16428},
							label: "cells",
							expr: &ruleRefExpr{
								pos:    position{line: 583, col: 64, offset: 16435},
								offset: 105,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 583, col: 79, offset: 16450},
							offset: 126,
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 591, col: 1, offset: 16607},
			expr: &zeroOrMoreExpr{
				pos: position{line: 591, col: 17, offset: 16623},
				expr: &ruleRefExpr{
					pos:    position{line: 591, col: 18, offset: 16624},
					offset: 106,
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 593, col: 1, offset: 16641},
			expr: &choiceExpr{
				pos: position{line: 594, col: 9, offset: 16666},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 594, col: 9, offset: 16666},
						offset: 110,
					},
					&ruleRefExpr{
						pos:    position{line: 595, col: 11, offset: 16692},
						offset: 112,
					},
					&ruleRefExpr{
						pos:    position{line: 596, col: 11, offset: 16714},
						offset: 127,
					},
				},
			},
		},
		{
			name: "IncludedTableElements",
			pos:  position{line: 599, col: 1, offset: 16735},
			expr: &actionExpr{
				pos: position{line: 599, col: 25, offset: 16759},
				run: (*parser).callonIncludedTableElements1,
				expr: &seqExpr{
					pos: position{line: 599, col: 25, offset: 16759},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 599, col: 25, offset: 16759},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 599, col: 33, offset: 16767},
								expr: &ruleRefExpr{
									pos:    position{line: 599, col: 34, offset: 16768},
									offset: 108,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 599, col: 57, offset: 16791},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "IncludedTableElement",
			pos:  position{line: 604, col: 1, offset: 16910},
			expr: &choiceExpr{
				pos: position{line: 605, col: 9, offset: 16943},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 605, col: 9, offset: 16943},
						offset: 111,
					},
					&ruleRefExpr{
						pos:    position{line: 606, col: 11, offset: 16977},
						offset: 112,
					},
					&ruleRefExpr{
						pos:    position{line: 607, col: 11, offset: 16999},
						offset: 128,
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 610, col: 1, offset: 17028},
			expr: &actionExpr{
				pos: position{line: 610, col: 14, offset: 17041},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 610, col: 14, offset: 17041},
					exprs: []any{
						&notExpr{
							pos: position{line: 610, col: 14, offset: 17041},
							expr: &litMatcher{
								pos:        position{line: 610, col: 15, offset: 17042},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 610, col: 20, offset: 17047},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 610, col: 27, offset: 17054},
							expr: &litMatcher{
								pos:        position{line: 610, col: 27, offset: 17054},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 610, col: 32, offset: 17059},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 610, col: 42, offset: 17069},
							expr: &ruleRefExpr{
								pos:    position{line: 610, col: 43, offset: 17070},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 614, col: 1, offset: 17141},
			expr: &actionExpr{
				pos: position{line: 614, col: 18, offset: 17158},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 614, col: 18, offset: 17158},
					exprs: []any{
						&notExpr{
							pos: position{line: 614, col: 18, offset: 17158},
							expr: &ruleRefExpr{
								pos:    position{line: 614, col: 19, offset: 17159},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 614, col: 28, offset: 17168},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 614, col: 36, offset: 17176},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 614, col: 46, offset: 17186},
							expr: &ruleRefExpr{
								pos:    position{line: 614, col: 48, offset: 17188},
								offset: 300,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableEmptyLine",
			pos:  position{line: 618, col: 1, offset: 17269},
			expr: &actionExpr{
				pos: position{line: 618, col: 26, offset: 17294},
				run: (*parser).callonIncludedTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 618, col: 26, offset: 17294},
					exprs: []any{
						&notExpr{
							pos: position{line: 618, col: 26, offset: 17294},
							expr: &ruleRefExpr{
								pos:    position{line: 618, col: 27, offset: 17295},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 618, col: 36, offset: 17304},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 618, col: 44, offset: 17312},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 618, col: 54, offset: 17322},
							expr: &choiceExpr{
								pos: position{line: 618, col: 56, offset: 17324},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 618, col: 56, offset: 17324},
										offset: 300,
									},
									&ruleRefExpr{
										pos:    position{line: 618, col: 66, offset: 17334},
										offset: 307,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 622, col: 1, offset: 17417},
			expr: &choiceExpr{
				pos: position{line: 622, col: 16, offset: 17432},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 622, col: 16, offset: 17432},
						offset: 114,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 35, offset: 17451},
						offset: 116,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 55, offset: 17471},
						offset: 113,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 68, offset: 17484},
						offset: 115,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 82, offset: 17498},
						offset: 119,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 98, offset: 17514},
						offset: 120,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 113, offset: 17529},
						offset: 121,
					},
					&ruleRefExpr{
						pos:    position{line: 622, col: 137, offset: 17553},
						offset: 122,
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 624, col: 1, offset: 17572},
			expr: &actionExpr{
				pos: position{line: 624, col: 14, offset: 17585},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 624, col: 14, offset: 17585},
					exprs: []any{
						&notExpr{
							pos: position{line: 624, col: 14, offset: 17585},
							expr: &ruleRefExpr{
								pos:    position{line: 624, col: 15, offset: 17586},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 24, offset: 17595},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 32, offset: 17603},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 624, col: 42, offset: 17613},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 624, col: 48, offset: 17619},
								offset: 274,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfDef",
			pos:  position{line: 628, col: 1, offset: 17682},
			expr: &actionExpr{
				pos: position{line: 628, col: 20, offset: 17701},
				run: (*parser).callonTableInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 628, col: 20, offset: 17701},
					exprs: []any{
						&notExpr{
							pos: position{line: 628, col: 20, offset: 17701},
							expr: &ruleRefExpr{
								pos:    position{line: 628, col: 21, offset: 17702},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 628, col: 30, offset: 17711},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 628, col: 38, offset: 17719},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 628, col: 48, offset: 17729},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 628, col: 54, offset: 17735},
								offset: 274,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 628, col: 60, offset: 17741},
							offset: 300,
						},
						&notExpr{
							pos: position{line: 628, col: 68, offset: 17749},
							expr: &ruleRefExpr{
								pos:    position{line: 628, col: 69, offset: 17750},
								offset: 148,
							},
						},
						&labeledExpr{
							pos:   position{line: 628, col: 95, offset: 17776},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 628, col: 104, offset: 17785},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 628, col: 122, offset: 17803},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 628, col: 128, offset: 17809},
								offset: 119,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 642, col: 1, offset: 18150},
			expr: &actionExpr{
				pos: position{line: 642, col: 15, offset: 18164},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 642, col: 15, offset: 18164},
					exprs: []any{
						&notExpr{
							pos: position{line: 642, col: 15, offset: 18164},
							expr: &ruleRefExpr{
								pos:    position{line: 642, col: 16, offset: 18165},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 642, col: 25, offset: 18174},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 642, col: 33, offset: 18182},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 642, col: 43, offset: 18192},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 642, col: 50, offset: 18199},
								offset: 276,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfNDef",
			pos:  position{line: 646, col: 1, offset: 18266},
			expr: &actionExpr{
				pos: position{line: 646, col: 21, offset: 18286},
				run: (*parser).callonTableInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 646, col: 21, offset: 18286},
					exprs: []any{
						&notExpr{
							pos: position{line: 646, col: 21, offset: 18286},
							expr: &ruleRefExpr{
								pos:    position{line: 646, col: 22, offset: 18287},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 646, col: 31, offset: 18296},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 646, col: 39, offset: 18304},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 646, col: 49, offset: 18314},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 646, col: 56, offset: 18321},
								offset: 276,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 646, col: 63, offset: 18328},
							offset: 300,
						},
						&notExpr{
							pos: position{line: 646, col: 71, offset: 18336},
							expr: &ruleRefExpr{
								pos:    position{line: 646, col: 72, offset: 18337},
								offset: 148,
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 98, offset: 18363},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 646, col: 107, offset: 18372},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 125, offset: 18390},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 646, col: 131, offset: 18396},
								offset: 119,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfEval",
			pos:  position{line: 660, col: 1, offset: 18739},
			expr: &actionExpr{
				pos: position{line: 660, col: 15, offset: 18753},
				run: (*parser).callonTableIfEval1,
				expr: &seqExpr{
					pos: position{line: 660, col: 15, offset: 18753},
					exprs: []any{
						&notExpr{
							pos: position{line: 660, col: 15, offset: 18753},
							expr: &ruleRefExpr{
								pos:    position{line: 660, col: 16, offset: 18754},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 660, col: 25, offset: 18763},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 660, col: 33, offset: 18771},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 660, col: 43, offset: 18781},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 660, col: 50, offset: 18788},
								offset: 285,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfEval",
			pos:  position{line: 664, col: 1, offset: 18855},
			expr: &actionExpr{
				pos: position{line: 664, col: 21, offset: 18875},
				run: (*parser).callonTableInlineIfEval1,
				expr: &seqExpr{
					pos: position{line: 664, col: 21, offset: 18875},
					exprs: []any{
						&notExpr{
							pos: position{line: 664, col: 21, offset: 18875},
							expr: &ruleRefExpr{
								pos:    position{line: 664, col: 22, offset: 18876},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 664, col: 31, offset: 18885},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 664, col: 39, offset: 18893},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 664, col: 49, offset: 18903},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 664, col: 56, offset: 18910},
								offset: 285,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 664, col: 63, offset: 18917},
							offset: 300,
						},
						&notExpr{
							pos: position{line: 664, col: 71, offset: 18925},
							expr: &ruleRefExpr{
								pos:    position{line: 664, col: 72, offset: 18926},
								offset: 148,
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 98, offset: 18952},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 664, col: 107, offset: 18961},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 125, offset: 18979},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 664, col: 131, offset: 18985},
								offset: 119,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 678, col: 1, offset: 19328},
			expr: &actionExpr{
				pos: position{line: 678, col: 17, offset: 19344},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 678, col: 17, offset: 19344},
					exprs: []any{
						&notExpr{
							pos: position{line: 678, col: 17, offset: 19344},
							expr: &ruleRefExpr{
								pos:    position{line: 678, col: 18, offset: 19345},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 678, col: 27, offset: 19354},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 678, col: 35, offset: 19362},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 678, col: 45, offset: 19372},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 678, col: 54, offset: 19381},
								offset: 280,
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 682, col: 1, offset: 19451},
			expr: &actionExpr{
				pos: position{line: 682, col: 16, offset: 19466},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 682, col: 16, offset: 19466},
					exprs: []any{
						&notExpr{
							pos: position{line: 682, col: 16, offset: 19466},
							expr: &ruleRefExpr{
								pos:    position{line: 682, col: 17, offset: 19467},
								offset: 126,
							},
						},
						&choiceExpr{
							pos: position{line: 682, col: 27, offset: 19477},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 682, col: 27, offset: 19477},
									offset: 300,
								},
								&ruleRefExpr{
									pos:    position{line: 682, col: 37, offset: 19487},
									offset: 309,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 54, offset: 19504},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 682, col: 63, offset: 19513},
								offset: 252,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 686, col: 1, offset: 19604},
			expr: &actionExpr{
				pos: position{line: 686, col: 25, offset: 19628},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 686, col: 25, offset: 19628},
					exprs: []any{
						&notExpr{
							pos: position{line: 686, col: 25, offset: 19628},
							expr: &ruleRefExpr{
								pos:    position{line: 686, col: 26, offset: 19629},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 686, col: 35, offset: 19638},
							offset: 300,
						},
						&labeledExpr{
							pos:   position{line: 686, col: 43, offset: 19646},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 686, col: 52, offset: 19655},
								offset: 255,
							},
						},
					},
				},
			},
		},
		{
			name: "TableFileInclude",
			pos:  position{line: 690, col: 1, offset: 19744},
			expr: &actionExpr{
				pos: position{line: 690, col: 20, offset: 19763},
				run: (*parser).callonTableFileInclude1,
				expr: &seqExpr{
					pos: position{line: 690, col: 20, offset: 19763},
					exprs: []any{
						&notExpr{
							pos: position{line: 690, col: 20, offset: 19763},
							expr: &ruleRefExpr{
								pos:    position{line: 690, col: 21, offset: 19764},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 690, col: 30, offset: 19773},
							offset: 300,
						},
						&notExpr{
							pos: position{line: 690, col: 38, offset: 19781},
							expr: &litMatcher{
								pos:        position{line: 690, col: 39, offset: 19782},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 690, col: 44, offset: 19787},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 690, col: 56, offset: 19799},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 690, col: 62, offset: 19805},
								offset: 94,
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 79, offset: 19822},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 690, col: 91, offset: 19834},
								offset: 43,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 690, col: 109, offset: 19852},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 690, col: 119, offset: 19862},
							expr: &ruleRefExpr{
								pos:    position{line: 690, col: 120, offset: 19863},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 694, col: 1, offset: 20019},
			expr: &oneOrMoreExpr{
				pos: position{line: 694, col: 19, offset: 20037},
				expr: &ruleRefExpr{
					pos:    position{line: 694, col: 19, offset: 20037},
					offset: 110,
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 696, col: 1, offset: 20054},
			expr: &actionExpr{
				pos: position{line: 696, col: 26, offset: 20079},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 696, col: 26, offset: 20079},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 696, col: 26, offset: 20079},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 34, offset: 20087},
								expr: &ruleRefExpr{
									pos:    position{line: 696, col: 35, offset: 20088},
									offset: 125,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 696, col: 67, offset: 20120},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 700, col: 1, offset: 20198},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20235},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 701, col: 5, offset: 20235},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 702, col: 5, offset: 20255},
						offset: 92,
					},
					&ruleRefExpr{
						pos:    position{line: 703, col: 5, offset: 20267},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 704, col: 5, offset: 20286},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 705, col: 5, offset: 20297},
						offset: 76,
					},
					&ruleRefExpr{
						pos:    position{line: 706, col: 5, offset: 20312},
						offset: 229,
					},
					&ruleRefExpr{
						pos:    position{line: 707, col: 5, offset: 20333},
						offset: 45,
					},
					&ruleRefExpr{
						pos:    position{line: 708, col: 5, offset: 20358},
						offset: 294,
					},
					&ruleRefExpr{
						pos:    position{line: 709, col: 5, offset: 20374},
						offset: 146,
					},
					&ruleRefExpr{
						pos:    position{line: 710, col: 5, offset: 20405},
						offset: 319,
					},
					&ruleRefExpr{
						pos:    position{line: 711, col: 5, offset: 20432},
						offset: 300,
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 714, col: 1, offset: 20449},
			expr: &seqExpr{
				pos: position{line: 714, col: 12, offset: 20460},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 714, col: 12, offset: 20460},
						offset: 300,
					},
					&notExpr{
						pos: position{line: 714, col: 20, offset: 20468},
						expr: &litMatcher{
							pos:        position{line: 714, col: 21, offset: 20469},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&litMatcher{
						pos:        position{line: 714, col: 26, offset: 20474},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 714, col: 33, offset: 20481},
						expr: &litMatcher{
							pos:        position{line: 714, col: 33, offset: 20481},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 714, col: 38, offset: 20486},
						offset: 317,
					},
					&andExpr{
						pos: position{line: 714, col: 48, offset: 20496},
						expr: &ruleRefExpr{
							pos:    position{line: 714, col: 49, offset: 20497},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 716, col: 1, offset: 20510},
			expr: &actionExpr{
				pos: position{line: 716, col: 12, offset: 20521},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 716, col: 12, offset: 20521},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 716, col: 12, offset: 20521},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 716, col: 21, offset: 20530},
								offset: 130,
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 46, offset: 20555},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 716, col: 57, offset: 20566},
								expr: &ruleRefExpr{
									pos:    position{line: 716, col: 58, offset: 20567},
									offset: 131,
								},
							},
						},
						&andExpr{
							pos: position{line: 716, col: 86, offset: 20595},
							expr: &choiceExpr{
								pos: position{line: 716, col: 88, offset: 20597},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 716, col: 88, offset: 20597},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 716, col: 99, offset: 20608},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 716, col: 121, offset: 20630},
										offset: 300,
									},
									&ruleRefExpr{
										pos:    position{line: 716, col: 131, offset: 20640},
										offset: 307,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableRow",
			pos:  position{line: 725, col: 1, offset: 20881},
			expr: &actionExpr{
				pos: position{line: 725, col: 20, offset: 20900},
				run: (*parser).callonIncludedTableRow1,
				expr: &seqExpr{
					pos: position{line: 725, col: 20, offset: 20900},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 725, col: 20, offset: 20900},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 725, col: 29, offset: 20909},
								offset: 130,
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 54, offset: 20934},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 725, col: 65, offset: 20945},
								expr: &ruleRefExpr{
									pos:    position{line: 725, col: 66, offset: 20946},
									offset: 131,
								},
							},
						},
						&andExpr{
							pos: position{line: 725, col: 94, offset: 20974},
							expr: &choiceExpr{
								pos: position{line: 725, col: 96, offset: 20976},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 725, col: 96, offset: 20976},
										offset: 307,
									},
									&ruleRefExpr{
										pos:    position{line: 725, col: 108, offset: 20988},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 725, col: 130, offset: 21010},
										offset: 300,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 734, col: 1, offset: 21250},
			expr: &choiceExpr{
				pos: position{line: 734, col: 23, offset: 21272},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 734, col: 23, offset: 21272},
						offset: 149,
					},
					&ruleRefExpr{
						pos:    position{line: 734, col: 54, offset: 21303},
						offset: 148,
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 736, col: 1, offset: 21331},
			expr: &actionExpr{
				pos: position{line: 736, col: 26, offset: 21356},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 736, col: 26, offset: 21356},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 736, col: 26, offset: 21356},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 736, col: 34, offset: 21364},
								offset: 148,
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 61, offset: 21391},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 736, col: 70, offset: 21400},
								offset: 132,
							},
						},
						&andExpr{
							pos: position{line: 736, col: 88, offset: 21418},
							expr: &choiceExpr{
								pos: position{line: 736, col: 90, offset: 21420},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 736, col: 90, offset: 21420},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 736, col: 101, offset: 21431},
										offset: 123,
									},
									&ruleRefExpr{
										pos:    position{line: 736, col: 119, offset: 21449},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 736, col: 133, offset: 21463},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 736, col: 155, offset: 21485},
										offset: 300,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 741, col: 1, offset: 21612},
			expr: &actionExpr{
				pos: position{line: 741, col: 30, offset: 21641},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 741, col: 30, offset: 21641},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 741, col: 30, offset: 21641},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 741, col: 38, offset: 21649},
								offset: 149,
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 68, offset: 21679},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 741, col: 77, offset: 21688},
								offset: 132,
							},
						},
						&andExpr{
							pos: position{line: 741, col: 95, offset: 21706},
							expr: &choiceExpr{
								pos: position{line: 741, col: 97, offset: 21708},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 741, col: 97, offset: 21708},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 741, col: 108, offset: 21719},
										offset: 123,
									},
									&ruleRefExpr{
										pos:    position{line: 741, col: 126, offset: 21737},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 741, col: 140, offset: 21751},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 741, col: 162, offset: 21773},
										offset: 300,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 746, col: 1, offset: 21896},
			expr: &actionExpr{
				pos: position{line: 746, col: 20, offset: 21915},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 746, col: 20, offset: 21915},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 746, col: 29, offset: 21924},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 746, col: 29, offset: 21924},
								offset: 136,
							},
							&ruleRefExpr{
								pos:    position{line: 746, col: 50, offset: 21945},
								offset: 143,
							},
							&ruleRefExpr{
								pos:    position{line: 746, col: 72, offset: 21967},
								offset: 133,
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 750, col: 1, offset: 22011},
			expr: &actionExpr{
				pos: position{line: 750, col: 13, offset: 22023},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 750, col: 13, offset: 22023},
					expr: &choiceExpr{
						pos: position{line: 750, col: 15, offset: 22025},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 750, col: 15, offset: 22025},
								offset: 126,
							},
							&ruleRefExpr{
								pos:    position{line: 750, col: 26, offset: 22036},
								offset: 129,
							},
							&ruleRefExpr{
								pos:    position{line: 750, col: 48, offset: 22058},
								offset: 300,
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 754, col: 1, offset: 22107},
			expr: &seqExpr{
				pos: position{line: 754, col: 24, offset: 22130},
				exprs: []any{
					&notExpr{
						pos: position{line: 754, col: 24, offset: 22130},
						expr: &ruleRefExpr{
							pos:    position{line: 754, col: 25, offset: 22131},
							offset: 126,
						},
					},
					&notExpr{
						pos: position{line: 754, col: 34, offset: 22140},
						expr: &ruleRefExpr{
							pos:    position{line: 754, col: 35, offset: 22141},
							offset: 129,
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 756, col: 1, offset: 22162},
			expr: &seqExpr{
				pos: position{line: 756, col: 33, offset: 22194},
				exprs: []any{
					&notExpr{
						pos: position{line: 756, col: 33, offset: 22194},
						expr: &ruleRefExpr{
							pos:    position{line: 756, col: 34, offset: 22195},
							offset: 255,
						},
					},
					&notExpr{
						pos: position{line: 756, col: 51, offset: 22212},
						expr: &ruleRefExpr{
							pos:    position{line: 756, col: 52, offset: 22213},
							offset: 252,
						},
					},
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 758, col: 1, offset: 22232},
			expr: &actionExpr{
				pos: position{line: 758, col: 22, offset: 22253},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 758, col: 22, offset: 22253},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 758, col: 22, offset: 22253},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 758, col: 28, offset: 22259},
								expr: &ruleRefExpr{
									pos:    position{line: 758, col: 29, offset: 22260},
									offset: 137,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 758, col: 51, offset: 22282},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 758, col: 60, offset: 22291},
								offset: 140,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 768, col: 1, offset: 22549},
			expr: &choiceExpr{
				pos: position{line: 768, col: 23, offset: 22571},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 768, col: 23, offset: 22571},
						offset: 139,
					},
					&ruleRefExpr{
						pos:    position{line: 768, col: 50, offset: 22598},
						offset: 138,
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 770, col: 1, offset: 22632},
			expr: &actionExpr{
				pos: position{line: 770, col: 35, offset: 22666},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 770, col: 35, offset: 22666},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 770, col: 35, offset: 22666},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 770, col: 56, offset: 22687},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 770, col: 64, offset: 22695},
								expr: &ruleRefExpr{
									pos:    position{line: 770, col: 64, offset: 22695},
									offset: 300,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 770, col: 73, offset: 22704},
							offset: 135,
						},
						&labeledExpr{
							pos:   position{line: 770, col: 103, offset: 22734},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 770, col: 111, offset: 22742},
								expr: &ruleRefExpr{
									pos:    position{line: 770, col: 112, offset: 22743},
									offset: 144,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 133, offset: 22764},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 770, col: 156, offset: 22787},
								expr: &actionExpr{
									pos: position{line: 770, col: 157, offset: 22788},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 770, col: 157, offset: 22788},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 770, col: 157, offset: 22788},
												label: "nl",
												expr: &ruleRefExpr{
													pos:    position{line: 770, col: 160, offset: 22791},
													offset: 300,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 770, col: 168, offset: 22799},
												offset: 317,
											},
											&andExpr{
												pos: position{line: 770, col: 178, offset: 22809},
												expr: &ruleRefExpr{
													pos:    position{line: 770, col: 180, offset: 22811},
													offset: 300,
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 770, col: 209, offset: 22840},
							expr: &ruleRefExpr{
								pos:    position{line: 770, col: 210, offset: 22841},
								offset: 300,
							},
						},
						&notExpr{
							pos: position{line: 770, col: 218, offset: 22849},
							expr: &choiceExpr{
								pos: position{line: 770, col: 220, offset: 22851},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 770, col: 220, offset: 22851},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 770, col: 234, offset: 22865},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 770, col: 245, offset: 22876},
										offset: 129,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 770, col: 267, offset: 22898},
							expr: &choiceExpr{
								pos: position{line: 770, col: 269, offset: 22900},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 770, col: 269, offset: 22900},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 770, col: 291, offset: 22922},
										offset: 140,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 783, col: 1, offset: 23279},
			expr: &actionExpr{
				pos: position{line: 783, col: 28, offset: 23306},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 783, col: 28, offset: 23306},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 783, col: 28, offset: 23306},
							offset: 134,
						},
						&ruleRefExpr{
							pos:    position{line: 783, col: 49, offset: 23327},
							offset: 300,
						},
						&ruleRefExpr{
							pos:    position{line: 783, col: 57, offset: 23335},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 783, col: 67, offset: 23345},
							expr: &ruleRefExpr{
								pos:    position{line: 783, col: 69, offset: 23347},
								offset: 300,
							},
						},
						&notExpr{
							pos: position{line: 783, col: 78, offset: 23356},
							expr: &ruleRefExpr{
								pos:    position{line: 783, col: 79, offset: 23357},
								offset: 126,
							},
						},
						&notExpr{
							pos: position{line: 783, col: 88, offset: 23366},
							expr: &ruleRefExpr{
								pos:    position{line: 783, col: 89, offset: 23367},
								offset: 129,
							},
						},
						&notExpr{
							pos: position{line: 783, col: 108, offset: 23386},
							expr: &ruleRefExpr{
								pos:    position{line: 783, col: 109, offset: 23387},
								offset: 112,
							},
						},
						&andExpr{
							pos: position{line: 783, col: 121, offset: 23399},
							expr: &choiceExpr{
								pos: position{line: 783, col: 123, offset: 23401},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 783, col: 123, offset: 23401},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 783, col: 145, offset: 23423},
										offset: 140,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 788, col: 1, offset: 23510},
			expr: &actionExpr{
				pos: position{line: 788, col: 27, offset: 23536},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 788, col: 27, offset: 23536},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 788, col: 27, offset: 23536},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 788, col: 48, offset: 23557},
							label: "nl",
							expr: &ruleRefExpr{
								pos:    position{line: 788, col: 51, offset: 23560},
								offset: 300,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 788, col: 59, offset: 23568},
							offset: 135,
						},
						&labeledExpr{
							pos:   position{line: 788, col: 89, offset: 23598},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 788, col: 97, offset: 23606},
								expr: &ruleRefExpr{
									pos:    position{line: 788, col: 98, offset: 23607},
									offset: 144,
								},
							},
						},
						&andExpr{
							pos: position{line: 788, col: 119, offset: 23628},
							expr: &choiceExpr{
								pos: position{line: 788, col: 121, offset: 23630},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 788, col: 121, offset: 23630},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 788, col: 132, offset: 23641},
										offset: 123,
									},
									&ruleRefExpr{
										pos:    position{line: 788, col: 150, offset: 23659},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 788, col: 164, offset: 23673},
										offset: 129,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLine",
			pos:  position{line: 795, col: 1, offset: 23848},
			expr: &actionExpr{
				pos: position{line: 795, col: 22, offset: 23869},
				run: (*parser).callonBlockTableCellLine1,
				expr: &labeledExpr{
					pos:   position{line: 795, col: 22, offset: 23869},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 795, col: 31, offset: 23878},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 795, col: 31, offset: 23878},
								offset: 145,
							},
							&ruleRefExpr{
								pos:    position{line: 795, col: 51, offset: 23898},
								offset: 138,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLastLine",
			pos:  position{line: 799, col: 1, offset: 23965},
			expr: &actionExpr{
				pos: position{line: 799, col: 26, offset: 23990},
				run: (*parser).callonBlockTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 799, col: 26, offset: 23990},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 799, col: 26, offset: 23990},
							offset: 134,
						},
						&ruleRefExpr{
							pos:    position{line: 799, col: 47, offset: 24011},
							offset: 300,
						},
						&labeledExpr{
							pos:   position{line: 799, col: 55, offset: 24019},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 799, col: 63, offset: 24027},
								expr: &ruleRefExpr{
									pos:    position{line: 799, col: 64, offset: 24028},
									offset: 144,
								},
							},
						},
						&andExpr{
							pos: position{line: 799, col: 85, offset: 24049},
							expr: &choiceExpr{
								pos: position{line: 799, col: 87, offset: 24051},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 799, col: 87, offset: 24051},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 799, col: 98, offset: 24062},
										offset: 129,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 804, col: 1, offset: 24150},
			expr: &actionExpr{
				pos: position{line: 804, col: 23, offset: 24172},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 804, col: 23, offset: 24172},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 804, col: 23, offset: 24172},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 804, col: 44, offset: 24193},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 804, col: 52, offset: 24201},
								expr: &ruleRefExpr{
									pos:    position{line: 804, col: 53, offset: 24202},
									offset: 144,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 809, col: 1, offset: 24295},
			expr: &actionExpr{
				pos: position{line: 809, col: 22, offset: 24316},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 809, col: 22, offset: 24316},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 809, col: 22, offset: 24316},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 809, col: 44, offset: 24338},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 810, col: 5, offset: 24352},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 810, col: 5, offset: 24352},
										offset: 146,
									},
									&ruleRefExpr{
										pos:    position{line: 811, col: 5, offset: 24383},
										offset: 147,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 816, col: 1, offset: 24448},
			expr: &actionExpr{
				pos: position{line: 816, col: 21, offset: 24468},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 816, col: 21, offset: 24468},
					exprs: []any{
						&notExpr{
							pos: position{line: 816, col: 21, offset: 24468},
							expr: &ruleRefExpr{
								pos:    position{line: 816, col: 22, offset: 24469},
								offset: 148,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 816, col: 48, offset: 24495},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 816, col: 59, offset: 24506},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 816, col: 68, offset: 24515},
								offset: 2,
							},
						},
						&notExpr{
							pos: position{line: 816, col: 82, offset: 24529},
							expr: &ruleRefExpr{
								pos:    position{line: 816, col: 83, offset: 24530},
								offset: 129,
							},
						},
						&notExpr{
							pos: position{line: 816, col: 103, offset: 24550},
							expr: &ruleRefExpr{
								pos:    position{line: 816, col: 104, offset: 24551},
								offset: 126,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 821, col: 1, offset: 24596},
			expr: &actionExpr{
				pos: position{line: 821, col: 28, offset: 24623},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 821, col: 28, offset: 24623},
					expr: &seqExpr{
						pos: position{line: 821, col: 29, offset: 24624},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 821, col: 29, offset: 24624},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&notExpr{
								pos: position{line: 821, col: 39, offset: 24634},
								expr: &ruleRefExpr{
									pos:    position{line: 821, col: 40, offset: 24635},
									offset: 129,
								},
							},
							&notExpr{
								pos: position{line: 821, col: 59, offset: 24654},
								expr: &ruleRefExpr{
									pos:    position{line: 821, col: 60, offset: 24655},
									offset: 126,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 825, col: 1, offset: 24727},
			expr: &actionExpr{
				pos: position{line: 825, col: 27, offset: 24753},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &choiceExpr{
					pos: position{line: 825, col: 28, offset: 24754},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 825, col: 28, offset: 24754},
							val:        "\\|",
							ignoreCase: false,
							want:       "\"\\\\|\"",
						},
						&charClassMatcher{
							pos:        position{line: 825, col: 36, offset: 24762},
							val:        "[^|\\r\\n]",
							chars:      []rune{'|', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 830, col: 1, offset: 24881},
			expr: &actionExpr{
				pos: position{line: 830, col: 29, offset: 24909},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 830, col: 29, offset: 24909},
					exprs: []any{
						&notExpr{
							pos: position{line: 830, col: 29, offset: 24909},
							expr: &ruleRefExpr{
								pos:    position{line: 830, col: 30, offset: 24910},
								offset: 126,
							},
						},
						&choiceExpr{
							pos: position{line: 830, col: 40, offset: 24920},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 830, col: 40, offset: 24920},
									offset: 309,
								},
								&ruleRefExpr{
									pos:    position{line: 830, col: 58, offset: 24938},
									offset: 300,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 830, col: 67, offset: 24947},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 830, col: 77, offset: 24957},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 830, col: 84, offset: 24964},
								expr: &ruleRefExpr{
									pos:    position{line: 830, col: 85, offset: 24965},
									offset: 153,
								},
							},
						},
						&notExpr{
							pos: position{line: 830, col: 103, offset: 24983},
							expr: &litMatcher{
								pos:        position{line: 830, col: 104, offset: 24984},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 830, col: 109, offset: 24989},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 837, col: 1, offset: 25105},
			expr: &actionExpr{
				pos: position{line: 837, col: 32, offset: 25136},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 837, col: 32, offset: 25136},
					exprs: []any{
						&notExpr{
							pos: position{line: 837, col: 32, offset: 25136},
							expr: &ruleRefExpr{
								pos:    position{line: 837, col: 33, offset: 25137},
								offset: 126,
							},
						},
						&labeledExpr{
							pos:   position{line: 837, col: 42, offset: 25146},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 837, col: 49, offset: 25153},
								expr: &ruleRefExpr{
									pos:    position{line: 837, col: 50, offset: 25154},
									offset: 151,
								},
							},
						},
						&notExpr{
							pos: position{line: 837, col: 78, offset: 25182},
							expr: &litMatcher{
								pos:        position{line: 837, col: 79, offset: 25183},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 837, col: 84, offset: 25188},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 842, col: 1, offset: 25293},
			expr: &actionExpr{
				pos: position{line: 842, col: 26, offset: 25318},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 842, col: 26, offset: 25318},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 842, col: 26, offset: 25318},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 842, col: 36, offset: 25328},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 842, col: 44, offset: 25336},
								offset: 153,
							},
						},
						&andCodeExpr{
							pos: position{line: 842, col: 61, offset: 25353},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 849, col: 1, offset: 25479},
			expr: &actionExpr{
				pos: position{line: 849, col: 29, offset: 25507},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 849, col: 29, offset: 25507},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 849, col: 29, offset: 25507},
							label: "lead",
							expr: &ruleRefExpr{
								pos:    position{line: 849, col: 35, offset: 25513},
								offset: 321,
							},
						},
						&labeledExpr{
							pos:   position{line: 849, col: 39, offset: 25517},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 849, col: 47, offset: 25525},
								offset: 153,
							},
						},
						&andCodeExpr{
							pos: position{line: 849, col: 64, offset: 25542},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 855, col: 1, offset: 25628},
			expr: &actionExpr{
				pos: position{line: 855, col: 17, offset: 25644},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 855, col: 17, offset: 25644},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 855, col: 17, offset: 25644},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 855, col: 24, offset: 25651},
								expr: &actionExpr{
									pos: position{line: 855, col: 25, offset: 25652},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 855, col: 25, offset: 25652},
										label: "n",
										expr: &ruleRefExpr{
											pos:    position{line: 855, col: 27, offset: 25654},
											offset: 302,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 857, col: 12, offset: 25725},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 857, col: 17, offset: 25730},
								expr: &actionExpr{
									pos: position{line: 857, col: 18, offset: 25731},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 857, col: 18, offset: 25731},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 857, col: 18, offset: 25731},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 857, col: 22, offset: 25735},
												label: "n",
												expr: &ruleRefExpr{
													pos:    position{line: 857, col: 24, offset: 25737},
													offset: 302,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 860, col: 11, offset: 25815},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 868, col: 1, offset: 26053},
			expr: &actionExpr{
				pos: position{line: 869, col: 5, offset: 26077},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 869, col: 5, offset: 26077},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 869, col: 5, offset: 26077},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 869, col: 16, offset: 26088},
								expr: &actionExpr{
									pos: position{line: 870, col: 9, offset: 26098},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 870, col: 9, offset: 26098},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 870, col: 9, offset: 26098},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 870, col: 21, offset: 26110},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 870, col: 21, offset: 26110},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 870, col: 21, offset: 26110},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 870, col: 26, offset: 26115},
																expr: &charClassMatcher{
																	pos:        position{line: 870, col: 26, offset: 26115},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 870, col: 63, offset: 26152},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 5, offset: 26234},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 874, col: 10, offset: 26239},
								expr: &actionExpr{
									pos: position{line: 875, col: 9, offset: 26249},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 875, col: 9, offset: 26249},
										label: "span",
										expr: &ruleRefExpr{
											pos:    position{line: 875, col: 15, offset: 26255},
											offset: 152,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 26326},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 879, col: 21, offset: 26342},
								expr: &choiceExpr{
									pos: position{line: 880, col: 9, offset: 26352},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 880, col: 9, offset: 26352},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 880, col: 9, offset: 26352},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 881, col: 11, offset: 26420},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 881, col: 11, offset: 26420},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 882, col: 11, offset: 26489},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 882, col: 11, offset: 26489},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 26561},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 884, col: 19, offset: 26575},
								expr: &choiceExpr{
									pos: position{line: 885, col: 9, offset: 26585},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 885, col: 9, offset: 26585},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 885, col: 9, offset: 26585},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 886, col: 11, offset: 26651},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 886, col: 11, offset: 26651},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 887, col: 11, offset: 26720},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 887, col: 11, offset: 26720},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 889, col: 5, offset: 26790},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 889, col: 11, offset: 26796},
								expr: &choiceExpr{
									pos: position{line: 890, col: 9, offset: 26806},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 890, col: 9, offset: 26806},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 890, col: 9, offset: 26806},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 891, col: 11, offset: 26868},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 891, col: 11, offset: 26868},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 892, col: 11, offset: 26929},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 892, col: 11, offset: 26929},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 893, col: 11, offset: 26992},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 893, col: 11, offset: 26992},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 894, col: 11, offset: 27053},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 894, col: 11, offset: 27053},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 895, col: 11, offset: 27115},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 895, col: 11, offset: 27115},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 896, col: 11, offset: 27179},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 896, col: 11, offset: 27179},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 898, col: 6, offset: 27242},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 915, col: 1, offset: 27945},
			expr: &choiceExpr{
				pos: position{line: 915, col: 14, offset: 27958},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 915, col: 14, offset: 27958},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 915, col: 27, offset: 27971},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 915, col: 39, offset: 27983},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 915, col: 50, offset: 27994},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 915, col: 61, offset: 28005},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 917, col: 1, offset: 28018},
			expr: &actionExpr{
				pos: position{line: 917, col: 7, offset: 28024},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 917, col: 7, offset: 28024},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 917, col: 7, offset: 28024},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 917, col: 14, offset: 28031},
								expr: &ruleRefExpr{
									pos:    position{line: 917, col: 15, offset: 28032},
									offset: 154,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 27, offset: 28044},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 917, col: 33, offset: 28050},
								offset: 157,
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 921, col: 1, offset: 28143},
			expr: &actionExpr{
				pos: position{line: 921, col: 11, offset: 28153},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 921, col: 11, offset: 28153},
					exprs: []any{
						&notExpr{
							pos: position{line: 921, col: 11, offset: 28153},
							expr: &litMatcher{
								pos:        position{line: 921, col: 12, offset: 28154},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 16, offset: 28158},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:    position{line: 921, col: 24, offset: 28166},
								offset: 154,
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 35, offset: 28177},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 921, col: 41, offset: 28183},
								offset: 157,
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 928, col: 1, offset: 28279},
			expr: &actionExpr{
				pos: position{line: 928, col: 8, offset: 28286},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 928, col: 8, offset: 28286},
					exprs: []any{
						&notExpr{
							pos: position{line: 928, col: 8, offset: 28286},
							expr: &litMatcher{
								pos:        position{line: 928, col: 9, offset: 28287},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 13, offset: 28291},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 928, col: 24, offset: 28302},
								expr: &ruleRefExpr{
									pos:    position{line: 928, col: 24, offset: 28302},
									offset: 158,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 932, col: 1, offset: 28373},
			expr: &choiceExpr{
				pos: position{line: 932, col: 16, offset: 28388},
				alternatives: []any{
					&oneOrMoreExpr{
						pos: position{line: 932, col: 16, offset: 28388},
						expr: &charClassMatcher{
							pos:        position{line: 932, col: 17, offset: 28389},
							val:        "[^\\n{.<>!?,;[\\] ]",
							chars:      []rune{'\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 933, col: 5, offset: 28414},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 933, col: 5, offset: 28414},
								val:        "[.?!;,]",
								chars:      []rune{'.', '?', '!', ';', ','},
								ignoreCase: false,
								inverted:   false,
							},
							&andExpr{
								pos: position{line: 933, col: 13, offset: 28422},
								expr: &seqExpr{
									pos: position{line: 933, col: 15, offset: 28424},
									exprs: []any{
										&notExpr{
											pos: position{line: 933, col: 15, offset: 28424},
											expr: &ruleRefExpr{
												pos:    position{line: 933, col: 16, offset: 28425},
												offset: 322,
											},
										},
										&notExpr{
											pos: position{line: 933, col: 18, offset: 28427},
											expr: &ruleRefExpr{
												pos:    position{line: 933, col: 19, offset: 28428},
												offset: 307,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 934, col: 4, offset: 28443},
						offset: 45,
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 938, col: 1, offset: 28467},
			expr: &actionExpr{
				pos: position{line: 938, col: 9, offset: 28475},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 938, col: 9, offset: 28475},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 938, col: 9, offset: 28475},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 938, col: 15, offset: 28481},
								offset: 160,
							},
						},
						&litMatcher{
							pos:        position{line: 938, col: 26, offset: 28492},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 938, col: 30, offset: 28496},
							label: "domain",
							expr: &ruleRefExpr{
								pos:    position{line: 938, col: 38, offset: 28504},
								offset: 161,
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 942, col: 1, offset: 28602},
			expr: &actionExpr{
				pos: position{line: 942, col: 13, offset: 28614},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 942, col: 13, offset: 28614},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 942, col: 13, offset: 28614},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 942, col: 19, offset: 28620},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 942, col: 19, offset: 28620},
									expr: &choiceExpr{
										pos: position{line: 942, col: 20, offset: 28621},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 942, col: 20, offset: 28621},
												offset: 306,
											},
											&charClassMatcher{
												pos:        position{line: 942, col: 35, offset: 28636},
												val:        "[!#$%&'*+-/=?^_`{|}~.]",
												chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:     []rune{'+', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 944, col: 4, offset: 28764},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 951, col: 1, offset: 28930},
			expr: &actionExpr{
				pos: position{line: 951, col: 15, offset: 28944},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 951, col: 15, offset: 28944},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 951, col: 15, offset: 28944},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 951, col: 23, offset: 28952},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 951, col: 24, offset: 28953},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 951, col: 24, offset: 28953},
											expr: &ruleRefExpr{
												pos:    position{line: 951, col: 25, offset: 28954},
												offset: 306,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 951, col: 40, offset: 28969},
											expr: &seqExpr{
												pos: position{line: 951, col: 41, offset: 28970},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 951, col: 41, offset: 28970},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 951, col: 45, offset: 28974},
														expr: &choiceExpr{
															pos: position{line: 951, col: 46, offset: 28975},
															alternatives: []any{
																&ruleRefExpr{
																	pos:    position{line: 951, col: 46, offset: 28975},
																	offset: 306,
																},
																&litMatcher{
																	pos:        position{line: 951, col: 61, offset: 28990},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 953, col: 4, offset: 29035},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 961, col: 1, offset: 29177},
			expr: &actionExpr{
				pos: position{line: 962, col: 5, offset: 29191},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 962, col: 5, offset: 29191},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 962, col: 5, offset: 29191},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 962, col: 12, offset: 29198},
								offset: 163,
							},
						},
						&labeledExpr{
							pos:   position{line: 963, col: 5, offset: 29216},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 963, col: 11, offset: 29222},
								expr: &ruleRefExpr{
									pos:    position{line: 963, col: 12, offset: 29223},
									offset: 167,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 964, col: 5, offset: 29241},
							offset: 164,
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 968, col: 1, offset: 29399},
			expr: &actionExpr{
				pos: position{line: 968, col: 16, offset: 29414},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 968, col: 16, offset: 29414},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 968, col: 16, offset: 29414},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 968, col: 32, offset: 29430},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 968, col: 42, offset: 29440},
								offset: 166,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 968, col: 59, offset: 29457},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 968, col: 69, offset: 29467},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 975, col: 1, offset: 29644},
			expr: &seqExpr{
				pos: position{line: 975, col: 14, offset: 29657},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 975, col: 14, offset: 29657},
						offset: 310,
					},
					&labeledExpr{
						pos:   position{line: 975, col: 30, offset: 29673},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 975, col: 40, offset: 29683},
							offset: 166,
						},
					},
					&andExpr{
						pos: position{line: 975, col: 57, offset: 29700},
						expr: &ruleRefExpr{
							pos:    position{line: 975, col: 58, offset: 29701},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 975, col: 68, offset: 29711},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 984, col: 1, offset: 29971},
			expr: &actionExpr{
				pos: position{line: 984, col: 18, offset: 29988},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 984, col: 18, offset: 29988},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 984, col: 18, offset: 29988},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 984, col: 27, offset: 29997},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 984, col: 27, offset: 29997},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 984, col: 34, offset: 30004},
										expr: &litMatcher{
											pos:        position{line: 984, col: 34, offset: 30004},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 984, col: 40, offset: 30010},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 991, col: 1, offset: 30129},
			expr: &actionExpr{
				pos: position{line: 991, col: 20, offset: 30148},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 991, col: 20, offset: 30148},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 991, col: 20, offset: 30148},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 991, col: 29, offset: 30157},
								offset: 165,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 992, col: 5, offset: 30178},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 997, col: 1, offset: 30305},
			expr: &actionExpr{
				pos: position{line: 997, col: 15, offset: 30319},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 997, col: 16, offset: 30320},
					exprs: []any{
						&notExpr{
							pos: position{line: 997, col: 16, offset: 30320},
							expr: &ruleRefExpr{
								pos:    position{line: 997, col: 17, offset: 30321},
								offset: 166,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 997, col: 34, offset: 30338},
							offset: 308,
						},
						&labeledExpr{
							pos:   position{line: 997, col: 47, offset: 30351},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 997, col: 52, offset: 30356},
								offset: 316,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 997, col: 60, offset: 30364},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 1001, col: 1, offset: 30415},
			expr: &actionExpr{
				pos: position{line: 1002, col: 5, offset: 30426},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 5, offset: 30426},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1002, col: 5, offset: 30426},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1002, col: 12, offset: 30433},
								offset: 169,
							},
						},
						&labeledExpr{
							pos:   position{line: 1003, col: 5, offset: 30448},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1003, col: 11, offset: 30454},
								expr: &seqExpr{
									pos: position{line: 1003, col: 12, offset: 30455},
									exprs: []any{
										&notExpr{
											pos: position{line: 1003, col: 12, offset: 30455},
											expr: &ruleRefExpr{
												pos:    position{line: 1003, col: 13, offset: 30456},
												offset: 172,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1003, col: 27, offset: 30470},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1004, col: 5, offset: 30484},
							offset: 170,
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 1008, col: 1, offset: 30633},
			expr: &actionExpr{
				pos: position{line: 1008, col: 13, offset: 30645},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 1008, col: 13, offset: 30645},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1008, col: 13, offset: 30645},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1008, col: 23, offset: 30655},
								offset: 172,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1008, col: 37, offset: 30669},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1008, col: 47, offset: 30679},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 1015, col: 1, offset: 30853},
			expr: &seqExpr{
				pos: position{line: 1015, col: 11, offset: 30863},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1015, col: 11, offset: 30863},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1015, col: 21, offset: 30873},
							offset: 172,
						},
					},
					&andExpr{
						pos: position{line: 1015, col: 35, offset: 30887},
						expr: &ruleRefExpr{
							pos:    position{line: 1015, col: 36, offset: 30888},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1015, col: 46, offset: 30898},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 1024, col: 1, offset: 31152},
			expr: &actionExpr{
				pos: position{line: 1024, col: 14, offset: 31165},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 1024, col: 14, offset: 31165},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 1024, col: 23, offset: 31174},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 1029, col: 1, offset: 31230},
			expr: &actionExpr{
				pos: position{line: 1029, col: 17, offset: 31246},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 17, offset: 31246},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1029, col: 17, offset: 31246},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1029, col: 26, offset: 31255},
								offset: 171,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1030, col: 5, offset: 31272},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1036, col: 1, offset: 31405},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 15, offset: 31419},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1036, col: 15, offset: 31419},
						offset: 174,
					},
					&ruleRefExpr{
						pos:    position{line: 1036, col: 34, offset: 31438},
						offset: 177,
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1038, col: 1, offset: 31457},
			expr: &actionExpr{
				pos: position{line: 1038, col: 20, offset: 31476},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 20, offset: 31476},
					exprs: []any{
						&notExpr{
							pos: position{line: 1038, col: 20, offset: 31476},
							expr: &ruleRefExpr{
								pos:    position{line: 1038, col: 21, offset: 31477},
								offset: 323,
							},
						},
						&litMatcher{
							pos:        position{line: 1038, col: 28, offset: 31484},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1038, col: 32, offset: 31488},
							expr: &notExpr{
								pos: position{line: 1038, col: 34, offset: 31490},
								expr: &litMatcher{
									pos:        position{line: 1038, col: 35, offset: 31491},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 40, offset: 31496},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1038, col: 47, offset: 31503},
								offset: 175,
							},
						},
						&litMatcher{
							pos:        position{line: 1038, col: 70, offset: 31526},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1038, col: 74, offset: 31530},
							expr: &litMatcher{
								pos:        position{line: 1038, col: 75, offset: 31531},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1038, col: 79, offset: 31535},
							expr: &notExpr{
								pos: position{line: 1038, col: 81, offset: 31537},
								expr: &ruleRefExpr{
									pos:    position{line: 1038, col: 82, offset: 31538},
									offset: 306,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1042, col: 1, offset: 31583},
			expr: &actionExpr{
				pos: position{line: 1042, col: 25, offset: 31607},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1042, col: 25, offset: 31607},
					exprs: []any{
						&notExpr{
							pos: position{line: 1042, col: 25, offset: 31607},
							expr: &ruleRefExpr{
								pos:    position{line: 1042, col: 26, offset: 31608},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 1042, col: 28, offset: 31610},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1042, col: 34, offset: 31616},
								expr: &actionExpr{
									pos: position{line: 1042, col: 35, offset: 31617},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1042, col: 35, offset: 31617},
										exprs: []any{
											&notExpr{
												pos: position{line: 1042, col: 35, offset: 31617},
												expr: &ruleRefExpr{
													pos:    position{line: 1042, col: 36, offset: 31618},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 1042, col: 38, offset: 31620},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1042, col: 44, offset: 31626},
													expr: &ruleRefExpr{
														pos:    position{line: 1042, col: 45, offset: 31627},
														offset: 176,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1046, col: 1, offset: 31781},
			expr: &seqExpr{
				pos: position{line: 1046, col: 27, offset: 31807},
				exprs: []any{
					&notExpr{
						pos: position{line: 1046, col: 27, offset: 31807},
						expr: &seqExpr{
							pos: position{line: 1046, col: 29, offset: 31809},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1046, col: 29, offset: 31809},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&notExpr{
									pos: position{line: 1046, col: 33, offset: 31813},
									expr: &litMatcher{
										pos:        position{line: 1046, col: 34, offset: 31814},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1046, col: 39, offset: 31819},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1048, col: 1, offset: 31841},
			expr: &actionExpr{
				pos: position{line: 1048, col: 20, offset: 31860},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 20, offset: 31860},
					exprs: []any{
						&notExpr{
							pos: position{line: 1048, col: 20, offset: 31860},
							expr: &ruleRefExpr{
								pos:    position{line: 1048, col: 21, offset: 31861},
								offset: 324,
							},
						},
						&litMatcher{
							pos:        position{line: 1048, col: 34, offset: 31874},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 39, offset: 31879},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1048, col: 46, offset: 31886},
								offset: 178,
							},
						},
						&litMatcher{
							pos:        position{line: 1048, col: 69, offset: 31909},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1052, col: 1, offset: 31946},
			expr: &actionExpr{
				pos: position{line: 1052, col: 25, offset: 31970},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 25, offset: 31970},
					exprs: []any{
						&notExpr{
							pos: position{line: 1052, col: 25, offset: 31970},
							expr: &ruleRefExpr{
								pos:    position{line: 1052, col: 26, offset: 31971},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 28, offset: 31973},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1052, col: 34, offset: 31979},
								expr: &actionExpr{
									pos: position{line: 1052, col: 35, offset: 31980},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1052, col: 35, offset: 31980},
										exprs: []any{
											&notExpr{
												pos: position{line: 1052, col: 35, offset: 31980},
												expr: &ruleRefExpr{
													pos:    position{line: 1052, col: 36, offset: 31981},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 1052, col: 38, offset: 31983},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1052, col: 44, offset: 31989},
													expr: &ruleRefExpr{
														pos:    position{line: 1052, col: 45, offset: 31990},
														offset: 179,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1056, col: 1, offset: 32156},
			expr: &seqExpr{
				pos: position{line: 1056, col: 27, offset: 32182},
				exprs: []any{
					&notExpr{
						pos: position{line: 1056, col: 27, offset: 32182},
						expr: &litMatcher{
							pos:        position{line: 1056, col: 29, offset: 32184},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1056, col: 35, offset: 32190},
						offset: 87,
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1059, col: 1, offset: 32213},
			expr: &actionExpr{
				pos: position{line: 1060, col: 5, offset: 32227},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1060, col: 5, offset: 32227},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1060, col: 5, offset: 32227},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1060, col: 12, offset: 32234},
								offset: 181,
							},
						},
						&labeledExpr{
							pos:   position{line: 1061, col: 5, offset: 32252},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1061, col: 11, offset: 32258},
								expr: &seqExpr{
									pos: position{line: 1061, col: 12, offset: 32259},
									exprs: []any{
										&notExpr{
											pos: position{line: 1061, col: 12, offset: 32259},
											expr: &ruleRefExpr{
												pos:    position{line: 1061, col: 13, offset: 32260},
												offset: 184,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1061, col: 30, offset: 32277},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1062, col: 5, offset: 32291},
							offset: 182,
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1066, col: 1, offset: 32449},
			expr: &actionExpr{
				pos: position{line: 1066, col: 16, offset: 32464},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 16, offset: 32464},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1066, col: 16, offset: 32464},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1066, col: 26, offset: 32474},
								offset: 184,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1066, col: 43, offset: 32491},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1066, col: 53, offset: 32501},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1073, col: 1, offset: 32686},
			expr: &seqExpr{
				pos: position{line: 1073, col: 14, offset: 32699},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1073, col: 14, offset: 32699},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1073, col: 24, offset: 32709},
							offset: 184,
						},
					},
					&andExpr{
						pos: position{line: 1073, col: 41, offset: 32726},
						expr: &ruleRefExpr{
							pos:    position{line: 1073, col: 42, offset: 32727},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1073, col: 52, offset: 32737},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1082, col: 1, offset: 33005},
			expr: &actionExpr{
				pos: position{line: 1082, col: 17, offset: 33021},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 17, offset: 33021},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1082, col: 17, offset: 33021},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1082, col: 26, offset: 33030},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1082, col: 26, offset: 33030},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1082, col: 33, offset: 33037},
										expr: &litMatcher{
											pos:        position{line: 1082, col: 33, offset: 33037},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1082, col: 39, offset: 33043},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1089, col: 1, offset: 33166},
			expr: &actionExpr{
				pos: position{line: 1089, col: 20, offset: 33185},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 20, offset: 33185},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1089, col: 20, offset: 33185},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1089, col: 29, offset: 33194},
								offset: 183,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1090, col: 5, offset: 33214},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1095, col: 1, offset: 33345},
			expr: &actionExpr{
				pos: position{line: 1095, col: 15, offset: 33359},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 16, offset: 33360},
					exprs: []any{
						&notExpr{
							pos: position{line: 1095, col: 16, offset: 33360},
							expr: &ruleRefExpr{
								pos:    position{line: 1095, col: 17, offset: 33361},
								offset: 184,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1095, col: 34, offset: 33378},
							offset: 308,
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 47, offset: 33391},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1095, col: 52, offset: 33396},
								offset: 316,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1095, col: 60, offset: 33404},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1101, col: 1, offset: 33453},
			expr: &actionExpr{
				pos: position{line: 1102, col: 5, offset: 33467},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 5, offset: 33467},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1102, col: 5, offset: 33467},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1102, col: 12, offset: 33474},
								offset: 187,
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 5, offset: 33492},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1103, col: 11, offset: 33498},
								expr: &ruleRefExpr{
									pos:    position{line: 1103, col: 12, offset: 33499},
									offset: 191,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1104, col: 5, offset: 33517},
							offset: 188,
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1108, col: 1, offset: 33684},
			expr: &actionExpr{
				pos: position{line: 1108, col: 16, offset: 33699},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 16, offset: 33699},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1108, col: 16, offset: 33699},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 32, offset: 33715},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1108, col: 42, offset: 33725},
								offset: 190,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1108, col: 59, offset: 33742},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1108, col: 69, offset: 33752},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1115, col: 1, offset: 33929},
			expr: &seqExpr{
				pos: position{line: 1115, col: 14, offset: 33942},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 1115, col: 14, offset: 33942},
						offset: 310,
					},
					&labeledExpr{
						pos:   position{line: 1115, col: 30, offset: 33958},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1115, col: 40, offset: 33968},
							offset: 190,
						},
					},
					&andExpr{
						pos: position{line: 1115, col: 57, offset: 33985},
						expr: &ruleRefExpr{
							pos:    position{line: 1115, col: 58, offset: 33986},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1115, col: 68, offset: 33996},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1124, col: 1, offset: 34256},
			expr: &actionExpr{
				pos: position{line: 1124, col: 15, offset: 34270},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1124, col: 15, offset: 34270},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1124, col: 15, offset: 34270},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1124, col: 21, offset: 34276},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1124, col: 21, offset: 34276},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1124, col: 28, offset: 34283},
										expr: &litMatcher{
											pos:        position{line: 1124, col: 28, offset: 34283},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1124, col: 34, offset: 34289},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1131, col: 1, offset: 34402},
			expr: &actionExpr{
				pos: position{line: 1131, col: 20, offset: 34421},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 20, offset: 34421},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1131, col: 20, offset: 34421},
							label: "dots",
							expr: &ruleRefExpr{
								pos:    position{line: 1131, col: 26, offset: 34427},
								offset: 189,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1132, col: 5, offset: 34445},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1137, col: 1, offset: 34569},
			expr: &actionExpr{
				pos: position{line: 1137, col: 15, offset: 34583},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1137, col: 16, offset: 34584},
					exprs: []any{
						&notExpr{
							pos: position{line: 1137, col: 16, offset: 34584},
							expr: &ruleRefExpr{
								pos:    position{line: 1137, col: 17, offset: 34585},
								offset: 190,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1137, col: 34, offset: 34602},
							offset: 308,
						},
						&labeledExpr{
							pos:   position{line: 1137, col: 47, offset: 34615},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1137, col: 52, offset: 34620},
								offset: 316,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1137, col: 60, offset: 34628},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1141, col: 1, offset: 34675},
			expr: &actionExpr{
				pos: position{line: 1142, col: 5, offset: 34689},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 5, offset: 34689},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1142, col: 5, offset: 34689},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1142, col: 12, offset: 34696},
								offset: 193,
							},
						},
						&labeledExpr{
							pos:   position{line: 1143, col: 5, offset: 34714},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1143, col: 11, offset: 34720},
								expr: &seqExpr{
									pos: position{line: 1143, col: 12, offset: 34721},
									exprs: []any{
										&notExpr{
											pos: position{line: 1143, col: 12, offset: 34721},
											expr: &ruleRefExpr{
												pos:    position{line: 1143, col: 13, offset: 34722},
												offset: 196,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1143, col: 30, offset: 34739},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1144, col: 5, offset: 34753},
							offset: 194,
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1148, col: 1, offset: 34911},
			expr: &actionExpr{
				pos: position{line: 1148, col: 16, offset: 34926},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 16, offset: 34926},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1148, col: 16, offset: 34926},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1148, col: 26, offset: 34936},
								offset: 196,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1148, col: 43, offset: 34953},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1148, col: 53, offset: 34963},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1155, col: 1, offset: 35140},
			expr: &seqExpr{
				pos: position{line: 1155, col: 14, offset: 35153},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1155, col: 14, offset: 35153},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1155, col: 24, offset: 35163},
							offset: 196,
						},
					},
					&andExpr{
						pos: position{line: 1155, col: 41, offset: 35180},
						expr: &ruleRefExpr{
							pos:    position{line: 1155, col: 42, offset: 35181},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1155, col: 52, offset: 35191},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1164, col: 1, offset: 35451},
			expr: &actionExpr{
				pos: position{line: 1164, col: 20, offset: 35470},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 20, offset: 35470},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1164, col: 20, offset: 35470},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1164, col: 31, offset: 35481},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1164, col: 31, offset: 35481},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1164, col: 38, offset: 35488},
										expr: &litMatcher{
											pos:        position{line: 1164, col: 38, offset: 35488},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1164, col: 44, offset: 35494},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1171, col: 1, offset: 35617},
			expr: &actionExpr{
				pos: position{line: 1171, col: 20, offset: 35636},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 20, offset: 35636},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1171, col: 20, offset: 35636},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:    position{line: 1171, col: 31, offset: 35647},
								offset: 195,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1172, col: 5, offset: 35670},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1178, col: 1, offset: 35800},
			expr: &actionExpr{
				pos: position{line: 1178, col: 12, offset: 35811},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1178, col: 12, offset: 35811},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1178, col: 12, offset: 35811},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1178, col: 20, offset: 35819},
								expr: &ruleRefExpr{
									pos:    position{line: 1178, col: 21, offset: 35820},
									offset: 198,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1178, col: 39, offset: 35838},
							offset: 307,
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1182, col: 1, offset: 35895},
			expr: &actionExpr{
				pos: position{line: 1182, col: 19, offset: 35913},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 19, offset: 35913},
					exprs: []any{
						&notExpr{
							pos: position{line: 1182, col: 19, offset: 35913},
							expr: &ruleRefExpr{
								pos:    position{line: 1182, col: 20, offset: 35914},
								offset: 307,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1182, col: 30, offset: 35924},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 46, offset: 35940},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1182, col: 55, offset: 35949},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1182, col: 55, offset: 35949},
										offset: 201,
									},
									&ruleRefExpr{
										pos:    position{line: 1182, col: 68, offset: 35962},
										offset: 202,
									},
									&ruleRefExpr{
										pos:    position{line: 1182, col: 82, offset: 35976},
										offset: 203,
									},
									&ruleRefExpr{
										pos:    position{line: 1182, col: 96, offset: 35990},
										offset: 22,
									},
									&ruleRefExpr{
										pos:    position{line: 1182, col: 113, offset: 36007},
										offset: 26,
									},
									&ruleRefExpr{
										pos:    position{line: 1182, col: 130, offset: 36024},
										offset: 93,
									},
									&ruleRefExpr{
										pos:    position{line: 1182, col: 144, offset: 36038},
										offset: 199,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1182, col: 158, offset: 36052},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1186, col: 1, offset: 36091},
			expr: &actionExpr{
				pos: position{line: 1186, col: 16, offset: 36106},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 16, offset: 36106},
					exprs: []any{
						&notExpr{
							pos: position{line: 1186, col: 16, offset: 36106},
							expr: &ruleRefExpr{
								pos:    position{line: 1186, col: 17, offset: 36107},
								offset: 279,
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 35, offset: 36125},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1186, col: 43, offset: 36133},
								expr: &ruleRefExpr{
									pos:    position{line: 1186, col: 43, offset: 36133},
									offset: 200,
								},
							},
						},
						&andExpr{
							pos: position{line: 1186, col: 64, offset: 36154},
							expr: &ruleRefExpr{
								pos:    position{line: 1186, col: 65, offset: 36155},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1190, col: 1, offset: 36242},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 4, offset: 36269},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1191, col: 4, offset: 36269},
						offset: 45,
					},
					&oneOrMoreExpr{
						pos: position{line: 1193, col: 6, offset: 36300},
						expr: &charClassMatcher{
							pos:        position{line: 1193, col: 6, offset: 36300},
							val:        "[^\\r\\n{]",
							chars:      []rune{'\r', '\n', '{'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&litMatcher{
						pos:        position{line: 1194, col: 7, offset: 36318},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1197, col: 1, offset: 36326},
			expr: &actionExpr{
				pos: position{line: 1197, col: 14, offset: 36339},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 14, offset: 36339},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1197, col: 14, offset: 36339},
							offset: 273,
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 29, offset: 36354},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1197, col: 41, offset: 36366},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1197, col: 64, offset: 36389},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1197, col: 69, offset: 36394},
							offset: 317,
						},
						&ruleRefExpr{
							pos:    position{line: 1197, col: 80, offset: 36405},
							offset: 313,
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 90, offset: 36415},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1197, col: 96, offset: 36421},
								expr: &ruleRefExpr{
									pos:    position{line: 1197, col: 97, offset: 36422},
									offset: 198,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1197, col: 116, offset: 36441},
							offset: 280,
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1202, col: 1, offset: 36629},
			expr: &actionExpr{
				pos: position{line: 1202, col: 15, offset: 36643},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 15, offset: 36643},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1202, col: 15, offset: 36643},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 26, offset: 36654},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1202, col: 38, offset: 36666},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1202, col: 61, offset: 36689},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1202, col: 66, offset: 36694},
							offset: 317,
						},
						&ruleRefExpr{
							pos:    position{line: 1202, col: 77, offset: 36705},
							offset: 313,
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 87, offset: 36715},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1202, col: 93, offset: 36721},
								expr: &ruleRefExpr{
									pos:    position{line: 1202, col: 94, offset: 36722},
									offset: 198,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1202, col: 113, offset: 36741},
							offset: 280,
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1207, col: 1, offset: 36931},
			expr: &actionExpr{
				pos: position{line: 1207, col: 15, offset: 36945},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 15, offset: 36945},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1207, col: 15, offset: 36945},
							offset: 286,
						},
						&litMatcher{
							pos:        position{line: 1207, col: 31, offset: 36961},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1207, col: 35, offset: 36965},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 45, offset: 36975},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1207, col: 51, offset: 36981},
								offset: 287,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1207, col: 64, offset: 36994},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 75, offset: 37005},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1207, col: 84, offset: 37014},
								offset: 288,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1207, col: 100, offset: 37030},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 110, offset: 37040},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1207, col: 117, offset: 37047},
								offset: 287,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1207, col: 130, offset: 37060},
							offset: 317,
						},
						&litMatcher{
							pos:        position{line: 1207, col: 140, offset: 37070},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1207, col: 144, offset: 37074},
							offset: 317,
						},
						&ruleRefExpr{
							pos:    position{line: 1207, col: 155, offset: 37085},
							offset: 313,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 165, offset: 37095},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1207, col: 171, offset: 37101},
								expr: &ruleRefExpr{
									pos:    position{line: 1207, col: 172, offset: 37102},
									offset: 198,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1207, col: 191, offset: 37121},
							offset: 280,
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1214, col: 1, offset: 37342},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 37354},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 37354},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 37354},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1215, col: 12, offset: 37361},
								offset: 205,
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 37377},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1216, col: 11, offset: 37383},
								expr: &seqExpr{
									pos: position{line: 1216, col: 12, offset: 37384},
									exprs: []any{
										&notExpr{
											pos: position{line: 1216, col: 12, offset: 37384},
											expr: &ruleRefExpr{
												pos:    position{line: 1216, col: 13, offset: 37385},
												offset: 208,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1216, col: 28, offset: 37400},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1217, col: 5, offset: 37414},
							offset: 206,
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1221, col: 1, offset: 37566},
			expr: &actionExpr{
				pos: position{line: 1221, col: 14, offset: 37579},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 14, offset: 37579},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1221, col: 14, offset: 37579},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1221, col: 24, offset: 37589},
								offset: 208,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1221, col: 39, offset: 37604},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1221, col: 49, offset: 37614},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1228, col: 1, offset: 37789},
			expr: &seqExpr{
				pos: position{line: 1228, col: 12, offset: 37800},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1228, col: 12, offset: 37800},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1228, col: 22, offset: 37810},
							offset: 208,
						},
					},
					&andExpr{
						pos: position{line: 1228, col: 37, offset: 37825},
						expr: &ruleRefExpr{
							pos:    position{line: 1228, col: 38, offset: 37826},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1228, col: 48, offset: 37836},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1237, col: 1, offset: 38088},
			expr: &actionExpr{
				pos: position{line: 1237, col: 19, offset: 38106},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 19, offset: 38106},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1237, col: 19, offset: 38106},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1237, col: 31, offset: 38118},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1237, col: 31, offset: 38118},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1237, col: 38, offset: 38125},
										expr: &litMatcher{
											pos:        position{line: 1237, col: 38, offset: 38125},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1237, col: 44, offset: 38131},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1244, col: 1, offset: 38256},
			expr: &actionExpr{
				pos: position{line: 1244, col: 18, offset: 38273},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 18, offset: 38273},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1244, col: 18, offset: 38273},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:    position{line: 1244, col: 30, offset: 38285},
								offset: 207,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1245, col: 5, offset: 38307},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1251, col: 1, offset: 38436},
			expr: &actionExpr{
				pos: position{line: 1251, col: 17, offset: 38452},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 17, offset: 38452},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1251, col: 17, offset: 38452},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1251, col: 22, offset: 38457},
								expr: &ruleRefExpr{
									pos:    position{line: 1251, col: 22, offset: 38457},
									offset: 81,
								},
							},
						},
						&andExpr{
							pos: position{line: 1251, col: 37, offset: 38472},
							expr: &ruleRefExpr{
								pos:    position{line: 1251, col: 38, offset: 38473},
								offset: 313,
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 48, offset: 38483},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1251, col: 54, offset: 38489},
								expr: &ruleRefExpr{
									pos:    position{line: 1251, col: 55, offset: 38490},
									offset: 213,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 70, offset: 38505},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1251, col: 85, offset: 38520},
								expr: &ruleRefExpr{
									pos:    position{line: 1251, col: 86, offset: 38521},
									offset: 214,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlock",
			pos:  position{line: 1262, col: 1, offset: 38764},
			expr: &actionExpr{
				pos: position{line: 1262, col: 17, offset: 38780},
				run: (*parser).callonAttachedBlock1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 17, offset: 38780},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1262, col: 17, offset: 38780},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1262, col: 26, offset: 38789},
								offset: 211,
							},
						},
						&andExpr{
							pos: position{line: 1262, col: 48, offset: 38811},
							expr: &ruleRefExpr{
								pos:    position{line: 1262, col: 49, offset: 38812},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1266, col: 1, offset: 38851},
			expr: &actionExpr{
				pos: position{line: 1266, col: 24, offset: 38874},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 24, offset: 38874},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1266, col: 24, offset: 38874},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1266, col: 28, offset: 38878},
							offset: 317,
						},
						&ruleRefExpr{
							pos:    position{line: 1266, col: 38, offset: 38888},
							offset: 300,
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 46, offset: 38896},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1266, col: 53, offset: 38903},
								offset: 3,
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1270, col: 1, offset: 38991},
			expr: &actionExpr{
				pos: position{line: 1270, col: 20, offset: 39010},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 20, offset: 39010},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1270, col: 20, offset: 39010},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1270, col: 24, offset: 39014},
							offset: 317,
						},
						&ruleRefExpr{
							pos:    position{line: 1270, col: 34, offset: 39024},
							offset: 300,
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 42, offset: 39032},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1270, col: 48, offset: 39038},
								offset: 2,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1274, col: 1, offset: 39134},
			expr: &actionExpr{
				pos: position{line: 1274, col: 16, offset: 39149},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 16, offset: 39149},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1274, col: 16, offset: 39149},
							offset: 313,
						},
						&notExpr{
							pos: position{line: 1274, col: 26, offset: 39159},
							expr: &ruleRefExpr{
								pos:    position{line: 1274, col: 27, offset: 39160},
								offset: 244,
							},
						},
						&notExpr{
							pos: position{line: 1274, col: 45, offset: 39178},
							expr: &ruleRefExpr{
								pos:    position{line: 1274, col: 46, offset: 39179},
								offset: 246,
							},
						},
						&notExpr{
							pos: position{line: 1274, col: 66, offset: 39199},
							expr: &ruleRefExpr{
								pos:    position{line: 1274, col: 67, offset: 39200},
								offset: 14,
							},
						},
						&notExpr{
							pos: position{line: 1274, col: 83, offset: 39216},
							expr: &ruleRefExpr{
								pos:    position{line: 1274, col: 84, offset: 39217},
								offset: 289,
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 105, offset: 39238},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1274, col: 113, offset: 39246},
								expr: &ruleRefExpr{
									pos:    position{line: 1274, col: 114, offset: 39247},
									offset: 81,
								},
							},
						},
						&andExpr{
							pos: position{line: 1274, col: 130, offset: 39263},
							expr: &ruleRefExpr{
								pos:    position{line: 1274, col: 131, offset: 39264},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1278, col: 1, offset: 39350},
			expr: &actionExpr{
				pos: position{line: 1278, col: 18, offset: 39367},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 18, offset: 39367},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1278, col: 18, offset: 39367},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1278, col: 25, offset: 39374},
								expr: &ruleRefExpr{
									pos:    position{line: 1278, col: 26, offset: 39375},
									offset: 211,
								},
							},
						},
						&andExpr{
							pos: position{line: 1278, col: 49, offset: 39398},
							expr: &ruleRefExpr{
								pos:    position{line: 1278, col: 50, offset: 39399},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1283, col: 1, offset: 39438},
			expr: &actionExpr{
				pos: position{line: 1283, col: 17, offset: 39454},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1283, col: 17, offset: 39454},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1283, col: 18, offset: 39455},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1283, col: 18, offset: 39455},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1283, col: 26, offset: 39463},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1283, col: 26, offset: 39463},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1283, col: 30, offset: 39467},
											expr: &ruleRefExpr{
												pos:    position{line: 1283, col: 30, offset: 39467},
												offset: 322,
											},
										},
										&litMatcher{
											pos:        position{line: 1283, col: 33, offset: 39470},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1283, col: 37, offset: 39474},
											expr: &ruleRefExpr{
												pos:    position{line: 1283, col: 37, offset: 39474},
												offset: 322,
											},
										},
										&litMatcher{
											pos:        position{line: 1283, col: 40, offset: 39477},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1283, col: 46, offset: 39483},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1283, col: 46, offset: 39483},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1283, col: 50, offset: 39487},
											expr: &ruleRefExpr{
												pos:    position{line: 1283, col: 50, offset: 39487},
												offset: 322,
											},
										},
										&litMatcher{
											pos:        position{line: 1283, col: 53, offset: 39490},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1283, col: 57, offset: 39494},
											expr: &ruleRefExpr{
												pos:    position{line: 1283, col: 57, offset: 39494},
												offset: 322,
											},
										},
										&litMatcher{
											pos:        position{line: 1283, col: 60, offset: 39497},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1283, col: 66, offset: 39503},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1283, col: 66, offset: 39503},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1283, col: 70, offset: 39507},
											expr: &ruleRefExpr{
												pos:    position{line: 1283, col: 70, offset: 39507},
												offset: 322,
											},
										},
										&litMatcher{
											pos:        position{line: 1283, col: 73, offset: 39510},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1283, col: 77, offset: 39514},
											expr: &ruleRefExpr{
												pos:    position{line: 1283, col: 77, offset: 39514},
												offset: 322,
											},
										},
										&litMatcher{
											pos:        position{line: 1283, col: 80, offset: 39517},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1283, col: 85, offset: 39522},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 1283, col: 95, offset: 39532},
							expr: &ruleRefExpr{
								pos:    position{line: 1283, col: 96, offset: 39533},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1288, col: 1, offset: 39604},
			expr: &actionExpr{
				pos: position{line: 1288, col: 13, offset: 39616},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 13, offset: 39616},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1288, col: 14, offset: 39617},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1288, col: 21, offset: 39624},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 1288, col: 31, offset: 39634},
							expr: &ruleRefExpr{
								pos:    position{line: 1288, col: 32, offset: 39635},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1293, col: 1, offset: 39702},
			expr: &actionExpr{
				pos: position{line: 1294, col: 5, offset: 39715},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 5, offset: 39715},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1294, col: 5, offset: 39715},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1294, col: 12, offset: 39722},
								offset: 218,
							},
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 5, offset: 39739},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1295, col: 11, offset: 39745},
								expr: &seqExpr{
									pos: position{line: 1295, col: 12, offset: 39746},
									exprs: []any{
										&notExpr{
											pos: position{line: 1295, col: 12, offset: 39746},
											expr: &ruleRefExpr{
												pos:    position{line: 1295, col: 13, offset: 39747},
												offset: 221,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1295, col: 29, offset: 39763},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1296, col: 5, offset: 39777},
							offset: 219,
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1300, col: 1, offset: 39932},
			expr: &actionExpr{
				pos: position{line: 1300, col: 15, offset: 39946},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 15, offset: 39946},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1300, col: 15, offset: 39946},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1300, col: 25, offset: 39956},
								offset: 221,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1300, col: 41, offset: 39972},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1300, col: 51, offset: 39982},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1307, col: 1, offset: 40166},
			expr: &seqExpr{
				pos: position{line: 1307, col: 13, offset: 40178},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1307, col: 13, offset: 40178},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1307, col: 23, offset: 40188},
							offset: 221,
						},
					},
					&andExpr{
						pos: position{line: 1307, col: 39, offset: 40204},
						expr: &ruleRefExpr{
							pos:    position{line: 1307, col: 40, offset: 40205},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1307, col: 50, offset: 40215},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1316, col: 1, offset: 40481},
			expr: &actionExpr{
				pos: position{line: 1316, col: 19, offset: 40499},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 19, offset: 40499},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1316, col: 19, offset: 40499},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1316, col: 30, offset: 40510},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1316, col: 30, offset: 40510},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1316, col: 36, offset: 40516},
										expr: &litMatcher{
											pos:        position{line: 1316, col: 36, offset: 40516},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1316, col: 42, offset: 40522},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1323, col: 1, offset: 40649},
			expr: &actionExpr{
				pos: position{line: 1323, col: 19, offset: 40667},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 19, offset: 40667},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1323, col: 19, offset: 40667},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1323, col: 28, offset: 40676},
								offset: 220,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1324, col: 5, offset: 40698},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1329, col: 1, offset: 40828},
			expr: &actionExpr{
				pos: position{line: 1329, col: 14, offset: 40841},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1329, col: 15, offset: 40842},
					exprs: []any{
						&notExpr{
							pos: position{line: 1329, col: 15, offset: 40842},
							expr: &ruleRefExpr{
								pos:    position{line: 1329, col: 16, offset: 40843},
								offset: 221,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1329, col: 32, offset: 40859},
							offset: 308,
						},
						&labeledExpr{
							pos:   position{line: 1329, col: 45, offset: 40872},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1329, col: 50, offset: 40877},
								offset: 316,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1329, col: 58, offset: 40885},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1335, col: 1, offset: 40934},
			expr: &actionExpr{
				pos: position{line: 1336, col: 5, offset: 40945},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 5, offset: 40945},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1336, col: 5, offset: 40945},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1336, col: 12, offset: 40952},
								offset: 224,
							},
						},
						&labeledExpr{
							pos:   position{line: 1337, col: 5, offset: 40967},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1337, col: 11, offset: 40973},
								expr: &ruleRefExpr{
									pos:    position{line: 1337, col: 12, offset: 40974},
									offset: 228,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1338, col: 5, offset: 40989},
							offset: 225,
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1342, col: 1, offset: 41148},
			expr: &actionExpr{
				pos: position{line: 1342, col: 13, offset: 41160},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 13, offset: 41160},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1342, col: 13, offset: 41160},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1342, col: 23, offset: 41170},
								offset: 227,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1342, col: 37, offset: 41184},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1342, col: 47, offset: 41194},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1349, col: 1, offset: 41368},
			expr: &seqExpr{
				pos: position{line: 1349, col: 11, offset: 41378},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1349, col: 11, offset: 41378},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1349, col: 21, offset: 41388},
							offset: 227,
						},
					},
					&andExpr{
						pos: position{line: 1349, col: 35, offset: 41402},
						expr: &ruleRefExpr{
							pos:    position{line: 1349, col: 36, offset: 41403},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1349, col: 46, offset: 41413},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1358, col: 1, offset: 41667},
			expr: &actionExpr{
				pos: position{line: 1358, col: 14, offset: 41680},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1358, col: 14, offset: 41680},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1358, col: 14, offset: 41680},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1358, col: 22, offset: 41688},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1358, col: 22, offset: 41688},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1358, col: 29, offset: 41695},
										expr: &litMatcher{
											pos:        position{line: 1358, col: 29, offset: 41695},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1358, col: 35, offset: 41701},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1365, col: 1, offset: 41818},
			expr: &actionExpr{
				pos: position{line: 1365, col: 17, offset: 41834},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 17, offset: 41834},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1365, col: 17, offset: 41834},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:    position{line: 1365, col: 25, offset: 41842},
								offset: 226,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1366, col: 5, offset: 41859},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1371, col: 1, offset: 41982},
			expr: &actionExpr{
				pos: position{line: 1371, col: 12, offset: 41993},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 13, offset: 41994},
					exprs: []any{
						&notExpr{
							pos: position{line: 1371, col: 13, offset: 41994},
							expr: &ruleRefExpr{
								pos:    position{line: 1371, col: 14, offset: 41995},
								offset: 227,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1371, col: 28, offset: 42009},
							offset: 308,
						},
						&labeledExpr{
							pos:   position{line: 1371, col: 41, offset: 42022},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1371, col: 46, offset: 42027},
								offset: 316,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1371, col: 54, offset: 42035},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1379, col: 1, offset: 42086},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 18, offset: 42103},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1379, col: 18, offset: 42103},
						offset: 230,
					},
					&ruleRefExpr{
						pos:    position{line: 1379, col: 43, offset: 42128},
						offset: 234,
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1381, col: 1, offset: 42152},
			expr: &actionExpr{
				pos: position{line: 1381, col: 26, offset: 42177},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1381, col: 26, offset: 42177},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1381, col: 26, offset: 42177},
							offset: 231,
						},
						&labeledExpr{
							pos:   position{line: 1381, col: 46, offset: 42197},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 1381, col: 50, offset: 42201},
								offset: 232,
							},
						},
						&labeledExpr{
							pos:   position{line: 1381, col: 68, offset: 42219},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1381, col: 74, offset: 42225},
								expr: &actionExpr{
									pos: position{line: 1381, col: 75, offset: 42226},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1381, col: 75, offset: 42226},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 1381, col: 75, offset: 42226},
												offset: 317,
											},
											&litMatcher{
												pos:        position{line: 1381, col: 85, offset: 42236},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1381, col: 89, offset: 42240},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1381, col: 96, offset: 42247},
													exprs: []any{
														&ruleRefExpr{
															pos:    position{line: 1381, col: 96, offset: 42247},
															offset: 317,
														},
														&ruleRefExpr{
															pos:    position{line: 1381, col: 106, offset: 42257},
															offset: 233,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1381, col: 150, offset: 42301},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1389, col: 1, offset: 42505},
			expr: &litMatcher{
				pos:        position{line: 1389, col: 23, offset: 42527},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1391, col: 1, offset: 42534},
			expr: &actionExpr{
				pos: position{line: 1391, col: 21, offset: 42554},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 21, offset: 42554},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1391, col: 22, offset: 42555},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 1391, col: 22, offset: 42555},
									offset: 305,
								},
								&charClassMatcher{
									pos:        position{line: 1391, col: 30, offset: 42563},
									val:        "[:_]",
									chars:      []rune{':', '_'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1391, col: 36, offset: 42569},
							expr: &charClassMatcher{
								pos:        position{line: 1391, col: 36, offset: 42569},
								val:        "[\\p{L}\\p{N} _:.-]",
								chars:      []rune{' ', '_', ':', '.', '-'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1396, col: 1, offset: 42721},
			expr: &oneOrMoreExpr{
				pos: position{line: 1396, col: 23, offset: 42743},
				expr: &choiceExpr{
					pos: position{line: 1397, col: 5, offset: 42749},
					alternatives: []any{
						&oneOrMoreExpr{
							pos: position{line: 1397, col: 6, offset: 42750},
							expr: &charClassMatcher{
								pos:        position{line: 1397, col: 6, offset: 42750},
								val:        "[^<>{[\\]]",
								chars:      []rune{'<', '>', '{', '[', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1398, col: 7, offset: 42768},
							offset: 45,
						},
						&litMatcher{
							pos:        position{line: 1399, col: 7, offset: 42794},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentCrossReference",
			pos:  position{line: 1402, col: 1, offset: 42803},
			expr: &actionExpr{
				pos: position{line: 1402, col: 26, offset: 42828},
				run: (*parser).callonDocumentCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1402, col: 26, offset: 42828},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1402, col: 26, offset: 42828},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1402, col: 34, offset: 42836},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 1402, col: 40, offset: 42842},
								offset: 157,
							},
						},
						&labeledExpr{
							pos:   position{line: 1402, col: 46, offset: 42848},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1402, col: 58, offset: 42860},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1409, col: 1, offset: 43026},
			expr: &actionExpr{
				pos: position{line: 1409, col: 18, offset: 43043},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 18, offset: 43043},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1409, col: 18, offset: 43043},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1409, col: 28, offset: 43053},
								expr: &litMatcher{
									pos:        position{line: 1409, col: 28, offset: 43053},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 33, offset: 43058},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1409, col: 42, offset: 43067},
								expr: &ruleRefExpr{
									pos:    position{line: 1409, col: 42, offset: 43067},
									offset: 236,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 66, offset: 43091},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1409, col: 71, offset: 43096},
								expr: &ruleRefExpr{
									pos:    position{line: 1409, col: 72, offset: 43097},
									offset: 237,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 93, offset: 43118},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1409, col: 98, offset: 43123},
								expr: &ruleRefExpr{
									pos:    position{line: 1409, col: 99, offset: 43124},
									offset: 238,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1409, col: 120, offset: 43145},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1416, col: 1, offset: 43269},
			expr: &choiceExpr{
				pos: position{line: 1417, col: 5, offset: 43300},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1417, col: 5, offset: 43300},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1418, col: 7, offset: 43311},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1419, col: 8, offset: 43323},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1419, col: 8, offset: 43323},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1419, col: 12, offset: 43327},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1419, col: 21, offset: 43336},
									expr: &litMatcher{
										pos:        position{line: 1419, col: 21, offset: 43336},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1419, col: 26, offset: 43341},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1422, col: 1, offset: 43387},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 5, offset: 43414},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1423, col: 5, offset: 43414},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1424, col: 7, offset: 43425},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1425, col: 8, offset: 43437},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1425, col: 8, offset: 43437},
								expr: &litMatcher{
									pos:        position{line: 1425, col: 8, offset: 43437},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1425, col: 13, offset: 43442},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1425, col: 18, offset: 43447},
									expr: &litMatcher{
										pos:        position{line: 1425, col: 18, offset: 43447},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1425, col: 23, offset: 43452},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1428, col: 1, offset: 43494},
			expr: &choiceExpr{
				pos: position{line: 1429, col: 5, offset: 43521},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1429, col: 5, offset: 43521},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1430, col: 7, offset: 43532},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1431, col: 8, offset: 43544},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1431, col: 8, offset: 43544},
								expr: &litMatcher{
									pos:        position{line: 1431, col: 8, offset: 43544},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1431, col: 13, offset: 43549},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1431, col: 18, offset: 43554},
									expr: &litMatcher{
										pos:        position{line: 1431, col: 18, offset: 43554},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1431, col: 23, offset: 43559},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1434, col: 1, offset: 43601},
			expr: &actionExpr{
				pos: position{line: 1434, col: 18, offset: 43618},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1434, col: 18, offset: 43618},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1434, col: 18, offset: 43618},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1434, col: 28, offset: 43628},
								expr: &litMatcher{
									pos:        position{line: 1434, col: 28, offset: 43628},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1434, col: 33, offset: 43633},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1434, col: 42, offset: 43642},
								expr: &ruleRefExpr{
									pos:    position{line: 1434, col: 42, offset: 43642},
									offset: 240,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1434, col: 66, offset: 43666},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1434, col: 71, offset: 43671},
								expr: &ruleRefExpr{
									pos:    position{line: 1434, col: 72, offset: 43672},
									offset: 241,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1434, col: 93, offset: 43693},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1434, col: 98, offset: 43698},
								expr: &ruleRefExpr{
									pos:    position{line: 1434, col: 99, offset: 43699},
									offset: 242,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1434, col: 120, offset: 43720},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1441, col: 1, offset: 43844},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 5, offset: 43875},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1442, col: 5, offset: 43875},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1443, col: 7, offset: 43886},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1444, col: 8, offset: 43898},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1444, col: 8, offset: 43898},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1444, col: 12, offset: 43902},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1444, col: 21, offset: 43911},
									expr: &litMatcher{
										pos:        position{line: 1444, col: 21, offset: 43911},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1444, col: 26, offset: 43916},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1447, col: 1, offset: 43962},
			expr: &choiceExpr{
				pos: position{line: 1448, col: 5, offset: 43989},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1448, col: 5, offset: 43989},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1449, col: 7, offset: 44000},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1450, col: 8, offset: 44012},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1450, col: 8, offset: 44012},
								expr: &litMatcher{
									pos:        position{line: 1450, col: 8, offset: 44012},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1450, col: 13, offset: 44017},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1450, col: 18, offset: 44022},
									expr: &litMatcher{
										pos:        position{line: 1450, col: 18, offset: 44022},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1450, col: 23, offset: 44027},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1453, col: 1, offset: 44069},
			expr: &choiceExpr{
				pos: position{line: 1454, col: 5, offset: 44096},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1454, col: 5, offset: 44096},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1455, col: 7, offset: 44107},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1456, col: 8, offset: 44119},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1456, col: 8, offset: 44119},
								expr: &litMatcher{
									pos:        position{line: 1456, col: 8, offset: 44119},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1456, col: 13, offset: 44124},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1456, col: 18, offset: 44129},
									expr: &litMatcher{
										pos:        position{line: 1456, col: 18, offset: 44129},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1456, col: 23, offset: 44134},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1461, col: 1, offset: 44178},
			expr: &actionExpr{
				pos: position{line: 1461, col: 19, offset: 44196},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1461, col: 19, offset: 44196},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1461, col: 19, offset: 44196},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1461, col: 27, offset: 44204},
								offset: 244,
							},
						},
						&labeledExpr{
							pos:   position{line: 1461, col: 47, offset: 44224},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1461, col: 54, offset: 44231},
								offset: 209,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1467, col: 1, offset: 44420},
			expr: &actionExpr{
				pos: position{line: 1467, col: 21, offset: 44440},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1467, col: 21, offset: 44440},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1467, col: 21, offset: 44440},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1467, col: 29, offset: 44448},
								offset: 317,
							},
						},
						&labeledExpr{
							pos:   position{line: 1467, col: 40, offset: 44459},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1467, col: 48, offset: 44467},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1467, col: 48, offset: 44467},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1467, col: 48, offset: 44467},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1467, col: 48, offset: 44467},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1467, col: 57, offset: 44476},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1467, col: 58, offset: 44477},
															expr: &litMatcher{
																pos:        position{line: 1467, col: 58, offset: 44477},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1469, col: 4, offset: 44523},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1475, col: 3, offset: 44618},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1475, col: 3, offset: 44618},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1475, col: 3, offset: 44618},
													expr: &charClassMatcher{
														pos:        position{line: 1475, col: 3, offset: 44618},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1475, col: 10, offset: 44625},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1476, col: 3, offset: 44662},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1476, col: 3, offset: 44662},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1476, col: 3, offset: 44662},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1476, col: 9, offset: 44668},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1477, col: 3, offset: 44705},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1477, col: 3, offset: 44705},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1477, col: 3, offset: 44705},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1477, col: 9, offset: 44711},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1478, col: 3, offset: 44748},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1478, col: 3, offset: 44748},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1478, col: 3, offset: 44748},
													offset: 239,
												},
												&litMatcher{
													pos:        position{line: 1478, col: 18, offset: 44763},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1479, col: 3, offset: 44800},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1479, col: 3, offset: 44800},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1479, col: 3, offset: 44800},
													offset: 235,
												},
												&litMatcher{
													pos:        position{line: 1479, col: 18, offset: 44815},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1481, col: 1, offset: 44852},
							offset: 321,
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1489, col: 1, offset: 44943},
			expr: &actionExpr{
				pos: position{line: 1489, col: 21, offset: 44963},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 21, offset: 44963},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1489, col: 21, offset: 44963},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1489, col: 29, offset: 44971},
								offset: 246,
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 50, offset: 44992},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1489, col: 60, offset: 45002},
								expr: &ruleRefExpr{
									pos:    position{line: 1489, col: 61, offset: 45003},
									offset: 247,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 73, offset: 45015},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1489, col: 80, offset: 45022},
								offset: 209,
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1496, col: 1, offset: 45261},
			expr: &actionExpr{
				pos: position{line: 1496, col: 23, offset: 45283},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 23, offset: 45283},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1496, col: 23, offset: 45283},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1496, col: 31, offset: 45291},
								offset: 317,
							},
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 42, offset: 45302},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1496, col: 50, offset: 45310},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1496, col: 51, offset: 45311},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1496, col: 51, offset: 45311},
											expr: &litMatcher{
												pos:        position{line: 1496, col: 51, offset: 45311},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1496, col: 58, offset: 45318},
											expr: &litMatcher{
												pos:        position{line: 1496, col: 58, offset: 45318},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1498, col: 4, offset: 45360},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:    position{line: 1501, col: 1, offset: 45409},
							offset: 321,
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1507, col: 1, offset: 45494},
			expr: &actionExpr{
				pos: position{line: 1507, col: 13, offset: 45506},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1507, col: 13, offset: 45506},
					exprs: []any{
						&andExpr{
							pos: position{line: 1507, col: 13, offset: 45506},
							expr: &litMatcher{
								pos:        position{line: 1507, col: 14, offset: 45507},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1508, col: 1, offset: 45512},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1509, col: 7, offset: 45530},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1509, col: 7, offset: 45530},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1509, col: 7, offset: 45530},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1510, col: 7, offset: 45587},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1510, col: 7, offset: 45587},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1511, col: 7, offset: 45642},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1511, col: 7, offset: 45642},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1512, col: 7, offset: 45696},
							offset: 321,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1517, col: 1, offset: 45739},
			expr: &actionExpr{
				pos: position{line: 1517, col: 23, offset: 45761},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 23, offset: 45761},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1517, col: 23, offset: 45761},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1517, col: 36, offset: 45774},
								expr: &ruleRefExpr{
									pos:    position{line: 1517, col: 37, offset: 45775},
									offset: 77,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 55, offset: 45793},
							label: "term",
							expr: &ruleRefExpr{
								pos:    position{line: 1517, col: 61, offset: 45799},
								offset: 249,
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 82, offset: 45820},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1517, col: 90, offset: 45828},
								offset: 250,
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 113, offset: 45851},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1517, col: 124, offset: 45862},
								expr: &choiceExpr{
									pos: position{line: 1517, col: 125, offset: 45863},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1517, col: 125, offset: 45863},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:    position{line: 1517, col: 125, offset: 45863},
												offset: 322,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1517, col: 180, offset: 45918},
											offset: 300,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 190, offset: 45928},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1517, col: 197, offset: 45935},
								offset: 251,
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1528, col: 1, offset: 46447},
			expr: &actionExpr{
				pos: position{line: 1528, col: 23, offset: 46469},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1528, col: 23, offset: 46469},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1528, col: 28, offset: 46474},
						expr: &seqExpr{
							pos: position{line: 1528, col: 29, offset: 46475},
							exprs: []any{
								&notExpr{
									pos: position{line: 1528, col: 29, offset: 46475},
									expr: &ruleRefExpr{
										pos:    position{line: 1528, col: 30, offset: 46476},
										offset: 250,
									},
								},
								&notExpr{
									pos: position{line: 1528, col: 52, offset: 46498},
									expr: &ruleRefExpr{
										pos:    position{line: 1528, col: 53, offset: 46499},
										offset: 313,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 1528, col: 63, offset: 46509},
									offset: 81,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1532, col: 1, offset: 46565},
			expr: &actionExpr{
				pos: position{line: 1532, col: 25, offset: 46589},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 25, offset: 46589},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1532, col: 25, offset: 46589},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 35, offset: 46599},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1532, col: 43, offset: 46607},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1532, col: 43, offset: 46607},
									expr: &choiceExpr{
										pos: position{line: 1532, col: 44, offset: 46608},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1532, col: 44, offset: 46608},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1532, col: 50, offset: 46614},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1534, col: 4, offset: 46656},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:    position{line: 1541, col: 1, offset: 46783},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1546, col: 1, offset: 46830},
			expr: &actionExpr{
				pos: position{line: 1546, col: 28, offset: 46857},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1546, col: 28, offset: 46857},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1546, col: 28, offset: 46857},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1546, col: 34, offset: 46863},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1546, col: 34, offset: 46863},
										expr: &ruleRefExpr{
											pos:    position{line: 1546, col: 34, offset: 46863},
											offset: 81,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1546, col: 51, offset: 46880},
										offset: 2,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 65, offset: 46894},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1546, col: 80, offset: 46909},
								expr: &ruleRefExpr{
									pos:    position{line: 1546, col: 81, offset: 46910},
									offset: 214,
								},
							},
						},
						&andExpr{
							pos: position{line: 1546, col: 99, offset: 46928},
							expr: &ruleRefExpr{
								pos:    position{line: 1546, col: 100, offset: 46929},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1555, col: 1, offset: 47090},
			expr: &actionExpr{
				pos: position{line: 1555, col: 21, offset: 47110},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1555, col: 21, offset: 47110},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1555, col: 21, offset: 47110},
							offset: 253,
						},
						&notExpr{
							pos: position{line: 1555, col: 48, offset: 47137},
							expr: &litMatcher{
								pos:        position{line: 1555, col: 49, offset: 47138},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1555, col: 54, offset: 47143},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 1555, col: 63, offset: 47152},
								offset: 254,
							},
						},
						&andExpr{
							pos: position{line: 1555, col: 89, offset: 47178},
							expr: &ruleRefExpr{
								pos:    position{line: 1555, col: 90, offset: 47179},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1559, col: 1, offset: 47269},
			expr: &actionExpr{
				pos: position{line: 1559, col: 30, offset: 47298},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1559, col: 30, offset: 47298},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1563, col: 1, offset: 47343},
			expr: &actionExpr{
				pos: position{line: 1563, col: 28, offset: 47370},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1563, col: 28, offset: 47370},
					expr: &charClassMatcher{
						pos:        position{line: 1563, col: 28, offset: 47370},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1567, col: 1, offset: 47419},
			expr: &actionExpr{
				pos: position{line: 1568, col: 5, offset: 47442},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1568, col: 5, offset: 47442},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1568, col: 5, offset: 47442},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1568, col: 12, offset: 47449},
								offset: 256,
							},
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 5, offset: 47476},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1569, col: 11, offset: 47482},
								expr: &ruleRefExpr{
									pos:    position{line: 1569, col: 12, offset: 47483},
									offset: 260,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1570, col: 5, offset: 47510},
							offset: 257,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1574, col: 1, offset: 47695},
			expr: &actionExpr{
				pos: position{line: 1574, col: 25, offset: 47719},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1574, col: 25, offset: 47719},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1574, col: 25, offset: 47719},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1574, col: 35, offset: 47729},
								offset: 259,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1574, col: 61, offset: 47755},
							offset: 313,
						},
						&andCodeExpr{
							pos: position{line: 1574, col: 72, offset: 47766},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1581, col: 1, offset: 47956},
			expr: &seqExpr{
				pos: position{line: 1581, col: 23, offset: 47978},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1581, col: 23, offset: 47978},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1581, col: 33, offset: 47988},
							offset: 259,
						},
					},
					&andExpr{
						pos: position{line: 1581, col: 59, offset: 48014},
						expr: &ruleRefExpr{
							pos:    position{line: 1581, col: 60, offset: 48015},
							offset: 313,
						},
					},
					&andCodeExpr{
						pos: position{line: 1581, col: 70, offset: 48025},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1590, col: 1, offset: 48311},
			expr: &actionExpr{
				pos: position{line: 1590, col: 34, offset: 48344},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 34, offset: 48344},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1590, col: 34, offset: 48344},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1590, col: 50, offset: 48360},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1590, col: 50, offset: 48360},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1590, col: 57, offset: 48367},
										expr: &litMatcher{
											pos:        position{line: 1590, col: 57, offset: 48367},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1590, col: 63, offset: 48373},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1597, col: 1, offset: 48518},
			expr: &actionExpr{
				pos: position{line: 1597, col: 29, offset: 48546},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 29, offset: 48546},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1597, col: 29, offset: 48546},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:    position{line: 1597, col: 45, offset: 48562},
								offset: 258,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1598, col: 5, offset: 48599},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1603, col: 1, offset: 48750},
			expr: &actionExpr{
				pos: position{line: 1603, col: 24, offset: 48773},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 25, offset: 48774},
					exprs: []any{
						&notExpr{
							pos: position{line: 1603, col: 25, offset: 48774},
							expr: &ruleRefExpr{
								pos:    position{line: 1603, col: 26, offset: 48775},
								offset: 259,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1603, col: 52, offset: 48801},
							offset: 308,
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 65, offset: 48814},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1603, col: 70, offset: 48819},
								offset: 316,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1603, col: 78, offset: 48827},
							offset: 313,
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1609, col: 1, offset: 48876},
			expr: &choiceExpr{
				pos: position{line: 1609, col: 11, offset: 48886},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1609, col: 11, offset: 48886},
						offset: 262,
					},
					&ruleRefExpr{
						pos:    position{line: 1609, col: 30, offset: 48905},
						offset: 263,
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1611, col: 1, offset: 48929},
			expr: &actionExpr{
				pos: position{line: 1611, col: 20, offset: 48948},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 20, offset: 48948},
					exprs: []any{
						&notExpr{
							pos: position{line: 1611, col: 20, offset: 48948},
							expr: &litMatcher{
								pos:        position{line: 1611, col: 21, offset: 48949},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1611, col: 26, offset: 48954},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 38, offset: 48966},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1611, col: 43, offset: 48971},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 62, offset: 48990},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1611, col: 75, offset: 49003},
								expr: &ruleRefExpr{
									pos:    position{line: 1611, col: 76, offset: 49004},
									offset: 264,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1611, col: 98, offset: 49026},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1615, col: 1, offset: 49127},
			expr: &actionExpr{
				pos: position{line: 1615, col: 26, offset: 49152},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 26, offset: 49152},
					exprs: []any{
						&notExpr{
							pos: position{line: 1615, col: 26, offset: 49152},
							expr: &litMatcher{
								pos:        position{line: 1615, col: 27, offset: 49153},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1615, col: 32, offset: 49158},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 45, offset: 49171},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1615, col: 50, offset: 49176},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 69, offset: 49195},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 82, offset: 49208},
								expr: &ruleRefExpr{
									pos:    position{line: 1615, col: 83, offset: 49209},
									offset: 264,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1615, col: 105, offset: 49231},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1619, col: 1, offset: 49333},
			expr: &actionExpr{
				pos: position{line: 1619, col: 23, offset: 49355},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 23, offset: 49355},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1619, col: 23, offset: 49355},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 27, offset: 49359},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:    position{line: 1619, col: 40, offset: 49372},
								offset: 265,
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1623, col: 1, offset: 49425},
			expr: &choiceExpr{
				pos: position{line: 1623, col: 23, offset: 49447},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1623, col: 23, offset: 49447},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:        position{line: 1623, col: 23, offset: 49447},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1626, col: 7, offset: 49503},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1626, col: 7, offset: 49503},
							expr: &charClassMatcher{
								pos:        position{line: 1626, col: 7, offset: 49503},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1633, col: 1, offset: 49569},
			expr: &actionExpr{
				pos: position{line: 1633, col: 21, offset: 49589},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1633, col: 21, offset: 49589},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1633, col: 21, offset: 49589},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1633, col: 32, offset: 49600},
								expr: &ruleRefExpr{
									pos:    position{line: 1633, col: 33, offset: 49601},
									offset: 88,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1633, col: 53, offset: 49621},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1633, col: 59, offset: 49627},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1633, col: 59, offset: 49627},
										offset: 267,
									},
									&ruleRefExpr{
										pos:    position{line: 1633, col: 85, offset: 49653},
										offset: 270,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1637, col: 1, offset: 49799},
			expr: &actionExpr{
				pos: position{line: 1637, col: 27, offset: 49825},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1637, col: 27, offset: 49825},
					exprs: []any{
						&notExpr{
							pos: position{line: 1637, col: 27, offset: 49825},
							expr: &ruleRefExpr{
								pos:    position{line: 1637, col: 28, offset: 49826},
								offset: 323,
							},
						},
						&litMatcher{
							pos:        position{line: 1637, col: 35, offset: 49833},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1637, col: 39, offset: 49837},
							expr: &notExpr{
								pos: position{line: 1637, col: 41, offset: 49839},
								expr: &litMatcher{
									pos:        position{line: 1637, col: 42, offset: 49840},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1637, col: 47, offset: 49845},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1637, col: 54, offset: 49852},
								offset: 268,
							},
						},
						&litMatcher{
							pos:        position{line: 1637, col: 82, offset: 49880},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1637, col: 86, offset: 49884},
							expr: &litMatcher{
								pos:        position{line: 1637, col: 87, offset: 49885},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1637, col: 91, offset: 49889},
							expr: &notExpr{
								pos: position{line: 1637, col: 93, offset: 49891},
								expr: &ruleRefExpr{
									pos:    position{line: 1637, col: 94, offset: 49892},
									offset: 306,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1641, col: 1, offset: 49937},
			expr: &actionExpr{
				pos: position{line: 1641, col: 30, offset: 49966},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1641, col: 30, offset: 49966},
					exprs: []any{
						&notExpr{
							pos: position{line: 1641, col: 30, offset: 49966},
							expr: &ruleRefExpr{
								pos:    position{line: 1641, col: 31, offset: 49967},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 33, offset: 49969},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1641, col: 39, offset: 49975},
								expr: &actionExpr{
									pos: position{line: 1641, col: 40, offset: 49976},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1641, col: 40, offset: 49976},
										exprs: []any{
											&notExpr{
												pos: position{line: 1641, col: 40, offset: 49976},
												expr: &ruleRefExpr{
													pos:    position{line: 1641, col: 41, offset: 49977},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 1641, col: 43, offset: 49979},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1641, col: 49, offset: 49985},
													expr: &ruleRefExpr{
														pos:    position{line: 1641, col: 50, offset: 49986},
														offset: 269,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1645, col: 1, offset: 50167},
			expr: &seqExpr{
				pos: position{line: 1645, col: 32, offset: 50198},
				exprs: []any{
					&notExpr{
						pos: position{line: 1645, col: 32, offset: 50198},
						expr: &seqExpr{
							pos: position{line: 1645, col: 34, offset: 50200},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1645, col: 34, offset: 50200},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&notExpr{
									pos: position{line: 1645, col: 38, offset: 50204},
									expr: &litMatcher{
										pos:        position{line: 1645, col: 39, offset: 50205},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1645, col: 44, offset: 50210},
						offset: 87,
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1647, col: 1, offset: 50232},
			expr: &actionExpr{
				pos: position{line: 1647, col: 27, offset: 50258},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 27, offset: 50258},
					exprs: []any{
						&notExpr{
							pos: position{line: 1647, col: 27, offset: 50258},
							expr: &ruleRefExpr{
								pos:    position{line: 1647, col: 28, offset: 50259},
								offset: 324,
							},
						},
						&litMatcher{
							pos:        position{line: 1647, col: 41, offset: 50272},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 46, offset: 50277},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1647, col: 53, offset: 50284},
								offset: 271,
							},
						},
						&litMatcher{
							pos:        position{line: 1647, col: 81, offset: 50312},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1651, col: 1, offset: 50349},
			expr: &actionExpr{
				pos: position{line: 1651, col: 30, offset: 50378},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 30, offset: 50378},
					exprs: []any{
						&notExpr{
							pos: position{line: 1651, col: 30, offset: 50378},
							expr: &ruleRefExpr{
								pos:    position{line: 1651, col: 31, offset: 50379},
								offset: 322,
							},
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 33, offset: 50381},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1651, col: 39, offset: 50387},
								expr: &actionExpr{
									pos: position{line: 1651, col: 40, offset: 50388},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1651, col: 40, offset: 50388},
										exprs: []any{
											&notExpr{
												pos: position{line: 1651, col: 40, offset: 50388},
												expr: &ruleRefExpr{
													pos:    position{line: 1651, col: 41, offset: 50389},
													offset: 322,
												},
											},
											&labeledExpr{
												pos:   position{line: 1651, col: 43, offset: 50391},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1651, col: 49, offset: 50397},
													expr: &ruleRefExpr{
														pos:    position{line: 1651, col: 50, offset: 50398},
														offset: 272,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1655, col: 1, offset: 50591},
			expr: &seqExpr{
				pos: position{line: 1655, col: 32, offset: 50622},
				exprs: []any{
					&notExpr{
						pos: position{line: 1655, col: 32, offset: 50622},
						expr: &litMatcher{
							pos:        position{line: 1655, col: 34, offset: 50624},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1655, col: 40, offset: 50630},
						offset: 87,
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1658, col: 1, offset: 50653},
			expr: &litMatcher{
				pos:        position{line: 1658, col: 18, offset: 50670},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1660, col: 1, offset: 50682},
			expr: &actionExpr{
				pos: position{line: 1660, col: 9, offset: 50690},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1660, col: 9, offset: 50690},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1660, col: 9, offset: 50690},
							offset: 273,
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 24, offset: 50705},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1660, col: 36, offset: 50717},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1660, col: 59, offset: 50740},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1660, col: 64, offset: 50745},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 1660, col: 75, offset: 50756},
							expr: &ruleRefExpr{
								pos:    position{line: 1660, col: 76, offset: 50757},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "IfNDefStatement",
			pos:  position{line: 1665, col: 1, offset: 50877},
			expr: &litMatcher{
				pos:        position{line: 1665, col: 19, offset: 50895},
				val:        "ifndef::",
				ignoreCase: false,
				want:       "\"ifndef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1668, col: 1, offset: 50909},
			expr: &actionExpr{
				pos: position{line: 1668, col: 10, offset: 50918},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 10, offset: 50918},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1668, col: 10, offset: 50918},
							offset: 275,
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 26, offset: 50934},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1668, col: 38, offset: 50946},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1668, col: 61, offset: 50969},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1668, col: 66, offset: 50974},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 1668, col: 77, offset: 50985},
							expr: &ruleRefExpr{
								pos:    position{line: 1668, col: 78, offset: 50986},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1673, col: 1, offset: 51108},
			expr: &actionExpr{
				pos: position{line: 1673, col: 15, offset: 51122},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1673, col: 15, offset: 51122},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1673, col: 15, offset: 51122},
							offset: 273,
						},
						&labeledExpr{
							pos:   position{line: 1673, col: 30, offset: 51137},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1673, col: 42, offset: 51149},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1673, col: 65, offset: 51172},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1673, col: 69, offset: 51176},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1673, col: 78, offset: 51185},
								offset: 284,
							},
						},
						&litMatcher{
							pos:        position{line: 1673, col: 104, offset: 51211},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1673, col: 108, offset: 51215},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1678, col: 1, offset: 51393},
			expr: &actionExpr{
				pos: position{line: 1678, col: 16, offset: 51408},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1678, col: 16, offset: 51408},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1678, col: 16, offset: 51408},
							offset: 275,
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 32, offset: 51424},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1678, col: 44, offset: 51436},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1678, col: 67, offset: 51459},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 71, offset: 51463},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1678, col: 80, offset: 51472},
								offset: 284,
							},
						},
						&litMatcher{
							pos:        position{line: 1678, col: 106, offset: 51498},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1678, col: 110, offset: 51502},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1683, col: 1, offset: 51682},
			expr: &litMatcher{
				pos:        position{line: 1683, col: 21, offset: 51702},
				val:        "endif::",
				ignoreCase: false,
				want:       "\"endif::\"",
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1685, col: 1, offset: 51714},
			expr: &actionExpr{
				pos: position{line: 1685, col: 12, offset: 51725},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1685, col: 12, offset: 51725},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1685, col: 12, offset: 51725},
							offset: 279,
						},
						&labeledExpr{
							pos:   position{line: 1685, col: 30, offset: 51743},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1685, col: 41, offset: 51754},
								expr: &ruleRefExpr{
									pos:    position{line: 1685, col: 42, offset: 51755},
									offset: 281,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1685, col: 66, offset: 51779},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1685, col: 72, offset: 51785},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 1685, col: 82, offset: 51795},
							expr: &ruleRefExpr{
								pos:    position{line: 1685, col: 83, offset: 51796},
								offset: 313,
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1695, col: 1, offset: 52083},
			expr: &choiceExpr{
				pos: position{line: 1695, col: 25, offset: 52107},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1695, col: 25, offset: 52107},
						offset: 282,
					},
					&ruleRefExpr{
						pos:    position{line: 1695, col: 52, offset: 52134},
						offset: 283,
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1697, col: 1, offset: 52160},
			expr: &actionExpr{
				pos: position{line: 1697, col: 28, offset: 52187},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1697, col: 28, offset: 52187},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1697, col: 34, offset: 52193},
						expr: &actionExpr{
							pos: position{line: 1698, col: 5, offset: 52199},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1698, col: 5, offset: 52199},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1698, col: 5, offset: 52199},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1698, col: 10, offset: 52204},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1698, col: 29, offset: 52223},
										offset: 317,
									},
									&zeroOrOneExpr{
										pos: position{line: 1698, col: 39, offset: 52233},
										expr: &litMatcher{
											pos:        position{line: 1698, col: 39, offset: 52233},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1698, col: 44, offset: 52238},
										offset: 317,
									},
									&andCodeExpr{
										pos: position{line: 1699, col: 5, offset: 52253},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1709, col: 1, offset: 52514},
			expr: &actionExpr{
				pos: position{line: 1709, col: 28, offset: 52541},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1709, col: 28, offset: 52541},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1709, col: 34, offset: 52547},
						expr: &actionExpr{
							pos: position{line: 1710, col: 5, offset: 52553},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1710, col: 5, offset: 52553},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1710, col: 5, offset: 52553},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1710, col: 10, offset: 52558},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1710, col: 29, offset: 52577},
										offset: 317,
									},
									&zeroOrOneExpr{
										pos: position{line: 1710, col: 39, offset: 52587},
										expr: &litMatcher{
											pos:        position{line: 1710, col: 39, offset: 52587},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1710, col: 44, offset: 52592},
										offset: 317,
									},
									&andCodeExpr{
										pos: position{line: 1711, col: 5, offset: 52607},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1721, col: 1, offset: 52868},
			expr: &seqExpr{
				pos: position{line: 1721, col: 28, offset: 52895},
				exprs: []any{
					&notExpr{
						pos: position{line: 1721, col: 28, offset: 52895},
						expr: &litMatcher{
							pos:        position{line: 1721, col: 29, offset: 52896},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1721, col: 33, offset: 52900},
						expr: &ruleRefExpr{
							pos:    position{line: 1721, col: 33, offset: 52900},
							offset: 81,
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1723, col: 1, offset: 52917},
			expr: &actionExpr{
				pos: position{line: 1723, col: 10, offset: 52926},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1723, col: 10, offset: 52926},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1723, col: 10, offset: 52926},
							offset: 286,
						},
						&litMatcher{
							pos:        position{line: 1723, col: 26, offset: 52942},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1723, col: 30, offset: 52946},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 40, offset: 52956},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1723, col: 46, offset: 52962},
								offset: 287,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1723, col: 59, offset: 52975},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 70, offset: 52986},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1723, col: 79, offset: 52995},
								offset: 288,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1723, col: 95, offset: 53011},
							offset: 317,
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 105, offset: 53021},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1723, col: 112, offset: 53028},
								offset: 287,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1723, col: 125, offset: 53041},
							offset: 317,
						},
						&litMatcher{
							pos:        position{line: 1723, col: 135, offset: 53051},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1723, col: 139, offset: 53055},
							offset: 317,
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1727, col: 1, offset: 53210},
			expr: &litMatcher{
				pos:        position{line: 1727, col: 19, offset: 53228},
				val:        "ifeval::",
				ignoreCase: false,
				want:       "\"ifeval::\"",
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1729, col: 1, offset: 53241},
			expr: &actionExpr{
				pos: position{line: 1729, col: 15, offset: 53255},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1729, col: 15, offset: 53255},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1729, col: 20, offset: 53260},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 1729, col: 20, offset: 53260},
								offset: 38,
							},
							&ruleRefExpr{
								pos:    position{line: 1729, col: 48, offset: 53288},
								offset: 40,
							},
							&ruleRefExpr{
								pos:    position{line: 1729, col: 76, offset: 53316},
								offset: 42,
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1733, col: 1, offset: 53449},
			expr: &choiceExpr{
				pos: position{line: 1734, col: 7, offset: 53473},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1734, col: 8, offset: 53474},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1734, col: 8, offset: 53474},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1735, col: 8, offset: 53537},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1735, col: 8, offset: 53537},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1736, col: 8, offset: 53603},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1736, col: 8, offset: 53603},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1737, col: 8, offset: 53669},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1737, col: 8, offset: 53669},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1738, col: 8, offset: 53742},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1738, col: 8, offset: 53742},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1739, col: 8, offset: 53811},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1739, col: 8, offset: 53811},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "ConditionalStatement",
			pos:  position{line: 1741, col: 1, offset: 53881},
			expr: &choiceExpr{
				pos: position{line: 1741, col: 25, offset: 53905},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1741, col: 25, offset: 53905},
						offset: 273,
					},
					&ruleRefExpr{
						pos:    position{line: 1741, col: 42, offset: 53922},
						offset: 275,
					},
					&ruleRefExpr{
						pos:    position{line: 1741, col: 60, offset: 53940},
						offset: 286,
					},
					&ruleRefExpr{
						pos:    position{line: 1741, col: 78, offset: 53958},
						offset: 279,
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1744, col: 1, offset: 53979},
			expr: &actionExpr{
				pos: position{line: 1744, col: 20, offset: 53998},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1744, col: 21, offset: 53999},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1744, col: 21, offset: 53999},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1744, col: 27, offset: 54005},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1744, col: 33, offset: 54011},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1748, col: 1, offset: 54082},
			expr: &seqExpr{
				pos: position{line: 1748, col: 15, offset: 54096},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1748, col: 15, offset: 54096},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1748, col: 19, offset: 54100},
						expr: &notExpr{
							pos: position{line: 1748, col: 21, offset: 54102},
							expr: &litMatcher{
								pos:        position{line: 1748, col: 22, offset: 54103},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1750, col: 1, offset: 54109},
			expr: &choiceExpr{
				pos: position{line: 1750, col: 15, offset: 54123},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1750, col: 15, offset: 54123},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1750, col: 15, offset: 54123},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1750, col: 15, offset: 54123},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1750, col: 21, offset: 54129},
									expr: &charClassMatcher{
										pos:        position{line: 1750, col: 22, offset: 54130},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1752, col: 9, offset: 54188},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1752, col: 9, offset: 54188},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1752, col: 9, offset: 54188},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1752, col: 13, offset: 54192},
									expr: &charClassMatcher{
										pos:        position{line: 1752, col: 14, offset: 54193},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1757, col: 1, offset: 54256},
			expr: &actionExpr{
				pos: position{line: 1757, col: 15, offset: 54270},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1757, col: 17, offset: 54272},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 1757, col: 18, offset: 54273},
							val:        "[,;.?)/:!=\"'@-[\\]]",
							chars:      []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:     []rune{'@', '['},
							ignoreCase: false,
							inverted:   false,
						},
						&seqExpr{
							pos: position{line: 1757, col: 41, offset: 54296},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1757, col: 41, offset: 54296},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1757, col: 45, offset: 54300},
									expr: &litMatcher{
										pos:        position{line: 1757, col: 46, offset: 54301},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1761, col: 1, offset: 54368},
			expr: &actionExpr{
				pos: position{line: 1761, col: 13, offset: 54380},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1761, col: 13, offset: 54380},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1761, col: 13, offset: 54380},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1761, col: 17, offset: 54384},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 1761, col: 27, offset: 54394},
							expr: &ruleRefExpr{
								pos:    position{line: 1761, col: 29, offset: 54396},
								offset: 313,
							},
						},
						&andCodeExpr{
							pos: position{line: 1761, col: 40, offset: 54407},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1767, col: 1, offset: 54508},
			expr: &choiceExpr{
				pos: position{line: 1767, col: 16, offset: 54523},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1767, col: 16, offset: 54523},
						offset: 297,
					},
					&ruleRefExpr{
						pos:    position{line: 1767, col: 36, offset: 54543},
						offset: 296,
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1769, col: 1, offset: 54563},
			expr: &choiceExpr{
				pos: position{line: 1769, col: 22, offset: 54584},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1769, col: 22, offset: 54584},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&litMatcher{
						pos:        position{line: 1769, col: 30, offset: 54592},
						val:        "`\"",
						ignoreCase: false,
						want:       "\"`\\\"\"",
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1771, col: 1, offset: 54601},
			expr: &choiceExpr{
				pos: position{line: 1771, col: 22, offset: 54622},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1771, col: 22, offset: 54622},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&litMatcher{
						pos:        position{line: 1771, col: 29, offset: 54629},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1773, col: 1, offset: 54637},
			expr: &actionExpr{
				pos: position{line: 1773, col: 13, offset: 54649},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 13, offset: 54649},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1773, col: 13, offset: 54649},
							offset: 310,
						},
						&ruleRefExpr{
							pos:    position{line: 1773, col: 29, offset: 54665},
							offset: 317,
						},
						&ruleRefExpr{
							pos:    position{line: 1773, col: 39, offset: 54675},
							offset: 300,
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1777, col: 1, offset: 54765},
			expr: &seqExpr{
				pos: position{line: 1777, col: 15, offset: 54779},
				exprs: []any{
					&notExpr{
						pos: position{line: 1777, col: 15, offset: 54779},
						expr: &litMatcher{
							pos:        position{line: 1777, col: 16, offset: 54780},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1777, col: 21, offset: 54785},
						offset: 300,
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1779, col: 1, offset: 54794},
			expr: &actionExpr{
				pos: position{line: 1779, col: 11, offset: 54804},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1779, col: 12, offset: 54805},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1779, col: 12, offset: 54805},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1779, col: 19, offset: 54812},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1783, col: 1, offset: 54872},
			expr: &actionExpr{
				pos: position{line: 1783, col: 15, offset: 54886},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1783, col: 15, offset: 54886},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1783, col: 15, offset: 54886},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:    position{line: 1783, col: 26, offset: 54897},
								offset: 302,
							},
						},
						&litMatcher{
							pos:        position{line: 1783, col: 42, offset: 54913},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1787, col: 1, offset: 54949},
			expr: &actionExpr{
				pos: position{line: 1787, col: 20, offset: 54968},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1787, col: 20, offset: 54968},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1787, col: 21, offset: 54969},
							expr: &charClassMatcher{
								pos:        position{line: 1787, col: 21, offset: 54969},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1787, col: 29, offset: 54977},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1793, col: 1, offset: 55068},
			expr: &notExpr{
				pos: position{line: 1793, col: 14, offset: 55081},
				expr: &ruleRefExpr{
					pos:    position{line: 1793, col: 15, offset: 55082},
					offset: 300,
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1795, col: 1, offset: 55091},
			expr: &notExpr{
				pos: position{line: 1795, col: 12, offset: 55102},
				expr: &ruleRefExpr{
					pos:    position{line: 1795, col: 13, offset: 55103},
					offset: 322,
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1797, col: 1, offset: 55106},
			expr: &charClassMatcher{
				pos:        position{line: 1797, col: 9, offset: 55114},
				val:        "[\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1799, col: 1, offset: 55123},
			expr: &charClassMatcher{
				pos:        position{line: 1799, col: 16, offset: 55138},
				val:        "[\\p{L}\\p{N}]",
				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1801, col: 1, offset: 55152},
			expr: &notExpr{
				pos: position{line: 1801, col: 13, offset: 55164},
				expr: &anyMatcher{
					line: 1801, col: 14, offset: 55165,
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1803, col: 1, offset: 55169},
			expr: &andExpr{
				pos: position{line: 1803, col: 16, offset: 55184},
				expr: &anyMatcher{
					line: 1803, col: 18, offset: 55186,
				},
			},
		},
		{
			name: "BeginningOfFile",
			pos:  position{line: 1805, col: 1, offset: 55190},
			expr: &seqExpr{
				pos: position{line: 1805, col: 19, offset: 55208},
				exprs: []any{
					&andExpr{
						pos: position{line: 1805, col: 19, offset: 55208},
						expr: &anyMatcher{
							line: 1805, col: 21, offset: 55210,
						},
					},
					&andCodeExpr{
						pos: position{line: 1805, col: 24, offset: 55213},
						run: (*parser).callonBeginningOfFile4,
					},
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1811, col: 1, offset: 55328},
			expr: &notExpr{
				pos: position{line: 1811, col: 19, offset: 55346},
				expr: &ruleRefExpr{
					pos:    position{line: 1811, col: 20, offset: 55347},
					offset: 311,
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1813, col: 1, offset: 55364},
			expr: &seqExpr{
				pos: position{line: 1813, col: 19, offset: 55382},
				exprs: []any{
					&anyMatcher{
						line: 1813, col: 19, offset: 55382,
					},
					&andCodeExpr{
						pos: position{line: 1813, col: 21, offset: 55384},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1817, col: 1, offset: 55432},
			expr: &actionExpr{
				pos: position{line: 1817, col: 10, offset: 55441},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1817, col: 10, offset: 55441},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1817, col: 10, offset: 55441},
							offset: 317,
						},
						&andExpr{
							pos: position{line: 1817, col: 20, offset: 55451},
							expr: &notExpr{
								pos: position{line: 1817, col: 22, offset: 55453},
								expr: &ruleRefExpr{
									pos:    position{line: 1817, col: 23, offset: 55454},
									offset: 322,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1817, col: 26, offset: 55457},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1823, col: 1, offset: 55526},
			expr: &choiceExpr{
				pos: position{line: 1823, col: 13, offset: 55538},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1823, col: 13, offset: 55538},
						offset: 300,
					},
					&ruleRefExpr{
						pos:    position{line: 1823, col: 23, offset: 55548},
						offset: 307,
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1825, col: 1, offset: 55559},
			expr: &labeledExpr{
				pos:   position{line: 1825, col: 14, offset: 55572},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1825, col: 20, offset: 55578},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1825, col: 20, offset: 55578},
						expr: &ruleRefExpr{
							pos:    position{line: 1825, col: 20, offset: 55578},
							offset: 306,
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1827, col: 1, offset: 55624},
			expr: &actionExpr{
				pos: position{line: 1827, col: 16, offset: 55639},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1827, col: 16, offset: 55639},
					expr: &ruleRefExpr{
						pos:    position{line: 1827, col: 16, offset: 55639},
						offset: 319,
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1831, col: 1, offset: 55701},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1831, col: 11, offset: 55711},
				expr: &charClassMatcher{
					pos:        position{line: 1831, col: 11, offset: 55711},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1833, col: 1, offset: 55722},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1833, col: 13, offset: 55734},
				expr: &charClassMatcher{
					pos:        position{line: 1833, col: 13, offset: 55734},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1835, col: 1, offset: 55743},
			expr: &actionExpr{
				pos: position{line: 1835, col: 21, offset: 55763},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1835, col: 22, offset: 55764},
					alternatives: []any{
						&anyMatcher{
							line: 1835, col: 22, offset: 55764,
						},
						&ruleRefExpr{
							pos:    position{line: 1835, col: 26, offset: 55768},
							offset: 300,
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1839, col: 1, offset: 55817},
			expr: &charClassMatcher{
				pos:        position{line: 1839, col: 24, offset: 55840},
				val:        "[^\\r\\n]",
				chars:      []rune{'\r', '\n'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1841, col: 1, offset: 55850},
			expr: &charClassMatcher{
				pos:        position{line: 1841, col: 22, offset: 55871},
				val:        "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "__",
			pos:  position{line: 1843, col: 1, offset: 55914},
			expr: &actionExpr{
				pos: position{line: 1843, col: 6, offset: 55919},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1843, col: 6, offset: 55919},
					expr: &charClassMatcher{
						pos:        position{line: 1843, col: 6, offset: 55919},
						val:        "[ \\t]",
						chars:      []rune{' ', '\t'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1847, col: 1, offset: 55966},
			expr: &actionExpr{
				pos: position{line: 1847, col: 5, offset: 55970},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:        position{line: 1847, col: 5, offset: 55970},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1851, col: 1, offset: 56016},
			expr: &litMatcher{
				pos:        position{line: 1851, col: 10, offset: 56025},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1853, col: 1, offset: 56032},
			expr: &litMatcher{
				pos:        position{line: 1853, col: 16, offset: 56047},
				val:        "\\\\",
				ignoreCase: false,
				want:       "\"\\\\\\\\\"",
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Set))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onAlchemyEscape1(start, value, lines any) (any, error) {
	return compose(c, asciidoc.NewAlchemyEscape(), setLines[*asciidoc.AlchemyEscape](cast[any, string](lines.([]any))), setElements[*asciidoc.AlchemyEscape](value))

}

func (p *parser) callonAlchemyEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscape1(stack["start"], stack["value"], stack["lines"])
}

func (c *current) onAlchemyEscapeLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonAlchemyEscapeLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscapeLine1(stack["line"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join[asciidoc.Element](flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement2()
}

func (c *current) onSingleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonSingleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement8()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("\""), nil
}

func (p *parser) callonDoubleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement2()
}

func (c *current) onDoubleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonDoubleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement8()
}

func (c *current) onNakedAttributeValue10() (any, error) {
	// Stop on commas, equals, spaces or end bracket
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonNakedAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue10()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join[asciidoc.Element](flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(string), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(asciidoc.NewString(id.(string)), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAdmonition2() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition2()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Set)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Set)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onIncludeParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonIncludeParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParse1(stack["content"])
}

func (c *current) onIncludeParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonIncludeParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseElement1(stack["element"])
}

func (c *current) onIncludeParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonIncludeParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseLine1(stack["content"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLinkMacro(url.(asciidoc.URL)), setAttributes[*asciidoc.LinkMacro](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onIncludedTableElements1(content any) (any, error) {
	table := c.globalStore["table"].(*asciidoc.Table)
	return parseTableRows(table, content.([]any))
}

func (p *parser) callonIncludedTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableElements1(stack["content"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onIncludedTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonIncludedTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableInlineIfDef1(ifdef, content, endif any) (any, error) {
	id, err := compose(c, ifdef.(*asciidoc.IfDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Set{id}, content.(asciidoc.Set)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfDef1(stack["ifdef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableInlineIfNDef1(ifndef, content, endif any) (any, error) {
	id, err := compose(c, ifndef.(*asciidoc.IfNDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Set{id}, content.(asciidoc.Set)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfNDef1(stack["ifndef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfEval1(ifeval any) (any, error) {
	return compose(c, ifeval.(*asciidoc.IfEval))
}

func (p *parser) callonTableIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfEval1(stack["ifeval"])
}

func (c *current) onTableInlineIfEval1(ifeval, content, endif any) (any, error) {
	id, err := compose(c, ifeval.(*asciidoc.IfEval))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Set{id}, content.(asciidoc.Set)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfEval1(stack["ifeval"], stack["content"], stack["endif"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonTableFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onIncludedTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonIncludedTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Set{}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Set
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Set{asciidoc.EmptyLine{}}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onBlockTableCellLine1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonBlockTableCellLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLine1(stack["content"])
}

func (c *current) onBlockTableCellLastLine1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonBlockTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLastLine1(stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe[int](column, span.Column.Value)
	span.Row = asciidoc.Maybe[int](row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe[int](multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe[asciidoc.TableCellHorizontalAlign](horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe[asciidoc.TableCellVerticalAlign](verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe[asciidoc.TableCellStyle](style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Set)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Set)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines.([]any)...)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlock1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonAttachedBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlock1(stack["element"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return append([]any{&asciidoc.NewLine{}}, element.([]any)...), nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(string)), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceID1() (any, error) {

	// See: https://docs.asciidoctor.org/asciidoc/latest/attributes/id/#valid-id-characters
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1()
}

func (c *current) onDocumentCrossReference1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewDocumentCrossReference(path.(asciidoc.Set)), setAttributes[*asciidoc.DocumentCrossReference](attributes))
}

func (p *parser) callonDocumentCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentCrossReference1(stack["path"], stack["attributes"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 10, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 10, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Set))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Set)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Set(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names, attr.union), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names, attr.union), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onBeginningOfFile4() (bool, error) {
	if c.pos.line == 0 && c.pos.col == 0 {
	}
	return c.pos.line == 0 && c.pos.col == 0, nil
}

func (p *parser) callonBeginningOfFile4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeginningOfFile4()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict

	parser                *parser                         // Alchemy patch: we keep a reference to the parent parser here, so inline code can access it
	delimitedBlockState   delimitedBlockState             // Alchemy patch: we keep track of levels of delimited blocks here
	tableColumnsAttribute *asciidoc.TableColumnsAttribute // Alchemy patch: we keep track of explicit table columns here to aid in allocating columns
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos position
	val string
	// Alchemy patch: we don't use this optimization, so don't allocate the array
	//basicLatinChars [128]bool
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore:         make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	offset position // Alchemy patch: we add an offset field to track element positions in the doc
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any // Alchemy patch: we lazily allocate this array, as it's infrequently populated

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
