// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 99},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 110},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 110},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 110},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 118},
								expr: &ruleRefExpr{
									pos:    position{line: 14, col: 21, offset: 119},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 14, col: 31, offset: 129},
							offset: 289,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 184},
			expr: &actionExpr{
				pos: position{line: 18, col: 11, offset: 194},
				run: (*parser).callonElement1,
				expr: &labeledExpr{
					pos:   position{line: 18, col: 11, offset: 194},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 18, col: 20, offset: 203},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 18, col: 20, offset: 203},
								offset: 2,
							},
							&ruleRefExpr{
								pos:    position{line: 18, col: 35, offset: 218},
								offset: 76,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 25, col: 1, offset: 267},
			expr: &actionExpr{
				pos: position{line: 25, col: 16, offset: 282},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 25, col: 16, offset: 282},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 25, col: 16, offset: 282},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 25, col: 32, offset: 298},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 25, col: 41, offset: 307},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 25, col: 56, offset: 322},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 26, col: 1, offset: 332},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 32, col: 1, offset: 431},
			expr: &actionExpr{
				pos: position{line: 32, col: 17, offset: 447},
				run: (*parser).callonBlockElements1,
				expr: &labeledExpr{
					pos:   position{line: 32, col: 17, offset: 447},
					label: "blockElement",
					expr: &choiceExpr{
						pos: position{line: 33, col: 5, offset: 467},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 33, col: 5, offset: 467},
								offset: 9,
							},
							&ruleRefExpr{
								pos:    position{line: 34, col: 5, offset: 488},
								offset: 5,
							},
							&ruleRefExpr{
								pos:    position{line: 35, col: 5, offset: 513},
								offset: 95,
							},
							&ruleRefExpr{
								pos:    position{line: 37, col: 5, offset: 548},
								offset: 4,
							},
							&ruleRefExpr{
								pos:    position{line: 38, col: 5, offset: 566},
								offset: 13,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 43, col: 1, offset: 627},
			expr: &actionExpr{
				pos: position{line: 43, col: 15, offset: 641},
				run: (*parser).callonNakedBlocks1,
				expr: &labeledExpr{
					pos:   position{line: 43, col: 15, offset: 641},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 44, col: 5, offset: 654},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 44, col: 5, offset: 654},
								offset: 239,
							},
							&ruleRefExpr{
								pos:    position{line: 45, col: 5, offset: 678},
								offset: 236,
							},
							&ruleRefExpr{
								pos:    position{line: 46, col: 5, offset: 702},
								offset: 18,
							},
							&ruleRefExpr{
								pos:    position{line: 47, col: 5, offset: 724},
								offset: 22,
							},
							&ruleRefExpr{
								pos:    position{line: 48, col: 5, offset: 745},
								offset: 257,
							},
							&ruleRefExpr{
								pos:    position{line: 49, col: 5, offset: 757},
								offset: 259,
							},
							&ruleRefExpr{
								pos:    position{line: 50, col: 5, offset: 771},
								offset: 268,
							},
							&ruleRefExpr{
								pos:    position{line: 51, col: 5, offset: 784},
								offset: 262,
							},
							&ruleRefExpr{
								pos:    position{line: 52, col: 5, offset: 799},
								offset: 89,
							},
							&ruleRefExpr{
								pos:    position{line: 53, col: 5, offset: 817},
								offset: 232,
							},
							&ruleRefExpr{
								pos:    position{line: 54, col: 5, offset: 843},
								offset: 196,
							},
							&ruleRefExpr{
								pos:    position{line: 55, col: 5, offset: 866},
								offset: 282,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 60, col: 1, offset: 907},
			expr: &actionExpr{
				pos: position{line: 60, col: 22, offset: 928},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 60, col: 22, offset: 928},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 60, col: 22, offset: 928},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 33, offset: 939},
								expr: &ruleRefExpr{
									pos:    position{line: 60, col: 34, offset: 940},
									offset: 12,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 59, offset: 965},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 61, col: 5, offset: 980},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 61, col: 5, offset: 980},
										offset: 146,
									},
									&ruleRefExpr{
										pos:    position{line: 62, col: 5, offset: 995},
										offset: 152,
									},
									&ruleRefExpr{
										pos:    position{line: 63, col: 5, offset: 1006},
										offset: 164,
									},
									&ruleRefExpr{
										pos:    position{line: 64, col: 5, offset: 1020},
										offset: 176,
									},
									&ruleRefExpr{
										pos:    position{line: 65, col: 5, offset: 1034},
										offset: 188,
									},
									&ruleRefExpr{
										pos:    position{line: 66, col: 5, offset: 1046},
										offset: 170,
									},
									&ruleRefExpr{
										pos:    position{line: 67, col: 5, offset: 1060},
										offset: 207,
									},
									&ruleRefExpr{
										pos:    position{line: 68, col: 5, offset: 1071},
										offset: 15,
									},
									&ruleRefExpr{
										pos:    position{line: 69, col: 5, offset: 1086},
										offset: 199,
									},
									&ruleRefExpr{
										pos:    position{line: 70, col: 5, offset: 1106},
										offset: 200,
									},
									&ruleRefExpr{
										pos:    position{line: 71, col: 5, offset: 1122},
										offset: 85,
									},
									&ruleRefExpr{
										pos:    position{line: 72, col: 5, offset: 1139},
										offset: 227,
									},
									&ruleRefExpr{
										pos:    position{line: 73, col: 5, offset: 1162},
										offset: 229,
									},
									&ruleRefExpr{
										pos:    position{line: 74, col: 5, offset: 1187},
										offset: 232,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 75, col: 9, offset: 1216},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 87, col: 1, offset: 1614},
			expr: &actionExpr{
				pos: position{line: 87, col: 19, offset: 1632},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 87, col: 19, offset: 1632},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 88, col: 5, offset: 1648},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 88, col: 6, offset: 1649},
								run: (*parser).callonBlockAttributes4,
								expr: &labeledExpr{
									pos:   position{line: 88, col: 6, offset: 1649},
									label: "anchor",
									expr: &ruleRefExpr{
										pos:    position{line: 88, col: 14, offset: 1657},
										offset: 73,
									},
								},
							},
							&actionExpr{
								pos: position{line: 91, col: 8, offset: 1718},
								run: (*parser).callonBlockAttributes7,
								expr: &labeledExpr{
									pos:   position{line: 91, col: 8, offset: 1718},
									label: "title",
									expr: &ruleRefExpr{
										pos:    position{line: 91, col: 15, offset: 1725},
										offset: 7,
									},
								},
							},
							&actionExpr{
								pos: position{line: 94, col: 8, offset: 1780},
								run: (*parser).callonBlockAttributes10,
								expr: &labeledExpr{
									pos:   position{line: 94, col: 8, offset: 1780},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:    position{line: 94, col: 20, offset: 1792},
										offset: 23,
									},
								},
							},
							&actionExpr{
								pos: position{line: 97, col: 8, offset: 1853},
								run: (*parser).callonBlockAttributes13,
								expr: &labeledExpr{
									pos:   position{line: 97, col: 8, offset: 1853},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:    position{line: 97, col: 20, offset: 1865},
										offset: 27,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 104, col: 1, offset: 1967},
			expr: &actionExpr{
				pos: position{line: 104, col: 14, offset: 1980},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 104, col: 14, offset: 1980},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 104, col: 14, offset: 1980},
							offset: 291,
						},
						&litMatcher{
							pos:        position{line: 104, col: 30, offset: 1996},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 104, col: 34, offset: 2000},
							expr: &charClassMatcher{
								pos:        position{line: 104, col: 35, offset: 2001},
								val:        "[ .]",
								chars:      []rune{' ', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 40, offset: 2006},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 104, col: 49, offset: 2015},
								offset: 8,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 112, col: 1, offset: 2190},
			expr: &actionExpr{
				pos: position{line: 112, col: 21, offset: 2210},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 112, col: 21, offset: 2210},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 29, offset: 2218},
						expr: &choiceExpr{
							pos: position{line: 112, col: 30, offset: 2219},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 112, col: 30, offset: 2219},
									offset: 78,
								},
								&ruleRefExpr{
									pos:    position{line: 112, col: 48, offset: 2237},
									offset: 288,
								},
								&ruleRefExpr{
									pos:    position{line: 112, col: 63, offset: 2252},
									offset: 303,
								},
								&ruleRefExpr{
									pos:    position{line: 112, col: 67, offset: 2256},
									offset: 275,
								},
								&ruleRefExpr{
									pos:    position{line: 112, col: 81, offset: 2270},
									offset: 41,
								},
								&ruleRefExpr{
									pos:    position{line: 112, col: 102, offset: 2291},
									offset: 300,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 116, col: 1, offset: 2358},
			expr: &actionExpr{
				pos: position{line: 116, col: 18, offset: 2375},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 116, col: 18, offset: 2375},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 116, col: 18, offset: 2375},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 116, col: 28, offset: 2385},
							expr: &ruleRefExpr{
								pos:    position{line: 116, col: 29, offset: 2386},
								offset: 282,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 120, col: 1, offset: 2464},
			expr: &actionExpr{
				pos: position{line: 120, col: 25, offset: 2488},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 120, col: 25, offset: 2488},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 120, col: 25, offset: 2488},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 120, col: 37, offset: 2500},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 120, col: 54, offset: 2517},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 120, col: 64, offset: 2527},
							expr: &ruleRefExpr{
								pos:    position{line: 120, col: 65, offset: 2528},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 124, col: 1, offset: 2574},
			expr: &actionExpr{
				pos: position{line: 124, col: 35, offset: 2608},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 124, col: 35, offset: 2608},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 124, col: 35, offset: 2608},
							offset: 282,
						},
						&labeledExpr{
							pos:   position{line: 124, col: 43, offset: 2616},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 124, col: 55, offset: 2628},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 124, col: 72, offset: 2645},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 124, col: 82, offset: 2655},
							expr: &ruleRefExpr{
								pos:    position{line: 124, col: 83, offset: 2656},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 128, col: 1, offset: 2702},
			expr: &actionExpr{
				pos: position{line: 128, col: 26, offset: 2727},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 128, col: 26, offset: 2727},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 128, col: 26, offset: 2727},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 128, col: 37, offset: 2738},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 60, offset: 2761},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 128, col: 81, offset: 2782},
								expr: &ruleRefExpr{
									pos:    position{line: 128, col: 82, offset: 2783},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 128, col: 116, offset: 2817},
							offset: 294,
						},
						&zeroOrMoreExpr{
							pos: position{line: 128, col: 126, offset: 2827},
							expr: &ruleRefExpr{
								pos:    position{line: 128, col: 126, offset: 2827},
								offset: 280,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 136, col: 1, offset: 3044},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 3067},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 3067},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 136, col: 24, offset: 3067},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 136, col: 35, offset: 3078},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 58, offset: 3101},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 136, col: 79, offset: 3122},
								expr: &ruleRefExpr{
									pos:    position{line: 136, col: 80, offset: 3123},
									offset: 11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 148, col: 1, offset: 3465},
			expr: &actionExpr{
				pos: position{line: 149, col: 5, offset: 3488},
				run: (*parser).callonBlockDelimiters1,
				expr: &seqExpr{
					pos: position{line: 149, col: 5, offset: 3488},
					exprs: []any{
						&notExpr{
							pos: position{line: 149, col: 5, offset: 3488},
							expr: &ruleRefExpr{
								pos:    position{line: 149, col: 6, offset: 3489},
								offset: 288,
							},
						},
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 3506},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 151, col: 9, offset: 3526},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 151, col: 9, offset: 3526},
										offset: 242,
									},
									&ruleRefExpr{
										pos:    position{line: 152, col: 11, offset: 3567},
										offset: 167,
									},
									&ruleRefExpr{
										pos:    position{line: 153, col: 11, offset: 3591},
										offset: 204,
									},
									&ruleRefExpr{
										pos:    position{line: 154, col: 11, offset: 3617},
										offset: 149,
									},
									&ruleRefExpr{
										pos:    position{line: 155, col: 11, offset: 3642},
										offset: 173,
									},
									&ruleRefExpr{
										pos:    position{line: 156, col: 11, offset: 3664},
										offset: 210,
									},
									&ruleRefExpr{
										pos:    position{line: 157, col: 11, offset: 3685},
										offset: 191,
									},
									&ruleRefExpr{
										pos:    position{line: 158, col: 11, offset: 3711},
										offset: 179,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 162, col: 1, offset: 3776},
			expr: &actionExpr{
				pos: position{line: 162, col: 11, offset: 3786},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 162, col: 11, offset: 3786},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 162, col: 11, offset: 3786},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 162, col: 18, offset: 3793},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 162, col: 18, offset: 3793},
									expr: &charClassMatcher{
										pos:        position{line: 162, col: 18, offset: 3793},
										val:        "[=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 165, col: 5, offset: 3852},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:    position{line: 168, col: 5, offset: 3909},
							offset: 302,
						},
						&labeledExpr{
							pos:   position{line: 168, col: 8, offset: 3912},
							label: "title",
							expr: &ruleRefExpr{
								pos:    position{line: 168, col: 15, offset: 3919},
								offset: 16,
							},
						},
						&andExpr{
							pos: position{line: 168, col: 29, offset: 3933},
							expr: &ruleRefExpr{
								pos:    position{line: 168, col: 30, offset: 3934},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 172, col: 1, offset: 4049},
			expr: &oneOrMoreExpr{
				pos: position{line: 172, col: 16, offset: 4064},
				expr: &ruleRefExpr{
					pos:    position{line: 172, col: 17, offset: 4065},
					offset: 17,
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 174, col: 1, offset: 4086},
			expr: &actionExpr{
				pos: position{line: 174, col: 21, offset: 4106},
				run: (*parser).callonSectionTitleValue1,
				expr: &seqExpr{
					pos: position{line: 174, col: 21, offset: 4106},
					exprs: []any{
						&notExpr{
							pos: position{line: 174, col: 21, offset: 4106},
							expr: &ruleRefExpr{
								pos:    position{line: 174, col: 22, offset: 4107},
								offset: 294,
							},
						},
						&labeledExpr{
							pos:   position{line: 174, col: 32, offset: 4117},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 175, col: 5, offset: 4131},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 175, col: 5, offset: 4131},
										offset: 296,
									},
									&ruleRefExpr{
										pos:    position{line: 176, col: 7, offset: 4151},
										offset: 302,
									},
									&ruleRefExpr{
										pos:    position{line: 177, col: 7, offset: 4161},
										offset: 274,
									},
									&ruleRefExpr{
										pos:    position{line: 178, col: 7, offset: 4179},
										offset: 275,
									},
									&ruleRefExpr{
										pos:    position{line: 179, col: 7, offset: 4199},
										offset: 82,
									},
									&ruleRefExpr{
										pos:    position{line: 180, col: 7, offset: 4219},
										offset: 250,
									},
									&ruleRefExpr{
										pos:    position{line: 181, col: 7, offset: 4243},
										offset: 91,
									},
									&ruleRefExpr{
										pos:    position{line: 182, col: 7, offset: 4255},
										offset: 272,
									},
									&ruleRefExpr{
										pos:    position{line: 183, col: 7, offset: 4279},
										offset: 88,
									},
									&ruleRefExpr{
										pos:    position{line: 184, col: 7, offset: 4291},
										offset: 41,
									},
									&ruleRefExpr{
										pos:    position{line: 185, col: 7, offset: 4317},
										offset: 72,
									},
									&ruleRefExpr{
										pos:    position{line: 187, col: 7, offset: 4346},
										offset: 300,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 192, col: 1, offset: 4398},
			expr: &actionExpr{
				pos: position{line: 192, col: 18, offset: 4415},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 192, col: 18, offset: 4415},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 192, col: 18, offset: 4415},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 22, offset: 4419},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 192, col: 28, offset: 4425},
								offset: 19,
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 48, offset: 4445},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:    position{line: 192, col: 52, offset: 4449},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 192, col: 62, offset: 4459},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 192, col: 69, offset: 4466},
								offset: 20,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 196, col: 1, offset: 4610},
			expr: &actionExpr{
				pos: position{line: 196, col: 22, offset: 4631},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 196, col: 22, offset: 4631},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 196, col: 22, offset: 4631},
							offset: 301,
						},
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 41, offset: 4650},
							expr: &choiceExpr{
								pos: position{line: 196, col: 42, offset: 4651},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 196, col: 42, offset: 4651},
										offset: 301,
									},
									&litMatcher{
										pos:        position{line: 196, col: 63, offset: 4672},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 200, col: 1, offset: 4718},
			expr: &actionExpr{
				pos: position{line: 200, col: 26, offset: 4743},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 200, col: 26, offset: 4743},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 200, col: 32, offset: 4749},
						expr: &ruleRefExpr{
							pos:    position{line: 200, col: 32, offset: 4749},
							offset: 21,
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 204, col: 1, offset: 4843},
			expr: &choiceExpr{
				pos: position{line: 204, col: 26, offset: 4868},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 204, col: 26, offset: 4868},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 204, col: 26, offset: 4868},
								offset: 276,
							},
							&ruleRefExpr{
								pos:    position{line: 204, col: 36, offset: 4878},
								offset: 294,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 204, col: 48, offset: 4890},
						offset: 300,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 206, col: 1, offset: 4914},
			expr: &choiceExpr{
				pos: position{line: 206, col: 18, offset: 4931},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 206, col: 18, offset: 4931},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 206, col: 18, offset: 4931},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 206, col: 18, offset: 4931},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 206, col: 23, offset: 4936},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 206, col: 29, offset: 4942},
										offset: 19,
									},
								},
								&litMatcher{
									pos:        position{line: 206, col: 49, offset: 4962},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:    position{line: 206, col: 53, offset: 4966},
									offset: 298,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 5048},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 208, col: 5, offset: 5048},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 208, col: 5, offset: 5048},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 208, col: 9, offset: 5052},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 208, col: 15, offset: 5058},
										offset: 19,
									},
								},
								&litMatcher{
									pos:        position{line: 208, col: 35, offset: 5078},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:    position{line: 208, col: 40, offset: 5083},
									offset: 298,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 213, col: 1, offset: 5243},
			expr: &actionExpr{
				pos: position{line: 213, col: 14, offset: 5256},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 213, col: 14, offset: 5256},
					exprs: []any{
						&notExpr{
							pos: position{line: 213, col: 14, offset: 5256},
							expr: &litMatcher{
								pos:        position{line: 213, col: 15, offset: 5257},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 20, offset: 5262},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 213, col: 24, offset: 5266},
							expr: &litMatcher{
								pos:        position{line: 213, col: 25, offset: 5267},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 29, offset: 5271},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 213, col: 41, offset: 5283},
								offset: 24,
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 56, offset: 5298},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 218, col: 1, offset: 5340},
			expr: &actionExpr{
				pos: position{line: 218, col: 17, offset: 5356},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 218, col: 17, offset: 5356},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 218, col: 28, offset: 5367},
						expr: &ruleRefExpr{
							pos:    position{line: 218, col: 29, offset: 5368},
							offset: 25,
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 222, col: 1, offset: 5453},
			expr: &actionExpr{
				pos: position{line: 222, col: 21, offset: 5473},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 222, col: 21, offset: 5473},
					exprs: []any{
						&notExpr{
							pos: position{line: 222, col: 21, offset: 5473},
							expr: &litMatcher{
								pos:        position{line: 222, col: 22, offset: 5474},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 222, col: 26, offset: 5478},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 222, col: 36, offset: 5488},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 222, col: 47, offset: 5499},
								offset: 26,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 222, col: 58, offset: 5510},
							offset: 298,
						},
						&zeroOrOneExpr{
							pos: position{line: 222, col: 68, offset: 5520},
							expr: &litMatcher{
								pos:        position{line: 222, col: 68, offset: 5520},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 226, col: 1, offset: 5556},
			expr: &actionExpr{
				pos: position{line: 226, col: 13, offset: 5568},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 13, offset: 5568},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 226, col: 13, offset: 5568},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 226, col: 18, offset: 5573},
								expr: &actionExpr{
									pos: position{line: 226, col: 20, offset: 5575},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 226, col: 21, offset: 5576},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 226, col: 21, offset: 5576},
												label: "name",
												expr: &ruleRefExpr{
													pos:    position{line: 226, col: 27, offset: 5582},
													offset: 40,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 226, col: 47, offset: 5602},
												offset: 298,
											},
											&litMatcher{
												pos:        position{line: 226, col: 57, offset: 5612},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:    position{line: 226, col: 61, offset: 5616},
												offset: 298,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 95, offset: 5650},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 226, col: 102, offset: 5657},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 226, col: 102, offset: 5657},
										offset: 34,
									},
									&ruleRefExpr{
										pos:    position{line: 226, col: 130, offset: 5685},
										offset: 36,
									},
									&ruleRefExpr{
										pos:    position{line: 226, col: 158, offset: 5713},
										offset: 38,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 233, col: 1, offset: 5969},
			expr: &actionExpr{
				pos: position{line: 233, col: 23, offset: 5991},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 233, col: 23, offset: 5991},
					exprs: []any{
						&notExpr{
							pos: position{line: 233, col: 23, offset: 5991},
							expr: &litMatcher{
								pos:        position{line: 233, col: 24, offset: 5992},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 29, offset: 5997},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 233, col: 33, offset: 6001},
							expr: &litMatcher{
								pos:        position{line: 233, col: 34, offset: 6002},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 38, offset: 6006},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 233, col: 49, offset: 6017},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 69, offset: 6037},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 237, col: 1, offset: 6077},
			expr: &actionExpr{
				pos: position{line: 237, col: 22, offset: 6098},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 22, offset: 6098},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 22, offset: 6098},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 28, offset: 6104},
								expr: &ruleRefExpr{
									pos:    position{line: 237, col: 29, offset: 6105},
									offset: 33,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 55, offset: 6131},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 237, col: 62, offset: 6138},
								expr: &choiceExpr{
									pos: position{line: 237, col: 63, offset: 6139},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 237, col: 63, offset: 6139},
											offset: 30,
										},
										&ruleRefExpr{
											pos:    position{line: 237, col: 77, offset: 6153},
											offset: 31,
										},
										&ruleRefExpr{
											pos:    position{line: 237, col: 93, offset: 6169},
											offset: 32,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 241, col: 1, offset: 6257},
			expr: &actionExpr{
				pos: position{line: 241, col: 18, offset: 6274},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 241, col: 18, offset: 6274},
					label: "value",
					expr: &ruleRefExpr{
						pos:    position{line: 241, col: 24, offset: 6280},
						offset: 33,
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 245, col: 1, offset: 6374},
			expr: &actionExpr{
				pos: position{line: 245, col: 15, offset: 6388},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 245, col: 15, offset: 6388},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 15, offset: 6388},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 19, offset: 6392},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 245, col: 25, offset: 6398},
								offset: 33,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 249, col: 1, offset: 6492},
			expr: &actionExpr{
				pos: position{line: 249, col: 17, offset: 6508},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 249, col: 17, offset: 6508},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 249, col: 17, offset: 6508},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 21, offset: 6512},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 249, col: 27, offset: 6518},
								offset: 33,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 253, col: 1, offset: 6614},
			expr: &actionExpr{
				pos: position{line: 253, col: 19, offset: 6632},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 253, col: 19, offset: 6632},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 253, col: 19, offset: 6632},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 23, offset: 6636},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 253, col: 29, offset: 6642},
								offset: 33,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 257, col: 1, offset: 6740},
			expr: &actionExpr{
				pos: position{line: 257, col: 27, offset: 6766},
				run: (*parser).callonShorthandAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 257, col: 27, offset: 6766},
					label: "value",
					expr: &choiceExpr{
						pos: position{line: 257, col: 34, offset: 6773},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 257, col: 34, offset: 6773},
								exprs: []any{
									&notExpr{
										pos: position{line: 257, col: 34, offset: 6773},
										expr: &litMatcher{
											pos:        position{line: 257, col: 35, offset: 6774},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 39, offset: 6778},
										expr: &litMatcher{
											pos:        position{line: 257, col: 40, offset: 6779},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 44, offset: 6783},
										expr: &litMatcher{
											pos:        position{line: 257, col: 45, offset: 6784},
											val:        "%",
											ignoreCase: false,
											want:       "\"%\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 257, col: 49, offset: 6788},
										offset: 34,
									},
								},
							},
							&ruleRefExpr{
								pos:    position{line: 257, col: 77, offset: 6816},
								offset: 36,
							},
							&ruleRefExpr{
								pos:    position{line: 257, col: 105, offset: 6844},
								offset: 38,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 261, col: 1, offset: 6892},
			expr: &actionExpr{
				pos: position{line: 261, col: 29, offset: 6920},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 261, col: 29, offset: 6920},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 261, col: 29, offset: 6920},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 33, offset: 6924},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 39, offset: 6930},
								expr: &ruleRefExpr{
									pos:    position{line: 261, col: 40, offset: 6931},
									offset: 35,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 75, offset: 6966},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 265, col: 1, offset: 7075},
			expr: &choiceExpr{
				pos: position{line: 266, col: 5, offset: 7116},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7116},
						run: (*parser).callonSingleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 7116},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 267, col: 5, offset: 7169},
						offset: 288,
					},
					&ruleRefExpr{
						pos:    position{line: 268, col: 5, offset: 7189},
						offset: 303,
					},
					&ruleRefExpr{
						pos:    position{line: 269, col: 5, offset: 7198},
						offset: 277,
					},
					&ruleRefExpr{
						pos:    position{line: 270, col: 5, offset: 7217},
						offset: 41,
					},
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 7242},
						run: (*parser).callonSingleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 271, col: 5, offset: 7242},
							expr: &charClassMatcher{
								pos:        position{line: 271, col: 5, offset: 7242},
								val:        "[^\\r\\n\\\\' ]",
								chars:      []rune{'\r', '\n', '\\', '\'', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 276, col: 1, offset: 7321},
			expr: &actionExpr{
				pos: position{line: 276, col: 29, offset: 7349},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 29, offset: 7349},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 276, col: 29, offset: 7349},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 34, offset: 7354},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 276, col: 40, offset: 7360},
								expr: &ruleRefExpr{
									pos:    position{line: 276, col: 41, offset: 7361},
									offset: 37,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 76, offset: 7396},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 280, col: 1, offset: 7506},
			expr: &choiceExpr{
				pos: position{line: 281, col: 5, offset: 7547},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 7547},
						run: (*parser).callonDoubleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 281, col: 5, offset: 7547},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 282, col: 5, offset: 7603},
						offset: 288,
					},
					&ruleRefExpr{
						pos:    position{line: 283, col: 5, offset: 7623},
						offset: 303,
					},
					&ruleRefExpr{
						pos:    position{line: 284, col: 5, offset: 7632},
						offset: 277,
					},
					&ruleRefExpr{
						pos:    position{line: 285, col: 5, offset: 7650},
						offset: 41,
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 7675},
						run: (*parser).callonDoubleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 286, col: 5, offset: 7675},
							expr: &charClassMatcher{
								pos:        position{line: 286, col: 5, offset: 7675},
								val:        "[^\\r\\n\\\\\" ]",
								chars:      []rune{'\r', '\n', '\\', '"', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 291, col: 1, offset: 7754},
			expr: &actionExpr{
				pos: position{line: 291, col: 23, offset: 7776},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 291, col: 23, offset: 7776},
					exprs: []any{
						&notExpr{
							pos: position{line: 291, col: 23, offset: 7776},
							expr: &ruleRefExpr{
								pos:    position{line: 291, col: 24, offset: 7777},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 26, offset: 7779},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 291, col: 32, offset: 7785},
								expr: &choiceExpr{
									pos: position{line: 292, col: 5, offset: 7791},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 292, col: 5, offset: 7791},
											offset: 41,
										},
										&ruleRefExpr{
											pos:    position{line: 293, col: 5, offset: 7817},
											offset: 303,
										},
										&actionExpr{
											pos: position{line: 294, col: 5, offset: 7826},
											run: (*parser).callonNakedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 294, col: 5, offset: 7826},
												expr: &charClassMatcher{
													pos:        position{line: 294, col: 5, offset: 7826},
													val:        "[^=\\], ]",
													chars:      []rune{'=', ']', ',', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 301, col: 1, offset: 8039},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 8058},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 8058},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 8058},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 24, offset: 8062},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 301, col: 36, offset: 8074},
								offset: 24,
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 51, offset: 8089},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 305, col: 1, offset: 8129},
			expr: &actionExpr{
				pos: position{line: 305, col: 22, offset: 8150},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 305, col: 22, offset: 8150},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 305, col: 22, offset: 8150},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 35, offset: 8163},
							expr: &charClassMatcher{
								pos:        position{line: 305, col: 35, offset: 8163},
								val:        "[A-Za-z0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 309, col: 1, offset: 8218},
			expr: &actionExpr{
				pos: position{line: 309, col: 22, offset: 8239},
				run: (*parser).callonAttributeReference1,
				expr: &labeledExpr{
					pos:   position{line: 309, col: 22, offset: 8239},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 309, col: 33, offset: 8250},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 309, col: 33, offset: 8250},
								offset: 42,
							},
							&ruleRefExpr{
								pos:    position{line: 309, col: 59, offset: 8276},
								offset: 245,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 313, col: 1, offset: 8316},
			expr: &actionExpr{
				pos: position{line: 313, col: 27, offset: 8342},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 313, col: 27, offset: 8342},
					exprs: []any{
						&notExpr{
							pos: position{line: 313, col: 27, offset: 8342},
							expr: &litMatcher{
								pos:        position{line: 313, col: 28, offset: 8343},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 33, offset: 8348},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 37, offset: 8352},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 313, col: 42, offset: 8357},
								offset: 19,
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 61, offset: 8376},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 321, col: 1, offset: 8472},
			expr: &choiceExpr{
				pos: position{line: 321, col: 13, offset: 8484},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 321, col: 13, offset: 8484},
						offset: 44,
					},
					&ruleRefExpr{
						pos:    position{line: 321, col: 30, offset: 8501},
						offset: 47,
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 323, col: 1, offset: 8518},
			expr: &actionExpr{
				pos: position{line: 323, col: 18, offset: 8535},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 323, col: 18, offset: 8535},
					exprs: []any{
						&notExpr{
							pos: position{line: 323, col: 18, offset: 8535},
							expr: &ruleRefExpr{
								pos:    position{line: 323, col: 19, offset: 8536},
								offset: 304,
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 26, offset: 8543},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 323, col: 30, offset: 8547},
							expr: &notExpr{
								pos: position{line: 323, col: 32, offset: 8549},
								expr: &litMatcher{
									pos:        position{line: 323, col: 33, offset: 8550},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 38, offset: 8555},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 323, col: 45, offset: 8562},
								offset: 45,
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 66, offset: 8583},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 323, col: 70, offset: 8587},
							expr: &litMatcher{
								pos:        position{line: 323, col: 71, offset: 8588},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 323, col: 75, offset: 8592},
							expr: &notExpr{
								pos: position{line: 323, col: 77, offset: 8594},
								expr: &ruleRefExpr{
									pos:    position{line: 323, col: 78, offset: 8595},
									offset: 288,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 327, col: 1, offset: 8640},
			expr: &actionExpr{
				pos: position{line: 327, col: 23, offset: 8662},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 327, col: 23, offset: 8662},
					exprs: []any{
						&notExpr{
							pos: position{line: 327, col: 23, offset: 8662},
							expr: &ruleRefExpr{
								pos:    position{line: 327, col: 24, offset: 8663},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 26, offset: 8665},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 327, col: 32, offset: 8671},
								expr: &actionExpr{
									pos: position{line: 327, col: 33, offset: 8672},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 327, col: 33, offset: 8672},
										exprs: []any{
											&notExpr{
												pos: position{line: 327, col: 33, offset: 8672},
												expr: &ruleRefExpr{
													pos:    position{line: 327, col: 34, offset: 8673},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 327, col: 36, offset: 8675},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 327, col: 42, offset: 8681},
													expr: &ruleRefExpr{
														pos:    position{line: 327, col: 43, offset: 8682},
														offset: 46,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 331, col: 1, offset: 8830},
			expr: &actionExpr{
				pos: position{line: 331, col: 25, offset: 8854},
				run: (*parser).callonSingleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 331, col: 25, offset: 8854},
					exprs: []any{
						&notExpr{
							pos: position{line: 331, col: 25, offset: 8854},
							expr: &seqExpr{
								pos: position{line: 331, col: 27, offset: 8856},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 331, col: 27, offset: 8856},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&notExpr{
										pos: position{line: 331, col: 31, offset: 8860},
										expr: &litMatcher{
											pos:        position{line: 331, col: 32, offset: 8861},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 37, offset: 8866},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 331, col: 46, offset: 8875},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 335, col: 1, offset: 8930},
			expr: &actionExpr{
				pos: position{line: 335, col: 18, offset: 8947},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 335, col: 18, offset: 8947},
					exprs: []any{
						&notExpr{
							pos: position{line: 335, col: 18, offset: 8947},
							expr: &ruleRefExpr{
								pos:    position{line: 335, col: 19, offset: 8948},
								offset: 305,
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 32, offset: 8961},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 37, offset: 8966},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 335, col: 44, offset: 8973},
								offset: 48,
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 65, offset: 8994},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 339, col: 1, offset: 9031},
			expr: &actionExpr{
				pos: position{line: 339, col: 23, offset: 9053},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 339, col: 23, offset: 9053},
					exprs: []any{
						&notExpr{
							pos: position{line: 339, col: 23, offset: 9053},
							expr: &ruleRefExpr{
								pos:    position{line: 339, col: 24, offset: 9054},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 26, offset: 9056},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 339, col: 32, offset: 9062},
								expr: &actionExpr{
									pos: position{line: 339, col: 33, offset: 9063},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 339, col: 33, offset: 9063},
										exprs: []any{
											&notExpr{
												pos: position{line: 339, col: 33, offset: 9063},
												expr: &ruleRefExpr{
													pos:    position{line: 339, col: 34, offset: 9064},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 339, col: 36, offset: 9066},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 339, col: 42, offset: 9072},
													expr: &ruleRefExpr{
														pos:    position{line: 339, col: 43, offset: 9073},
														offset: 49,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 343, col: 1, offset: 9233},
			expr: &actionExpr{
				pos: position{line: 343, col: 25, offset: 9257},
				run: (*parser).callonDoubleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 343, col: 25, offset: 9257},
					exprs: []any{
						&notExpr{
							pos: position{line: 343, col: 25, offset: 9257},
							expr: &litMatcher{
								pos:        position{line: 343, col: 27, offset: 9259},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 33, offset: 9265},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 343, col: 42, offset: 9274},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 349, col: 1, offset: 9331},
			expr: &choiceExpr{
				pos: position{line: 349, col: 15, offset: 9345},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 349, col: 15, offset: 9345},
						offset: 51,
					},
					&ruleRefExpr{
						pos:    position{line: 349, col: 34, offset: 9364},
						offset: 54,
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 351, col: 1, offset: 9383},
			expr: &actionExpr{
				pos: position{line: 351, col: 20, offset: 9402},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 351, col: 20, offset: 9402},
					exprs: []any{
						&notExpr{
							pos: position{line: 351, col: 20, offset: 9402},
							expr: &ruleRefExpr{
								pos:    position{line: 351, col: 21, offset: 9403},
								offset: 304,
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 28, offset: 9410},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 351, col: 32, offset: 9414},
							expr: &notExpr{
								pos: position{line: 351, col: 34, offset: 9416},
								expr: &litMatcher{
									pos:        position{line: 351, col: 35, offset: 9417},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 40, offset: 9422},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 351, col: 47, offset: 9429},
								offset: 52,
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 70, offset: 9452},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 351, col: 74, offset: 9456},
							expr: &litMatcher{
								pos:        position{line: 351, col: 75, offset: 9457},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 79, offset: 9461},
							expr: &notExpr{
								pos: position{line: 351, col: 81, offset: 9463},
								expr: &ruleRefExpr{
									pos:    position{line: 351, col: 82, offset: 9464},
									offset: 288,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 355, col: 1, offset: 9509},
			expr: &actionExpr{
				pos: position{line: 355, col: 25, offset: 9533},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 355, col: 25, offset: 9533},
					exprs: []any{
						&notExpr{
							pos: position{line: 355, col: 25, offset: 9533},
							expr: &ruleRefExpr{
								pos:    position{line: 355, col: 26, offset: 9534},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 28, offset: 9536},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 355, col: 34, offset: 9542},
								expr: &actionExpr{
									pos: position{line: 355, col: 35, offset: 9543},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 355, col: 35, offset: 9543},
										exprs: []any{
											&notExpr{
												pos: position{line: 355, col: 35, offset: 9543},
												expr: &ruleRefExpr{
													pos:    position{line: 355, col: 36, offset: 9544},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 355, col: 38, offset: 9546},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 355, col: 44, offset: 9552},
													expr: &ruleRefExpr{
														pos:    position{line: 355, col: 45, offset: 9553},
														offset: 53,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 359, col: 1, offset: 9667},
			expr: &actionExpr{
				pos: position{line: 359, col: 27, offset: 9693},
				run: (*parser).callonSingleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 359, col: 27, offset: 9693},
					exprs: []any{
						&notExpr{
							pos: position{line: 359, col: 27, offset: 9693},
							expr: &seqExpr{
								pos: position{line: 359, col: 29, offset: 9695},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 359, col: 29, offset: 9695},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
									&notExpr{
										pos: position{line: 359, col: 33, offset: 9699},
										expr: &litMatcher{
											pos:        position{line: 359, col: 34, offset: 9700},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 39, offset: 9705},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 359, col: 48, offset: 9714},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 363, col: 1, offset: 9769},
			expr: &actionExpr{
				pos: position{line: 363, col: 20, offset: 9788},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 363, col: 20, offset: 9788},
					exprs: []any{
						&notExpr{
							pos: position{line: 363, col: 20, offset: 9788},
							expr: &ruleRefExpr{
								pos:    position{line: 363, col: 21, offset: 9789},
								offset: 305,
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 34, offset: 9802},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 39, offset: 9807},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 363, col: 46, offset: 9814},
								offset: 55,
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 69, offset: 9837},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 367, col: 1, offset: 9874},
			expr: &actionExpr{
				pos: position{line: 367, col: 25, offset: 9898},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 367, col: 25, offset: 9898},
					exprs: []any{
						&notExpr{
							pos: position{line: 367, col: 25, offset: 9898},
							expr: &ruleRefExpr{
								pos:    position{line: 367, col: 26, offset: 9899},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 28, offset: 9901},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 34, offset: 9907},
								expr: &actionExpr{
									pos: position{line: 367, col: 35, offset: 9908},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 367, col: 35, offset: 9908},
										exprs: []any{
											&notExpr{
												pos: position{line: 367, col: 35, offset: 9908},
												expr: &ruleRefExpr{
													pos:    position{line: 367, col: 36, offset: 9909},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 367, col: 38, offset: 9911},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 367, col: 44, offset: 9917},
													expr: &ruleRefExpr{
														pos:    position{line: 367, col: 45, offset: 9918},
														offset: 56,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 371, col: 1, offset: 10038},
			expr: &actionExpr{
				pos: position{line: 371, col: 27, offset: 10064},
				run: (*parser).callonDoubleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 371, col: 27, offset: 10064},
					exprs: []any{
						&notExpr{
							pos: position{line: 371, col: 27, offset: 10064},
							expr: &litMatcher{
								pos:        position{line: 371, col: 29, offset: 10066},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 35, offset: 10072},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 371, col: 44, offset: 10081},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 378, col: 1, offset: 10139},
			expr: &actionExpr{
				pos: position{line: 378, col: 17, offset: 10155},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 378, col: 17, offset: 10155},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 378, col: 17, offset: 10155},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 22, offset: 10160},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 378, col: 29, offset: 10167},
								offset: 58,
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 49, offset: 10187},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 382, col: 1, offset: 10222},
			expr: &actionExpr{
				pos: position{line: 382, col: 22, offset: 10243},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 22, offset: 10243},
					exprs: []any{
						&notExpr{
							pos: position{line: 382, col: 22, offset: 10243},
							expr: &ruleRefExpr{
								pos:    position{line: 382, col: 23, offset: 10244},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 382, col: 25, offset: 10246},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 382, col: 31, offset: 10252},
								expr: &actionExpr{
									pos: position{line: 382, col: 32, offset: 10253},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 382, col: 32, offset: 10253},
										exprs: []any{
											&notExpr{
												pos: position{line: 382, col: 32, offset: 10253},
												expr: &ruleRefExpr{
													pos:    position{line: 382, col: 33, offset: 10254},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 382, col: 35, offset: 10256},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 382, col: 41, offset: 10262},
													expr: &ruleRefExpr{
														pos:    position{line: 382, col: 42, offset: 10263},
														offset: 59,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 386, col: 1, offset: 10420},
			expr: &actionExpr{
				pos: position{line: 386, col: 24, offset: 10443},
				run: (*parser).callonSubscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 386, col: 24, offset: 10443},
					exprs: []any{
						&notExpr{
							pos: position{line: 386, col: 24, offset: 10443},
							expr: &litMatcher{
								pos:        position{line: 386, col: 26, offset: 10445},
								val:        "~",
								ignoreCase: false,
								want:       "\"~\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 31, offset: 10450},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 386, col: 40, offset: 10459},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 390, col: 1, offset: 10514},
			expr: &actionExpr{
				pos: position{line: 390, col: 20, offset: 10533},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 390, col: 21, offset: 10534},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 390, col: 21, offset: 10534},
							offset: 304,
						},
						&litMatcher{
							pos:        position{line: 390, col: 28, offset: 10541},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:    position{line: 390, col: 32, offset: 10545},
							offset: 58,
						},
						&litMatcher{
							pos:        position{line: 390, col: 51, offset: 10564},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 396, col: 1, offset: 10627},
			expr: &actionExpr{
				pos: position{line: 396, col: 19, offset: 10645},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 396, col: 19, offset: 10645},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 396, col: 19, offset: 10645},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 24, offset: 10650},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 396, col: 31, offset: 10657},
								offset: 62,
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 53, offset: 10679},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 400, col: 1, offset: 10714},
			expr: &actionExpr{
				pos: position{line: 400, col: 24, offset: 10737},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 400, col: 24, offset: 10737},
					exprs: []any{
						&notExpr{
							pos: position{line: 400, col: 24, offset: 10737},
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 25, offset: 10738},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 27, offset: 10740},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 33, offset: 10746},
								expr: &actionExpr{
									pos: position{line: 400, col: 34, offset: 10747},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 400, col: 34, offset: 10747},
										exprs: []any{
											&notExpr{
												pos: position{line: 400, col: 34, offset: 10747},
												expr: &ruleRefExpr{
													pos:    position{line: 400, col: 35, offset: 10748},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 400, col: 37, offset: 10750},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 400, col: 43, offset: 10756},
													expr: &ruleRefExpr{
														pos:    position{line: 400, col: 44, offset: 10757},
														offset: 63,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 404, col: 1, offset: 10920},
			expr: &actionExpr{
				pos: position{line: 404, col: 26, offset: 10945},
				run: (*parser).callonSuperscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 404, col: 26, offset: 10945},
					exprs: []any{
						&notExpr{
							pos: position{line: 404, col: 26, offset: 10945},
							expr: &litMatcher{
								pos:        position{line: 404, col: 28, offset: 10947},
								val:        "^",
								ignoreCase: false,
								want:       "\"^\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 33, offset: 10952},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 404, col: 42, offset: 10961},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 408, col: 1, offset: 11016},
			expr: &actionExpr{
				pos: position{line: 408, col: 22, offset: 11037},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 408, col: 23, offset: 11038},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 408, col: 23, offset: 11038},
							offset: 304,
						},
						&litMatcher{
							pos:        position{line: 408, col: 30, offset: 11045},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 408, col: 34, offset: 11049},
							offset: 62,
						},
						&litMatcher{
							pos:        position{line: 408, col: 55, offset: 11070},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 413, col: 1, offset: 11132},
			expr: &choiceExpr{
				pos: position{line: 413, col: 18, offset: 11149},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 413, col: 18, offset: 11149},
						offset: 66,
					},
					&ruleRefExpr{
						pos:    position{line: 413, col: 40, offset: 11171},
						offset: 69,
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 415, col: 1, offset: 11193},
			expr: &actionExpr{
				pos: position{line: 415, col: 22, offset: 11214},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 415, col: 22, offset: 11214},
					exprs: []any{
						&notExpr{
							pos: position{line: 415, col: 22, offset: 11214},
							expr: &ruleRefExpr{
								pos:    position{line: 415, col: 23, offset: 11215},
								offset: 304,
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 30, offset: 11222},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 415, col: 34, offset: 11226},
							expr: &notExpr{
								pos: position{line: 415, col: 36, offset: 11228},
								expr: &litMatcher{
									pos:        position{line: 415, col: 37, offset: 11229},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 42, offset: 11234},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 415, col: 49, offset: 11241},
								offset: 67,
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 75, offset: 11267},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 415, col: 79, offset: 11271},
							expr: &litMatcher{
								pos:        position{line: 415, col: 80, offset: 11272},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 415, col: 84, offset: 11276},
							expr: &notExpr{
								pos: position{line: 415, col: 86, offset: 11278},
								expr: &ruleRefExpr{
									pos:    position{line: 415, col: 87, offset: 11279},
									offset: 288,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 419, col: 1, offset: 11324},
			expr: &actionExpr{
				pos: position{line: 419, col: 28, offset: 11351},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 419, col: 28, offset: 11351},
					exprs: []any{
						&notExpr{
							pos: position{line: 419, col: 28, offset: 11351},
							expr: &ruleRefExpr{
								pos:    position{line: 419, col: 29, offset: 11352},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 31, offset: 11354},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 419, col: 37, offset: 11360},
								expr: &actionExpr{
									pos: position{line: 419, col: 38, offset: 11361},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 419, col: 38, offset: 11361},
										exprs: []any{
											&notExpr{
												pos: position{line: 419, col: 38, offset: 11361},
												expr: &ruleRefExpr{
													pos:    position{line: 419, col: 39, offset: 11362},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 419, col: 41, offset: 11364},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 419, col: 47, offset: 11370},
													expr: &ruleRefExpr{
														pos:    position{line: 419, col: 48, offset: 11371},
														offset: 68,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 423, col: 1, offset: 11491},
			expr: &actionExpr{
				pos: position{line: 423, col: 30, offset: 11520},
				run: (*parser).callonSingleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 423, col: 30, offset: 11520},
					exprs: []any{
						&notExpr{
							pos: position{line: 423, col: 30, offset: 11520},
							expr: &seqExpr{
								pos: position{line: 423, col: 32, offset: 11522},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 423, col: 32, offset: 11522},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
									&notExpr{
										pos: position{line: 423, col: 36, offset: 11526},
										expr: &litMatcher{
											pos:        position{line: 423, col: 37, offset: 11527},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 42, offset: 11532},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 423, col: 51, offset: 11541},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 427, col: 1, offset: 11596},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 11617},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 11617},
					exprs: []any{
						&notExpr{
							pos: position{line: 427, col: 22, offset: 11617},
							expr: &ruleRefExpr{
								pos:    position{line: 427, col: 23, offset: 11618},
								offset: 305,
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 36, offset: 11631},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 41, offset: 11636},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 427, col: 48, offset: 11643},
								offset: 70,
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 74, offset: 11669},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 431, col: 1, offset: 11706},
			expr: &actionExpr{
				pos: position{line: 431, col: 28, offset: 11733},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 431, col: 28, offset: 11733},
					exprs: []any{
						&notExpr{
							pos: position{line: 431, col: 28, offset: 11733},
							expr: &ruleRefExpr{
								pos:    position{line: 431, col: 29, offset: 11734},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 31, offset: 11736},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 431, col: 37, offset: 11742},
								expr: &actionExpr{
									pos: position{line: 431, col: 38, offset: 11743},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 431, col: 38, offset: 11743},
										exprs: []any{
											&notExpr{
												pos: position{line: 431, col: 38, offset: 11743},
												expr: &ruleRefExpr{
													pos:    position{line: 431, col: 39, offset: 11744},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 431, col: 41, offset: 11746},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 431, col: 47, offset: 11752},
													expr: &ruleRefExpr{
														pos:    position{line: 431, col: 48, offset: 11753},
														offset: 71,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 435, col: 1, offset: 11879},
			expr: &actionExpr{
				pos: position{line: 435, col: 30, offset: 11908},
				run: (*parser).callonDoubleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 435, col: 30, offset: 11908},
					exprs: []any{
						&notExpr{
							pos: position{line: 435, col: 30, offset: 11908},
							expr: &litMatcher{
								pos:        position{line: 435, col: 32, offset: 11910},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 38, offset: 11916},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 435, col: 47, offset: 11925},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 441, col: 1, offset: 11982},
			expr: &actionExpr{
				pos: position{line: 441, col: 10, offset: 11991},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 441, col: 10, offset: 11991},
					exprs: []any{
						&notExpr{
							pos: position{line: 441, col: 10, offset: 11991},
							expr: &litMatcher{
								pos:        position{line: 441, col: 11, offset: 11992},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 16, offset: 11997},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 21, offset: 12002},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 441, col: 25, offset: 12006},
								offset: 216,
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 43, offset: 12024},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 49, offset: 12030},
								expr: &actionExpr{
									pos: position{line: 441, col: 50, offset: 12031},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 441, col: 50, offset: 12031},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 441, col: 50, offset: 12031},
												offset: 298,
											},
											&litMatcher{
												pos:        position{line: 441, col: 60, offset: 12041},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 441, col: 64, offset: 12045},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 441, col: 71, offset: 12052},
													offset: 74,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 107, offset: 12088},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 449, col: 1, offset: 12249},
			expr: &actionExpr{
				pos: position{line: 449, col: 19, offset: 12267},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 449, col: 19, offset: 12267},
					exprs: []any{
						&notExpr{
							pos: position{line: 449, col: 19, offset: 12267},
							expr: &litMatcher{
								pos:        position{line: 449, col: 20, offset: 12268},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 25, offset: 12273},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 30, offset: 12278},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 449, col: 34, offset: 12282},
								offset: 216,
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 52, offset: 12300},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 58, offset: 12306},
								expr: &actionExpr{
									pos: position{line: 449, col: 59, offset: 12307},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 449, col: 59, offset: 12307},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 449, col: 59, offset: 12307},
												offset: 298,
											},
											&litMatcher{
												pos:        position{line: 449, col: 69, offset: 12317},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 73, offset: 12321},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 449, col: 80, offset: 12328},
													offset: 74,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 116, offset: 12364},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 457, col: 1, offset: 12568},
			expr: &oneOrMoreExpr{
				pos: position{line: 457, col: 15, offset: 12582},
				expr: &choiceExpr{
					pos: position{line: 457, col: 17, offset: 12584},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 457, col: 17, offset: 12584},
							exprs: []any{
								&notExpr{
									pos: position{line: 457, col: 17, offset: 12584},
									expr: &litMatcher{
										pos:        position{line: 457, col: 18, offset: 12585},
										val:        "]]",
										ignoreCase: false,
										want:       "\"]]\"",
									},
								},
								&actionExpr{
									pos: position{line: 458, col: 6, offset: 12595},
									run: (*parser).callonAnchorLabel6,
									expr: &oneOrMoreExpr{
										pos: position{line: 458, col: 6, offset: 12595},
										expr: &charClassMatcher{
											pos:        position{line: 458, col: 6, offset: 12595},
											val:        "[^\\r\\n{\\]]",
											chars:      []rune{'\r', '\n', '{', ']'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 461, col: 7, offset: 12677},
							run: (*parser).callonAnchorLabel9,
							expr: &labeledExpr{
								pos:   position{line: 461, col: 7, offset: 12677},
								label: "arv",
								expr: &ruleRefExpr{
									pos:    position{line: 461, col: 11, offset: 12681},
									offset: 41,
								},
							},
						},
						&actionExpr{
							pos: position{line: 464, col: 8, offset: 12739},
							run: (*parser).callonAnchorLabel12,
							expr: &litMatcher{
								pos:        position{line: 464, col: 8, offset: 12739},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 470, col: 1, offset: 12801},
			expr: &actionExpr{
				pos: position{line: 470, col: 14, offset: 12814},
				run: (*parser).callonAdmonition1,
				expr: &seqExpr{
					pos: position{line: 470, col: 14, offset: 12814},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 470, col: 14, offset: 12814},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 470, col: 30, offset: 12830},
							label: "admonition",
							expr: &choiceExpr{
								pos: position{line: 471, col: 5, offset: 12847},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 471, col: 5, offset: 12847},
										run: (*parser).callonAdmonition6,
										expr: &litMatcher{
											pos:        position{line: 471, col: 5, offset: 12847},
											val:        "NOTE: ",
											ignoreCase: false,
											want:       "\"NOTE: \"",
										},
									},
									&actionExpr{
										pos: position{line: 472, col: 7, offset: 12930},
										run: (*parser).callonAdmonition8,
										expr: &litMatcher{
											pos:        position{line: 472, col: 7, offset: 12930},
											val:        "TIP: ",
											ignoreCase: false,
											want:       "\"TIP: \"",
										},
									},
									&actionExpr{
										pos: position{line: 473, col: 7, offset: 13011},
										run: (*parser).callonAdmonition10,
										expr: &litMatcher{
											pos:        position{line: 473, col: 7, offset: 13011},
											val:        "IMPORTANT: ",
											ignoreCase: false,
											want:       "\"IMPORTANT: \"",
										},
									},
									&actionExpr{
										pos: position{line: 474, col: 7, offset: 13104},
										run: (*parser).callonAdmonition12,
										expr: &litMatcher{
											pos:        position{line: 474, col: 7, offset: 13104},
											val:        "CAUTON: ",
											ignoreCase: false,
											want:       "\"CAUTON: \"",
										},
									},
									&actionExpr{
										pos: position{line: 475, col: 7, offset: 13192},
										run: (*parser).callonAdmonition14,
										expr: &litMatcher{
											pos:        position{line: 475, col: 7, offset: 13192},
											val:        "WARNING: ",
											ignoreCase: false,
											want:       "\"WARNING: \"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 482, col: 1, offset: 13318},
			expr: &actionExpr{
				pos: position{line: 482, col: 18, offset: 13335},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 482, col: 18, offset: 13335},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 482, col: 18, offset: 13335},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 482, col: 26, offset: 13343},
								expr: &ruleRefExpr{
									pos:    position{line: 482, col: 27, offset: 13344},
									offset: 77,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 43, offset: 13360},
							label: "eol",
							expr: &ruleRefExpr{
								pos:    position{line: 482, col: 47, offset: 13364},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 490, col: 1, offset: 13521},
			expr: &actionExpr{
				pos: position{line: 490, col: 17, offset: 13537},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 17, offset: 13537},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 491, col: 5, offset: 13551},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 491, col: 5, offset: 13551},
								offset: 75,
							},
							&ruleRefExpr{
								pos:    position{line: 492, col: 5, offset: 13568},
								offset: 250,
							},
							&ruleRefExpr{
								pos:    position{line: 493, col: 5, offset: 13592},
								offset: 82,
							},
							&ruleRefExpr{
								pos:    position{line: 494, col: 5, offset: 13612},
								offset: 88,
							},
							&ruleRefExpr{
								pos:    position{line: 495, col: 5, offset: 13624},
								offset: 86,
							},
							&ruleRefExpr{
								pos:    position{line: 496, col: 5, offset: 13643},
								offset: 91,
							},
							&ruleRefExpr{
								pos:    position{line: 497, col: 5, offset: 13654},
								offset: 72,
							},
							&ruleRefExpr{
								pos:    position{line: 498, col: 5, offset: 13668},
								offset: 213,
							},
							&ruleRefExpr{
								pos:    position{line: 499, col: 5, offset: 13690},
								offset: 41,
							},
							&ruleRefExpr{
								pos:    position{line: 500, col: 5, offset: 13715},
								offset: 276,
							},
							&ruleRefExpr{
								pos:    position{line: 501, col: 5, offset: 13731},
								offset: 78,
							},
							&ruleRefExpr{
								pos:    position{line: 502, col: 5, offset: 13753},
								offset: 300,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 507, col: 1, offset: 13815},
			expr: &actionExpr{
				pos: position{line: 507, col: 19, offset: 13833},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 507, col: 19, offset: 13833},
					expr: &seqExpr{
						pos: position{line: 507, col: 20, offset: 13834},
						exprs: []any{
							&notExpr{
								pos: position{line: 507, col: 20, offset: 13834},
								expr: &ruleRefExpr{
									pos:    position{line: 507, col: 21, offset: 13835},
									offset: 138,
								},
							},
							&notExpr{
								pos: position{line: 507, col: 31, offset: 13845},
								expr: &ruleRefExpr{
									pos:    position{line: 507, col: 32, offset: 13846},
									offset: 87,
								},
							},
							&charClassMatcher{
								pos:        position{line: 507, col: 53, offset: 13867},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 512, col: 1, offset: 13941},
			expr: &actionExpr{
				pos: position{line: 512, col: 12, offset: 13952},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 512, col: 12, offset: 13952},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 512, col: 12, offset: 13952},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 24, offset: 13964},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 27, offset: 13967},
								expr: &ruleRefExpr{
									pos:    position{line: 512, col: 28, offset: 13968},
									offset: 80,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 41, offset: 13981},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 45, offset: 13985},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 512, col: 51, offset: 13991},
								expr: &ruleRefExpr{
									pos:    position{line: 512, col: 52, offset: 13992},
									offset: 81,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 68, offset: 14008},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 516, col: 1, offset: 14082},
			expr: &actionExpr{
				pos: position{line: 516, col: 14, offset: 14095},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 516, col: 14, offset: 14095},
					expr: &ruleRefExpr{
						pos:    position{line: 516, col: 14, offset: 14095},
						offset: 288,
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 520, col: 1, offset: 14145},
			expr: &actionExpr{
				pos: position{line: 520, col: 17, offset: 14161},
				run: (*parser).callonFootnoteValue1,
				expr: &seqExpr{
					pos: position{line: 520, col: 17, offset: 14161},
					exprs: []any{
						&notExpr{
							pos: position{line: 520, col: 17, offset: 14161},
							expr: &litMatcher{
								pos:        position{line: 520, col: 18, offset: 14162},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 22, offset: 14166},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 520, col: 32, offset: 14176},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 520, col: 32, offset: 14176},
										offset: 295,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 45, offset: 14189},
										offset: 302,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 50, offset: 14194},
										offset: 274,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 63, offset: 14207},
										offset: 188,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 71, offset: 14215},
										offset: 275,
									},
									&ruleRefExpr{
										pos: position{line: 520, col: 85, offset: 14229},
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 93, offset: 14237},
										offset: 276,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 105, offset: 14249},
										offset: 41,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 126, offset: 14270},
										offset: 272,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 145, offset: 14289},
										offset: 280,
									},
									&ruleRefExpr{
										pos:    position{line: 520, col: 157, offset: 14301},
										offset: 300,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 525, col: 1, offset: 14353},
			expr: &actionExpr{
				pos: position{line: 525, col: 17, offset: 14369},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 525, col: 17, offset: 14369},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 525, col: 17, offset: 14369},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 28, offset: 14380},
								expr: &ruleRefExpr{
									pos:    position{line: 525, col: 29, offset: 14381},
									offset: 27,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 52, offset: 14404},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 526, col: 5, offset: 14415},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 526, col: 5, offset: 14415},
										offset: 43,
									},
									&ruleRefExpr{
										pos:    position{line: 527, col: 7, offset: 14431},
										offset: 50,
									},
									&ruleRefExpr{
										pos:    position{line: 528, col: 7, offset: 14449},
										offset: 65,
									},
									&ruleRefExpr{
										pos:    position{line: 529, col: 7, offset: 14470},
										offset: 157,
									},
									&ruleRefExpr{
										pos:    position{line: 530, col: 7, offset: 14487},
										offset: 61,
									},
									&ruleRefExpr{
										pos:    position{line: 531, col: 7, offset: 14509},
										offset: 57,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 536, col: 1, offset: 14658},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 14687},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 537, col: 5, offset: 14687},
						offset: 295,
					},
					&ruleRefExpr{
						pos:    position{line: 538, col: 5, offset: 14705},
						offset: 302,
					},
					&ruleRefExpr{
						pos:    position{line: 539, col: 5, offset: 14715},
						offset: 274,
					},
					&ruleRefExpr{
						pos:    position{line: 540, col: 5, offset: 14733},
						offset: 275,
					},
					&ruleRefExpr{
						pos:    position{line: 541, col: 5, offset: 14752},
						offset: 41,
					},
					&ruleRefExpr{
						pos:    position{line: 542, col: 5, offset: 14778},
						offset: 82,
					},
					&ruleRefExpr{
						pos:    position{line: 543, col: 5, offset: 14799},
						offset: 88,
					},
					&ruleRefExpr{
						pos:    position{line: 544, col: 5, offset: 14811},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 545, col: 5, offset: 14830},
						offset: 91,
					},
					&ruleRefExpr{
						pos:    position{line: 546, col: 5, offset: 14841},
						offset: 72,
					},
					&ruleRefExpr{
						pos:    position{line: 547, col: 5, offset: 14855},
						offset: 272,
					},
					&ruleRefExpr{
						pos:    position{line: 548, col: 5, offset: 14879},
						offset: 300,
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 551, col: 1, offset: 14903},
			expr: &actionExpr{
				pos: position{line: 551, col: 20, offset: 14922},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 551, col: 20, offset: 14922},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 551, col: 20, offset: 14922},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 24, offset: 14926},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 551, col: 36, offset: 14938},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 551, col: 56, offset: 14958},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 556, col: 1, offset: 14999},
			expr: &actionExpr{
				pos: position{line: 556, col: 14, offset: 15012},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 556, col: 14, offset: 15012},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 556, col: 14, offset: 15012},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 24, offset: 15022},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 556, col: 30, offset: 15028},
								offset: 141,
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 36, offset: 15034},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 556, col: 48, offset: 15046},
								offset: 39,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 556, col: 66, offset: 15064},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 560, col: 1, offset: 15196},
			expr: &actionExpr{
				pos: position{line: 560, col: 15, offset: 15210},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 560, col: 15, offset: 15210},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 560, col: 15, offset: 15210},
							offset: 87,
						},
						&notExpr{
							pos: position{line: 560, col: 36, offset: 15231},
							expr: &litMatcher{
								pos:        position{line: 560, col: 37, offset: 15232},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 41, offset: 15236},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 560, col: 47, offset: 15242},
								offset: 141,
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 53, offset: 15248},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 560, col: 65, offset: 15260},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 564, col: 1, offset: 15402},
			expr: &litMatcher{
				pos:        position{line: 564, col: 24, offset: 15425},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 568, col: 1, offset: 15437},
			expr: &actionExpr{
				pos: position{line: 568, col: 8, offset: 15444},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 568, col: 8, offset: 15444},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 8, offset: 15444},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 16, offset: 15452},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 568, col: 22, offset: 15458},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 568, col: 22, offset: 15458},
									expr: &choiceExpr{
										pos: position{line: 568, col: 23, offset: 15459},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 568, col: 23, offset: 15459},
												offset: 288,
											},
											&litMatcher{
												pos:        position{line: 568, col: 38, offset: 15474},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 568, col: 44, offset: 15480},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 81, offset: 15517},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 568, col: 93, offset: 15529},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 573, col: 1, offset: 15651},
			expr: &actionExpr{
				pos: position{line: 573, col: 15, offset: 15665},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 573, col: 15, offset: 15665},
					exprs: []any{
						&notExpr{
							pos: position{line: 573, col: 15, offset: 15665},
							expr: &litMatcher{
								pos:        position{line: 573, col: 16, offset: 15666},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 21, offset: 15671},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 33, offset: 15683},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 573, col: 39, offset: 15689},
								offset: 90,
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 56, offset: 15706},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 573, col: 68, offset: 15718},
								offset: 39,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 573, col: 86, offset: 15736},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 573, col: 96, offset: 15746},
							expr: &ruleRefExpr{
								pos:    position{line: 573, col: 97, offset: 15747},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 578, col: 1, offset: 15904},
			expr: &actionExpr{
				pos: position{line: 578, col: 19, offset: 15922},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 578, col: 19, offset: 15922},
					exprs: []any{
						&notExpr{
							pos: position{line: 578, col: 19, offset: 15922},
							expr: &ruleRefExpr{
								pos:    position{line: 578, col: 20, offset: 15923},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 22, offset: 15925},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 578, col: 27, offset: 15930},
								offset: 141,
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 585, col: 1, offset: 15964},
			expr: &actionExpr{
				pos: position{line: 585, col: 8, offset: 15971},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 585, col: 8, offset: 15971},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 585, col: 14, offset: 15977},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 585, col: 14, offset: 15977},
								offset: 92,
							},
							&ruleRefExpr{
								pos:    position{line: 585, col: 25, offset: 15988},
								offset: 93,
							},
							&ruleRefExpr{
								pos:    position{line: 585, col: 40, offset: 16003},
								offset: 94,
							},
							&ruleRefExpr{
								pos:    position{line: 585, col: 55, offset: 16018},
								offset: 143,
							},
						},
					},
				},
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 589, col: 1, offset: 16059},
			expr: &actionExpr{
				pos: position{line: 589, col: 12, offset: 16070},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 589, col: 12, offset: 16070},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 589, col: 12, offset: 16070},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 16, offset: 16074},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 589, col: 21, offset: 16079},
								offset: 140,
							},
						},
						&litMatcher{
							pos:        position{line: 589, col: 30, offset: 16088},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 593, col: 1, offset: 16154},
			expr: &actionExpr{
				pos: position{line: 593, col: 16, offset: 16169},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 593, col: 16, offset: 16169},
					exprs: []any{
						&notExpr{
							pos: position{line: 593, col: 16, offset: 16169},
							expr: &litMatcher{
								pos:        position{line: 593, col: 17, offset: 16170},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 593, col: 22, offset: 16175},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 30, offset: 16183},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 593, col: 34, offset: 16187},
								offset: 139,
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 38, offset: 16191},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 593, col: 50, offset: 16203},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 598, col: 1, offset: 16334},
			expr: &actionExpr{
				pos: position{line: 598, col: 16, offset: 16349},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 598, col: 16, offset: 16349},
					exprs: []any{
						&notExpr{
							pos: position{line: 598, col: 16, offset: 16349},
							expr: &litMatcher{
								pos:        position{line: 598, col: 17, offset: 16350},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 22, offset: 16355},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 598, col: 27, offset: 16360},
								offset: 140,
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 36, offset: 16369},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 47, offset: 16380},
								expr: &ruleRefExpr{
									pos:    position{line: 598, col: 48, offset: 16381},
									offset: 39,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 604, col: 1, offset: 16514},
			expr: &actionExpr{
				pos: position{line: 604, col: 9, offset: 16522},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 604, col: 9, offset: 16522},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 604, col: 9, offset: 16522},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 604, col: 20, offset: 16533},
								expr: &ruleRefExpr{
									pos:    position{line: 604, col: 21, offset: 16534},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 604, col: 46, offset: 16559},
							offset: 98,
						},
						&labeledExpr{
							pos:   position{line: 604, col: 57, offset: 16570},
							label: "cells",
							expr: &ruleRefExpr{
								pos:    position{line: 604, col: 64, offset: 16577},
								offset: 96,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 604, col: 79, offset: 16592},
							offset: 109,
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 612, col: 1, offset: 16749},
			expr: &zeroOrMoreExpr{
				pos: position{line: 612, col: 17, offset: 16765},
				expr: &ruleRefExpr{
					pos:    position{line: 612, col: 18, offset: 16766},
					offset: 97,
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 614, col: 1, offset: 16783},
			expr: &choiceExpr{
				pos: position{line: 615, col: 9, offset: 16808},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 615, col: 9, offset: 16808},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 616, col: 11, offset: 16834},
						offset: 100,
					},
					&ruleRefExpr{
						pos:    position{line: 617, col: 11, offset: 16856},
						offset: 110,
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 620, col: 1, offset: 16877},
			expr: &actionExpr{
				pos: position{line: 620, col: 14, offset: 16890},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 620, col: 14, offset: 16890},
					exprs: []any{
						&notExpr{
							pos: position{line: 620, col: 14, offset: 16890},
							expr: &litMatcher{
								pos:        position{line: 620, col: 15, offset: 16891},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 620, col: 20, offset: 16896},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 620, col: 27, offset: 16903},
							expr: &litMatcher{
								pos:        position{line: 620, col: 27, offset: 16903},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 620, col: 32, offset: 16908},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 620, col: 42, offset: 16918},
							expr: &ruleRefExpr{
								pos:    position{line: 620, col: 43, offset: 16919},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 624, col: 1, offset: 16990},
			expr: &actionExpr{
				pos: position{line: 624, col: 18, offset: 17007},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 624, col: 18, offset: 17007},
					exprs: []any{
						&notExpr{
							pos: position{line: 624, col: 18, offset: 17007},
							expr: &ruleRefExpr{
								pos:    position{line: 624, col: 19, offset: 17008},
								offset: 109,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 28, offset: 17017},
							offset: 282,
						},
						&ruleRefExpr{
							pos:    position{line: 624, col: 36, offset: 17025},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 624, col: 46, offset: 17035},
							expr: &ruleRefExpr{
								pos:    position{line: 624, col: 48, offset: 17037},
								offset: 282,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 628, col: 1, offset: 17118},
			expr: &choiceExpr{
				pos: position{line: 628, col: 16, offset: 17133},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 628, col: 16, offset: 17133},
						offset: 101,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 29, offset: 17146},
						offset: 102,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 43, offset: 17160},
						offset: 103,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 59, offset: 17176},
						offset: 104,
					},
					&ruleRefExpr{
						pos:    position{line: 628, col: 74, offset: 17191},
						offset: 105,
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 630, col: 1, offset: 17215},
			expr: &actionExpr{
				pos: position{line: 630, col: 14, offset: 17228},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 630, col: 14, offset: 17228},
					exprs: []any{
						&notExpr{
							pos: position{line: 630, col: 14, offset: 17228},
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 15, offset: 17229},
								offset: 109,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 630, col: 24, offset: 17238},
							offset: 282,
						},
						&ruleRefExpr{
							pos:    position{line: 630, col: 32, offset: 17246},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 42, offset: 17256},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 48, offset: 17262},
								offset: 257,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 634, col: 1, offset: 17325},
			expr: &actionExpr{
				pos: position{line: 634, col: 15, offset: 17339},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 634, col: 15, offset: 17339},
					exprs: []any{
						&notExpr{
							pos: position{line: 634, col: 15, offset: 17339},
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 16, offset: 17340},
								offset: 109,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 634, col: 25, offset: 17349},
							offset: 282,
						},
						&ruleRefExpr{
							pos:    position{line: 634, col: 33, offset: 17357},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 634, col: 43, offset: 17367},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 634, col: 50, offset: 17374},
								offset: 259,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 638, col: 1, offset: 17441},
			expr: &actionExpr{
				pos: position{line: 638, col: 17, offset: 17457},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 638, col: 17, offset: 17457},
					exprs: []any{
						&notExpr{
							pos: position{line: 638, col: 17, offset: 17457},
							expr: &ruleRefExpr{
								pos:    position{line: 638, col: 18, offset: 17458},
								offset: 109,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 638, col: 27, offset: 17467},
							offset: 282,
						},
						&ruleRefExpr{
							pos:    position{line: 638, col: 35, offset: 17475},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 638, col: 45, offset: 17485},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 638, col: 54, offset: 17494},
								offset: 262,
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 642, col: 1, offset: 17564},
			expr: &actionExpr{
				pos: position{line: 642, col: 16, offset: 17579},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 642, col: 16, offset: 17579},
					exprs: []any{
						&notExpr{
							pos: position{line: 642, col: 16, offset: 17579},
							expr: &ruleRefExpr{
								pos:    position{line: 642, col: 17, offset: 17580},
								offset: 109,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 642, col: 26, offset: 17589},
							offset: 282,
						},
						&labeledExpr{
							pos:   position{line: 642, col: 34, offset: 17597},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 642, col: 43, offset: 17606},
								offset: 236,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 646, col: 1, offset: 17697},
			expr: &actionExpr{
				pos: position{line: 646, col: 25, offset: 17721},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 646, col: 25, offset: 17721},
					exprs: []any{
						&notExpr{
							pos: position{line: 646, col: 25, offset: 17721},
							expr: &ruleRefExpr{
								pos:    position{line: 646, col: 26, offset: 17722},
								offset: 109,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 646, col: 35, offset: 17731},
							offset: 282,
						},
						&labeledExpr{
							pos:   position{line: 646, col: 43, offset: 17739},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 646, col: 52, offset: 17748},
								offset: 239,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 650, col: 1, offset: 17837},
			expr: &oneOrMoreExpr{
				pos: position{line: 650, col: 19, offset: 17855},
				expr: &ruleRefExpr{
					pos:    position{line: 650, col: 19, offset: 17855},
					offset: 99,
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 652, col: 1, offset: 17872},
			expr: &actionExpr{
				pos: position{line: 652, col: 26, offset: 17897},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 652, col: 26, offset: 17897},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 652, col: 26, offset: 17897},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 652, col: 34, offset: 17905},
								expr: &ruleRefExpr{
									pos:    position{line: 652, col: 35, offset: 17906},
									offset: 108,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 652, col: 67, offset: 17938},
							offset: 289,
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 656, col: 1, offset: 18016},
			expr: &actionExpr{
				pos: position{line: 656, col: 33, offset: 18048},
				run: (*parser).callonTableCellInlineContentElement1,
				expr: &labeledExpr{
					pos:   position{line: 656, col: 33, offset: 18048},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 657, col: 5, offset: 18062},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 657, col: 5, offset: 18062},
								offset: 82,
							},
							&ruleRefExpr{
								pos:    position{line: 658, col: 5, offset: 18082},
								offset: 88,
							},
							&ruleRefExpr{
								pos:    position{line: 659, col: 5, offset: 18094},
								offset: 86,
							},
							&ruleRefExpr{
								pos:    position{line: 660, col: 5, offset: 18113},
								offset: 91,
							},
							&ruleRefExpr{
								pos:    position{line: 661, col: 5, offset: 18124},
								offset: 72,
							},
							&ruleRefExpr{
								pos:    position{line: 662, col: 5, offset: 18139},
								offset: 213,
							},
							&ruleRefExpr{
								pos:    position{line: 663, col: 5, offset: 18160},
								offset: 41,
							},
							&ruleRefExpr{
								pos:    position{line: 664, col: 5, offset: 18185},
								offset: 276,
							},
							&ruleRefExpr{
								pos:    position{line: 665, col: 5, offset: 18201},
								offset: 130,
							},
							&ruleRefExpr{
								pos:    position{line: 666, col: 5, offset: 18232},
								offset: 300,
							},
							&ruleRefExpr{
								pos:    position{line: 667, col: 5, offset: 18259},
								offset: 282,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 672, col: 1, offset: 18308},
			expr: &actionExpr{
				pos: position{line: 672, col: 12, offset: 18319},
				run: (*parser).callonTableEnd1,
				expr: &seqExpr{
					pos: position{line: 672, col: 12, offset: 18319},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 672, col: 12, offset: 18319},
							offset: 282,
						},
						&notExpr{
							pos: position{line: 672, col: 20, offset: 18327},
							expr: &litMatcher{
								pos:        position{line: 672, col: 21, offset: 18328},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 672, col: 26, offset: 18333},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 672, col: 33, offset: 18340},
							expr: &litMatcher{
								pos:        position{line: 672, col: 33, offset: 18340},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 672, col: 38, offset: 18345},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 672, col: 48, offset: 18355},
							expr: &ruleRefExpr{
								pos:    position{line: 672, col: 49, offset: 18356},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 676, col: 1, offset: 18428},
			expr: &actionExpr{
				pos: position{line: 676, col: 12, offset: 18439},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 676, col: 12, offset: 18439},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 676, col: 12, offset: 18439},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 676, col: 21, offset: 18448},
								offset: 112,
							},
						},
						&labeledExpr{
							pos:   position{line: 676, col: 46, offset: 18473},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 676, col: 57, offset: 18484},
								expr: &ruleRefExpr{
									pos:    position{line: 676, col: 58, offset: 18485},
									offset: 113,
								},
							},
						},
						&andExpr{
							pos: position{line: 676, col: 86, offset: 18513},
							expr: &choiceExpr{
								pos: position{line: 676, col: 88, offset: 18515},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 676, col: 88, offset: 18515},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 676, col: 99, offset: 18526},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 676, col: 121, offset: 18548},
										offset: 282,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 685, col: 1, offset: 18788},
			expr: &choiceExpr{
				pos: position{line: 685, col: 23, offset: 18810},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 685, col: 23, offset: 18810},
						offset: 133,
					},
					&ruleRefExpr{
						pos:    position{line: 685, col: 54, offset: 18841},
						offset: 132,
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 687, col: 1, offset: 18869},
			expr: &actionExpr{
				pos: position{line: 687, col: 26, offset: 18894},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 687, col: 26, offset: 18894},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 687, col: 26, offset: 18894},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 687, col: 34, offset: 18902},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 61, offset: 18929},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 687, col: 70, offset: 18938},
								offset: 116,
							},
						},
						&andExpr{
							pos: position{line: 687, col: 88, offset: 18956},
							expr: &choiceExpr{
								pos: position{line: 687, col: 90, offset: 18958},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 687, col: 90, offset: 18958},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 687, col: 101, offset: 18969},
										offset: 106,
									},
									&ruleRefExpr{
										pos:    position{line: 687, col: 119, offset: 18987},
										offset: 100,
									},
									&ruleRefExpr{
										pos:    position{line: 687, col: 133, offset: 19001},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 687, col: 155, offset: 19023},
										offset: 282,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 692, col: 1, offset: 19150},
			expr: &actionExpr{
				pos: position{line: 692, col: 30, offset: 19179},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 692, col: 30, offset: 19179},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 692, col: 30, offset: 19179},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 38, offset: 19187},
								offset: 133,
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 68, offset: 19217},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 77, offset: 19226},
								offset: 116,
							},
						},
						&andExpr{
							pos: position{line: 692, col: 95, offset: 19244},
							expr: &choiceExpr{
								pos: position{line: 692, col: 97, offset: 19246},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 692, col: 97, offset: 19246},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 692, col: 108, offset: 19257},
										offset: 106,
									},
									&ruleRefExpr{
										pos:    position{line: 692, col: 126, offset: 19275},
										offset: 100,
									},
									&ruleRefExpr{
										pos:    position{line: 692, col: 140, offset: 19289},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 692, col: 162, offset: 19311},
										offset: 282,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialBlockTableCell",
			pos:  position{line: 696, col: 1, offset: 19433},
			expr: &actionExpr{
				pos: position{line: 696, col: 25, offset: 19457},
				run: (*parser).callonInitialBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 696, col: 25, offset: 19457},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 696, col: 25, offset: 19457},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 696, col: 33, offset: 19465},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 60, offset: 19492},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 68, offset: 19500},
								expr: &choiceExpr{
									pos: position{line: 696, col: 69, offset: 19501},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 696, col: 69, offset: 19501},
											offset: 129,
										},
										&ruleRefExpr{
											pos:    position{line: 696, col: 89, offset: 19521},
											offset: 127,
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 696, col: 111, offset: 19543},
							expr: &choiceExpr{
								pos: position{line: 696, col: 113, offset: 19545},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 696, col: 113, offset: 19545},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 696, col: 124, offset: 19556},
										offset: 106,
									},
									&ruleRefExpr{
										pos:    position{line: 696, col: 142, offset: 19574},
										offset: 100,
									},
									&ruleRefExpr{
										pos:    position{line: 696, col: 156, offset: 19588},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 696, col: 178, offset: 19610},
										offset: 282,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 696, col: 189, offset: 19621},
							run: (*parser).callonInitialBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "AdditionalBlockTableCell",
			pos:  position{line: 703, col: 1, offset: 19901},
			expr: &actionExpr{
				pos: position{line: 703, col: 28, offset: 19928},
				run: (*parser).callonAdditionalBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 703, col: 28, offset: 19928},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 703, col: 28, offset: 19928},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 703, col: 36, offset: 19936},
								offset: 133,
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 66, offset: 19966},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 703, col: 74, offset: 19974},
								expr: &choiceExpr{
									pos: position{line: 703, col: 75, offset: 19975},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 703, col: 75, offset: 19975},
											offset: 129,
										},
										&ruleRefExpr{
											pos:    position{line: 703, col: 95, offset: 19995},
											offset: 127,
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 703, col: 117, offset: 20017},
							expr: &choiceExpr{
								pos: position{line: 703, col: 119, offset: 20019},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 703, col: 119, offset: 20019},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 703, col: 130, offset: 20030},
										offset: 106,
									},
									&ruleRefExpr{
										pos:    position{line: 703, col: 148, offset: 20048},
										offset: 100,
									},
									&ruleRefExpr{
										pos:    position{line: 703, col: 162, offset: 20062},
										offset: 111,
									},
									&ruleRefExpr{
										pos:    position{line: 703, col: 184, offset: 20084},
										offset: 282,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 703, col: 195, offset: 20095},
							run: (*parser).callonAdditionalBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 710, col: 1, offset: 20375},
			expr: &actionExpr{
				pos: position{line: 710, col: 20, offset: 20394},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 710, col: 20, offset: 20394},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 710, col: 29, offset: 20403},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 710, col: 29, offset: 20403},
								offset: 120,
							},
							&ruleRefExpr{
								pos:    position{line: 710, col: 50, offset: 20424},
								offset: 127,
							},
							&ruleRefExpr{
								pos:    position{line: 710, col: 72, offset: 20446},
								offset: 117,
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 714, col: 1, offset: 20490},
			expr: &actionExpr{
				pos: position{line: 714, col: 13, offset: 20502},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 714, col: 13, offset: 20502},
					expr: &choiceExpr{
						pos: position{line: 714, col: 15, offset: 20504},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 714, col: 15, offset: 20504},
								offset: 109,
							},
							&ruleRefExpr{
								pos:    position{line: 714, col: 26, offset: 20515},
								offset: 111,
							},
							&ruleRefExpr{
								pos:    position{line: 714, col: 48, offset: 20537},
								offset: 282,
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 718, col: 1, offset: 20620},
			expr: &seqExpr{
				pos: position{line: 718, col: 24, offset: 20643},
				exprs: []any{
					&notExpr{
						pos: position{line: 718, col: 24, offset: 20643},
						expr: &ruleRefExpr{
							pos:    position{line: 718, col: 25, offset: 20644},
							offset: 109,
						},
					},
					&notExpr{
						pos: position{line: 718, col: 34, offset: 20653},
						expr: &ruleRefExpr{
							pos:    position{line: 718, col: 35, offset: 20654},
							offset: 111,
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 720, col: 1, offset: 20675},
			expr: &seqExpr{
				pos: position{line: 720, col: 33, offset: 20707},
				exprs: []any{
					&notExpr{
						pos: position{line: 720, col: 33, offset: 20707},
						expr: &ruleRefExpr{
							pos:    position{line: 720, col: 34, offset: 20708},
							offset: 239,
						},
					},
					&notExpr{
						pos: position{line: 720, col: 51, offset: 20725},
						expr: &ruleRefExpr{
							pos:    position{line: 720, col: 52, offset: 20726},
							offset: 236,
						},
					},
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 722, col: 1, offset: 20745},
			expr: &actionExpr{
				pos: position{line: 722, col: 22, offset: 20766},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 722, col: 22, offset: 20766},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 722, col: 22, offset: 20766},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 722, col: 28, offset: 20772},
								expr: &ruleRefExpr{
									pos:    position{line: 722, col: 29, offset: 20773},
									offset: 121,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 51, offset: 20795},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 722, col: 60, offset: 20804},
								offset: 124,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 732, col: 1, offset: 21062},
			expr: &choiceExpr{
				pos: position{line: 732, col: 23, offset: 21084},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 732, col: 23, offset: 21084},
						offset: 123,
					},
					&ruleRefExpr{
						pos:    position{line: 732, col: 50, offset: 21111},
						offset: 122,
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 734, col: 1, offset: 21145},
			expr: &actionExpr{
				pos: position{line: 734, col: 35, offset: 21179},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 734, col: 35, offset: 21179},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 734, col: 35, offset: 21179},
							offset: 118,
						},
						&labeledExpr{
							pos:   position{line: 734, col: 56, offset: 21200},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 64, offset: 21208},
								expr: &ruleRefExpr{
									pos:    position{line: 734, col: 64, offset: 21208},
									offset: 282,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 734, col: 73, offset: 21217},
							offset: 119,
						},
						&labeledExpr{
							pos:   position{line: 734, col: 103, offset: 21247},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 734, col: 111, offset: 21255},
								expr: &ruleRefExpr{
									pos:    position{line: 734, col: 112, offset: 21256},
									offset: 128,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 133, offset: 21277},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 156, offset: 21300},
								expr: &actionExpr{
									pos: position{line: 734, col: 157, offset: 21301},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 734, col: 157, offset: 21301},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 734, col: 157, offset: 21301},
												label: "nl",
												expr: &ruleRefExpr{
													pos:    position{line: 734, col: 160, offset: 21304},
													offset: 282,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 734, col: 168, offset: 21312},
												offset: 298,
											},
											&andExpr{
												pos: position{line: 734, col: 178, offset: 21322},
												expr: &ruleRefExpr{
													pos:    position{line: 734, col: 180, offset: 21324},
													offset: 282,
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 209, offset: 21353},
							expr: &ruleRefExpr{
								pos:    position{line: 734, col: 210, offset: 21354},
								offset: 282,
							},
						},
						&notExpr{
							pos: position{line: 734, col: 218, offset: 21362},
							expr: &choiceExpr{
								pos: position{line: 734, col: 220, offset: 21364},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 734, col: 220, offset: 21364},
										offset: 100,
									},
									&ruleRefExpr{
										pos:    position{line: 734, col: 234, offset: 21378},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 734, col: 245, offset: 21389},
										offset: 111,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 267, offset: 21411},
							expr: &choiceExpr{
								pos: position{line: 734, col: 269, offset: 21413},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 734, col: 269, offset: 21413},
										offset: 121,
									},
									&ruleRefExpr{
										pos:    position{line: 734, col: 291, offset: 21435},
										offset: 124,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 747, col: 1, offset: 21792},
			expr: &actionExpr{
				pos: position{line: 747, col: 28, offset: 21819},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 747, col: 28, offset: 21819},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 747, col: 28, offset: 21819},
							offset: 118,
						},
						&ruleRefExpr{
							pos:    position{line: 747, col: 49, offset: 21840},
							offset: 282,
						},
						&ruleRefExpr{
							pos:    position{line: 747, col: 57, offset: 21848},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 747, col: 67, offset: 21858},
							expr: &ruleRefExpr{
								pos:    position{line: 747, col: 69, offset: 21860},
								offset: 282,
							},
						},
						&notExpr{
							pos: position{line: 747, col: 78, offset: 21869},
							expr: &ruleRefExpr{
								pos:    position{line: 747, col: 79, offset: 21870},
								offset: 109,
							},
						},
						&notExpr{
							pos: position{line: 747, col: 88, offset: 21879},
							expr: &ruleRefExpr{
								pos:    position{line: 747, col: 89, offset: 21880},
								offset: 111,
							},
						},
						&notExpr{
							pos: position{line: 747, col: 108, offset: 21899},
							expr: &ruleRefExpr{
								pos:    position{line: 747, col: 109, offset: 21900},
								offset: 100,
							},
						},
						&andExpr{
							pos: position{line: 747, col: 121, offset: 21912},
							expr: &choiceExpr{
								pos: position{line: 747, col: 123, offset: 21914},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 747, col: 123, offset: 21914},
										offset: 121,
									},
									&ruleRefExpr{
										pos:    position{line: 747, col: 145, offset: 21936},
										offset: 124,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 752, col: 1, offset: 22023},
			expr: &actionExpr{
				pos: position{line: 752, col: 27, offset: 22049},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 752, col: 27, offset: 22049},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 752, col: 27, offset: 22049},
							offset: 118,
						},
						&labeledExpr{
							pos:   position{line: 752, col: 48, offset: 22070},
							label: "nl",
							expr: &ruleRefExpr{
								pos:    position{line: 752, col: 51, offset: 22073},
								offset: 282,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 752, col: 59, offset: 22081},
							offset: 119,
						},
						&labeledExpr{
							pos:   position{line: 752, col: 89, offset: 22111},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 752, col: 97, offset: 22119},
								expr: &ruleRefExpr{
									pos:    position{line: 752, col: 98, offset: 22120},
									offset: 128,
								},
							},
						},
						&andExpr{
							pos: position{line: 752, col: 119, offset: 22141},
							expr: &choiceExpr{
								pos: position{line: 752, col: 121, offset: 22143},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 752, col: 121, offset: 22143},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 752, col: 132, offset: 22154},
										offset: 106,
									},
									&ruleRefExpr{
										pos:    position{line: 752, col: 150, offset: 22172},
										offset: 100,
									},
									&ruleRefExpr{
										pos:    position{line: 752, col: 164, offset: 22186},
										offset: 111,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLine",
			pos:  position{line: 759, col: 1, offset: 22361},
			expr: &actionExpr{
				pos: position{line: 759, col: 22, offset: 22382},
				run: (*parser).callonBlockTableCellLine1,
				expr: &labeledExpr{
					pos:   position{line: 759, col: 22, offset: 22382},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 759, col: 31, offset: 22391},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 759, col: 31, offset: 22391},
								offset: 129,
							},
							&ruleRefExpr{
								pos:    position{line: 759, col: 51, offset: 22411},
								offset: 122,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLastLine",
			pos:  position{line: 763, col: 1, offset: 22478},
			expr: &actionExpr{
				pos: position{line: 763, col: 26, offset: 22503},
				run: (*parser).callonBlockTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 763, col: 26, offset: 22503},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 763, col: 26, offset: 22503},
							offset: 118,
						},
						&ruleRefExpr{
							pos:    position{line: 763, col: 47, offset: 22524},
							offset: 282,
						},
						&labeledExpr{
							pos:   position{line: 763, col: 55, offset: 22532},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 763, col: 63, offset: 22540},
								expr: &ruleRefExpr{
									pos:    position{line: 763, col: 64, offset: 22541},
									offset: 128,
								},
							},
						},
						&andExpr{
							pos: position{line: 763, col: 85, offset: 22562},
							expr: &choiceExpr{
								pos: position{line: 763, col: 87, offset: 22564},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 763, col: 87, offset: 22564},
										offset: 109,
									},
									&ruleRefExpr{
										pos:    position{line: 763, col: 98, offset: 22575},
										offset: 111,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 768, col: 1, offset: 22663},
			expr: &actionExpr{
				pos: position{line: 768, col: 23, offset: 22685},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 768, col: 23, offset: 22685},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 768, col: 23, offset: 22685},
							offset: 118,
						},
						&labeledExpr{
							pos:   position{line: 768, col: 44, offset: 22706},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 768, col: 52, offset: 22714},
								expr: &ruleRefExpr{
									pos:    position{line: 768, col: 53, offset: 22715},
									offset: 128,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 773, col: 1, offset: 22808},
			expr: &actionExpr{
				pos: position{line: 773, col: 22, offset: 22829},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 773, col: 22, offset: 22829},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 773, col: 22, offset: 22829},
							offset: 118,
						},
						&labeledExpr{
							pos:   position{line: 773, col: 44, offset: 22851},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 774, col: 5, offset: 22865},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 774, col: 5, offset: 22865},
										offset: 130,
									},
									&ruleRefExpr{
										pos:    position{line: 775, col: 5, offset: 22896},
										offset: 131,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 780, col: 1, offset: 22961},
			expr: &actionExpr{
				pos: position{line: 780, col: 21, offset: 22981},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 780, col: 21, offset: 22981},
					exprs: []any{
						&notExpr{
							pos: position{line: 780, col: 21, offset: 22981},
							expr: &ruleRefExpr{
								pos:    position{line: 780, col: 22, offset: 22982},
								offset: 132,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 780, col: 48, offset: 23008},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 780, col: 59, offset: 23019},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 780, col: 68, offset: 23028},
								offset: 2,
							},
						},
						&notExpr{
							pos: position{line: 780, col: 82, offset: 23042},
							expr: &ruleRefExpr{
								pos:    position{line: 780, col: 83, offset: 23043},
								offset: 111,
							},
						},
						&notExpr{
							pos: position{line: 780, col: 103, offset: 23063},
							expr: &ruleRefExpr{
								pos:    position{line: 780, col: 104, offset: 23064},
								offset: 109,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 785, col: 1, offset: 23109},
			expr: &actionExpr{
				pos: position{line: 785, col: 28, offset: 23136},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 785, col: 28, offset: 23136},
					expr: &seqExpr{
						pos: position{line: 785, col: 29, offset: 23137},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 785, col: 29, offset: 23137},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&notExpr{
								pos: position{line: 785, col: 39, offset: 23147},
								expr: &ruleRefExpr{
									pos:    position{line: 785, col: 40, offset: 23148},
									offset: 111,
								},
							},
							&notExpr{
								pos: position{line: 785, col: 59, offset: 23167},
								expr: &ruleRefExpr{
									pos:    position{line: 785, col: 60, offset: 23168},
									offset: 109,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 789, col: 1, offset: 23240},
			expr: &actionExpr{
				pos: position{line: 789, col: 27, offset: 23266},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &choiceExpr{
					pos: position{line: 789, col: 28, offset: 23267},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 789, col: 28, offset: 23267},
							val:        "\\|",
							ignoreCase: false,
							want:       "\"\\\\|\"",
						},
						&charClassMatcher{
							pos:        position{line: 789, col: 36, offset: 23275},
							val:        "[^|\\r\\n]",
							chars:      []rune{'|', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 794, col: 1, offset: 23394},
			expr: &actionExpr{
				pos: position{line: 794, col: 29, offset: 23422},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 794, col: 29, offset: 23422},
					exprs: []any{
						&notExpr{
							pos: position{line: 794, col: 29, offset: 23422},
							expr: &ruleRefExpr{
								pos:    position{line: 794, col: 30, offset: 23423},
								offset: 109,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 794, col: 39, offset: 23432},
							offset: 282,
						},
						&ruleRefExpr{
							pos:    position{line: 794, col: 47, offset: 23440},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 794, col: 57, offset: 23450},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 794, col: 64, offset: 23457},
								expr: &ruleRefExpr{
									pos:    position{line: 794, col: 65, offset: 23458},
									offset: 137,
								},
							},
						},
						&notExpr{
							pos: position{line: 794, col: 83, offset: 23476},
							expr: &litMatcher{
								pos:        position{line: 794, col: 84, offset: 23477},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 794, col: 89, offset: 23482},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 801, col: 1, offset: 23598},
			expr: &actionExpr{
				pos: position{line: 801, col: 32, offset: 23629},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 801, col: 32, offset: 23629},
					exprs: []any{
						&notExpr{
							pos: position{line: 801, col: 32, offset: 23629},
							expr: &ruleRefExpr{
								pos:    position{line: 801, col: 33, offset: 23630},
								offset: 109,
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 42, offset: 23639},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 49, offset: 23646},
								expr: &ruleRefExpr{
									pos:    position{line: 801, col: 50, offset: 23647},
									offset: 135,
								},
							},
						},
						&notExpr{
							pos: position{line: 801, col: 78, offset: 23675},
							expr: &litMatcher{
								pos:        position{line: 801, col: 79, offset: 23676},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 801, col: 84, offset: 23681},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 806, col: 1, offset: 23786},
			expr: &actionExpr{
				pos: position{line: 806, col: 26, offset: 23811},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 806, col: 26, offset: 23811},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 806, col: 26, offset: 23811},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 806, col: 36, offset: 23821},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 806, col: 44, offset: 23829},
								offset: 137,
							},
						},
						&andCodeExpr{
							pos: position{line: 806, col: 61, offset: 23846},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 813, col: 1, offset: 23972},
			expr: &actionExpr{
				pos: position{line: 813, col: 29, offset: 24000},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 813, col: 29, offset: 24000},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 813, col: 29, offset: 24000},
							label: "lead",
							expr: &ruleRefExpr{
								pos:    position{line: 813, col: 35, offset: 24006},
								offset: 302,
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 39, offset: 24010},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 813, col: 47, offset: 24018},
								offset: 137,
							},
						},
						&andCodeExpr{
							pos: position{line: 813, col: 64, offset: 24035},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 819, col: 1, offset: 24121},
			expr: &actionExpr{
				pos: position{line: 819, col: 17, offset: 24137},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 819, col: 17, offset: 24137},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 819, col: 17, offset: 24137},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 819, col: 24, offset: 24144},
								expr: &actionExpr{
									pos: position{line: 819, col: 25, offset: 24145},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 819, col: 25, offset: 24145},
										label: "n",
										expr: &ruleRefExpr{
											pos:    position{line: 819, col: 27, offset: 24147},
											offset: 284,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 12, offset: 24218},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 821, col: 17, offset: 24223},
								expr: &actionExpr{
									pos: position{line: 821, col: 18, offset: 24224},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 821, col: 18, offset: 24224},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 821, col: 18, offset: 24224},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 821, col: 22, offset: 24228},
												label: "n",
												expr: &ruleRefExpr{
													pos:    position{line: 821, col: 24, offset: 24230},
													offset: 284,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 824, col: 11, offset: 24308},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 832, col: 1, offset: 24546},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 24570},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 24570},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 833, col: 5, offset: 24570},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 833, col: 16, offset: 24581},
								expr: &actionExpr{
									pos: position{line: 834, col: 9, offset: 24591},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 834, col: 9, offset: 24591},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 834, col: 9, offset: 24591},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 834, col: 21, offset: 24603},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 834, col: 21, offset: 24603},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 834, col: 21, offset: 24603},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 834, col: 26, offset: 24608},
																expr: &charClassMatcher{
																	pos:        position{line: 834, col: 26, offset: 24608},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 834, col: 63, offset: 24645},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 24727},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 838, col: 10, offset: 24732},
								expr: &actionExpr{
									pos: position{line: 839, col: 9, offset: 24742},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 839, col: 9, offset: 24742},
										label: "span",
										expr: &ruleRefExpr{
											pos:    position{line: 839, col: 15, offset: 24748},
											offset: 136,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 5, offset: 24819},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 843, col: 21, offset: 24835},
								expr: &choiceExpr{
									pos: position{line: 844, col: 9, offset: 24845},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 844, col: 9, offset: 24845},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 844, col: 9, offset: 24845},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 845, col: 11, offset: 24913},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 845, col: 11, offset: 24913},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 846, col: 11, offset: 24982},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 846, col: 11, offset: 24982},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 25054},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 19, offset: 25068},
								expr: &choiceExpr{
									pos: position{line: 849, col: 9, offset: 25078},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 849, col: 9, offset: 25078},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 849, col: 9, offset: 25078},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 850, col: 11, offset: 25144},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 850, col: 11, offset: 25144},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 851, col: 11, offset: 25213},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 851, col: 11, offset: 25213},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 25283},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 853, col: 11, offset: 25289},
								expr: &choiceExpr{
									pos: position{line: 854, col: 9, offset: 25299},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 854, col: 9, offset: 25299},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 854, col: 9, offset: 25299},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 855, col: 11, offset: 25361},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 855, col: 11, offset: 25361},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 856, col: 11, offset: 25422},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 856, col: 11, offset: 25422},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 857, col: 11, offset: 25485},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 857, col: 11, offset: 25485},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 858, col: 11, offset: 25546},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 858, col: 11, offset: 25546},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 859, col: 11, offset: 25608},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 859, col: 11, offset: 25608},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 860, col: 11, offset: 25672},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 860, col: 11, offset: 25672},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 862, col: 6, offset: 25735},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 879, col: 1, offset: 26438},
			expr: &actionExpr{
				pos: position{line: 879, col: 13, offset: 26450},
				run: (*parser).callonURLScheme1,
				expr: &choiceExpr{
					pos: position{line: 879, col: 14, offset: 26451},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 879, col: 14, offset: 26451},
							val:        "https://",
							ignoreCase: false,
							want:       "\"https://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 27, offset: 26464},
							val:        "http://",
							ignoreCase: false,
							want:       "\"http://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 39, offset: 26476},
							val:        "ftp://",
							ignoreCase: false,
							want:       "\"ftp://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 50, offset: 26487},
							val:        "irc://",
							ignoreCase: false,
							want:       "\"irc://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 61, offset: 26498},
							val:        "mailto:",
							ignoreCase: false,
							want:       "\"mailto:\"",
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 883, col: 1, offset: 26549},
			expr: &actionExpr{
				pos: position{line: 883, col: 7, offset: 26555},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 883, col: 7, offset: 26555},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 883, col: 7, offset: 26555},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 14, offset: 26562},
								expr: &ruleRefExpr{
									pos:    position{line: 883, col: 15, offset: 26563},
									offset: 138,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 27, offset: 26575},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 883, col: 33, offset: 26581},
								offset: 141,
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 888, col: 1, offset: 26687},
			expr: &actionExpr{
				pos: position{line: 888, col: 11, offset: 26697},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 888, col: 11, offset: 26697},
					exprs: []any{
						&notExpr{
							pos: position{line: 888, col: 11, offset: 26697},
							expr: &litMatcher{
								pos:        position{line: 888, col: 12, offset: 26698},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 16, offset: 26702},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:    position{line: 888, col: 24, offset: 26710},
								offset: 138,
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 35, offset: 26721},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 888, col: 41, offset: 26727},
								offset: 141,
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 895, col: 1, offset: 26822},
			expr: &actionExpr{
				pos: position{line: 895, col: 8, offset: 26829},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 895, col: 8, offset: 26829},
					exprs: []any{
						&notExpr{
							pos: position{line: 895, col: 8, offset: 26829},
							expr: &litMatcher{
								pos:        position{line: 895, col: 9, offset: 26830},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 13, offset: 26834},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 895, col: 24, offset: 26845},
								expr: &ruleRefExpr{
									pos:    position{line: 895, col: 24, offset: 26845},
									offset: 142,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 899, col: 1, offset: 26916},
			expr: &choiceExpr{
				pos: position{line: 899, col: 16, offset: 26931},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 899, col: 16, offset: 26931},
						run: (*parser).callonPathElement2,
						expr: &oneOrMoreExpr{
							pos: position{line: 899, col: 16, offset: 26931},
							expr: &charClassMatcher{
								pos:        position{line: 899, col: 17, offset: 26932},
								val:        "[^\\r\\n{.<>!?,;[\\] ]",
								chars:      []rune{'\r', '\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 27011},
						run: (*parser).callonPathElement5,
						expr: &seqExpr{
							pos: position{line: 901, col: 6, offset: 27012},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 901, col: 6, offset: 27012},
									val:        "[.?!;,]",
									chars:      []rune{'.', '?', '!', ';', ','},
									ignoreCase: false,
									inverted:   false,
								},
								&andExpr{
									pos: position{line: 901, col: 14, offset: 27020},
									expr: &seqExpr{
										pos: position{line: 901, col: 16, offset: 27022},
										exprs: []any{
											&notExpr{
												pos: position{line: 901, col: 16, offset: 27022},
												expr: &ruleRefExpr{
													pos:    position{line: 901, col: 17, offset: 27023},
													offset: 303,
												},
											},
											&notExpr{
												pos: position{line: 901, col: 19, offset: 27025},
												expr: &ruleRefExpr{
													pos:    position{line: 901, col: 20, offset: 27026},
													offset: 289,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 903, col: 5, offset: 27095},
						offset: 41,
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 907, col: 1, offset: 27119},
			expr: &actionExpr{
				pos: position{line: 907, col: 9, offset: 27127},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 907, col: 9, offset: 27127},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 907, col: 9, offset: 27127},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 907, col: 15, offset: 27133},
								offset: 144,
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 26, offset: 27144},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 30, offset: 27148},
							label: "domain",
							expr: &ruleRefExpr{
								pos:    position{line: 907, col: 38, offset: 27156},
								offset: 145,
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 911, col: 1, offset: 27254},
			expr: &actionExpr{
				pos: position{line: 911, col: 13, offset: 27266},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 911, col: 13, offset: 27266},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 911, col: 13, offset: 27266},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 911, col: 19, offset: 27272},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 911, col: 19, offset: 27272},
									expr: &choiceExpr{
										pos: position{line: 911, col: 20, offset: 27273},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 911, col: 20, offset: 27273},
												offset: 288,
											},
											&charClassMatcher{
												pos:        position{line: 911, col: 35, offset: 27288},
												val:        "[!#$%&'*+-/=?^_`{|}~.]",
												chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:     []rune{'+', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 913, col: 4, offset: 27416},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 920, col: 1, offset: 27582},
			expr: &actionExpr{
				pos: position{line: 920, col: 15, offset: 27596},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 920, col: 15, offset: 27596},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 920, col: 15, offset: 27596},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 920, col: 23, offset: 27604},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 920, col: 24, offset: 27605},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 920, col: 24, offset: 27605},
											expr: &ruleRefExpr{
												pos:    position{line: 920, col: 25, offset: 27606},
												offset: 288,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 920, col: 40, offset: 27621},
											expr: &seqExpr{
												pos: position{line: 920, col: 41, offset: 27622},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 920, col: 41, offset: 27622},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 920, col: 45, offset: 27626},
														expr: &choiceExpr{
															pos: position{line: 920, col: 46, offset: 27627},
															alternatives: []any{
																&ruleRefExpr{
																	pos:    position{line: 920, col: 46, offset: 27627},
																	offset: 288,
																},
																&litMatcher{
																	pos:        position{line: 920, col: 61, offset: 27642},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 922, col: 4, offset: 27687},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 930, col: 1, offset: 27829},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 27843},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 27843},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 931, col: 5, offset: 27843},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 931, col: 12, offset: 27850},
								offset: 147,
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 5, offset: 27868},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 932, col: 11, offset: 27874},
								expr: &ruleRefExpr{
									pos:    position{line: 932, col: 12, offset: 27875},
									offset: 151,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 933, col: 5, offset: 27893},
							offset: 148,
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 937, col: 1, offset: 28051},
			expr: &actionExpr{
				pos: position{line: 937, col: 16, offset: 28066},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 937, col: 16, offset: 28066},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 937, col: 16, offset: 28066},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 937, col: 32, offset: 28082},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 937, col: 42, offset: 28092},
								offset: 150,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 937, col: 59, offset: 28109},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 937, col: 69, offset: 28119},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 944, col: 1, offset: 28296},
			expr: &seqExpr{
				pos: position{line: 944, col: 14, offset: 28309},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 944, col: 14, offset: 28309},
						offset: 291,
					},
					&labeledExpr{
						pos:   position{line: 944, col: 30, offset: 28325},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 944, col: 40, offset: 28335},
							offset: 150,
						},
					},
					&andExpr{
						pos: position{line: 944, col: 57, offset: 28352},
						expr: &ruleRefExpr{
							pos:    position{line: 944, col: 58, offset: 28353},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 944, col: 68, offset: 28363},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 953, col: 1, offset: 28623},
			expr: &actionExpr{
				pos: position{line: 953, col: 18, offset: 28640},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 953, col: 18, offset: 28640},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 953, col: 18, offset: 28640},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 953, col: 27, offset: 28649},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 953, col: 27, offset: 28649},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 953, col: 34, offset: 28656},
										expr: &litMatcher{
											pos:        position{line: 953, col: 34, offset: 28656},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 953, col: 40, offset: 28662},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 960, col: 1, offset: 28781},
			expr: &actionExpr{
				pos: position{line: 960, col: 20, offset: 28800},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 960, col: 20, offset: 28800},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 960, col: 20, offset: 28800},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 960, col: 29, offset: 28809},
								offset: 149,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 961, col: 5, offset: 28830},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 966, col: 1, offset: 28957},
			expr: &actionExpr{
				pos: position{line: 966, col: 15, offset: 28971},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 966, col: 16, offset: 28972},
					exprs: []any{
						&notExpr{
							pos: position{line: 966, col: 16, offset: 28972},
							expr: &ruleRefExpr{
								pos:    position{line: 966, col: 17, offset: 28973},
								offset: 150,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 966, col: 34, offset: 28990},
							offset: 290,
						},
						&labeledExpr{
							pos:   position{line: 966, col: 47, offset: 29003},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 966, col: 52, offset: 29008},
								offset: 297,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 966, col: 60, offset: 29016},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 970, col: 1, offset: 29066},
			expr: &actionExpr{
				pos: position{line: 971, col: 5, offset: 29077},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 971, col: 5, offset: 29077},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 971, col: 5, offset: 29077},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 971, col: 12, offset: 29084},
								offset: 153,
							},
						},
						&labeledExpr{
							pos:   position{line: 972, col: 5, offset: 29099},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 972, col: 11, offset: 29105},
								expr: &seqExpr{
									pos: position{line: 972, col: 12, offset: 29106},
									exprs: []any{
										&notExpr{
											pos: position{line: 972, col: 12, offset: 29106},
											expr: &ruleRefExpr{
												pos:    position{line: 972, col: 13, offset: 29107},
												offset: 156,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 972, col: 27, offset: 29121},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 973, col: 5, offset: 29135},
							offset: 154,
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 977, col: 1, offset: 29284},
			expr: &actionExpr{
				pos: position{line: 977, col: 13, offset: 29296},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 977, col: 13, offset: 29296},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 977, col: 13, offset: 29296},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 977, col: 23, offset: 29306},
								offset: 156,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 977, col: 37, offset: 29320},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 977, col: 47, offset: 29330},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 984, col: 1, offset: 29504},
			expr: &seqExpr{
				pos: position{line: 984, col: 11, offset: 29514},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 984, col: 11, offset: 29514},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 984, col: 21, offset: 29524},
							offset: 156,
						},
					},
					&andExpr{
						pos: position{line: 984, col: 35, offset: 29538},
						expr: &ruleRefExpr{
							pos:    position{line: 984, col: 36, offset: 29539},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 984, col: 46, offset: 29549},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 993, col: 1, offset: 29803},
			expr: &actionExpr{
				pos: position{line: 993, col: 14, offset: 29816},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 993, col: 14, offset: 29816},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 993, col: 23, offset: 29825},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 998, col: 1, offset: 29881},
			expr: &actionExpr{
				pos: position{line: 998, col: 17, offset: 29897},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 998, col: 17, offset: 29897},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 998, col: 17, offset: 29897},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 998, col: 26, offset: 29906},
								offset: 155,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 999, col: 5, offset: 29923},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1005, col: 1, offset: 30056},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 15, offset: 30070},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1005, col: 15, offset: 30070},
						offset: 158,
					},
					&ruleRefExpr{
						pos:    position{line: 1005, col: 34, offset: 30089},
						offset: 161,
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1007, col: 1, offset: 30108},
			expr: &actionExpr{
				pos: position{line: 1007, col: 20, offset: 30127},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1007, col: 20, offset: 30127},
					exprs: []any{
						&notExpr{
							pos: position{line: 1007, col: 20, offset: 30127},
							expr: &ruleRefExpr{
								pos:    position{line: 1007, col: 21, offset: 30128},
								offset: 304,
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 28, offset: 30135},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1007, col: 32, offset: 30139},
							expr: &notExpr{
								pos: position{line: 1007, col: 34, offset: 30141},
								expr: &litMatcher{
									pos:        position{line: 1007, col: 35, offset: 30142},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1007, col: 40, offset: 30147},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1007, col: 47, offset: 30154},
								offset: 159,
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 70, offset: 30177},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1007, col: 74, offset: 30181},
							expr: &litMatcher{
								pos:        position{line: 1007, col: 75, offset: 30182},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1007, col: 79, offset: 30186},
							expr: &notExpr{
								pos: position{line: 1007, col: 81, offset: 30188},
								expr: &ruleRefExpr{
									pos:    position{line: 1007, col: 82, offset: 30189},
									offset: 288,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1011, col: 1, offset: 30234},
			expr: &actionExpr{
				pos: position{line: 1011, col: 25, offset: 30258},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 25, offset: 30258},
					exprs: []any{
						&notExpr{
							pos: position{line: 1011, col: 25, offset: 30258},
							expr: &ruleRefExpr{
								pos:    position{line: 1011, col: 26, offset: 30259},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 28, offset: 30261},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1011, col: 34, offset: 30267},
								expr: &actionExpr{
									pos: position{line: 1011, col: 35, offset: 30268},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1011, col: 35, offset: 30268},
										exprs: []any{
											&notExpr{
												pos: position{line: 1011, col: 35, offset: 30268},
												expr: &ruleRefExpr{
													pos:    position{line: 1011, col: 36, offset: 30269},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 1011, col: 38, offset: 30271},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1011, col: 44, offset: 30277},
													expr: &ruleRefExpr{
														pos:    position{line: 1011, col: 45, offset: 30278},
														offset: 160,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1015, col: 1, offset: 30432},
			expr: &actionExpr{
				pos: position{line: 1015, col: 27, offset: 30458},
				run: (*parser).callonSingleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 27, offset: 30458},
					exprs: []any{
						&notExpr{
							pos: position{line: 1015, col: 27, offset: 30458},
							expr: &seqExpr{
								pos: position{line: 1015, col: 29, offset: 30460},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1015, col: 29, offset: 30460},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
									&notExpr{
										pos: position{line: 1015, col: 33, offset: 30464},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 34, offset: 30465},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1015, col: 39, offset: 30470},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1015, col: 48, offset: 30479},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1019, col: 1, offset: 30534},
			expr: &actionExpr{
				pos: position{line: 1019, col: 20, offset: 30553},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1019, col: 20, offset: 30553},
					exprs: []any{
						&notExpr{
							pos: position{line: 1019, col: 20, offset: 30553},
							expr: &ruleRefExpr{
								pos:    position{line: 1019, col: 21, offset: 30554},
								offset: 305,
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 34, offset: 30567},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1019, col: 39, offset: 30572},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1019, col: 46, offset: 30579},
								offset: 162,
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 69, offset: 30602},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1023, col: 1, offset: 30639},
			expr: &actionExpr{
				pos: position{line: 1023, col: 25, offset: 30663},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 25, offset: 30663},
					exprs: []any{
						&notExpr{
							pos: position{line: 1023, col: 25, offset: 30663},
							expr: &ruleRefExpr{
								pos:    position{line: 1023, col: 26, offset: 30664},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 28, offset: 30666},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1023, col: 34, offset: 30672},
								expr: &actionExpr{
									pos: position{line: 1023, col: 35, offset: 30673},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1023, col: 35, offset: 30673},
										exprs: []any{
											&notExpr{
												pos: position{line: 1023, col: 35, offset: 30673},
												expr: &ruleRefExpr{
													pos:    position{line: 1023, col: 36, offset: 30674},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 1023, col: 38, offset: 30676},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1023, col: 44, offset: 30682},
													expr: &ruleRefExpr{
														pos:    position{line: 1023, col: 45, offset: 30683},
														offset: 163,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1027, col: 1, offset: 30849},
			expr: &actionExpr{
				pos: position{line: 1027, col: 27, offset: 30875},
				run: (*parser).callonDoubleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 27, offset: 30875},
					exprs: []any{
						&notExpr{
							pos: position{line: 1027, col: 27, offset: 30875},
							expr: &litMatcher{
								pos:        position{line: 1027, col: 29, offset: 30877},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 35, offset: 30883},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1027, col: 44, offset: 30892},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1033, col: 1, offset: 30949},
			expr: &actionExpr{
				pos: position{line: 1034, col: 5, offset: 30963},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 5, offset: 30963},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1034, col: 5, offset: 30963},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1034, col: 12, offset: 30970},
								offset: 165,
							},
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 5, offset: 30988},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1035, col: 11, offset: 30994},
								expr: &seqExpr{
									pos: position{line: 1035, col: 12, offset: 30995},
									exprs: []any{
										&notExpr{
											pos: position{line: 1035, col: 12, offset: 30995},
											expr: &ruleRefExpr{
												pos:    position{line: 1035, col: 13, offset: 30996},
												offset: 168,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1035, col: 30, offset: 31013},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1036, col: 5, offset: 31027},
							offset: 166,
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1040, col: 1, offset: 31185},
			expr: &actionExpr{
				pos: position{line: 1040, col: 16, offset: 31200},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 16, offset: 31200},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1040, col: 16, offset: 31200},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1040, col: 26, offset: 31210},
								offset: 168,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1040, col: 43, offset: 31227},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 1040, col: 53, offset: 31237},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1047, col: 1, offset: 31422},
			expr: &seqExpr{
				pos: position{line: 1047, col: 14, offset: 31435},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1047, col: 14, offset: 31435},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1047, col: 24, offset: 31445},
							offset: 168,
						},
					},
					&andExpr{
						pos: position{line: 1047, col: 41, offset: 31462},
						expr: &ruleRefExpr{
							pos:    position{line: 1047, col: 42, offset: 31463},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 1047, col: 52, offset: 31473},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1056, col: 1, offset: 31741},
			expr: &actionExpr{
				pos: position{line: 1056, col: 17, offset: 31757},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1056, col: 17, offset: 31757},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1056, col: 17, offset: 31757},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1056, col: 26, offset: 31766},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1056, col: 26, offset: 31766},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1056, col: 33, offset: 31773},
										expr: &litMatcher{
											pos:        position{line: 1056, col: 33, offset: 31773},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1056, col: 39, offset: 31779},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1063, col: 1, offset: 31902},
			expr: &actionExpr{
				pos: position{line: 1063, col: 20, offset: 31921},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 20, offset: 31921},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1063, col: 20, offset: 31921},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1063, col: 29, offset: 31930},
								offset: 167,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1064, col: 5, offset: 31950},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1069, col: 1, offset: 32081},
			expr: &actionExpr{
				pos: position{line: 1069, col: 15, offset: 32095},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 16, offset: 32096},
					exprs: []any{
						&notExpr{
							pos: position{line: 1069, col: 16, offset: 32096},
							expr: &ruleRefExpr{
								pos:    position{line: 1069, col: 17, offset: 32097},
								offset: 168,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1069, col: 34, offset: 32114},
							offset: 290,
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 47, offset: 32127},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1069, col: 52, offset: 32132},
								offset: 297,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1069, col: 60, offset: 32140},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1075, col: 1, offset: 32188},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 32202},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 32202},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1076, col: 5, offset: 32202},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1076, col: 12, offset: 32209},
								offset: 171,
							},
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 5, offset: 32227},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1077, col: 11, offset: 32233},
								expr: &ruleRefExpr{
									pos:    position{line: 1077, col: 12, offset: 32234},
									offset: 175,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1078, col: 5, offset: 32252},
							offset: 172,
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1082, col: 1, offset: 32419},
			expr: &actionExpr{
				pos: position{line: 1082, col: 16, offset: 32434},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 16, offset: 32434},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1082, col: 16, offset: 32434},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 32, offset: 32450},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1082, col: 42, offset: 32460},
								offset: 174,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1082, col: 59, offset: 32477},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 1082, col: 69, offset: 32487},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1089, col: 1, offset: 32664},
			expr: &seqExpr{
				pos: position{line: 1089, col: 14, offset: 32677},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 1089, col: 14, offset: 32677},
						offset: 291,
					},
					&labeledExpr{
						pos:   position{line: 1089, col: 30, offset: 32693},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1089, col: 40, offset: 32703},
							offset: 174,
						},
					},
					&andExpr{
						pos: position{line: 1089, col: 57, offset: 32720},
						expr: &ruleRefExpr{
							pos:    position{line: 1089, col: 58, offset: 32721},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 1089, col: 68, offset: 32731},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1098, col: 1, offset: 32991},
			expr: &actionExpr{
				pos: position{line: 1098, col: 15, offset: 33005},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 15, offset: 33005},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1098, col: 15, offset: 33005},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1098, col: 21, offset: 33011},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1098, col: 21, offset: 33011},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1098, col: 28, offset: 33018},
										expr: &litMatcher{
											pos:        position{line: 1098, col: 28, offset: 33018},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1098, col: 34, offset: 33024},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1105, col: 1, offset: 33137},
			expr: &actionExpr{
				pos: position{line: 1105, col: 20, offset: 33156},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 20, offset: 33156},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1105, col: 20, offset: 33156},
							label: "dots",
							expr: &ruleRefExpr{
								pos:    position{line: 1105, col: 26, offset: 33162},
								offset: 173,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1106, col: 5, offset: 33180},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1111, col: 1, offset: 33304},
			expr: &actionExpr{
				pos: position{line: 1111, col: 15, offset: 33318},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 16, offset: 33319},
					exprs: []any{
						&notExpr{
							pos: position{line: 1111, col: 16, offset: 33319},
							expr: &ruleRefExpr{
								pos:    position{line: 1111, col: 17, offset: 33320},
								offset: 174,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1111, col: 34, offset: 33337},
							offset: 290,
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 47, offset: 33350},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1111, col: 52, offset: 33355},
								offset: 297,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1111, col: 60, offset: 33363},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1115, col: 1, offset: 33409},
			expr: &actionExpr{
				pos: position{line: 1116, col: 5, offset: 33423},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 5, offset: 33423},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1116, col: 5, offset: 33423},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1116, col: 12, offset: 33430},
								offset: 177,
							},
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 5, offset: 33448},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1117, col: 11, offset: 33454},
								expr: &seqExpr{
									pos: position{line: 1117, col: 12, offset: 33455},
									exprs: []any{
										&notExpr{
											pos: position{line: 1117, col: 12, offset: 33455},
											expr: &ruleRefExpr{
												pos:    position{line: 1117, col: 13, offset: 33456},
												offset: 180,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1117, col: 30, offset: 33473},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1118, col: 5, offset: 33487},
							offset: 178,
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1122, col: 1, offset: 33645},
			expr: &actionExpr{
				pos: position{line: 1122, col: 16, offset: 33660},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 16, offset: 33660},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1122, col: 16, offset: 33660},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1122, col: 26, offset: 33670},
								offset: 180,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1122, col: 43, offset: 33687},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 1122, col: 53, offset: 33697},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1129, col: 1, offset: 33874},
			expr: &seqExpr{
				pos: position{line: 1129, col: 14, offset: 33887},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1129, col: 14, offset: 33887},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1129, col: 24, offset: 33897},
							offset: 180,
						},
					},
					&andExpr{
						pos: position{line: 1129, col: 41, offset: 33914},
						expr: &ruleRefExpr{
							pos:    position{line: 1129, col: 42, offset: 33915},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 1129, col: 52, offset: 33925},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1138, col: 1, offset: 34185},
			expr: &actionExpr{
				pos: position{line: 1138, col: 20, offset: 34204},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 20, offset: 34204},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1138, col: 20, offset: 34204},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1138, col: 31, offset: 34215},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1138, col: 31, offset: 34215},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1138, col: 38, offset: 34222},
										expr: &litMatcher{
											pos:        position{line: 1138, col: 38, offset: 34222},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1138, col: 44, offset: 34228},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1145, col: 1, offset: 34351},
			expr: &actionExpr{
				pos: position{line: 1145, col: 20, offset: 34370},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 20, offset: 34370},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1145, col: 20, offset: 34370},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:    position{line: 1145, col: 31, offset: 34381},
								offset: 179,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1146, col: 5, offset: 34404},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1152, col: 1, offset: 34534},
			expr: &actionExpr{
				pos: position{line: 1152, col: 12, offset: 34545},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 12, offset: 34545},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1152, col: 12, offset: 34545},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1152, col: 20, offset: 34553},
								expr: &ruleRefExpr{
									pos:    position{line: 1152, col: 21, offset: 34554},
									offset: 182,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1152, col: 39, offset: 34572},
							offset: 289,
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1156, col: 1, offset: 34629},
			expr: &actionExpr{
				pos: position{line: 1156, col: 19, offset: 34647},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 19, offset: 34647},
					exprs: []any{
						&notExpr{
							pos: position{line: 1156, col: 19, offset: 34647},
							expr: &ruleRefExpr{
								pos:    position{line: 1156, col: 20, offset: 34648},
								offset: 289,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1156, col: 30, offset: 34658},
							offset: 291,
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 46, offset: 34674},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1156, col: 55, offset: 34683},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1156, col: 55, offset: 34683},
										offset: 185,
									},
									&ruleRefExpr{
										pos:    position{line: 1156, col: 68, offset: 34696},
										offset: 186,
									},
									&ruleRefExpr{
										pos:    position{line: 1156, col: 82, offset: 34710},
										offset: 187,
									},
									&ruleRefExpr{
										pos:    position{line: 1156, col: 96, offset: 34724},
										offset: 18,
									},
									&ruleRefExpr{
										pos:    position{line: 1156, col: 113, offset: 34741},
										offset: 22,
									},
									&ruleRefExpr{
										pos:    position{line: 1156, col: 130, offset: 34758},
										offset: 183,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1156, col: 144, offset: 34772},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1160, col: 1, offset: 34811},
			expr: &actionExpr{
				pos: position{line: 1160, col: 16, offset: 34826},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 16, offset: 34826},
					exprs: []any{
						&notExpr{
							pos: position{line: 1160, col: 16, offset: 34826},
							expr: &ruleRefExpr{
								pos:    position{line: 1160, col: 17, offset: 34827},
								offset: 263,
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 35, offset: 34845},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1160, col: 43, offset: 34853},
								expr: &ruleRefExpr{
									pos:    position{line: 1160, col: 43, offset: 34853},
									offset: 184,
								},
							},
						},
						&andExpr{
							pos: position{line: 1160, col: 64, offset: 34874},
							expr: &ruleRefExpr{
								pos:    position{line: 1160, col: 65, offset: 34875},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1164, col: 1, offset: 34962},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 34990},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 34990},
						run: (*parser).callonPreParseLineElement2,
						expr: &labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 34990},
							label: "arv",
							expr: &ruleRefExpr{
								pos:    position{line: 1165, col: 9, offset: 34994},
								offset: 41,
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 6, offset: 35056},
						run: (*parser).callonPreParseLineElement5,
						expr: &oneOrMoreExpr{
							pos: position{line: 1169, col: 6, offset: 35056},
							expr: &charClassMatcher{
								pos:        position{line: 1169, col: 6, offset: 35056},
								val:        "[^\\r\\n{]",
								chars:      []rune{'\r', '\n', '{'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 8, offset: 35137},
						run: (*parser).callonPreParseLineElement8,
						expr: &litMatcher{
							pos:        position{line: 1172, col: 8, offset: 35137},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1175, col: 1, offset: 35175},
			expr: &actionExpr{
				pos: position{line: 1175, col: 14, offset: 35188},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 14, offset: 35188},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1175, col: 14, offset: 35188},
							offset: 258,
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 29, offset: 35203},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1175, col: 41, offset: 35215},
								offset: 264,
							},
						},
						&litMatcher{
							pos:        position{line: 1175, col: 64, offset: 35238},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1175, col: 69, offset: 35243},
							offset: 298,
						},
						&ruleRefExpr{
							pos:    position{line: 1175, col: 80, offset: 35254},
							offset: 294,
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 90, offset: 35264},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1175, col: 96, offset: 35270},
								expr: &ruleRefExpr{
									pos:    position{line: 1175, col: 97, offset: 35271},
									offset: 182,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1175, col: 116, offset: 35290},
							offset: 262,
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1180, col: 1, offset: 35478},
			expr: &actionExpr{
				pos: position{line: 1180, col: 15, offset: 35492},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 15, offset: 35492},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1180, col: 15, offset: 35492},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 26, offset: 35503},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1180, col: 38, offset: 35515},
								offset: 264,
							},
						},
						&litMatcher{
							pos:        position{line: 1180, col: 61, offset: 35538},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1180, col: 66, offset: 35543},
							offset: 298,
						},
						&ruleRefExpr{
							pos:    position{line: 1180, col: 77, offset: 35554},
							offset: 294,
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 87, offset: 35564},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1180, col: 93, offset: 35570},
								expr: &ruleRefExpr{
									pos:    position{line: 1180, col: 94, offset: 35571},
									offset: 182,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1180, col: 113, offset: 35590},
							offset: 262,
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1185, col: 1, offset: 35780},
			expr: &actionExpr{
				pos: position{line: 1185, col: 15, offset: 35794},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 15, offset: 35794},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1185, col: 15, offset: 35794},
							offset: 269,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 31, offset: 35810},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1185, col: 35, offset: 35814},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 45, offset: 35824},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1185, col: 51, offset: 35830},
								offset: 270,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1185, col: 64, offset: 35843},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 75, offset: 35854},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1185, col: 84, offset: 35863},
								offset: 271,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1185, col: 100, offset: 35879},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 110, offset: 35889},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1185, col: 117, offset: 35896},
								offset: 270,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1185, col: 130, offset: 35909},
							offset: 298,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 140, offset: 35919},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1185, col: 144, offset: 35923},
							offset: 298,
						},
						&ruleRefExpr{
							pos:    position{line: 1185, col: 155, offset: 35934},
							offset: 294,
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 165, offset: 35944},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1185, col: 171, offset: 35950},
								expr: &ruleRefExpr{
									pos:    position{line: 1185, col: 172, offset: 35951},
									offset: 182,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1185, col: 191, offset: 35970},
							offset: 262,
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1192, col: 1, offset: 36191},
			expr: &actionExpr{
				pos: position{line: 1193, col: 5, offset: 36203},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 5, offset: 36203},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1193, col: 5, offset: 36203},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1193, col: 12, offset: 36210},
								offset: 189,
							},
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 5, offset: 36226},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1194, col: 11, offset: 36232},
								expr: &seqExpr{
									pos: position{line: 1194, col: 12, offset: 36233},
									exprs: []any{
										&notExpr{
											pos: position{line: 1194, col: 12, offset: 36233},
											expr: &ruleRefExpr{
												pos:    position{line: 1194, col: 13, offset: 36234},
												offset: 192,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1194, col: 28, offset: 36249},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1195, col: 5, offset: 36263},
							offset: 190,
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1199, col: 1, offset: 36415},
			expr: &actionExpr{
				pos: position{line: 1199, col: 14, offset: 36428},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 14, offset: 36428},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1199, col: 14, offset: 36428},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1199, col: 24, offset: 36438},
								offset: 192,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1199, col: 39, offset: 36453},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 1199, col: 49, offset: 36463},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1206, col: 1, offset: 36638},
			expr: &seqExpr{
				pos: position{line: 1206, col: 12, offset: 36649},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1206, col: 12, offset: 36649},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1206, col: 22, offset: 36659},
							offset: 192,
						},
					},
					&andExpr{
						pos: position{line: 1206, col: 37, offset: 36674},
						expr: &ruleRefExpr{
							pos:    position{line: 1206, col: 38, offset: 36675},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 1206, col: 48, offset: 36685},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1215, col: 1, offset: 36937},
			expr: &actionExpr{
				pos: position{line: 1215, col: 19, offset: 36955},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 19, offset: 36955},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1215, col: 19, offset: 36955},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1215, col: 31, offset: 36967},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1215, col: 31, offset: 36967},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1215, col: 38, offset: 36974},
										expr: &litMatcher{
											pos:        position{line: 1215, col: 38, offset: 36974},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1215, col: 44, offset: 36980},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1222, col: 1, offset: 37105},
			expr: &actionExpr{
				pos: position{line: 1222, col: 18, offset: 37122},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 18, offset: 37122},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1222, col: 18, offset: 37122},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:    position{line: 1222, col: 30, offset: 37134},
								offset: 191,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1223, col: 5, offset: 37156},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1229, col: 1, offset: 37285},
			expr: &actionExpr{
				pos: position{line: 1229, col: 17, offset: 37301},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 17, offset: 37301},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1229, col: 17, offset: 37301},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1229, col: 22, offset: 37306},
								expr: &ruleRefExpr{
									pos:    position{line: 1229, col: 22, offset: 37306},
									offset: 77,
								},
							},
						},
						&andExpr{
							pos: position{line: 1229, col: 37, offset: 37321},
							expr: &ruleRefExpr{
								pos:    position{line: 1229, col: 38, offset: 37322},
								offset: 294,
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 48, offset: 37332},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1229, col: 54, offset: 37338},
								expr: &ruleRefExpr{
									pos:    position{line: 1229, col: 55, offset: 37339},
									offset: 197,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 70, offset: 37354},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1229, col: 85, offset: 37369},
								expr: &ruleRefExpr{
									pos:    position{line: 1229, col: 86, offset: 37370},
									offset: 198,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlock",
			pos:  position{line: 1240, col: 1, offset: 37602},
			expr: &actionExpr{
				pos: position{line: 1240, col: 17, offset: 37618},
				run: (*parser).callonAttachedBlock1,
				expr: &seqExpr{
					pos: position{line: 1240, col: 17, offset: 37618},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1240, col: 17, offset: 37618},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1240, col: 26, offset: 37627},
								offset: 195,
							},
						},
						&andExpr{
							pos: position{line: 1240, col: 48, offset: 37649},
							expr: &ruleRefExpr{
								pos:    position{line: 1240, col: 49, offset: 37650},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1244, col: 1, offset: 37689},
			expr: &actionExpr{
				pos: position{line: 1244, col: 24, offset: 37712},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 24, offset: 37712},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1244, col: 24, offset: 37712},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1244, col: 28, offset: 37716},
							offset: 298,
						},
						&ruleRefExpr{
							pos:    position{line: 1244, col: 38, offset: 37726},
							offset: 282,
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 46, offset: 37734},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1244, col: 53, offset: 37741},
								offset: 3,
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1248, col: 1, offset: 37829},
			expr: &actionExpr{
				pos: position{line: 1248, col: 20, offset: 37848},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 20, offset: 37848},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1248, col: 20, offset: 37848},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1248, col: 24, offset: 37852},
							offset: 298,
						},
						&ruleRefExpr{
							pos:    position{line: 1248, col: 34, offset: 37862},
							offset: 282,
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 42, offset: 37870},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1248, col: 48, offset: 37876},
								offset: 2,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1252, col: 1, offset: 37972},
			expr: &actionExpr{
				pos: position{line: 1252, col: 16, offset: 37987},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 16, offset: 37987},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1252, col: 16, offset: 37987},
							offset: 294,
						},
						&notExpr{
							pos: position{line: 1252, col: 26, offset: 37997},
							expr: &ruleRefExpr{
								pos:    position{line: 1252, col: 27, offset: 37998},
								offset: 228,
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 45, offset: 38016},
							expr: &ruleRefExpr{
								pos:    position{line: 1252, col: 46, offset: 38017},
								offset: 230,
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 66, offset: 38037},
							expr: &ruleRefExpr{
								pos:    position{line: 1252, col: 67, offset: 38038},
								offset: 14,
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 84, offset: 38055},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1252, col: 92, offset: 38063},
								expr: &ruleRefExpr{
									pos:    position{line: 1252, col: 92, offset: 38063},
									offset: 77,
								},
							},
						},
						&andExpr{
							pos: position{line: 1252, col: 107, offset: 38078},
							expr: &ruleRefExpr{
								pos:    position{line: 1252, col: 108, offset: 38079},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1256, col: 1, offset: 38146},
			expr: &actionExpr{
				pos: position{line: 1256, col: 18, offset: 38163},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 18, offset: 38163},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1256, col: 18, offset: 38163},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1256, col: 25, offset: 38170},
								expr: &ruleRefExpr{
									pos:    position{line: 1256, col: 26, offset: 38171},
									offset: 195,
								},
							},
						},
						&andExpr{
							pos: position{line: 1256, col: 49, offset: 38194},
							expr: &ruleRefExpr{
								pos:    position{line: 1256, col: 50, offset: 38195},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1261, col: 1, offset: 38234},
			expr: &actionExpr{
				pos: position{line: 1261, col: 17, offset: 38250},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 17, offset: 38250},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1261, col: 18, offset: 38251},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1261, col: 18, offset: 38251},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1261, col: 26, offset: 38259},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 26, offset: 38259},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 30, offset: 38263},
											expr: &ruleRefExpr{
												pos:    position{line: 1261, col: 30, offset: 38263},
												offset: 303,
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 33, offset: 38266},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 37, offset: 38270},
											expr: &ruleRefExpr{
												pos:    position{line: 1261, col: 37, offset: 38270},
												offset: 303,
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 40, offset: 38273},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 46, offset: 38279},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 46, offset: 38279},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 50, offset: 38283},
											expr: &ruleRefExpr{
												pos:    position{line: 1261, col: 50, offset: 38283},
												offset: 303,
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 53, offset: 38286},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 57, offset: 38290},
											expr: &ruleRefExpr{
												pos:    position{line: 1261, col: 57, offset: 38290},
												offset: 303,
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 60, offset: 38293},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 66, offset: 38299},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 66, offset: 38299},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 70, offset: 38303},
											expr: &ruleRefExpr{
												pos:    position{line: 1261, col: 70, offset: 38303},
												offset: 303,
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 73, offset: 38306},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 77, offset: 38310},
											expr: &ruleRefExpr{
												pos:    position{line: 1261, col: 77, offset: 38310},
												offset: 303,
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 80, offset: 38313},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1261, col: 85, offset: 38318},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 1261, col: 95, offset: 38328},
							expr: &ruleRefExpr{
								pos:    position{line: 1261, col: 96, offset: 38329},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1266, col: 1, offset: 38400},
			expr: &actionExpr{
				pos: position{line: 1266, col: 13, offset: 38412},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 13, offset: 38412},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1266, col: 14, offset: 38413},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1266, col: 21, offset: 38420},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 1266, col: 31, offset: 38430},
							expr: &ruleRefExpr{
								pos:    position{line: 1266, col: 32, offset: 38431},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1271, col: 1, offset: 38498},
			expr: &actionExpr{
				pos: position{line: 1272, col: 5, offset: 38511},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 5, offset: 38511},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1272, col: 5, offset: 38511},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1272, col: 12, offset: 38518},
								offset: 202,
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 5, offset: 38535},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1273, col: 11, offset: 38541},
								expr: &seqExpr{
									pos: position{line: 1273, col: 12, offset: 38542},
									exprs: []any{
										&notExpr{
											pos: position{line: 1273, col: 12, offset: 38542},
											expr: &ruleRefExpr{
												pos:    position{line: 1273, col: 13, offset: 38543},
												offset: 205,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1273, col: 29, offset: 38559},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1274, col: 5, offset: 38573},
							offset: 203,
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1278, col: 1, offset: 38728},
			expr: &actionExpr{
				pos: position{line: 1278, col: 15, offset: 38742},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 15, offset: 38742},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1278, col: 15, offset: 38742},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1278, col: 25, offset: 38752},
								offset: 205,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1278, col: 41, offset: 38768},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 1278, col: 51, offset: 38778},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1285, col: 1, offset: 38962},
			expr: &seqExpr{
				pos: position{line: 1285, col: 13, offset: 38974},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1285, col: 13, offset: 38974},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1285, col: 23, offset: 38984},
							offset: 205,
						},
					},
					&andExpr{
						pos: position{line: 1285, col: 39, offset: 39000},
						expr: &ruleRefExpr{
							pos:    position{line: 1285, col: 40, offset: 39001},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 1285, col: 50, offset: 39011},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1294, col: 1, offset: 39277},
			expr: &actionExpr{
				pos: position{line: 1294, col: 19, offset: 39295},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 19, offset: 39295},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1294, col: 19, offset: 39295},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1294, col: 30, offset: 39306},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1294, col: 30, offset: 39306},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1294, col: 36, offset: 39312},
										expr: &litMatcher{
											pos:        position{line: 1294, col: 36, offset: 39312},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1294, col: 42, offset: 39318},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1301, col: 1, offset: 39445},
			expr: &actionExpr{
				pos: position{line: 1301, col: 19, offset: 39463},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 19, offset: 39463},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1301, col: 19, offset: 39463},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1301, col: 28, offset: 39472},
								offset: 204,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1302, col: 5, offset: 39494},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1307, col: 1, offset: 39624},
			expr: &actionExpr{
				pos: position{line: 1307, col: 14, offset: 39637},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 15, offset: 39638},
					exprs: []any{
						&notExpr{
							pos: position{line: 1307, col: 15, offset: 39638},
							expr: &ruleRefExpr{
								pos:    position{line: 1307, col: 16, offset: 39639},
								offset: 205,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1307, col: 32, offset: 39655},
							offset: 290,
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 45, offset: 39668},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1307, col: 50, offset: 39673},
								offset: 297,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1307, col: 58, offset: 39681},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1313, col: 1, offset: 39729},
			expr: &actionExpr{
				pos: position{line: 1314, col: 5, offset: 39740},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 5, offset: 39740},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1314, col: 5, offset: 39740},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1314, col: 12, offset: 39747},
								offset: 208,
							},
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 5, offset: 39762},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1315, col: 11, offset: 39768},
								expr: &ruleRefExpr{
									pos:    position{line: 1315, col: 12, offset: 39769},
									offset: 212,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1316, col: 5, offset: 39784},
							offset: 209,
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1320, col: 1, offset: 39943},
			expr: &actionExpr{
				pos: position{line: 1320, col: 13, offset: 39955},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 13, offset: 39955},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1320, col: 13, offset: 39955},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1320, col: 23, offset: 39965},
								offset: 211,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1320, col: 37, offset: 39979},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 1320, col: 47, offset: 39989},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1327, col: 1, offset: 40163},
			expr: &seqExpr{
				pos: position{line: 1327, col: 11, offset: 40173},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1327, col: 11, offset: 40173},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1327, col: 21, offset: 40183},
							offset: 211,
						},
					},
					&andExpr{
						pos: position{line: 1327, col: 35, offset: 40197},
						expr: &ruleRefExpr{
							pos:    position{line: 1327, col: 36, offset: 40198},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 1327, col: 46, offset: 40208},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1336, col: 1, offset: 40462},
			expr: &actionExpr{
				pos: position{line: 1336, col: 14, offset: 40475},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 14, offset: 40475},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1336, col: 14, offset: 40475},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1336, col: 22, offset: 40483},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1336, col: 22, offset: 40483},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1336, col: 29, offset: 40490},
										expr: &litMatcher{
											pos:        position{line: 1336, col: 29, offset: 40490},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1336, col: 35, offset: 40496},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1343, col: 1, offset: 40613},
			expr: &actionExpr{
				pos: position{line: 1343, col: 17, offset: 40629},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 17, offset: 40629},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1343, col: 17, offset: 40629},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:    position{line: 1343, col: 25, offset: 40637},
								offset: 210,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1344, col: 5, offset: 40654},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1349, col: 1, offset: 40777},
			expr: &actionExpr{
				pos: position{line: 1349, col: 12, offset: 40788},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 13, offset: 40789},
					exprs: []any{
						&notExpr{
							pos: position{line: 1349, col: 13, offset: 40789},
							expr: &ruleRefExpr{
								pos:    position{line: 1349, col: 14, offset: 40790},
								offset: 211,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1349, col: 28, offset: 40804},
							offset: 290,
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 41, offset: 40817},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1349, col: 46, offset: 40822},
								offset: 297,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1349, col: 54, offset: 40830},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1357, col: 1, offset: 40880},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 18, offset: 40897},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1357, col: 18, offset: 40897},
						offset: 214,
					},
					&ruleRefExpr{
						pos:    position{line: 1357, col: 43, offset: 40922},
						offset: 218,
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1359, col: 1, offset: 40946},
			expr: &actionExpr{
				pos: position{line: 1359, col: 26, offset: 40971},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1359, col: 26, offset: 40971},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1359, col: 26, offset: 40971},
							offset: 215,
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 46, offset: 40991},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 1359, col: 50, offset: 40995},
								offset: 216,
							},
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 68, offset: 41013},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1359, col: 74, offset: 41019},
								expr: &actionExpr{
									pos: position{line: 1359, col: 75, offset: 41020},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1359, col: 75, offset: 41020},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 1359, col: 75, offset: 41020},
												offset: 298,
											},
											&litMatcher{
												pos:        position{line: 1359, col: 85, offset: 41030},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1359, col: 89, offset: 41034},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1359, col: 96, offset: 41041},
													exprs: []any{
														&ruleRefExpr{
															pos:    position{line: 1359, col: 96, offset: 41041},
															offset: 298,
														},
														&ruleRefExpr{
															pos:    position{line: 1359, col: 106, offset: 41051},
															offset: 217,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1359, col: 150, offset: 41095},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1367, col: 1, offset: 41299},
			expr: &litMatcher{
				pos:        position{line: 1367, col: 23, offset: 41321},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1369, col: 1, offset: 41328},
			expr: &actionExpr{
				pos: position{line: 1369, col: 21, offset: 41348},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 21, offset: 41348},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1369, col: 22, offset: 41349},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 1369, col: 22, offset: 41349},
									offset: 287,
								},
								&charClassMatcher{
									pos:        position{line: 1369, col: 30, offset: 41357},
									val:        "[:_]",
									chars:      []rune{':', '_'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1369, col: 36, offset: 41363},
							expr: &charClassMatcher{
								pos:        position{line: 1369, col: 36, offset: 41363},
								val:        "[\\p{L}\\p{N} _:.-]",
								chars:      []rune{' ', '_', ':', '.', '-'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1374, col: 1, offset: 41515},
			expr: &oneOrMoreExpr{
				pos: position{line: 1374, col: 23, offset: 41537},
				expr: &choiceExpr{
					pos: position{line: 1375, col: 5, offset: 41543},
					alternatives: []any{
						&actionExpr{
							pos: position{line: 1375, col: 6, offset: 41544},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &oneOrMoreExpr{
								pos: position{line: 1375, col: 6, offset: 41544},
								expr: &charClassMatcher{
									pos:        position{line: 1375, col: 6, offset: 41544},
									val:        "[^<>{[\\]]",
									chars:      []rune{'<', '>', '{', '[', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&actionExpr{
							pos: position{line: 1378, col: 7, offset: 41625},
							run: (*parser).callonCrossReferenceLabel6,
							expr: &labeledExpr{
								pos:   position{line: 1378, col: 7, offset: 41625},
								label: "arv",
								expr: &ruleRefExpr{
									pos:    position{line: 1378, col: 11, offset: 41629},
									offset: 41,
								},
							},
						},
						&actionExpr{
							pos: position{line: 1381, col: 8, offset: 41687},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1381, col: 8, offset: 41687},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentCrossReference",
			pos:  position{line: 1384, col: 1, offset: 41726},
			expr: &actionExpr{
				pos: position{line: 1384, col: 26, offset: 41751},
				run: (*parser).callonDocumentCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 26, offset: 41751},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1384, col: 26, offset: 41751},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 34, offset: 41759},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 1384, col: 40, offset: 41765},
								offset: 141,
							},
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 46, offset: 41771},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1384, col: 58, offset: 41783},
								offset: 39,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1391, col: 1, offset: 41949},
			expr: &actionExpr{
				pos: position{line: 1391, col: 18, offset: 41966},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 18, offset: 41966},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1391, col: 18, offset: 41966},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1391, col: 28, offset: 41976},
								expr: &litMatcher{
									pos:        position{line: 1391, col: 28, offset: 41976},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 33, offset: 41981},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 42, offset: 41990},
								expr: &ruleRefExpr{
									pos:    position{line: 1391, col: 42, offset: 41990},
									offset: 220,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 66, offset: 42014},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 71, offset: 42019},
								expr: &ruleRefExpr{
									pos:    position{line: 1391, col: 72, offset: 42020},
									offset: 221,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 93, offset: 42041},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 98, offset: 42046},
								expr: &ruleRefExpr{
									pos:    position{line: 1391, col: 99, offset: 42047},
									offset: 222,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1391, col: 120, offset: 42068},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1398, col: 1, offset: 42192},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 5, offset: 42223},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 42223},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1400, col: 7, offset: 42234},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1401, col: 8, offset: 42246},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1401, col: 8, offset: 42246},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1401, col: 12, offset: 42250},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1401, col: 21, offset: 42259},
									expr: &litMatcher{
										pos:        position{line: 1401, col: 21, offset: 42259},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1401, col: 26, offset: 42264},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1404, col: 1, offset: 42310},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 5, offset: 42337},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 42337},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1406, col: 7, offset: 42348},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1407, col: 8, offset: 42360},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1407, col: 8, offset: 42360},
								expr: &litMatcher{
									pos:        position{line: 1407, col: 8, offset: 42360},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1407, col: 13, offset: 42365},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1407, col: 18, offset: 42370},
									expr: &litMatcher{
										pos:        position{line: 1407, col: 18, offset: 42370},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1407, col: 23, offset: 42375},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1410, col: 1, offset: 42417},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 42444},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1411, col: 5, offset: 42444},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1412, col: 7, offset: 42455},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1413, col: 8, offset: 42467},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1413, col: 8, offset: 42467},
								expr: &litMatcher{
									pos:        position{line: 1413, col: 8, offset: 42467},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1413, col: 13, offset: 42472},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1413, col: 18, offset: 42477},
									expr: &litMatcher{
										pos:        position{line: 1413, col: 18, offset: 42477},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1413, col: 23, offset: 42482},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1416, col: 1, offset: 42524},
			expr: &actionExpr{
				pos: position{line: 1416, col: 18, offset: 42541},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1416, col: 18, offset: 42541},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1416, col: 18, offset: 42541},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1416, col: 28, offset: 42551},
								expr: &litMatcher{
									pos:        position{line: 1416, col: 28, offset: 42551},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 33, offset: 42556},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 42, offset: 42565},
								expr: &ruleRefExpr{
									pos:    position{line: 1416, col: 42, offset: 42565},
									offset: 224,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 66, offset: 42589},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 71, offset: 42594},
								expr: &ruleRefExpr{
									pos:    position{line: 1416, col: 72, offset: 42595},
									offset: 225,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 93, offset: 42616},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 98, offset: 42621},
								expr: &ruleRefExpr{
									pos:    position{line: 1416, col: 99, offset: 42622},
									offset: 226,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1416, col: 120, offset: 42643},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1423, col: 1, offset: 42767},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 5, offset: 42798},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 42798},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1425, col: 7, offset: 42809},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1426, col: 8, offset: 42821},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1426, col: 8, offset: 42821},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1426, col: 12, offset: 42825},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1426, col: 21, offset: 42834},
									expr: &litMatcher{
										pos:        position{line: 1426, col: 21, offset: 42834},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1426, col: 26, offset: 42839},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1429, col: 1, offset: 42885},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 5, offset: 42912},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1430, col: 5, offset: 42912},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1431, col: 7, offset: 42923},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1432, col: 8, offset: 42935},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1432, col: 8, offset: 42935},
								expr: &litMatcher{
									pos:        position{line: 1432, col: 8, offset: 42935},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1432, col: 13, offset: 42940},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1432, col: 18, offset: 42945},
									expr: &litMatcher{
										pos:        position{line: 1432, col: 18, offset: 42945},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1432, col: 23, offset: 42950},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1435, col: 1, offset: 42992},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 5, offset: 43019},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1436, col: 5, offset: 43019},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1437, col: 7, offset: 43030},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1438, col: 8, offset: 43042},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1438, col: 8, offset: 43042},
								expr: &litMatcher{
									pos:        position{line: 1438, col: 8, offset: 43042},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1438, col: 13, offset: 43047},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1438, col: 18, offset: 43052},
									expr: &litMatcher{
										pos:        position{line: 1438, col: 18, offset: 43052},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1438, col: 23, offset: 43057},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1443, col: 1, offset: 43101},
			expr: &actionExpr{
				pos: position{line: 1443, col: 19, offset: 43119},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 19, offset: 43119},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1443, col: 19, offset: 43119},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1443, col: 27, offset: 43127},
								offset: 228,
							},
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 47, offset: 43147},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1443, col: 54, offset: 43154},
								offset: 193,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1449, col: 1, offset: 43343},
			expr: &actionExpr{
				pos: position{line: 1449, col: 21, offset: 43363},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1449, col: 21, offset: 43363},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1449, col: 21, offset: 43363},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1449, col: 29, offset: 43371},
								offset: 298,
							},
						},
						&labeledExpr{
							pos:   position{line: 1449, col: 40, offset: 43382},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1449, col: 48, offset: 43390},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1449, col: 48, offset: 43390},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1449, col: 48, offset: 43390},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1449, col: 48, offset: 43390},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1449, col: 57, offset: 43399},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1449, col: 58, offset: 43400},
															expr: &litMatcher{
																pos:        position{line: 1449, col: 58, offset: 43400},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1451, col: 4, offset: 43446},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1457, col: 3, offset: 43540},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1457, col: 3, offset: 43540},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1457, col: 3, offset: 43540},
													expr: &charClassMatcher{
														pos:        position{line: 1457, col: 3, offset: 43540},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1457, col: 10, offset: 43547},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1458, col: 3, offset: 43584},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1458, col: 3, offset: 43584},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1458, col: 3, offset: 43584},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1458, col: 9, offset: 43590},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1459, col: 3, offset: 43627},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1459, col: 3, offset: 43627},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1459, col: 3, offset: 43627},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1459, col: 9, offset: 43633},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1460, col: 3, offset: 43670},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1460, col: 3, offset: 43670},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1460, col: 3, offset: 43670},
													offset: 223,
												},
												&litMatcher{
													pos:        position{line: 1460, col: 18, offset: 43685},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1461, col: 3, offset: 43722},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1461, col: 3, offset: 43722},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1461, col: 3, offset: 43722},
													offset: 219,
												},
												&litMatcher{
													pos:        position{line: 1461, col: 18, offset: 43737},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1463, col: 1, offset: 43774},
							offset: 302,
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1471, col: 1, offset: 43865},
			expr: &actionExpr{
				pos: position{line: 1471, col: 21, offset: 43885},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 21, offset: 43885},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1471, col: 21, offset: 43885},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1471, col: 29, offset: 43893},
								offset: 230,
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 50, offset: 43914},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1471, col: 60, offset: 43924},
								expr: &ruleRefExpr{
									pos:    position{line: 1471, col: 61, offset: 43925},
									offset: 231,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 73, offset: 43937},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1471, col: 80, offset: 43944},
								offset: 193,
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1478, col: 1, offset: 44183},
			expr: &actionExpr{
				pos: position{line: 1478, col: 23, offset: 44205},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 23, offset: 44205},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1478, col: 23, offset: 44205},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1478, col: 31, offset: 44213},
								offset: 298,
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 42, offset: 44224},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1478, col: 50, offset: 44232},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1478, col: 51, offset: 44233},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 51, offset: 44233},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 51, offset: 44233},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 58, offset: 44240},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 58, offset: 44240},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1480, col: 4, offset: 44282},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:    position{line: 1483, col: 1, offset: 44330},
							offset: 302,
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1489, col: 1, offset: 44415},
			expr: &actionExpr{
				pos: position{line: 1489, col: 13, offset: 44427},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 13, offset: 44427},
					exprs: []any{
						&andExpr{
							pos: position{line: 1489, col: 13, offset: 44427},
							expr: &litMatcher{
								pos:        position{line: 1489, col: 14, offset: 44428},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 1, offset: 44433},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1491, col: 7, offset: 44451},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1491, col: 7, offset: 44451},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1491, col: 7, offset: 44451},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1492, col: 7, offset: 44508},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1492, col: 7, offset: 44508},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1493, col: 7, offset: 44563},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1493, col: 7, offset: 44563},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1494, col: 7, offset: 44617},
							offset: 302,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1499, col: 1, offset: 44660},
			expr: &actionExpr{
				pos: position{line: 1499, col: 23, offset: 44682},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 23, offset: 44682},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1499, col: 23, offset: 44682},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1499, col: 36, offset: 44695},
								expr: &ruleRefExpr{
									pos:    position{line: 1499, col: 37, offset: 44696},
									offset: 73,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 55, offset: 44714},
							label: "term",
							expr: &ruleRefExpr{
								pos:    position{line: 1499, col: 61, offset: 44720},
								offset: 233,
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 82, offset: 44741},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1499, col: 90, offset: 44749},
								offset: 234,
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 113, offset: 44772},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1499, col: 124, offset: 44783},
								expr: &choiceExpr{
									pos: position{line: 1499, col: 125, offset: 44784},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1499, col: 125, offset: 44784},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:    position{line: 1499, col: 125, offset: 44784},
												offset: 303,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1499, col: 180, offset: 44839},
											offset: 282,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 190, offset: 44849},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1499, col: 197, offset: 44856},
								offset: 235,
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1510, col: 1, offset: 45368},
			expr: &actionExpr{
				pos: position{line: 1510, col: 23, offset: 45390},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1510, col: 23, offset: 45390},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1510, col: 28, offset: 45395},
						expr: &seqExpr{
							pos: position{line: 1510, col: 29, offset: 45396},
							exprs: []any{
								&notExpr{
									pos: position{line: 1510, col: 29, offset: 45396},
									expr: &ruleRefExpr{
										pos:    position{line: 1510, col: 30, offset: 45397},
										offset: 234,
									},
								},
								&notExpr{
									pos: position{line: 1510, col: 52, offset: 45419},
									expr: &ruleRefExpr{
										pos:    position{line: 1510, col: 53, offset: 45420},
										offset: 294,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 1510, col: 63, offset: 45430},
									offset: 77,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1514, col: 1, offset: 45486},
			expr: &actionExpr{
				pos: position{line: 1514, col: 25, offset: 45510},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 25, offset: 45510},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1514, col: 25, offset: 45510},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 35, offset: 45520},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1514, col: 43, offset: 45528},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1514, col: 43, offset: 45528},
									expr: &choiceExpr{
										pos: position{line: 1514, col: 44, offset: 45529},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1514, col: 44, offset: 45529},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1514, col: 50, offset: 45535},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1516, col: 4, offset: 45577},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:    position{line: 1523, col: 1, offset: 45704},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1528, col: 1, offset: 45751},
			expr: &actionExpr{
				pos: position{line: 1528, col: 28, offset: 45778},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 28, offset: 45778},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1528, col: 28, offset: 45778},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1528, col: 34, offset: 45784},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1528, col: 34, offset: 45784},
										expr: &ruleRefExpr{
											pos:    position{line: 1528, col: 34, offset: 45784},
											offset: 77,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1528, col: 51, offset: 45801},
										offset: 2,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 65, offset: 45815},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1528, col: 80, offset: 45830},
								expr: &ruleRefExpr{
									pos:    position{line: 1528, col: 81, offset: 45831},
									offset: 198,
								},
							},
						},
						&andExpr{
							pos: position{line: 1528, col: 99, offset: 45849},
							expr: &ruleRefExpr{
								pos:    position{line: 1528, col: 100, offset: 45850},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1537, col: 1, offset: 46011},
			expr: &actionExpr{
				pos: position{line: 1537, col: 21, offset: 46031},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 21, offset: 46031},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1537, col: 21, offset: 46031},
							offset: 237,
						},
						&notExpr{
							pos: position{line: 1537, col: 48, offset: 46058},
							expr: &litMatcher{
								pos:        position{line: 1537, col: 49, offset: 46059},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 54, offset: 46064},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 1537, col: 63, offset: 46073},
								offset: 238,
							},
						},
						&andExpr{
							pos: position{line: 1537, col: 89, offset: 46099},
							expr: &ruleRefExpr{
								pos:    position{line: 1537, col: 90, offset: 46100},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1541, col: 1, offset: 46190},
			expr: &actionExpr{
				pos: position{line: 1541, col: 30, offset: 46219},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1541, col: 30, offset: 46219},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1545, col: 1, offset: 46264},
			expr: &actionExpr{
				pos: position{line: 1545, col: 28, offset: 46291},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1545, col: 28, offset: 46291},
					expr: &charClassMatcher{
						pos:        position{line: 1545, col: 28, offset: 46291},
						val:        "[^\\n]",
						chars:      []rune{'\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1549, col: 1, offset: 46338},
			expr: &actionExpr{
				pos: position{line: 1550, col: 5, offset: 46361},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 5, offset: 46361},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1550, col: 5, offset: 46361},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1550, col: 12, offset: 46368},
								offset: 240,
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 5, offset: 46395},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1551, col: 11, offset: 46401},
								expr: &ruleRefExpr{
									pos:    position{line: 1551, col: 12, offset: 46402},
									offset: 244,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1552, col: 5, offset: 46429},
							offset: 241,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1556, col: 1, offset: 46614},
			expr: &actionExpr{
				pos: position{line: 1556, col: 25, offset: 46638},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 25, offset: 46638},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1556, col: 25, offset: 46638},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1556, col: 35, offset: 46648},
								offset: 243,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1556, col: 61, offset: 46674},
							offset: 294,
						},
						&andCodeExpr{
							pos: position{line: 1556, col: 72, offset: 46685},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1563, col: 1, offset: 46875},
			expr: &seqExpr{
				pos: position{line: 1563, col: 23, offset: 46897},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1563, col: 23, offset: 46897},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1563, col: 33, offset: 46907},
							offset: 243,
						},
					},
					&andExpr{
						pos: position{line: 1563, col: 59, offset: 46933},
						expr: &ruleRefExpr{
							pos:    position{line: 1563, col: 60, offset: 46934},
							offset: 294,
						},
					},
					&andCodeExpr{
						pos: position{line: 1563, col: 70, offset: 46944},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1572, col: 1, offset: 47230},
			expr: &actionExpr{
				pos: position{line: 1572, col: 34, offset: 47263},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 34, offset: 47263},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1572, col: 34, offset: 47263},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1572, col: 50, offset: 47279},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1572, col: 50, offset: 47279},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1572, col: 57, offset: 47286},
										expr: &litMatcher{
											pos:        position{line: 1572, col: 57, offset: 47286},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1572, col: 63, offset: 47292},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1579, col: 1, offset: 47437},
			expr: &actionExpr{
				pos: position{line: 1579, col: 29, offset: 47465},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 29, offset: 47465},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1579, col: 29, offset: 47465},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:    position{line: 1579, col: 45, offset: 47481},
								offset: 242,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1580, col: 5, offset: 47518},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1585, col: 1, offset: 47669},
			expr: &actionExpr{
				pos: position{line: 1585, col: 24, offset: 47692},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 25, offset: 47693},
					exprs: []any{
						&notExpr{
							pos: position{line: 1585, col: 25, offset: 47693},
							expr: &ruleRefExpr{
								pos:    position{line: 1585, col: 26, offset: 47694},
								offset: 243,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1585, col: 52, offset: 47720},
							offset: 290,
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 65, offset: 47733},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1585, col: 70, offset: 47738},
								offset: 297,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1585, col: 78, offset: 47746},
							offset: 294,
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1591, col: 1, offset: 47794},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 11, offset: 47804},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1591, col: 11, offset: 47804},
						offset: 246,
					},
					&ruleRefExpr{
						pos:    position{line: 1591, col: 30, offset: 47823},
						offset: 247,
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1593, col: 1, offset: 47847},
			expr: &actionExpr{
				pos: position{line: 1593, col: 20, offset: 47866},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 20, offset: 47866},
					exprs: []any{
						&notExpr{
							pos: position{line: 1593, col: 20, offset: 47866},
							expr: &litMatcher{
								pos:        position{line: 1593, col: 21, offset: 47867},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 26, offset: 47872},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 38, offset: 47884},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1593, col: 43, offset: 47889},
								offset: 19,
							},
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 62, offset: 47908},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1593, col: 75, offset: 47921},
								expr: &ruleRefExpr{
									pos:    position{line: 1593, col: 76, offset: 47922},
									offset: 248,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 98, offset: 47944},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1597, col: 1, offset: 48045},
			expr: &actionExpr{
				pos: position{line: 1597, col: 26, offset: 48070},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 26, offset: 48070},
					exprs: []any{
						&notExpr{
							pos: position{line: 1597, col: 26, offset: 48070},
							expr: &litMatcher{
								pos:        position{line: 1597, col: 27, offset: 48071},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 32, offset: 48076},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 45, offset: 48089},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1597, col: 50, offset: 48094},
								offset: 19,
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 69, offset: 48113},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1597, col: 82, offset: 48126},
								expr: &ruleRefExpr{
									pos:    position{line: 1597, col: 83, offset: 48127},
									offset: 248,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 105, offset: 48149},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1601, col: 1, offset: 48251},
			expr: &actionExpr{
				pos: position{line: 1601, col: 23, offset: 48273},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 23, offset: 48273},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1601, col: 23, offset: 48273},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 27, offset: 48277},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:    position{line: 1601, col: 40, offset: 48290},
								offset: 249,
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1605, col: 1, offset: 48343},
			expr: &choiceExpr{
				pos: position{line: 1605, col: 23, offset: 48365},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1605, col: 23, offset: 48365},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:        position{line: 1605, col: 23, offset: 48365},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1608, col: 7, offset: 48421},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1608, col: 7, offset: 48421},
							expr: &charClassMatcher{
								pos:        position{line: 1608, col: 7, offset: 48421},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1615, col: 1, offset: 48487},
			expr: &actionExpr{
				pos: position{line: 1615, col: 21, offset: 48507},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 21, offset: 48507},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1615, col: 21, offset: 48507},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 32, offset: 48518},
								expr: &ruleRefExpr{
									pos:    position{line: 1615, col: 33, offset: 48519},
									offset: 84,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 53, offset: 48539},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1615, col: 59, offset: 48545},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1615, col: 59, offset: 48545},
										offset: 251,
									},
									&ruleRefExpr{
										pos:    position{line: 1615, col: 85, offset: 48571},
										offset: 254,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1619, col: 1, offset: 48717},
			expr: &actionExpr{
				pos: position{line: 1619, col: 27, offset: 48743},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 27, offset: 48743},
					exprs: []any{
						&notExpr{
							pos: position{line: 1619, col: 27, offset: 48743},
							expr: &ruleRefExpr{
								pos:    position{line: 1619, col: 28, offset: 48744},
								offset: 304,
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 35, offset: 48751},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1619, col: 39, offset: 48755},
							expr: &notExpr{
								pos: position{line: 1619, col: 41, offset: 48757},
								expr: &litMatcher{
									pos:        position{line: 1619, col: 42, offset: 48758},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 47, offset: 48763},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1619, col: 54, offset: 48770},
								offset: 252,
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 82, offset: 48798},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1619, col: 86, offset: 48802},
							expr: &litMatcher{
								pos:        position{line: 1619, col: 87, offset: 48803},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1619, col: 91, offset: 48807},
							expr: &notExpr{
								pos: position{line: 1619, col: 93, offset: 48809},
								expr: &ruleRefExpr{
									pos:    position{line: 1619, col: 94, offset: 48810},
									offset: 288,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1623, col: 1, offset: 48855},
			expr: &actionExpr{
				pos: position{line: 1623, col: 30, offset: 48884},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 30, offset: 48884},
					exprs: []any{
						&notExpr{
							pos: position{line: 1623, col: 30, offset: 48884},
							expr: &ruleRefExpr{
								pos:    position{line: 1623, col: 31, offset: 48885},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 33, offset: 48887},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1623, col: 39, offset: 48893},
								expr: &actionExpr{
									pos: position{line: 1623, col: 40, offset: 48894},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1623, col: 40, offset: 48894},
										exprs: []any{
											&notExpr{
												pos: position{line: 1623, col: 40, offset: 48894},
												expr: &ruleRefExpr{
													pos:    position{line: 1623, col: 41, offset: 48895},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 1623, col: 43, offset: 48897},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1623, col: 49, offset: 48903},
													expr: &ruleRefExpr{
														pos:    position{line: 1623, col: 50, offset: 48904},
														offset: 253,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1627, col: 1, offset: 49085},
			expr: &actionExpr{
				pos: position{line: 1627, col: 32, offset: 49116},
				run: (*parser).callonSinglePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 32, offset: 49116},
					exprs: []any{
						&notExpr{
							pos: position{line: 1627, col: 32, offset: 49116},
							expr: &seqExpr{
								pos: position{line: 1627, col: 34, offset: 49118},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1627, col: 34, offset: 49118},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&notExpr{
										pos: position{line: 1627, col: 38, offset: 49122},
										expr: &litMatcher{
											pos:        position{line: 1627, col: 39, offset: 49123},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 44, offset: 49128},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1627, col: 53, offset: 49137},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1631, col: 1, offset: 49192},
			expr: &actionExpr{
				pos: position{line: 1631, col: 27, offset: 49218},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 27, offset: 49218},
					exprs: []any{
						&notExpr{
							pos: position{line: 1631, col: 27, offset: 49218},
							expr: &ruleRefExpr{
								pos:    position{line: 1631, col: 28, offset: 49219},
								offset: 305,
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 41, offset: 49232},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 46, offset: 49237},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1631, col: 53, offset: 49244},
								offset: 255,
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 81, offset: 49272},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1635, col: 1, offset: 49309},
			expr: &actionExpr{
				pos: position{line: 1635, col: 30, offset: 49338},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 30, offset: 49338},
					exprs: []any{
						&notExpr{
							pos: position{line: 1635, col: 30, offset: 49338},
							expr: &ruleRefExpr{
								pos:    position{line: 1635, col: 31, offset: 49339},
								offset: 303,
							},
						},
						&labeledExpr{
							pos:   position{line: 1635, col: 33, offset: 49341},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1635, col: 39, offset: 49347},
								expr: &actionExpr{
									pos: position{line: 1635, col: 40, offset: 49348},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1635, col: 40, offset: 49348},
										exprs: []any{
											&notExpr{
												pos: position{line: 1635, col: 40, offset: 49348},
												expr: &ruleRefExpr{
													pos:    position{line: 1635, col: 41, offset: 49349},
													offset: 303,
												},
											},
											&labeledExpr{
												pos:   position{line: 1635, col: 43, offset: 49351},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1635, col: 49, offset: 49357},
													expr: &ruleRefExpr{
														pos:    position{line: 1635, col: 50, offset: 49358},
														offset: 256,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1639, col: 1, offset: 49551},
			expr: &actionExpr{
				pos: position{line: 1639, col: 32, offset: 49582},
				run: (*parser).callonDoublePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1639, col: 32, offset: 49582},
					exprs: []any{
						&notExpr{
							pos: position{line: 1639, col: 32, offset: 49582},
							expr: &litMatcher{
								pos:        position{line: 1639, col: 34, offset: 49584},
								val:        "++",
								ignoreCase: false,
								want:       "\"++\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1639, col: 40, offset: 49590},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 1639, col: 49, offset: 49599},
								offset: 83,
							},
						},
					},
				},
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1644, col: 1, offset: 49655},
			expr: &actionExpr{
				pos: position{line: 1644, col: 9, offset: 49663},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 9, offset: 49663},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1644, col: 9, offset: 49663},
							offset: 258,
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 24, offset: 49678},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1644, col: 36, offset: 49690},
								offset: 264,
							},
						},
						&litMatcher{
							pos:        position{line: 1644, col: 59, offset: 49713},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1644, col: 64, offset: 49718},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 1644, col: 75, offset: 49729},
							expr: &ruleRefExpr{
								pos:    position{line: 1644, col: 76, offset: 49730},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1649, col: 1, offset: 49850},
			expr: &litMatcher{
				pos:        position{line: 1649, col: 18, offset: 49867},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1651, col: 1, offset: 49879},
			expr: &actionExpr{
				pos: position{line: 1651, col: 10, offset: 49888},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 10, offset: 49888},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1651, col: 10, offset: 49888},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 21, offset: 49899},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1651, col: 33, offset: 49911},
								offset: 264,
							},
						},
						&litMatcher{
							pos:        position{line: 1651, col: 56, offset: 49934},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1651, col: 61, offset: 49939},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 1651, col: 72, offset: 49950},
							expr: &ruleRefExpr{
								pos:    position{line: 1651, col: 73, offset: 49951},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1656, col: 1, offset: 50073},
			expr: &actionExpr{
				pos: position{line: 1656, col: 15, offset: 50087},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1656, col: 15, offset: 50087},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1656, col: 15, offset: 50087},
							val:        "ifdef::",
							ignoreCase: false,
							want:       "\"ifdef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 25, offset: 50097},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1656, col: 37, offset: 50109},
								offset: 264,
							},
						},
						&litMatcher{
							pos:        position{line: 1656, col: 60, offset: 50132},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 64, offset: 50136},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1656, col: 73, offset: 50145},
								offset: 267,
							},
						},
						&litMatcher{
							pos:        position{line: 1656, col: 99, offset: 50171},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1656, col: 103, offset: 50175},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1661, col: 1, offset: 50341},
			expr: &actionExpr{
				pos: position{line: 1661, col: 16, offset: 50356},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1661, col: 16, offset: 50356},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1661, col: 16, offset: 50356},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 27, offset: 50367},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1661, col: 39, offset: 50379},
								offset: 264,
							},
						},
						&litMatcher{
							pos:        position{line: 1661, col: 62, offset: 50402},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 66, offset: 50406},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1661, col: 75, offset: 50415},
								offset: 267,
							},
						},
						&litMatcher{
							pos:        position{line: 1661, col: 101, offset: 50441},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1661, col: 105, offset: 50445},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1666, col: 1, offset: 50613},
			expr: &actionExpr{
				pos: position{line: 1666, col: 12, offset: 50624},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 12, offset: 50624},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1666, col: 12, offset: 50624},
							offset: 263,
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 30, offset: 50642},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1666, col: 41, offset: 50653},
								expr: &ruleRefExpr{
									pos:    position{line: 1666, col: 42, offset: 50654},
									offset: 264,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1666, col: 66, offset: 50678},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1666, col: 72, offset: 50684},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 1666, col: 82, offset: 50694},
							expr: &ruleRefExpr{
								pos:    position{line: 1666, col: 83, offset: 50695},
								offset: 294,
							},
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1676, col: 1, offset: 50982},
			expr: &actionExpr{
				pos: position{line: 1676, col: 21, offset: 51002},
				run: (*parser).callonEndIfDefStatement1,
				expr: &litMatcher{
					pos:        position{line: 1676, col: 21, offset: 51002},
					val:        "endif::",
					ignoreCase: false,
					want:       "\"endif::\"",
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1680, col: 1, offset: 51052},
			expr: &actionExpr{
				pos: position{line: 1680, col: 25, offset: 51076},
				run: (*parser).callonConditionalAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 1680, col: 25, offset: 51076},
					label: "attr",
					expr: &choiceExpr{
						pos: position{line: 1680, col: 31, offset: 51082},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 1680, col: 31, offset: 51082},
								offset: 265,
							},
							&ruleRefExpr{
								pos:    position{line: 1680, col: 58, offset: 51109},
								offset: 266,
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1684, col: 1, offset: 51166},
			expr: &actionExpr{
				pos: position{line: 1684, col: 28, offset: 51193},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1684, col: 28, offset: 51193},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1684, col: 34, offset: 51199},
						expr: &actionExpr{
							pos: position{line: 1685, col: 5, offset: 51205},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1685, col: 5, offset: 51205},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1685, col: 5, offset: 51205},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1685, col: 10, offset: 51210},
											offset: 19,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1685, col: 29, offset: 51229},
										offset: 298,
									},
									&zeroOrOneExpr{
										pos: position{line: 1685, col: 39, offset: 51239},
										expr: &litMatcher{
											pos:        position{line: 1685, col: 39, offset: 51239},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1685, col: 44, offset: 51244},
										offset: 298,
									},
									&andCodeExpr{
										pos: position{line: 1686, col: 5, offset: 51259},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1696, col: 1, offset: 51520},
			expr: &actionExpr{
				pos: position{line: 1696, col: 28, offset: 51547},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1696, col: 28, offset: 51547},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1696, col: 34, offset: 51553},
						expr: &actionExpr{
							pos: position{line: 1697, col: 5, offset: 51559},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1697, col: 5, offset: 51559},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1697, col: 5, offset: 51559},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1697, col: 10, offset: 51564},
											offset: 19,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1697, col: 29, offset: 51583},
										offset: 298,
									},
									&zeroOrOneExpr{
										pos: position{line: 1697, col: 39, offset: 51593},
										expr: &litMatcher{
											pos:        position{line: 1697, col: 39, offset: 51593},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1697, col: 44, offset: 51598},
										offset: 298,
									},
									&andCodeExpr{
										pos: position{line: 1698, col: 5, offset: 51613},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1708, col: 1, offset: 51874},
			expr: &actionExpr{
				pos: position{line: 1708, col: 28, offset: 51901},
				run: (*parser).callonInlineConditionalContent1,
				expr: &labeledExpr{
					pos:   position{line: 1708, col: 28, offset: 51901},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 1708, col: 36, offset: 51909},
						expr: &actionExpr{
							pos: position{line: 1708, col: 37, offset: 51910},
							run: (*parser).callonInlineConditionalContent4,
							expr: &seqExpr{
								pos: position{line: 1708, col: 37, offset: 51910},
								exprs: []any{
									&notExpr{
										pos: position{line: 1708, col: 37, offset: 51910},
										expr: &litMatcher{
											pos:        position{line: 1708, col: 38, offset: 51911},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
									&labeledExpr{
										pos:   position{line: 1708, col: 42, offset: 51915},
										label: "element",
										expr: &ruleRefExpr{
											pos:    position{line: 1708, col: 50, offset: 51923},
											offset: 77,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1714, col: 1, offset: 51996},
			expr: &actionExpr{
				pos: position{line: 1714, col: 10, offset: 52005},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1714, col: 10, offset: 52005},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1714, col: 10, offset: 52005},
							offset: 269,
						},
						&litMatcher{
							pos:        position{line: 1714, col: 26, offset: 52021},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1714, col: 30, offset: 52025},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 40, offset: 52035},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1714, col: 46, offset: 52041},
								offset: 270,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1714, col: 59, offset: 52054},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 70, offset: 52065},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1714, col: 79, offset: 52074},
								offset: 271,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1714, col: 95, offset: 52090},
							offset: 298,
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 105, offset: 52100},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1714, col: 112, offset: 52107},
								offset: 270,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1714, col: 125, offset: 52120},
							offset: 298,
						},
						&litMatcher{
							pos:        position{line: 1714, col: 135, offset: 52130},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1714, col: 139, offset: 52134},
							offset: 298,
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1718, col: 1, offset: 52289},
			expr: &actionExpr{
				pos: position{line: 1718, col: 19, offset: 52307},
				run: (*parser).callonIfEvalStatement1,
				expr: &litMatcher{
					pos:        position{line: 1718, col: 19, offset: 52307},
					val:        "ifeval::",
					ignoreCase: false,
					want:       "\"ifeval::\"",
				},
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1722, col: 1, offset: 52358},
			expr: &actionExpr{
				pos: position{line: 1722, col: 15, offset: 52372},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1722, col: 15, offset: 52372},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1722, col: 20, offset: 52377},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 1722, col: 20, offset: 52377},
								offset: 34,
							},
							&ruleRefExpr{
								pos:    position{line: 1722, col: 48, offset: 52405},
								offset: 36,
							},
							&ruleRefExpr{
								pos:    position{line: 1722, col: 76, offset: 52433},
								offset: 38,
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1733, col: 1, offset: 52873},
			expr: &choiceExpr{
				pos: position{line: 1734, col: 7, offset: 52897},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1734, col: 8, offset: 52898},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1734, col: 8, offset: 52898},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1735, col: 8, offset: 52961},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1735, col: 8, offset: 52961},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1736, col: 8, offset: 53027},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1736, col: 8, offset: 53027},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1737, col: 8, offset: 53093},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1737, col: 8, offset: 53093},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1738, col: 8, offset: 53166},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1738, col: 8, offset: 53166},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1739, col: 8, offset: 53235},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1739, col: 8, offset: 53235},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1742, col: 1, offset: 53306},
			expr: &actionExpr{
				pos: position{line: 1742, col: 20, offset: 53325},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1742, col: 21, offset: 53326},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1742, col: 21, offset: 53326},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1742, col: 27, offset: 53332},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1742, col: 33, offset: 53338},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1746, col: 1, offset: 53409},
			expr: &seqExpr{
				pos: position{line: 1746, col: 15, offset: 53423},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1746, col: 15, offset: 53423},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1746, col: 19, offset: 53427},
						expr: &notExpr{
							pos: position{line: 1746, col: 21, offset: 53429},
							expr: &litMatcher{
								pos:        position{line: 1746, col: 22, offset: 53430},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1748, col: 1, offset: 53436},
			expr: &choiceExpr{
				pos: position{line: 1748, col: 15, offset: 53450},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1748, col: 15, offset: 53450},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1748, col: 15, offset: 53450},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1748, col: 15, offset: 53450},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1748, col: 21, offset: 53456},
									expr: &charClassMatcher{
										pos:        position{line: 1748, col: 22, offset: 53457},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1750, col: 9, offset: 53515},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1750, col: 9, offset: 53515},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1750, col: 9, offset: 53515},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1750, col: 13, offset: 53519},
									expr: &charClassMatcher{
										pos:        position{line: 1750, col: 14, offset: 53520},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1755, col: 1, offset: 53583},
			expr: &actionExpr{
				pos: position{line: 1755, col: 15, offset: 53597},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1755, col: 17, offset: 53599},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 1755, col: 18, offset: 53600},
							val:        "[,;.?)/:!=\"'@-[\\]]",
							chars:      []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:     []rune{'@', '['},
							ignoreCase: false,
							inverted:   false,
						},
						&seqExpr{
							pos: position{line: 1755, col: 41, offset: 53623},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1755, col: 41, offset: 53623},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1755, col: 45, offset: 53627},
									expr: &litMatcher{
										pos:        position{line: 1755, col: 46, offset: 53628},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1759, col: 1, offset: 53695},
			expr: &actionExpr{
				pos: position{line: 1759, col: 13, offset: 53707},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1759, col: 13, offset: 53707},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1759, col: 13, offset: 53707},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1759, col: 17, offset: 53711},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 1759, col: 27, offset: 53721},
							expr: &ruleRefExpr{
								pos:    position{line: 1759, col: 29, offset: 53723},
								offset: 294,
							},
						},
						&andCodeExpr{
							pos: position{line: 1759, col: 40, offset: 53734},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1765, col: 1, offset: 53835},
			expr: &choiceExpr{
				pos: position{line: 1765, col: 16, offset: 53850},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1765, col: 16, offset: 53850},
						offset: 279,
					},
					&ruleRefExpr{
						pos:    position{line: 1765, col: 36, offset: 53870},
						offset: 278,
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1767, col: 1, offset: 53890},
			expr: &actionExpr{
				pos: position{line: 1767, col: 21, offset: 53910},
				run: (*parser).callonDoubleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1767, col: 22, offset: 53911},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1767, col: 22, offset: 53911},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&litMatcher{
							pos:        position{line: 1767, col: 30, offset: 53919},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1769, col: 1, offset: 53957},
			expr: &actionExpr{
				pos: position{line: 1769, col: 21, offset: 53977},
				run: (*parser).callonSingleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1769, col: 22, offset: 53978},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1769, col: 22, offset: 53978},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&litMatcher{
							pos:        position{line: 1769, col: 29, offset: 53985},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1771, col: 1, offset: 54022},
			expr: &actionExpr{
				pos: position{line: 1771, col: 13, offset: 54034},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1771, col: 13, offset: 54034},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1771, col: 13, offset: 54034},
							offset: 291,
						},
						&ruleRefExpr{
							pos:    position{line: 1771, col: 29, offset: 54050},
							offset: 298,
						},
						&ruleRefExpr{
							pos:    position{line: 1771, col: 39, offset: 54060},
							offset: 282,
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1775, col: 1, offset: 54150},
			expr: &seqExpr{
				pos: position{line: 1775, col: 15, offset: 54164},
				exprs: []any{
					&notExpr{
						pos: position{line: 1775, col: 15, offset: 54164},
						expr: &litMatcher{
							pos:        position{line: 1775, col: 16, offset: 54165},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1775, col: 21, offset: 54170},
						offset: 282,
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1777, col: 1, offset: 54179},
			expr: &actionExpr{
				pos: position{line: 1777, col: 11, offset: 54189},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1777, col: 12, offset: 54190},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1777, col: 12, offset: 54190},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1777, col: 19, offset: 54197},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
						&litMatcher{
							pos:        position{line: 1777, col: 26, offset: 54204},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1781, col: 1, offset: 54266},
			expr: &actionExpr{
				pos: position{line: 1781, col: 15, offset: 54280},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 15, offset: 54280},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1781, col: 15, offset: 54280},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:    position{line: 1781, col: 26, offset: 54291},
								offset: 284,
							},
						},
						&litMatcher{
							pos:        position{line: 1781, col: 42, offset: 54307},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1785, col: 1, offset: 54343},
			expr: &actionExpr{
				pos: position{line: 1785, col: 20, offset: 54362},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1785, col: 20, offset: 54362},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1785, col: 21, offset: 54363},
							expr: &charClassMatcher{
								pos:        position{line: 1785, col: 21, offset: 54363},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1785, col: 29, offset: 54371},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1791, col: 1, offset: 54462},
			expr: &notExpr{
				pos: position{line: 1791, col: 14, offset: 54475},
				expr: &ruleRefExpr{
					pos:    position{line: 1791, col: 15, offset: 54476},
					offset: 282,
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1793, col: 1, offset: 54485},
			expr: &notExpr{
				pos: position{line: 1793, col: 12, offset: 54496},
				expr: &ruleRefExpr{
					pos:    position{line: 1793, col: 13, offset: 54497},
					offset: 303,
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1795, col: 1, offset: 54500},
			expr: &charClassMatcher{
				pos:        position{line: 1795, col: 9, offset: 54508},
				val:        "[\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1797, col: 1, offset: 54517},
			expr: &charClassMatcher{
				pos:        position{line: 1797, col: 16, offset: 54532},
				val:        "[\\p{L}\\p{N}]",
				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1799, col: 1, offset: 54546},
			expr: &actionExpr{
				pos: position{line: 1799, col: 13, offset: 54558},
				run: (*parser).callonEndOfFile1,
				expr: &notExpr{
					pos: position{line: 1799, col: 13, offset: 54558},
					expr: &anyMatcher{
						line: 1799, col: 14, offset: 54559,
					},
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1803, col: 1, offset: 54601},
			expr: &andExpr{
				pos: position{line: 1803, col: 16, offset: 54616},
				expr: &anyMatcher{
					line: 1803, col: 18, offset: 54618,
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1805, col: 1, offset: 54622},
			expr: &notExpr{
				pos: position{line: 1805, col: 19, offset: 54640},
				expr: &ruleRefExpr{
					pos:    position{line: 1805, col: 20, offset: 54641},
					offset: 292,
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1807, col: 1, offset: 54658},
			expr: &seqExpr{
				pos: position{line: 1807, col: 19, offset: 54676},
				exprs: []any{
					&anyMatcher{
						line: 1807, col: 19, offset: 54676,
					},
					&andCodeExpr{
						pos: position{line: 1807, col: 21, offset: 54678},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1811, col: 1, offset: 54726},
			expr: &actionExpr{
				pos: position{line: 1811, col: 10, offset: 54735},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1811, col: 10, offset: 54735},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1811, col: 10, offset: 54735},
							offset: 298,
						},
						&andExpr{
							pos: position{line: 1811, col: 20, offset: 54745},
							expr: &notExpr{
								pos: position{line: 1811, col: 22, offset: 54747},
								expr: &ruleRefExpr{
									pos:    position{line: 1811, col: 23, offset: 54748},
									offset: 303,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1811, col: 26, offset: 54751},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1817, col: 1, offset: 54820},
			expr: &choiceExpr{
				pos: position{line: 1817, col: 13, offset: 54832},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1817, col: 13, offset: 54832},
						offset: 282,
					},
					&ruleRefExpr{
						pos:    position{line: 1817, col: 23, offset: 54842},
						offset: 289,
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1819, col: 1, offset: 54853},
			expr: &labeledExpr{
				pos:   position{line: 1819, col: 14, offset: 54866},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1819, col: 20, offset: 54872},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1819, col: 20, offset: 54872},
						expr: &ruleRefExpr{
							pos:    position{line: 1819, col: 20, offset: 54872},
							offset: 288,
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1821, col: 1, offset: 54918},
			expr: &actionExpr{
				pos: position{line: 1821, col: 16, offset: 54933},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1821, col: 16, offset: 54933},
					expr: &ruleRefExpr{
						pos:    position{line: 1821, col: 16, offset: 54933},
						offset: 300,
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1825, col: 1, offset: 54995},
			expr: &actionExpr{
				pos: position{line: 1825, col: 11, offset: 55005},
				run: (*parser).callonAnyText1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1825, col: 11, offset: 55005},
					expr: &ruleRefExpr{
						pos:    position{line: 1825, col: 11, offset: 55005},
						offset: 300,
					},
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1829, col: 1, offset: 55067},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1829, col: 13, offset: 55079},
				expr: &charClassMatcher{
					pos:        position{line: 1829, col: 13, offset: 55079},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1831, col: 1, offset: 55088},
			expr: &actionExpr{
				pos: position{line: 1831, col: 21, offset: 55108},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1831, col: 22, offset: 55109},
					alternatives: []any{
						&anyMatcher{
							line: 1831, col: 22, offset: 55109,
						},
						&ruleRefExpr{
							pos:    position{line: 1831, col: 26, offset: 55113},
							offset: 282,
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1835, col: 1, offset: 55162},
			expr: &charClassMatcher{
				pos:        position{line: 1835, col: 24, offset: 55185},
				val:        "[^\\n]",
				chars:      []rune{'\n'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1837, col: 1, offset: 55193},
			expr: &actionExpr{
				pos: position{line: 1837, col: 22, offset: 55214},
				run: (*parser).callonCharacterGroupWord1,
				expr: &charClassMatcher{
					pos:        position{line: 1837, col: 22, offset: 55214},
					val:        "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
					classes:    []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1841, col: 1, offset: 55315},
			expr: &actionExpr{
				pos: position{line: 1841, col: 6, offset: 55320},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1841, col: 6, offset: 55320},
					expr: &charClassMatcher{
						pos:        position{line: 1841, col: 6, offset: 55320},
						val:        "[ \\t]",
						chars:      []rune{' ', '\t'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1845, col: 1, offset: 55367},
			expr: &actionExpr{
				pos: position{line: 1845, col: 5, offset: 55371},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:        position{line: 1845, col: 5, offset: 55371},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1849, col: 1, offset: 55417},
			expr: &actionExpr{
				pos: position{line: 1849, col: 10, offset: 55426},
				run: (*parser).callonEscape1,
				expr: &litMatcher{
					pos:        position{line: 1849, col: 10, offset: 55426},
					val:        "\\",
					ignoreCase: false,
					want:       "\"\\\\\"",
				},
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1851, col: 1, offset: 55463},
			expr: &actionExpr{
				pos: position{line: 1851, col: 16, offset: 55478},
				run: (*parser).callonDoubleEscape1,
				expr: &litMatcher{
					pos:        position{line: 1851, col: 16, offset: 55478},
					val:        "\\\\",
					ignoreCase: false,
					want:       "\"\\\\\\\\\"",
				},
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["element"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onBlockElements1(blockElement any) (any, error) {
	return blockElement, nil
}

func (p *parser) callonBlockElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElements1(stack["blockElement"])
}

func (c *current) onNakedBlocks1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonNakedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlocks1(stack["block"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockAttributes4(anchor any) (any, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes4(stack["anchor"])
}

func (c *current) onBlockAttributes7(title any) (any, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["title"])
}

func (c *current) onBlockAttributes10(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes10(stack["attributes"])
}

func (c *current) onBlockAttributes13(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["attributes"])
}

func (c *current) onBlockAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attribute"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Set))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onBlockDelimiters1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiters1(stack["delimiter"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onSectionTitleValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSectionTitleValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleValue1(stack["element"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join[asciidoc.Element](flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onShorthandAttributeValue1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonShorthandAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement2()
}

func (c *current) onSingleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonSingleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement8()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("\""), nil
}

func (p *parser) callonDoubleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement2()
}

func (c *current) onDoubleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonDoubleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement8()
}

func (c *current) onNakedAttributeValue10() (any, error) {
	// Stop on commas, equals, spaces or end bracket
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonNakedAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue10()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join[asciidoc.Element](flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReference1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReference1(stack["attribute"])
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onSingleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextElement1(stack["element"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextElement1(stack["element"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onSingleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextElement1(stack["element"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextElement1(stack["element"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onSubscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSubscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onSuperscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSuperscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onSingleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextElement1(stack["element"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(string), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(asciidoc.NewString(id.(string)), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAnchorLabel6() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonAnchorLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel6()
}

func (c *current) onAnchorLabel9(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonAnchorLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel9(stack["arv"])
}

func (c *current) onAnchorLabel12() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonAnchorLabel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel12()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onAdmonition14() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition14()
}

func (c *current) onAdmonition1(admonition any) (any, error) {
	return admonition, nil
}

func (p *parser) callonAdmonition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition1(stack["admonition"])
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onInlineElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFootnoteValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonFootnoteValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteValue1(stack["element"])
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Set)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Set)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableCellInlineContentElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonTableCellInlineContentElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContentElement1(stack["element"])
}

func (c *current) onTableEnd1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEnd1()
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonInitialBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonInitialBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonAdditionalBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonAdditionalBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Set{asciidoc.NewString(string(c.text))}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Set
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Set{asciidoc.EmptyLine{}}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onBlockTableCellLine1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonBlockTableCellLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLine1(stack["content"])
}

func (c *current) onBlockTableCellLastLine1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonBlockTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLastLine1(stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe[int](column, span.Column.Value)
	span.Row = asciidoc.Maybe[int](row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe[int](multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe[asciidoc.TableCellHorizontalAlign](horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe[asciidoc.TableCellVerticalAlign](verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe[asciidoc.TableCellStyle](style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURLScheme1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonURLScheme1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURLScheme1()
}

func (c *current) onURL1(scheme, path any) (any, error) {
	s, _ := scheme.(string)
	return compose(c, asciidoc.NewURL(s, path.(asciidoc.Set)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(scheme.(string), path.(asciidoc.Set)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onPathElement2() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement2()
}

func (c *current) onPathElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement5()
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onSingleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextElement1(stack["element"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextElement1(stack["element"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onPreParseLineElement2(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonPreParseLineElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement2(stack["arv"])
}

func (c *current) onPreParseLineElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonPreParseLineElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement5()
}

func (c *current) onPreParseLineElement8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPreParseLineElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement8()
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlock1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonAttachedBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlock1(stack["element"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return []any{&asciidoc.NewLine{}, element}, nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(string)), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceID1() (any, error) {

	// See: https://docs.asciidoctor.org/asciidoc/latest/attributes/id/#valid-id-characters
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1()
}

func (c *current) onCrossReferenceLabel3() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonCrossReferenceLabel3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel6(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonCrossReferenceLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel6(stack["arv"])
}

func (c *current) onCrossReferenceLabel9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onDocumentCrossReference1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewDocumentCrossReference(path.(asciidoc.Set)), setAttributes[*asciidoc.DocumentCrossReference](attributes))
}

func (p *parser) callonDocumentCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentCrossReference1(stack["path"], stack["attributes"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 5, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 5, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Set))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Set)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Set(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onSinglePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSinglePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextElement1(stack["element"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onDoublePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoublePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextElement1(stack["element"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onEndIfDefStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndIfDefStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDefStatement1()
}

func (c *current) onConditionalAttributes1(attr any) (any, error) {
	return attr, nil
}

func (p *parser) callonConditionalAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributes1(stack["attr"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onInlineConditionalContent4(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineConditionalContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent4(stack["element"])
}

func (c *current) onInlineConditionalContent1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineConditionalContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent1(stack["content"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIfEvalStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalStatement1()
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onDoubleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleCurvedQuote1()
}

func (c *current) onSingleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCurvedQuote1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onEndOfFile1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndOfFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfFile1()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onAnyText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAnyText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) onCharacterGroupWord1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCharacterGroupWord1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterGroupWord1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

func (c *current) onEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscape1()
}

func (c *current) onDoubleEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleEscape1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
	delimitedBlockState delimitedBlockState
	tableColumnsAttribute *asciidoc.TableColumnsAttribute
	parser *parser
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	//basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
	offset position
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
