// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/project-chip/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 99},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 110},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 110},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 110},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 118},
								expr: &ruleRefExpr{
									pos:    position{line: 14, col: 21, offset: 119},
									offset: 1,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 14, col: 31, offset: 129},
							offset: 304,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 184},
			expr: &choiceExpr{
				pos: position{line: 18, col: 12, offset: 195},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 18, col: 12, offset: 195},
						offset: 2,
					},
					&ruleRefExpr{
						pos:    position{line: 18, col: 27, offset: 210},
						offset: 80,
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 21, col: 1, offset: 228},
			expr: &actionExpr{
				pos: position{line: 21, col: 16, offset: 243},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 21, col: 16, offset: 243},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 21, col: 16, offset: 243},
							offset: 307,
						},
						&labeledExpr{
							pos:   position{line: 21, col: 32, offset: 259},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 21, col: 41, offset: 268},
								offset: 3,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 21, col: 56, offset: 283},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 22, col: 1, offset: 293},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 28, col: 1, offset: 392},
			expr: &choiceExpr{
				pos: position{line: 29, col: 5, offset: 414},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 29, col: 5, offset: 414},
						offset: 15,
					},
					&ruleRefExpr{
						pos:    position{line: 30, col: 5, offset: 434},
						offset: 9,
					},
					&ruleRefExpr{
						pos:    position{line: 31, col: 5, offset: 455},
						offset: 5,
					},
					&ruleRefExpr{
						pos:    position{line: 32, col: 5, offset: 480},
						offset: 104,
					},
					&ruleRefExpr{
						pos:    position{line: 33, col: 5, offset: 492},
						offset: 4,
					},
					&ruleRefExpr{
						pos:    position{line: 34, col: 5, offset: 510},
						offset: 13,
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 37, col: 1, offset: 535},
			expr: &choiceExpr{
				pos: position{line: 38, col: 5, offset: 555},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 38, col: 5, offset: 555},
						offset: 252,
					},
					&ruleRefExpr{
						pos:    position{line: 39, col: 5, offset: 579},
						offset: 249,
					},
					&ruleRefExpr{
						pos:    position{line: 40, col: 5, offset: 603},
						offset: 22,
					},
					&ruleRefExpr{
						pos:    position{line: 41, col: 5, offset: 625},
						offset: 26,
					},
					&ruleRefExpr{
						pos:    position{line: 42, col: 5, offset: 646},
						offset: 271,
					},
					&ruleRefExpr{
						pos:    position{line: 43, col: 5, offset: 658},
						offset: 273,
					},
					&ruleRefExpr{
						pos:    position{line: 44, col: 5, offset: 672},
						offset: 282,
					},
					&ruleRefExpr{
						pos:    position{line: 45, col: 5, offset: 685},
						offset: 277,
					},
					&ruleRefExpr{
						pos:    position{line: 46, col: 5, offset: 700},
						offset: 93,
					},
					&ruleRefExpr{
						pos:    position{line: 47, col: 5, offset: 718},
						offset: 245,
					},
					&ruleRefExpr{
						pos:    position{line: 48, col: 5, offset: 744},
						offset: 209,
					},
					&ruleRefExpr{
						pos:    position{line: 49, col: 5, offset: 767},
						offset: 297,
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 52, col: 1, offset: 779},
			expr: &actionExpr{
				pos: position{line: 52, col: 22, offset: 800},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 52, col: 22, offset: 800},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 52, col: 22, offset: 800},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 52, col: 33, offset: 811},
								expr: &ruleRefExpr{
									pos:    position{line: 52, col: 34, offset: 812},
									offset: 12,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 52, col: 59, offset: 837},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 53, col: 5, offset: 852},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 53, col: 5, offset: 852},
										offset: 160,
									},
									&ruleRefExpr{
										pos:    position{line: 54, col: 5, offset: 867},
										offset: 166,
									},
									&ruleRefExpr{
										pos:    position{line: 55, col: 5, offset: 878},
										offset: 178,
									},
									&ruleRefExpr{
										pos:    position{line: 56, col: 5, offset: 892},
										offset: 190,
									},
									&ruleRefExpr{
										pos:    position{line: 57, col: 5, offset: 906},
										offset: 202,
									},
									&ruleRefExpr{
										pos:    position{line: 58, col: 5, offset: 918},
										offset: 184,
									},
									&ruleRefExpr{
										pos:    position{line: 59, col: 5, offset: 932},
										offset: 220,
									},
									&ruleRefExpr{
										pos:    position{line: 60, col: 5, offset: 943},
										offset: 19,
									},
									&ruleRefExpr{
										pos:    position{line: 61, col: 5, offset: 958},
										offset: 212,
									},
									&ruleRefExpr{
										pos:    position{line: 62, col: 5, offset: 978},
										offset: 213,
									},
									&ruleRefExpr{
										pos:    position{line: 63, col: 5, offset: 994},
										offset: 89,
									},
									&ruleRefExpr{
										pos:    position{line: 64, col: 5, offset: 1011},
										offset: 240,
									},
									&ruleRefExpr{
										pos:    position{line: 65, col: 5, offset: 1034},
										offset: 242,
									},
									&ruleRefExpr{
										pos:    position{line: 66, col: 5, offset: 1059},
										offset: 245,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 67, col: 9, offset: 1088},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 80, col: 1, offset: 1487},
			expr: &choiceExpr{
				pos: position{line: 80, col: 19, offset: 1505},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 80, col: 19, offset: 1505},
						offset: 77,
					},
					&ruleRefExpr{
						pos:    position{line: 80, col: 37, offset: 1523},
						offset: 7,
					},
					&ruleRefExpr{
						pos:    position{line: 80, col: 50, offset: 1536},
						offset: 27,
					},
					&ruleRefExpr{
						pos:    position{line: 80, col: 63, offset: 1549},
						offset: 31,
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 82, col: 1, offset: 1570},
			expr: &actionExpr{
				pos: position{line: 82, col: 14, offset: 1583},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 82, col: 14, offset: 1583},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 82, col: 14, offset: 1583},
							offset: 307,
						},
						&litMatcher{
							pos:        position{line: 82, col: 30, offset: 1599},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 82, col: 34, offset: 1603},
							expr: &charClassMatcher{
								pos:        position{line: 82, col: 35, offset: 1604},
								val:        "[ .]",
								chars:      []rune{' ', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 82, col: 40, offset: 1609},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 82, col: 49, offset: 1618},
								offset: 8,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 90, col: 1, offset: 1793},
			expr: &actionExpr{
				pos: position{line: 90, col: 21, offset: 1813},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 90, col: 21, offset: 1813},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 90, col: 29, offset: 1821},
						expr: &choiceExpr{
							pos: position{line: 90, col: 30, offset: 1822},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 90, col: 30, offset: 1822},
									offset: 82,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 48, offset: 1840},
									offset: 303,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 63, offset: 1855},
									offset: 319,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 67, offset: 1859},
									offset: 290,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 81, offset: 1873},
									offset: 45,
								},
								&ruleRefExpr{
									pos:    position{line: 90, col: 102, offset: 1894},
									offset: 316,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 94, col: 1, offset: 1961},
			expr: &actionExpr{
				pos: position{line: 94, col: 18, offset: 1978},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 94, col: 18, offset: 1978},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 94, col: 18, offset: 1978},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 94, col: 28, offset: 1988},
							expr: &ruleRefExpr{
								pos:    position{line: 94, col: 29, offset: 1989},
								offset: 297,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 98, col: 1, offset: 2067},
			expr: &actionExpr{
				pos: position{line: 98, col: 25, offset: 2091},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 98, col: 25, offset: 2091},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 98, col: 25, offset: 2091},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 98, col: 37, offset: 2103},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 98, col: 54, offset: 2120},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 98, col: 64, offset: 2130},
							expr: &ruleRefExpr{
								pos:    position{line: 98, col: 65, offset: 2131},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 102, col: 1, offset: 2177},
			expr: &actionExpr{
				pos: position{line: 102, col: 35, offset: 2211},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 102, col: 35, offset: 2211},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 102, col: 35, offset: 2211},
							offset: 297,
						},
						&labeledExpr{
							pos:   position{line: 102, col: 43, offset: 2219},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 102, col: 55, offset: 2231},
								offset: 6,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 102, col: 72, offset: 2248},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 102, col: 82, offset: 2258},
							expr: &ruleRefExpr{
								pos:    position{line: 102, col: 83, offset: 2259},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 106, col: 1, offset: 2305},
			expr: &actionExpr{
				pos: position{line: 106, col: 26, offset: 2330},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 106, col: 26, offset: 2330},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 106, col: 26, offset: 2330},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 106, col: 37, offset: 2341},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 60, offset: 2364},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 106, col: 81, offset: 2385},
								expr: &ruleRefExpr{
									pos:    position{line: 106, col: 82, offset: 2386},
									offset: 11,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 106, col: 116, offset: 2420},
							offset: 310,
						},
						&zeroOrMoreExpr{
							pos: position{line: 106, col: 126, offset: 2430},
							expr: &ruleRefExpr{
								pos:    position{line: 106, col: 126, offset: 2430},
								offset: 295,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 114, col: 1, offset: 2647},
			expr: &actionExpr{
				pos: position{line: 114, col: 24, offset: 2670},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 114, col: 24, offset: 2670},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 114, col: 24, offset: 2670},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 114, col: 35, offset: 2681},
								offset: 10,
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 58, offset: 2704},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 114, col: 79, offset: 2725},
								expr: &ruleRefExpr{
									pos:    position{line: 114, col: 80, offset: 2726},
									offset: 11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 126, col: 1, offset: 3068},
			expr: &seqExpr{
				pos: position{line: 127, col: 5, offset: 3091},
				exprs: []any{
					&notExpr{
						pos: position{line: 127, col: 5, offset: 3091},
						expr: &ruleRefExpr{
							pos:    position{line: 127, col: 6, offset: 3092},
							offset: 303,
						},
					},
					&choiceExpr{
						pos: position{line: 129, col: 9, offset: 3122},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 129, col: 9, offset: 3122},
								offset: 255,
							},
							&ruleRefExpr{
								pos:    position{line: 130, col: 11, offset: 3163},
								offset: 181,
							},
							&ruleRefExpr{
								pos:    position{line: 131, col: 11, offset: 3187},
								offset: 217,
							},
							&ruleRefExpr{
								pos:    position{line: 132, col: 11, offset: 3213},
								offset: 163,
							},
							&ruleRefExpr{
								pos:    position{line: 133, col: 11, offset: 3238},
								offset: 187,
							},
							&ruleRefExpr{
								pos:    position{line: 134, col: 11, offset: 3260},
								offset: 223,
							},
							&ruleRefExpr{
								pos:    position{line: 135, col: 11, offset: 3281},
								offset: 205,
							},
							&ruleRefExpr{
								pos:    position{line: 136, col: 11, offset: 3307},
								offset: 193,
							},
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscape",
			pos:  position{line: 140, col: 1, offset: 3332},
			expr: &actionExpr{
				pos: position{line: 141, col: 5, offset: 3352},
				run: (*parser).callonAlchemyEscape1,
				expr: &seqExpr{
					pos: position{line: 141, col: 5, offset: 3352},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 141, col: 5, offset: 3352},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 141, col: 12, offset: 3359},
								offset: 16,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 142, col: 5, offset: 3384},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 142, col: 15, offset: 3394},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 142, col: 22, offset: 3401},
								offset: 24,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 142, col: 46, offset: 3425},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 143, col: 5, offset: 3439},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 143, col: 11, offset: 3445},
								expr: &ruleRefExpr{
									pos:    position{line: 143, col: 12, offset: 3446},
									offset: 17,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 144, col: 5, offset: 3470},
							offset: 18,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeStart",
			pos:  position{line: 148, col: 1, offset: 3665},
			expr: &litMatcher{
				pos:        position{line: 148, col: 22, offset: 3686},
				val:        ":alchemy-escape:",
				ignoreCase: false,
				want:       "\":alchemy-escape:\"",
			},
		},
		{
			name: "AlchemyEscapeLine",
			pos:  position{line: 150, col: 1, offset: 3707},
			expr: &actionExpr{
				pos: position{line: 150, col: 21, offset: 3727},
				run: (*parser).callonAlchemyEscapeLine1,
				expr: &seqExpr{
					pos: position{line: 150, col: 22, offset: 3728},
					exprs: []any{
						&notExpr{
							pos: position{line: 150, col: 22, offset: 3728},
							expr: &ruleRefExpr{
								pos:    position{line: 150, col: 23, offset: 3729},
								offset: 18,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 150, col: 40, offset: 3746},
							offset: 305,
						},
						&labeledExpr{
							pos:   position{line: 150, col: 53, offset: 3759},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 150, col: 58, offset: 3764},
								offset: 313,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 150, col: 66, offset: 3772},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "AlchemyEscapeEnd",
			pos:  position{line: 154, col: 1, offset: 3819},
			expr: &choiceExpr{
				pos: position{line: 154, col: 20, offset: 3838},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 154, col: 20, offset: 3838},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 154, col: 20, offset: 3838},
								val:        ":!alchemy-escape:",
								ignoreCase: false,
								want:       "\":!alchemy-escape:\"",
							},
							&andExpr{
								pos: position{line: 154, col: 40, offset: 3858},
								expr: &ruleRefExpr{
									pos:    position{line: 154, col: 41, offset: 3859},
									offset: 310,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 154, col: 53, offset: 3871},
						offset: 304,
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 156, col: 1, offset: 3882},
			expr: &actionExpr{
				pos: position{line: 156, col: 11, offset: 3892},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 156, col: 11, offset: 3892},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 156, col: 11, offset: 3892},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 156, col: 18, offset: 3899},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 156, col: 18, offset: 3899},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 18, offset: 3899},
										val:        "[=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 159, col: 5, offset: 3958},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:    position{line: 162, col: 5, offset: 4015},
							offset: 318,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 8, offset: 4018},
							label: "title",
							expr: &ruleRefExpr{
								pos:    position{line: 162, col: 15, offset: 4025},
								offset: 20,
							},
						},
						&andExpr{
							pos: position{line: 162, col: 29, offset: 4039},
							expr: &ruleRefExpr{
								pos:    position{line: 162, col: 30, offset: 4040},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 166, col: 1, offset: 4155},
			expr: &oneOrMoreExpr{
				pos: position{line: 166, col: 16, offset: 4170},
				expr: &ruleRefExpr{
					pos:    position{line: 166, col: 17, offset: 4171},
					offset: 21,
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 168, col: 1, offset: 4192},
			expr: &seqExpr{
				pos: position{line: 168, col: 21, offset: 4212},
				exprs: []any{
					&notExpr{
						pos: position{line: 168, col: 21, offset: 4212},
						expr: &ruleRefExpr{
							pos:    position{line: 168, col: 22, offset: 4213},
							offset: 310,
						},
					},
					&choiceExpr{
						pos: position{line: 169, col: 5, offset: 4229},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 169, col: 5, offset: 4229},
								offset: 312,
							},
							&ruleRefExpr{
								pos:    position{line: 170, col: 7, offset: 4249},
								offset: 318,
							},
							&ruleRefExpr{
								pos:    position{line: 171, col: 7, offset: 4259},
								offset: 289,
							},
							&ruleRefExpr{
								pos:    position{line: 172, col: 7, offset: 4277},
								offset: 290,
							},
							&ruleRefExpr{
								pos:    position{line: 173, col: 7, offset: 4297},
								offset: 86,
							},
							&ruleRefExpr{
								pos:    position{line: 174, col: 7, offset: 4317},
								offset: 263,
							},
							&ruleRefExpr{
								pos:    position{line: 175, col: 7, offset: 4341},
								offset: 99,
							},
							&ruleRefExpr{
								pos:    position{line: 176, col: 7, offset: 4353},
								offset: 287,
							},
							&ruleRefExpr{
								pos:    position{line: 177, col: 7, offset: 4377},
								offset: 92,
							},
							&ruleRefExpr{
								pos:    position{line: 178, col: 7, offset: 4389},
								offset: 45,
							},
							&ruleRefExpr{
								pos:    position{line: 179, col: 7, offset: 4415},
								offset: 76,
							},
							&ruleRefExpr{
								pos:    position{line: 181, col: 7, offset: 4444},
								offset: 316,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 184, col: 1, offset: 4469},
			expr: &actionExpr{
				pos: position{line: 184, col: 18, offset: 4486},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 184, col: 18, offset: 4486},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 184, col: 18, offset: 4486},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 22, offset: 4490},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 184, col: 28, offset: 4496},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 184, col: 48, offset: 4516},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:    position{line: 184, col: 52, offset: 4520},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 184, col: 62, offset: 4530},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 184, col: 69, offset: 4537},
								offset: 24,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 188, col: 1, offset: 4681},
			expr: &actionExpr{
				pos: position{line: 188, col: 22, offset: 4702},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 188, col: 22, offset: 4702},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 188, col: 22, offset: 4702},
							offset: 317,
						},
						&zeroOrMoreExpr{
							pos: position{line: 188, col: 41, offset: 4721},
							expr: &choiceExpr{
								pos: position{line: 188, col: 42, offset: 4722},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 188, col: 42, offset: 4722},
										offset: 317,
									},
									&litMatcher{
										pos:        position{line: 188, col: 63, offset: 4743},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 192, col: 1, offset: 4789},
			expr: &actionExpr{
				pos: position{line: 192, col: 26, offset: 4814},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 26, offset: 4814},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 192, col: 32, offset: 4820},
						expr: &ruleRefExpr{
							pos:    position{line: 192, col: 32, offset: 4820},
							offset: 25,
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 196, col: 1, offset: 4896},
			expr: &choiceExpr{
				pos: position{line: 196, col: 26, offset: 4921},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 196, col: 26, offset: 4921},
						exprs: []any{
							&ruleRefExpr{
								pos:    position{line: 196, col: 26, offset: 4921},
								offset: 291,
							},
							&ruleRefExpr{
								pos:    position{line: 196, col: 36, offset: 4931},
								offset: 310,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 196, col: 48, offset: 4943},
						offset: 316,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 198, col: 1, offset: 4967},
			expr: &choiceExpr{
				pos: position{line: 198, col: 18, offset: 4984},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 198, col: 18, offset: 4984},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 198, col: 18, offset: 4984},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 198, col: 18, offset: 4984},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 198, col: 23, offset: 4989},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 198, col: 29, offset: 4995},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 198, col: 49, offset: 5015},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:    position{line: 198, col: 53, offset: 5019},
									offset: 314,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 200, col: 5, offset: 5101},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 200, col: 5, offset: 5101},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 200, col: 5, offset: 5101},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 200, col: 9, offset: 5105},
									label: "name",
									expr: &ruleRefExpr{
										pos:    position{line: 200, col: 15, offset: 5111},
										offset: 23,
									},
								},
								&litMatcher{
									pos:        position{line: 200, col: 35, offset: 5131},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:    position{line: 200, col: 40, offset: 5136},
									offset: 314,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 205, col: 1, offset: 5296},
			expr: &actionExpr{
				pos: position{line: 205, col: 14, offset: 5309},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 205, col: 14, offset: 5309},
					exprs: []any{
						&notExpr{
							pos: position{line: 205, col: 14, offset: 5309},
							expr: &litMatcher{
								pos:        position{line: 205, col: 15, offset: 5310},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 20, offset: 5315},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 205, col: 24, offset: 5319},
							expr: &litMatcher{
								pos:        position{line: 205, col: 25, offset: 5320},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 205, col: 29, offset: 5324},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 205, col: 41, offset: 5336},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 56, offset: 5351},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 210, col: 1, offset: 5393},
			expr: &actionExpr{
				pos: position{line: 210, col: 17, offset: 5409},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 210, col: 17, offset: 5409},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 210, col: 28, offset: 5420},
						expr: &ruleRefExpr{
							pos:    position{line: 210, col: 29, offset: 5421},
							offset: 29,
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 214, col: 1, offset: 5506},
			expr: &actionExpr{
				pos: position{line: 214, col: 21, offset: 5526},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 214, col: 21, offset: 5526},
					exprs: []any{
						&notExpr{
							pos: position{line: 214, col: 21, offset: 5526},
							expr: &litMatcher{
								pos:        position{line: 214, col: 22, offset: 5527},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 214, col: 26, offset: 5531},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 214, col: 36, offset: 5541},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 214, col: 47, offset: 5552},
								offset: 30,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 214, col: 58, offset: 5563},
							offset: 314,
						},
						&zeroOrOneExpr{
							pos: position{line: 214, col: 68, offset: 5573},
							expr: &litMatcher{
								pos:        position{line: 214, col: 68, offset: 5573},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 218, col: 1, offset: 5609},
			expr: &actionExpr{
				pos: position{line: 218, col: 13, offset: 5621},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 218, col: 13, offset: 5621},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 218, col: 13, offset: 5621},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 218, col: 18, offset: 5626},
								expr: &actionExpr{
									pos: position{line: 218, col: 20, offset: 5628},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 218, col: 21, offset: 5629},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 218, col: 21, offset: 5629},
												label: "name",
												expr: &ruleRefExpr{
													pos:    position{line: 218, col: 27, offset: 5635},
													offset: 44,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 218, col: 47, offset: 5655},
												offset: 314,
											},
											&litMatcher{
												pos:        position{line: 218, col: 57, offset: 5665},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:    position{line: 218, col: 61, offset: 5669},
												offset: 314,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 95, offset: 5703},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 218, col: 102, offset: 5710},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 218, col: 102, offset: 5710},
										offset: 38,
									},
									&ruleRefExpr{
										pos:    position{line: 218, col: 130, offset: 5738},
										offset: 40,
									},
									&ruleRefExpr{
										pos:    position{line: 218, col: 158, offset: 5766},
										offset: 42,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 225, col: 1, offset: 6022},
			expr: &actionExpr{
				pos: position{line: 225, col: 23, offset: 6044},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 225, col: 23, offset: 6044},
					exprs: []any{
						&notExpr{
							pos: position{line: 225, col: 23, offset: 6044},
							expr: &litMatcher{
								pos:        position{line: 225, col: 24, offset: 6045},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 29, offset: 6050},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 225, col: 33, offset: 6054},
							expr: &litMatcher{
								pos:        position{line: 225, col: 34, offset: 6055},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 38, offset: 6059},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:    position{line: 225, col: 49, offset: 6070},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 69, offset: 6090},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 229, col: 1, offset: 6130},
			expr: &actionExpr{
				pos: position{line: 229, col: 22, offset: 6151},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 229, col: 22, offset: 6151},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 229, col: 22, offset: 6151},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 229, col: 28, offset: 6157},
								expr: &ruleRefExpr{
									pos:    position{line: 229, col: 29, offset: 6158},
									offset: 37,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 229, col: 55, offset: 6184},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 229, col: 62, offset: 6191},
								expr: &choiceExpr{
									pos: position{line: 229, col: 63, offset: 6192},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 229, col: 63, offset: 6192},
											offset: 34,
										},
										&ruleRefExpr{
											pos:    position{line: 229, col: 77, offset: 6206},
											offset: 35,
										},
										&ruleRefExpr{
											pos:    position{line: 229, col: 93, offset: 6222},
											offset: 36,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 233, col: 1, offset: 6310},
			expr: &actionExpr{
				pos: position{line: 233, col: 18, offset: 6327},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 233, col: 18, offset: 6327},
					label: "value",
					expr: &ruleRefExpr{
						pos:    position{line: 233, col: 24, offset: 6333},
						offset: 37,
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 237, col: 1, offset: 6427},
			expr: &actionExpr{
				pos: position{line: 237, col: 15, offset: 6441},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 237, col: 15, offset: 6441},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 237, col: 15, offset: 6441},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 19, offset: 6445},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 237, col: 25, offset: 6451},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 241, col: 1, offset: 6545},
			expr: &actionExpr{
				pos: position{line: 241, col: 17, offset: 6561},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 241, col: 17, offset: 6561},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 241, col: 17, offset: 6561},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 241, col: 21, offset: 6565},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 241, col: 27, offset: 6571},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 245, col: 1, offset: 6667},
			expr: &actionExpr{
				pos: position{line: 245, col: 19, offset: 6685},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 245, col: 19, offset: 6685},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 19, offset: 6685},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 23, offset: 6689},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 245, col: 29, offset: 6695},
								offset: 37,
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 249, col: 1, offset: 6793},
			expr: &choiceExpr{
				pos: position{line: 249, col: 28, offset: 6820},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 249, col: 28, offset: 6820},
						exprs: []any{
							&notExpr{
								pos: position{line: 249, col: 28, offset: 6820},
								expr: &litMatcher{
									pos:        position{line: 249, col: 29, offset: 6821},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
							&notExpr{
								pos: position{line: 249, col: 33, offset: 6825},
								expr: &litMatcher{
									pos:        position{line: 249, col: 34, offset: 6826},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
							},
							&notExpr{
								pos: position{line: 249, col: 38, offset: 6830},
								expr: &litMatcher{
									pos:        position{line: 249, col: 39, offset: 6831},
									val:        "%",
									ignoreCase: false,
									want:       "\"%\"",
								},
							},
							&ruleRefExpr{
								pos:    position{line: 249, col: 43, offset: 6835},
								offset: 38,
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 249, col: 71, offset: 6863},
						offset: 40,
					},
					&ruleRefExpr{
						pos:    position{line: 249, col: 99, offset: 6891},
						offset: 42,
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 251, col: 1, offset: 6913},
			expr: &actionExpr{
				pos: position{line: 251, col: 29, offset: 6941},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 251, col: 29, offset: 6941},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 251, col: 29, offset: 6941},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 33, offset: 6945},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 39, offset: 6951},
								expr: &ruleRefExpr{
									pos:    position{line: 251, col: 40, offset: 6952},
									offset: 39,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 75, offset: 6987},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 255, col: 1, offset: 7096},
			expr: &choiceExpr{
				pos: position{line: 256, col: 5, offset: 7137},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 7137},
						run: (*parser).callonSingleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 256, col: 5, offset: 7137},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 257, col: 5, offset: 7190},
						offset: 303,
					},
					&ruleRefExpr{
						pos:    position{line: 258, col: 5, offset: 7210},
						offset: 319,
					},
					&ruleRefExpr{
						pos:    position{line: 259, col: 5, offset: 7219},
						offset: 292,
					},
					&ruleRefExpr{
						pos:    position{line: 260, col: 5, offset: 7238},
						offset: 45,
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7263},
						run: (*parser).callonSingleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 261, col: 5, offset: 7263},
							expr: &charClassMatcher{
								pos:        position{line: 261, col: 5, offset: 7263},
								val:        "[^\\r\\n\\\\' ]",
								chars:      []rune{'\r', '\n', '\\', '\'', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 266, col: 1, offset: 7342},
			expr: &actionExpr{
				pos: position{line: 266, col: 29, offset: 7370},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 266, col: 29, offset: 7370},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 266, col: 29, offset: 7370},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 34, offset: 7375},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 40, offset: 7381},
								expr: &ruleRefExpr{
									pos:    position{line: 266, col: 41, offset: 7382},
									offset: 41,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 76, offset: 7417},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 270, col: 1, offset: 7527},
			expr: &choiceExpr{
				pos: position{line: 271, col: 5, offset: 7568},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 7568},
						run: (*parser).callonDoubleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 271, col: 5, offset: 7568},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 272, col: 5, offset: 7624},
						offset: 303,
					},
					&ruleRefExpr{
						pos:    position{line: 273, col: 5, offset: 7644},
						offset: 319,
					},
					&ruleRefExpr{
						pos:    position{line: 274, col: 5, offset: 7653},
						offset: 292,
					},
					&ruleRefExpr{
						pos:    position{line: 275, col: 5, offset: 7671},
						offset: 45,
					},
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 7696},
						run: (*parser).callonDoubleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 276, col: 5, offset: 7696},
							expr: &charClassMatcher{
								pos:        position{line: 276, col: 5, offset: 7696},
								val:        "[^\\r\\n\\\\\" ]",
								chars:      []rune{'\r', '\n', '\\', '"', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 281, col: 1, offset: 7775},
			expr: &actionExpr{
				pos: position{line: 281, col: 23, offset: 7797},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 281, col: 23, offset: 7797},
					exprs: []any{
						&notExpr{
							pos: position{line: 281, col: 23, offset: 7797},
							expr: &ruleRefExpr{
								pos:    position{line: 281, col: 24, offset: 7798},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 26, offset: 7800},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 281, col: 32, offset: 7806},
								expr: &choiceExpr{
									pos: position{line: 282, col: 5, offset: 7812},
									alternatives: []any{
										&ruleRefExpr{
											pos:    position{line: 282, col: 5, offset: 7812},
											offset: 45,
										},
										&ruleRefExpr{
											pos:    position{line: 283, col: 5, offset: 7838},
											offset: 319,
										},
										&actionExpr{
											pos: position{line: 284, col: 5, offset: 7847},
											run: (*parser).callonNakedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 284, col: 5, offset: 7847},
												expr: &charClassMatcher{
													pos:        position{line: 284, col: 5, offset: 7847},
													val:        "[^=\\], ]",
													chars:      []rune{'=', ']', ',', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 291, col: 1, offset: 8042},
			expr: &actionExpr{
				pos: position{line: 291, col: 20, offset: 8061},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 20, offset: 8061},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 291, col: 20, offset: 8061},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 291, col: 24, offset: 8065},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 291, col: 36, offset: 8077},
								offset: 28,
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 51, offset: 8092},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 295, col: 1, offset: 8132},
			expr: &actionExpr{
				pos: position{line: 295, col: 22, offset: 8153},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 295, col: 22, offset: 8153},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 295, col: 22, offset: 8153},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 35, offset: 8166},
							expr: &charClassMatcher{
								pos:        position{line: 295, col: 35, offset: 8166},
								val:        "[A-Za-z0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 299, col: 1, offset: 8221},
			expr: &choiceExpr{
				pos: position{line: 299, col: 22, offset: 8242},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 299, col: 22, offset: 8242},
						offset: 46,
					},
					&ruleRefExpr{
						pos:    position{line: 299, col: 48, offset: 8268},
						offset: 258,
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 301, col: 1, offset: 8277},
			expr: &actionExpr{
				pos: position{line: 301, col: 27, offset: 8303},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 301, col: 27, offset: 8303},
					exprs: []any{
						&notExpr{
							pos: position{line: 301, col: 27, offset: 8303},
							expr: &litMatcher{
								pos:        position{line: 301, col: 28, offset: 8304},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 33, offset: 8309},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 37, offset: 8313},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 301, col: 42, offset: 8318},
								offset: 23,
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 61, offset: 8337},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 309, col: 1, offset: 8433},
			expr: &choiceExpr{
				pos: position{line: 309, col: 13, offset: 8445},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 309, col: 13, offset: 8445},
						offset: 48,
					},
					&ruleRefExpr{
						pos:    position{line: 309, col: 30, offset: 8462},
						offset: 51,
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 311, col: 1, offset: 8479},
			expr: &actionExpr{
				pos: position{line: 311, col: 18, offset: 8496},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 311, col: 18, offset: 8496},
					exprs: []any{
						&notExpr{
							pos: position{line: 311, col: 18, offset: 8496},
							expr: &ruleRefExpr{
								pos:    position{line: 311, col: 19, offset: 8497},
								offset: 320,
							},
						},
						&litMatcher{
							pos:        position{line: 311, col: 26, offset: 8504},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 311, col: 30, offset: 8508},
							expr: &notExpr{
								pos: position{line: 311, col: 32, offset: 8510},
								expr: &litMatcher{
									pos:        position{line: 311, col: 33, offset: 8511},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 38, offset: 8516},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 311, col: 45, offset: 8523},
								offset: 49,
							},
						},
						&litMatcher{
							pos:        position{line: 311, col: 66, offset: 8544},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 311, col: 70, offset: 8548},
							expr: &litMatcher{
								pos:        position{line: 311, col: 71, offset: 8549},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 311, col: 75, offset: 8553},
							expr: &notExpr{
								pos: position{line: 311, col: 77, offset: 8555},
								expr: &ruleRefExpr{
									pos:    position{line: 311, col: 78, offset: 8556},
									offset: 303,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 315, col: 1, offset: 8601},
			expr: &actionExpr{
				pos: position{line: 315, col: 23, offset: 8623},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 315, col: 23, offset: 8623},
					exprs: []any{
						&notExpr{
							pos: position{line: 315, col: 23, offset: 8623},
							expr: &ruleRefExpr{
								pos:    position{line: 315, col: 24, offset: 8624},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 315, col: 26, offset: 8626},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 315, col: 32, offset: 8632},
								expr: &actionExpr{
									pos: position{line: 315, col: 33, offset: 8633},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 315, col: 33, offset: 8633},
										exprs: []any{
											&notExpr{
												pos: position{line: 315, col: 33, offset: 8633},
												expr: &ruleRefExpr{
													pos:    position{line: 315, col: 34, offset: 8634},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 315, col: 36, offset: 8636},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 315, col: 42, offset: 8642},
													expr: &ruleRefExpr{
														pos:    position{line: 315, col: 43, offset: 8643},
														offset: 50,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 319, col: 1, offset: 8791},
			expr: &seqExpr{
				pos: position{line: 319, col: 25, offset: 8815},
				exprs: []any{
					&notExpr{
						pos: position{line: 319, col: 25, offset: 8815},
						expr: &seqExpr{
							pos: position{line: 319, col: 27, offset: 8817},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 319, col: 27, offset: 8817},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 319, col: 31, offset: 8821},
									expr: &litMatcher{
										pos:        position{line: 319, col: 32, offset: 8822},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 319, col: 37, offset: 8827},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 321, col: 1, offset: 8849},
			expr: &actionExpr{
				pos: position{line: 321, col: 18, offset: 8866},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 321, col: 18, offset: 8866},
					exprs: []any{
						&notExpr{
							pos: position{line: 321, col: 18, offset: 8866},
							expr: &ruleRefExpr{
								pos:    position{line: 321, col: 19, offset: 8867},
								offset: 321,
							},
						},
						&litMatcher{
							pos:        position{line: 321, col: 32, offset: 8880},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 37, offset: 8885},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 321, col: 44, offset: 8892},
								offset: 52,
							},
						},
						&litMatcher{
							pos:        position{line: 321, col: 65, offset: 8913},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 325, col: 1, offset: 8950},
			expr: &actionExpr{
				pos: position{line: 325, col: 23, offset: 8972},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 325, col: 23, offset: 8972},
					exprs: []any{
						&notExpr{
							pos: position{line: 325, col: 23, offset: 8972},
							expr: &ruleRefExpr{
								pos:    position{line: 325, col: 24, offset: 8973},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 26, offset: 8975},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 325, col: 32, offset: 8981},
								expr: &actionExpr{
									pos: position{line: 325, col: 33, offset: 8982},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 325, col: 33, offset: 8982},
										exprs: []any{
											&notExpr{
												pos: position{line: 325, col: 33, offset: 8982},
												expr: &ruleRefExpr{
													pos:    position{line: 325, col: 34, offset: 8983},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 325, col: 36, offset: 8985},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 325, col: 42, offset: 8991},
													expr: &ruleRefExpr{
														pos:    position{line: 325, col: 43, offset: 8992},
														offset: 53,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 329, col: 1, offset: 9152},
			expr: &seqExpr{
				pos: position{line: 329, col: 25, offset: 9176},
				exprs: []any{
					&notExpr{
						pos: position{line: 329, col: 25, offset: 9176},
						expr: &litMatcher{
							pos:        position{line: 329, col: 27, offset: 9178},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 329, col: 33, offset: 9184},
						offset: 87,
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 332, col: 1, offset: 9207},
			expr: &choiceExpr{
				pos: position{line: 332, col: 15, offset: 9221},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 332, col: 15, offset: 9221},
						offset: 55,
					},
					&ruleRefExpr{
						pos:    position{line: 332, col: 34, offset: 9240},
						offset: 58,
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 334, col: 1, offset: 9259},
			expr: &actionExpr{
				pos: position{line: 334, col: 20, offset: 9278},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 334, col: 20, offset: 9278},
					exprs: []any{
						&notExpr{
							pos: position{line: 334, col: 20, offset: 9278},
							expr: &ruleRefExpr{
								pos:    position{line: 334, col: 21, offset: 9279},
								offset: 320,
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 28, offset: 9286},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 334, col: 32, offset: 9290},
							expr: &notExpr{
								pos: position{line: 334, col: 34, offset: 9292},
								expr: &litMatcher{
									pos:        position{line: 334, col: 35, offset: 9293},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 40, offset: 9298},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 334, col: 47, offset: 9305},
								offset: 56,
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 70, offset: 9328},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 334, col: 74, offset: 9332},
							expr: &litMatcher{
								pos:        position{line: 334, col: 75, offset: 9333},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 334, col: 79, offset: 9337},
							expr: &notExpr{
								pos: position{line: 334, col: 81, offset: 9339},
								expr: &ruleRefExpr{
									pos:    position{line: 334, col: 82, offset: 9340},
									offset: 303,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 338, col: 1, offset: 9385},
			expr: &actionExpr{
				pos: position{line: 338, col: 25, offset: 9409},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 338, col: 25, offset: 9409},
					exprs: []any{
						&notExpr{
							pos: position{line: 338, col: 25, offset: 9409},
							expr: &ruleRefExpr{
								pos:    position{line: 338, col: 26, offset: 9410},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 28, offset: 9412},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 338, col: 34, offset: 9418},
								expr: &actionExpr{
									pos: position{line: 338, col: 35, offset: 9419},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 338, col: 35, offset: 9419},
										exprs: []any{
											&notExpr{
												pos: position{line: 338, col: 35, offset: 9419},
												expr: &ruleRefExpr{
													pos:    position{line: 338, col: 36, offset: 9420},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 338, col: 38, offset: 9422},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 338, col: 44, offset: 9428},
													expr: &ruleRefExpr{
														pos:    position{line: 338, col: 45, offset: 9429},
														offset: 57,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 342, col: 1, offset: 9543},
			expr: &seqExpr{
				pos: position{line: 342, col: 27, offset: 9569},
				exprs: []any{
					&notExpr{
						pos: position{line: 342, col: 27, offset: 9569},
						expr: &seqExpr{
							pos: position{line: 342, col: 29, offset: 9571},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 342, col: 29, offset: 9571},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 342, col: 33, offset: 9575},
									expr: &litMatcher{
										pos:        position{line: 342, col: 34, offset: 9576},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 342, col: 39, offset: 9581},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 344, col: 1, offset: 9603},
			expr: &actionExpr{
				pos: position{line: 344, col: 20, offset: 9622},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 344, col: 20, offset: 9622},
					exprs: []any{
						&notExpr{
							pos: position{line: 344, col: 20, offset: 9622},
							expr: &ruleRefExpr{
								pos:    position{line: 344, col: 21, offset: 9623},
								offset: 321,
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 34, offset: 9636},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 39, offset: 9641},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 344, col: 46, offset: 9648},
								offset: 59,
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 69, offset: 9671},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 348, col: 1, offset: 9708},
			expr: &actionExpr{
				pos: position{line: 348, col: 25, offset: 9732},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 348, col: 25, offset: 9732},
					exprs: []any{
						&notExpr{
							pos: position{line: 348, col: 25, offset: 9732},
							expr: &ruleRefExpr{
								pos:    position{line: 348, col: 26, offset: 9733},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 28, offset: 9735},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 348, col: 34, offset: 9741},
								expr: &actionExpr{
									pos: position{line: 348, col: 35, offset: 9742},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 348, col: 35, offset: 9742},
										exprs: []any{
											&notExpr{
												pos: position{line: 348, col: 35, offset: 9742},
												expr: &ruleRefExpr{
													pos:    position{line: 348, col: 36, offset: 9743},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 348, col: 38, offset: 9745},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 348, col: 44, offset: 9751},
													expr: &ruleRefExpr{
														pos:    position{line: 348, col: 45, offset: 9752},
														offset: 60,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 352, col: 1, offset: 9872},
			expr: &seqExpr{
				pos: position{line: 352, col: 27, offset: 9898},
				exprs: []any{
					&notExpr{
						pos: position{line: 352, col: 27, offset: 9898},
						expr: &litMatcher{
							pos:        position{line: 352, col: 29, offset: 9900},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 352, col: 35, offset: 9906},
						offset: 87,
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 357, col: 1, offset: 9931},
			expr: &actionExpr{
				pos: position{line: 357, col: 17, offset: 9947},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 357, col: 17, offset: 9947},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 357, col: 17, offset: 9947},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 22, offset: 9952},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 357, col: 29, offset: 9959},
								offset: 62,
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 49, offset: 9979},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 361, col: 1, offset: 10014},
			expr: &actionExpr{
				pos: position{line: 361, col: 22, offset: 10035},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 361, col: 22, offset: 10035},
					exprs: []any{
						&notExpr{
							pos: position{line: 361, col: 22, offset: 10035},
							expr: &ruleRefExpr{
								pos:    position{line: 361, col: 23, offset: 10036},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 25, offset: 10038},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 361, col: 31, offset: 10044},
								expr: &actionExpr{
									pos: position{line: 361, col: 32, offset: 10045},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 361, col: 32, offset: 10045},
										exprs: []any{
											&notExpr{
												pos: position{line: 361, col: 32, offset: 10045},
												expr: &ruleRefExpr{
													pos:    position{line: 361, col: 33, offset: 10046},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 361, col: 35, offset: 10048},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 361, col: 41, offset: 10054},
													expr: &ruleRefExpr{
														pos:    position{line: 361, col: 42, offset: 10055},
														offset: 63,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 365, col: 1, offset: 10212},
			expr: &seqExpr{
				pos: position{line: 365, col: 24, offset: 10235},
				exprs: []any{
					&notExpr{
						pos: position{line: 365, col: 24, offset: 10235},
						expr: &litMatcher{
							pos:        position{line: 365, col: 26, offset: 10237},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 365, col: 32, offset: 10243},
						offset: 87,
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 367, col: 1, offset: 10267},
			expr: &actionExpr{
				pos: position{line: 367, col: 20, offset: 10286},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 367, col: 21, offset: 10287},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 367, col: 21, offset: 10287},
							offset: 320,
						},
						&litMatcher{
							pos:        position{line: 367, col: 28, offset: 10294},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:    position{line: 367, col: 32, offset: 10298},
							offset: 62,
						},
						&litMatcher{
							pos:        position{line: 367, col: 51, offset: 10317},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 373, col: 1, offset: 10380},
			expr: &actionExpr{
				pos: position{line: 373, col: 19, offset: 10398},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 373, col: 19, offset: 10398},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 373, col: 19, offset: 10398},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 24, offset: 10403},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 373, col: 31, offset: 10410},
								offset: 66,
							},
						},
						&litMatcher{
							pos:        position{line: 373, col: 53, offset: 10432},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 377, col: 1, offset: 10467},
			expr: &actionExpr{
				pos: position{line: 377, col: 24, offset: 10490},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 377, col: 24, offset: 10490},
					exprs: []any{
						&notExpr{
							pos: position{line: 377, col: 24, offset: 10490},
							expr: &ruleRefExpr{
								pos:    position{line: 377, col: 25, offset: 10491},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 27, offset: 10493},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 377, col: 33, offset: 10499},
								expr: &actionExpr{
									pos: position{line: 377, col: 34, offset: 10500},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 377, col: 34, offset: 10500},
										exprs: []any{
											&notExpr{
												pos: position{line: 377, col: 34, offset: 10500},
												expr: &ruleRefExpr{
													pos:    position{line: 377, col: 35, offset: 10501},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 377, col: 37, offset: 10503},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 377, col: 43, offset: 10509},
													expr: &ruleRefExpr{
														pos:    position{line: 377, col: 44, offset: 10510},
														offset: 67,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 381, col: 1, offset: 10673},
			expr: &seqExpr{
				pos: position{line: 381, col: 26, offset: 10698},
				exprs: []any{
					&notExpr{
						pos: position{line: 381, col: 26, offset: 10698},
						expr: &litMatcher{
							pos:        position{line: 381, col: 28, offset: 10700},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 381, col: 34, offset: 10706},
						offset: 87,
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 383, col: 1, offset: 10730},
			expr: &actionExpr{
				pos: position{line: 383, col: 22, offset: 10751},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 383, col: 23, offset: 10752},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 383, col: 23, offset: 10752},
							offset: 320,
						},
						&litMatcher{
							pos:        position{line: 383, col: 30, offset: 10759},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:    position{line: 383, col: 34, offset: 10763},
							offset: 66,
						},
						&litMatcher{
							pos:        position{line: 383, col: 55, offset: 10784},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 388, col: 1, offset: 10846},
			expr: &choiceExpr{
				pos: position{line: 388, col: 18, offset: 10863},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 388, col: 18, offset: 10863},
						offset: 70,
					},
					&ruleRefExpr{
						pos:    position{line: 388, col: 40, offset: 10885},
						offset: 73,
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 390, col: 1, offset: 10907},
			expr: &actionExpr{
				pos: position{line: 390, col: 22, offset: 10928},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 390, col: 22, offset: 10928},
					exprs: []any{
						&notExpr{
							pos: position{line: 390, col: 22, offset: 10928},
							expr: &ruleRefExpr{
								pos:    position{line: 390, col: 23, offset: 10929},
								offset: 320,
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 30, offset: 10936},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 390, col: 34, offset: 10940},
							expr: &notExpr{
								pos: position{line: 390, col: 36, offset: 10942},
								expr: &litMatcher{
									pos:        position{line: 390, col: 37, offset: 10943},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 390, col: 42, offset: 10948},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 390, col: 49, offset: 10955},
								offset: 71,
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 75, offset: 10981},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 390, col: 79, offset: 10985},
							expr: &litMatcher{
								pos:        position{line: 390, col: 80, offset: 10986},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 390, col: 84, offset: 10990},
							expr: &notExpr{
								pos: position{line: 390, col: 86, offset: 10992},
								expr: &ruleRefExpr{
									pos:    position{line: 390, col: 87, offset: 10993},
									offset: 303,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 394, col: 1, offset: 11038},
			expr: &actionExpr{
				pos: position{line: 394, col: 28, offset: 11065},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 394, col: 28, offset: 11065},
					exprs: []any{
						&notExpr{
							pos: position{line: 394, col: 28, offset: 11065},
							expr: &ruleRefExpr{
								pos:    position{line: 394, col: 29, offset: 11066},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 394, col: 31, offset: 11068},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 394, col: 37, offset: 11074},
								expr: &actionExpr{
									pos: position{line: 394, col: 38, offset: 11075},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 394, col: 38, offset: 11075},
										exprs: []any{
											&notExpr{
												pos: position{line: 394, col: 38, offset: 11075},
												expr: &ruleRefExpr{
													pos:    position{line: 394, col: 39, offset: 11076},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 394, col: 41, offset: 11078},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 394, col: 47, offset: 11084},
													expr: &ruleRefExpr{
														pos:    position{line: 394, col: 48, offset: 11085},
														offset: 72,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 398, col: 1, offset: 11205},
			expr: &seqExpr{
				pos: position{line: 398, col: 30, offset: 11234},
				exprs: []any{
					&notExpr{
						pos: position{line: 398, col: 30, offset: 11234},
						expr: &seqExpr{
							pos: position{line: 398, col: 32, offset: 11236},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 398, col: 32, offset: 11236},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 398, col: 36, offset: 11240},
									expr: &litMatcher{
										pos:        position{line: 398, col: 37, offset: 11241},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 398, col: 42, offset: 11246},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 400, col: 1, offset: 11268},
			expr: &actionExpr{
				pos: position{line: 400, col: 22, offset: 11289},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 400, col: 22, offset: 11289},
					exprs: []any{
						&notExpr{
							pos: position{line: 400, col: 22, offset: 11289},
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 23, offset: 11290},
								offset: 321,
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 36, offset: 11303},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 41, offset: 11308},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 400, col: 48, offset: 11315},
								offset: 74,
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 74, offset: 11341},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 404, col: 1, offset: 11378},
			expr: &actionExpr{
				pos: position{line: 404, col: 28, offset: 11405},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 404, col: 28, offset: 11405},
					exprs: []any{
						&notExpr{
							pos: position{line: 404, col: 28, offset: 11405},
							expr: &ruleRefExpr{
								pos:    position{line: 404, col: 29, offset: 11406},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 31, offset: 11408},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 404, col: 37, offset: 11414},
								expr: &actionExpr{
									pos: position{line: 404, col: 38, offset: 11415},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 404, col: 38, offset: 11415},
										exprs: []any{
											&notExpr{
												pos: position{line: 404, col: 38, offset: 11415},
												expr: &ruleRefExpr{
													pos:    position{line: 404, col: 39, offset: 11416},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 404, col: 41, offset: 11418},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 404, col: 47, offset: 11424},
													expr: &ruleRefExpr{
														pos:    position{line: 404, col: 48, offset: 11425},
														offset: 75,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 408, col: 1, offset: 11551},
			expr: &seqExpr{
				pos: position{line: 408, col: 30, offset: 11580},
				exprs: []any{
					&notExpr{
						pos: position{line: 408, col: 30, offset: 11580},
						expr: &litMatcher{
							pos:        position{line: 408, col: 32, offset: 11582},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 408, col: 38, offset: 11588},
						offset: 87,
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 411, col: 1, offset: 11611},
			expr: &actionExpr{
				pos: position{line: 411, col: 10, offset: 11620},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 411, col: 10, offset: 11620},
					exprs: []any{
						&notExpr{
							pos: position{line: 411, col: 10, offset: 11620},
							expr: &litMatcher{
								pos:        position{line: 411, col: 11, offset: 11621},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 16, offset: 11626},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 21, offset: 11631},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 411, col: 25, offset: 11635},
								offset: 229,
							},
						},
						&labeledExpr{
							pos:   position{line: 411, col: 43, offset: 11653},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 49, offset: 11659},
								expr: &actionExpr{
									pos: position{line: 411, col: 50, offset: 11660},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 411, col: 50, offset: 11660},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 411, col: 50, offset: 11660},
												offset: 314,
											},
											&litMatcher{
												pos:        position{line: 411, col: 60, offset: 11670},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 411, col: 64, offset: 11674},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 411, col: 71, offset: 11681},
													offset: 78,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 107, offset: 11717},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 419, col: 1, offset: 11878},
			expr: &actionExpr{
				pos: position{line: 419, col: 19, offset: 11896},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 19, offset: 11896},
					exprs: []any{
						&notExpr{
							pos: position{line: 419, col: 19, offset: 11896},
							expr: &litMatcher{
								pos:        position{line: 419, col: 20, offset: 11897},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 419, col: 25, offset: 11902},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 30, offset: 11907},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 419, col: 34, offset: 11911},
								offset: 229,
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 52, offset: 11929},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 419, col: 58, offset: 11935},
								expr: &actionExpr{
									pos: position{line: 419, col: 59, offset: 11936},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 419, col: 59, offset: 11936},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 419, col: 59, offset: 11936},
												offset: 314,
											},
											&litMatcher{
												pos:        position{line: 419, col: 69, offset: 11946},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 419, col: 73, offset: 11950},
												label: "label",
												expr: &ruleRefExpr{
													pos:    position{line: 419, col: 80, offset: 11957},
													offset: 78,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 419, col: 116, offset: 11993},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 427, col: 1, offset: 12197},
			expr: &oneOrMoreExpr{
				pos: position{line: 427, col: 15, offset: 12211},
				expr: &seqExpr{
					pos: position{line: 427, col: 17, offset: 12213},
					exprs: []any{
						&notExpr{
							pos: position{line: 427, col: 17, offset: 12213},
							expr: &litMatcher{
								pos:        position{line: 427, col: 18, offset: 12214},
								val:        "]]",
								ignoreCase: false,
								want:       "\"]]\"",
							},
						},
						&choiceExpr{
							pos: position{line: 428, col: 6, offset: 12224},
							alternatives: []any{
								&oneOrMoreExpr{
									pos: position{line: 428, col: 6, offset: 12224},
									expr: &charClassMatcher{
										pos:        position{line: 428, col: 6, offset: 12224},
										val:        "[^\\r\\n{\\]]",
										chars:      []rune{'\r', '\n', '{', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 429, col: 7, offset: 12243},
									offset: 45,
								},
								&litMatcher{
									pos:        position{line: 430, col: 7, offset: 12269},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 436, col: 1, offset: 12282},
			expr: &choiceExpr{
				pos: position{line: 436, col: 14, offset: 12295},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 436, col: 14, offset: 12295},
						run: (*parser).callonAdmonition2,
						expr: &seqExpr{
							pos: position{line: 436, col: 14, offset: 12295},
							exprs: []any{
								&ruleRefExpr{
									pos:    position{line: 436, col: 14, offset: 12295},
									offset: 307,
								},
								&litMatcher{
									pos:        position{line: 437, col: 5, offset: 12316},
									val:        "NOTE: ",
									ignoreCase: false,
									want:       "\"NOTE: \"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 7, offset: 12399},
						run: (*parser).callonAdmonition6,
						expr: &litMatcher{
							pos:        position{line: 438, col: 7, offset: 12399},
							val:        "TIP: ",
							ignoreCase: false,
							want:       "\"TIP: \"",
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 7, offset: 12480},
						run: (*parser).callonAdmonition8,
						expr: &litMatcher{
							pos:        position{line: 439, col: 7, offset: 12480},
							val:        "IMPORTANT: ",
							ignoreCase: false,
							want:       "\"IMPORTANT: \"",
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 7, offset: 12573},
						run: (*parser).callonAdmonition10,
						expr: &litMatcher{
							pos:        position{line: 440, col: 7, offset: 12573},
							val:        "CAUTON: ",
							ignoreCase: false,
							want:       "\"CAUTON: \"",
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 7, offset: 12661},
						run: (*parser).callonAdmonition12,
						expr: &litMatcher{
							pos:        position{line: 441, col: 7, offset: 12661},
							val:        "WARNING: ",
							ignoreCase: false,
							want:       "\"WARNING: \"",
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 446, col: 1, offset: 12751},
			expr: &actionExpr{
				pos: position{line: 446, col: 18, offset: 12768},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 446, col: 18, offset: 12768},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 446, col: 18, offset: 12768},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 446, col: 26, offset: 12776},
								expr: &ruleRefExpr{
									pos:    position{line: 446, col: 27, offset: 12777},
									offset: 81,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 43, offset: 12793},
							label: "eol",
							expr: &ruleRefExpr{
								pos:    position{line: 446, col: 47, offset: 12797},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 454, col: 1, offset: 12954},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 12976},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 455, col: 5, offset: 12976},
						offset: 79,
					},
					&ruleRefExpr{
						pos:    position{line: 456, col: 5, offset: 12993},
						offset: 263,
					},
					&ruleRefExpr{
						pos:    position{line: 457, col: 5, offset: 13017},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 458, col: 5, offset: 13037},
						offset: 92,
					},
					&ruleRefExpr{
						pos:    position{line: 459, col: 5, offset: 13049},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 460, col: 5, offset: 13068},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 461, col: 5, offset: 13079},
						offset: 76,
					},
					&ruleRefExpr{
						pos:    position{line: 462, col: 5, offset: 13093},
						offset: 226,
					},
					&ruleRefExpr{
						pos:    position{line: 463, col: 5, offset: 13115},
						offset: 45,
					},
					&ruleRefExpr{
						pos:    position{line: 464, col: 5, offset: 13140},
						offset: 291,
					},
					&ruleRefExpr{
						pos:    position{line: 465, col: 5, offset: 13156},
						offset: 82,
					},
					&ruleRefExpr{
						pos:    position{line: 466, col: 5, offset: 13178},
						offset: 316,
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 469, col: 1, offset: 13209},
			expr: &actionExpr{
				pos: position{line: 469, col: 19, offset: 13227},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 469, col: 19, offset: 13227},
					expr: &seqExpr{
						pos: position{line: 469, col: 20, offset: 13228},
						exprs: []any{
							&notExpr{
								pos: position{line: 469, col: 20, offset: 13228},
								expr: &ruleRefExpr{
									pos:    position{line: 469, col: 21, offset: 13229},
									offset: 152,
								},
							},
							&notExpr{
								pos: position{line: 469, col: 31, offset: 13239},
								expr: &ruleRefExpr{
									pos:    position{line: 469, col: 32, offset: 13240},
									offset: 100,
								},
							},
							&notExpr{
								pos: position{line: 469, col: 42, offset: 13250},
								expr: &ruleRefExpr{
									pos:    position{line: 469, col: 43, offset: 13251},
									offset: 91,
								},
							},
							&charClassMatcher{
								pos:        position{line: 469, col: 64, offset: 13272},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 474, col: 1, offset: 13346},
			expr: &actionExpr{
				pos: position{line: 474, col: 12, offset: 13357},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 474, col: 12, offset: 13357},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 474, col: 12, offset: 13357},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 24, offset: 13369},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 474, col: 27, offset: 13372},
								expr: &ruleRefExpr{
									pos:    position{line: 474, col: 28, offset: 13373},
									offset: 84,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 474, col: 41, offset: 13386},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 45, offset: 13390},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 474, col: 51, offset: 13396},
								expr: &ruleRefExpr{
									pos:    position{line: 474, col: 52, offset: 13397},
									offset: 85,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 474, col: 68, offset: 13413},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 478, col: 1, offset: 13487},
			expr: &actionExpr{
				pos: position{line: 478, col: 14, offset: 13500},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 478, col: 14, offset: 13500},
					expr: &ruleRefExpr{
						pos:    position{line: 478, col: 14, offset: 13500},
						offset: 303,
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 482, col: 1, offset: 13550},
			expr: &seqExpr{
				pos: position{line: 482, col: 17, offset: 13566},
				exprs: []any{
					&notExpr{
						pos: position{line: 482, col: 17, offset: 13566},
						expr: &litMatcher{
							pos:        position{line: 482, col: 18, offset: 13567},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&choiceExpr{
						pos: position{line: 482, col: 24, offset: 13573},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 482, col: 24, offset: 13573},
								offset: 311,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 37, offset: 13586},
								offset: 318,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 42, offset: 13591},
								offset: 289,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 55, offset: 13604},
								offset: 202,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 63, offset: 13612},
								offset: 290,
							},
							&ruleRefExpr{
								pos: position{line: 482, col: 77, offset: 13626},
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 85, offset: 13634},
								offset: 291,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 97, offset: 13646},
								offset: 45,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 118, offset: 13667},
								offset: 287,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 137, offset: 13686},
								offset: 295,
							},
							&ruleRefExpr{
								pos:    position{line: 482, col: 149, offset: 13698},
								offset: 316,
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 486, col: 1, offset: 13724},
			expr: &actionExpr{
				pos: position{line: 486, col: 17, offset: 13740},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 486, col: 17, offset: 13740},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 486, col: 17, offset: 13740},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 28, offset: 13751},
								expr: &ruleRefExpr{
									pos:    position{line: 486, col: 29, offset: 13752},
									offset: 31,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 52, offset: 13775},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 487, col: 5, offset: 13786},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 487, col: 5, offset: 13786},
										offset: 47,
									},
									&ruleRefExpr{
										pos:    position{line: 488, col: 7, offset: 13802},
										offset: 54,
									},
									&ruleRefExpr{
										pos:    position{line: 489, col: 7, offset: 13820},
										offset: 69,
									},
									&ruleRefExpr{
										pos:    position{line: 490, col: 7, offset: 13841},
										offset: 171,
									},
									&ruleRefExpr{
										pos:    position{line: 491, col: 7, offset: 13858},
										offset: 65,
									},
									&ruleRefExpr{
										pos:    position{line: 492, col: 7, offset: 13880},
										offset: 61,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 497, col: 1, offset: 14029},
			expr: &choiceExpr{
				pos: position{line: 498, col: 5, offset: 14058},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 498, col: 5, offset: 14058},
						offset: 311,
					},
					&ruleRefExpr{
						pos:    position{line: 499, col: 5, offset: 14076},
						offset: 318,
					},
					&ruleRefExpr{
						pos:    position{line: 500, col: 5, offset: 14086},
						offset: 289,
					},
					&ruleRefExpr{
						pos:    position{line: 501, col: 5, offset: 14104},
						offset: 290,
					},
					&ruleRefExpr{
						pos:    position{line: 502, col: 5, offset: 14123},
						offset: 45,
					},
					&ruleRefExpr{
						pos:    position{line: 503, col: 5, offset: 14149},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 504, col: 5, offset: 14170},
						offset: 92,
					},
					&ruleRefExpr{
						pos:    position{line: 505, col: 5, offset: 14182},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 506, col: 5, offset: 14201},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 507, col: 5, offset: 14212},
						offset: 76,
					},
					&ruleRefExpr{
						pos:    position{line: 508, col: 5, offset: 14226},
						offset: 226,
					},
					&ruleRefExpr{
						pos:    position{line: 509, col: 5, offset: 14248},
						offset: 287,
					},
					&ruleRefExpr{
						pos:    position{line: 510, col: 5, offset: 14272},
						offset: 316,
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 513, col: 1, offset: 14296},
			expr: &actionExpr{
				pos: position{line: 513, col: 20, offset: 14315},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 513, col: 20, offset: 14315},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 513, col: 20, offset: 14315},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 24, offset: 14319},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 513, col: 36, offset: 14331},
								offset: 32,
							},
						},
						&litMatcher{
							pos:        position{line: 513, col: 56, offset: 14351},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 518, col: 1, offset: 14392},
			expr: &actionExpr{
				pos: position{line: 518, col: 14, offset: 14405},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 518, col: 14, offset: 14405},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 518, col: 14, offset: 14405},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 24, offset: 14415},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 518, col: 30, offset: 14421},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 518, col: 36, offset: 14427},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 518, col: 48, offset: 14439},
								offset: 43,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 518, col: 66, offset: 14457},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 522, col: 1, offset: 14589},
			expr: &actionExpr{
				pos: position{line: 522, col: 15, offset: 14603},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 522, col: 15, offset: 14603},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 522, col: 15, offset: 14603},
							offset: 91,
						},
						&notExpr{
							pos: position{line: 522, col: 36, offset: 14624},
							expr: &litMatcher{
								pos:        position{line: 522, col: 37, offset: 14625},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 41, offset: 14629},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 47, offset: 14635},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 53, offset: 14641},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 522, col: 65, offset: 14653},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 526, col: 1, offset: 14795},
			expr: &litMatcher{
				pos:        position{line: 526, col: 24, offset: 14818},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 530, col: 1, offset: 14830},
			expr: &actionExpr{
				pos: position{line: 530, col: 8, offset: 14837},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 530, col: 8, offset: 14837},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 530, col: 8, offset: 14837},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 16, offset: 14845},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 530, col: 22, offset: 14851},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 530, col: 22, offset: 14851},
									expr: &choiceExpr{
										pos: position{line: 530, col: 23, offset: 14852},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 530, col: 23, offset: 14852},
												offset: 303,
											},
											&litMatcher{
												pos:        position{line: 530, col: 38, offset: 14867},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 530, col: 44, offset: 14873},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 81, offset: 14910},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 530, col: 93, offset: 14922},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 535, col: 1, offset: 15044},
			expr: &actionExpr{
				pos: position{line: 535, col: 15, offset: 15058},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 535, col: 15, offset: 15058},
					exprs: []any{
						&notExpr{
							pos: position{line: 535, col: 15, offset: 15058},
							expr: &litMatcher{
								pos:        position{line: 535, col: 16, offset: 15059},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 535, col: 21, offset: 15064},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 33, offset: 15076},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 535, col: 39, offset: 15082},
								offset: 94,
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 56, offset: 15099},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 535, col: 68, offset: 15111},
								offset: 43,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 535, col: 86, offset: 15129},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 535, col: 96, offset: 15139},
							expr: &ruleRefExpr{
								pos:    position{line: 535, col: 97, offset: 15140},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 540, col: 1, offset: 15297},
			expr: &actionExpr{
				pos: position{line: 540, col: 19, offset: 15315},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 540, col: 19, offset: 15315},
					exprs: []any{
						&notExpr{
							pos: position{line: 540, col: 19, offset: 15315},
							expr: &ruleRefExpr{
								pos:    position{line: 540, col: 20, offset: 15316},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 22, offset: 15318},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 540, col: 27, offset: 15323},
								offset: 155,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParse",
			pos:  position{line: 545, col: 1, offset: 15355},
			expr: &actionExpr{
				pos: position{line: 545, col: 16, offset: 15370},
				run: (*parser).callonIncludeParse1,
				expr: &seqExpr{
					pos: position{line: 545, col: 16, offset: 15370},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 545, col: 16, offset: 15370},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 545, col: 24, offset: 15378},
								expr: &ruleRefExpr{
									pos:    position{line: 545, col: 25, offset: 15379},
									offset: 96,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 545, col: 47, offset: 15401},
							offset: 304,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseElement",
			pos:  position{line: 549, col: 1, offset: 15458},
			expr: &actionExpr{
				pos: position{line: 549, col: 23, offset: 15480},
				run: (*parser).callonIncludeParseElement1,
				expr: &seqExpr{
					pos: position{line: 549, col: 23, offset: 15480},
					exprs: []any{
						&notExpr{
							pos: position{line: 549, col: 23, offset: 15480},
							expr: &ruleRefExpr{
								pos:    position{line: 549, col: 24, offset: 15481},
								offset: 304,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 549, col: 34, offset: 15491},
							offset: 307,
						},
						&labeledExpr{
							pos:   position{line: 549, col: 50, offset: 15507},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 549, col: 59, offset: 15516},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 549, col: 59, offset: 15516},
										offset: 93,
									},
									&ruleRefExpr{
										pos:    position{line: 549, col: 73, offset: 15530},
										offset: 97,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 549, col: 91, offset: 15548},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLine",
			pos:  position{line: 553, col: 1, offset: 15587},
			expr: &actionExpr{
				pos: position{line: 553, col: 20, offset: 15606},
				run: (*parser).callonIncludeParseLine1,
				expr: &seqExpr{
					pos: position{line: 553, col: 20, offset: 15606},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 553, col: 20, offset: 15606},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 553, col: 28, offset: 15614},
								expr: &charClassMatcher{
									pos:        position{line: 553, col: 28, offset: 15614},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&andExpr{
							pos: position{line: 553, col: 37, offset: 15623},
							expr: &ruleRefExpr{
								pos:    position{line: 553, col: 38, offset: 15624},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludeParseLineElement",
			pos:  position{line: 557, col: 1, offset: 15711},
			expr: &oneOrMoreExpr{
				pos: position{line: 557, col: 28, offset: 15738},
				expr: &charClassMatcher{
					pos:        position{line: 557, col: 28, offset: 15738},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 562, col: 1, offset: 15753},
			expr: &actionExpr{
				pos: position{line: 562, col: 8, offset: 15760},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 562, col: 8, offset: 15760},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 562, col: 14, offset: 15766},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 562, col: 14, offset: 15766},
								offset: 101,
							},
							&ruleRefExpr{
								pos:    position{line: 562, col: 25, offset: 15777},
								offset: 102,
							},
							&ruleRefExpr{
								pos:    position{line: 562, col: 40, offset: 15792},
								offset: 103,
							},
							&ruleRefExpr{
								pos:    position{line: 562, col: 55, offset: 15807},
								offset: 157,
							},
						},
					},
				},
			},
		},
		{
			name: "LinkMacro",
			pos:  position{line: 566, col: 1, offset: 15848},
			expr: &litMatcher{
				pos:        position{line: 566, col: 13, offset: 15860},
				val:        "link:",
				ignoreCase: false,
				want:       "\"link:\"",
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 568, col: 1, offset: 15869},
			expr: &actionExpr{
				pos: position{line: 568, col: 12, offset: 15880},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 568, col: 12, offset: 15880},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 12, offset: 15880},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 16, offset: 15884},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 568, col: 21, offset: 15889},
								offset: 154,
							},
						},
						&litMatcher{
							pos:        position{line: 568, col: 30, offset: 15898},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 572, col: 1, offset: 15964},
			expr: &actionExpr{
				pos: position{line: 572, col: 16, offset: 15979},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 572, col: 16, offset: 15979},
					exprs: []any{
						&notExpr{
							pos: position{line: 572, col: 16, offset: 15979},
							expr: &litMatcher{
								pos:        position{line: 572, col: 17, offset: 15980},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 572, col: 22, offset: 15985},
							offset: 100,
						},
						&labeledExpr{
							pos:   position{line: 572, col: 32, offset: 15995},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 572, col: 36, offset: 15999},
								offset: 153,
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 40, offset: 16003},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 572, col: 52, offset: 16015},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 577, col: 1, offset: 16156},
			expr: &actionExpr{
				pos: position{line: 577, col: 16, offset: 16171},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 577, col: 16, offset: 16171},
					exprs: []any{
						&notExpr{
							pos: position{line: 577, col: 16, offset: 16171},
							expr: &litMatcher{
								pos:        position{line: 577, col: 17, offset: 16172},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 22, offset: 16177},
							label: "url",
							expr: &ruleRefExpr{
								pos:    position{line: 577, col: 27, offset: 16182},
								offset: 154,
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 36, offset: 16191},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 47, offset: 16202},
								expr: &ruleRefExpr{
									pos:    position{line: 577, col: 48, offset: 16203},
									offset: 43,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 583, col: 1, offset: 16336},
			expr: &actionExpr{
				pos: position{line: 583, col: 9, offset: 16344},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 583, col: 9, offset: 16344},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 583, col: 9, offset: 16344},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 583, col: 20, offset: 16355},
								expr: &ruleRefExpr{
									pos:    position{line: 583, col: 21, offset: 16356},
									offset: 12,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 583, col: 46, offset: 16381},
							offset: 109,
						},
						&labeledExpr{
							pos:   position{line: 583, col: 57, offset: 16392},
							label: "cells",
							expr: &ruleRefExpr{
								pos:    position{line: 583, col: 64, offset: 16399},
								offset: 105,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 583, col: 79, offset: 16414},
							offset: 126,
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 591, col: 1, offset: 16571},
			expr: &zeroOrMoreExpr{
				pos: position{line: 591, col: 17, offset: 16587},
				expr: &ruleRefExpr{
					pos:    position{line: 591, col: 18, offset: 16588},
					offset: 106,
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 593, col: 1, offset: 16605},
			expr: &choiceExpr{
				pos: position{line: 594, col: 9, offset: 16630},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 594, col: 9, offset: 16630},
						offset: 110,
					},
					&ruleRefExpr{
						pos:    position{line: 595, col: 11, offset: 16656},
						offset: 112,
					},
					&ruleRefExpr{
						pos:    position{line: 596, col: 11, offset: 16678},
						offset: 122,
					},
					&ruleRefExpr{
						pos:    position{line: 597, col: 11, offset: 16705},
						offset: 127,
					},
				},
			},
		},
		{
			name: "IncludedTableElements",
			pos:  position{line: 600, col: 1, offset: 16726},
			expr: &actionExpr{
				pos: position{line: 600, col: 25, offset: 16750},
				run: (*parser).callonIncludedTableElements1,
				expr: &seqExpr{
					pos: position{line: 600, col: 25, offset: 16750},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 600, col: 25, offset: 16750},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 33, offset: 16758},
								expr: &ruleRefExpr{
									pos:    position{line: 600, col: 34, offset: 16759},
									offset: 108,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 600, col: 57, offset: 16782},
							offset: 304,
						},
					},
				},
			},
		},
		{
			name: "IncludedTableElement",
			pos:  position{line: 605, col: 1, offset: 16901},
			expr: &choiceExpr{
				pos: position{line: 606, col: 9, offset: 16934},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 606, col: 9, offset: 16934},
						offset: 111,
					},
					&ruleRefExpr{
						pos:    position{line: 607, col: 11, offset: 16968},
						offset: 112,
					},
					&ruleRefExpr{
						pos:    position{line: 608, col: 11, offset: 16990},
						offset: 122,
					},
					&ruleRefExpr{
						pos:    position{line: 609, col: 11, offset: 17017},
						offset: 128,
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 612, col: 1, offset: 17046},
			expr: &actionExpr{
				pos: position{line: 612, col: 14, offset: 17059},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 612, col: 14, offset: 17059},
					exprs: []any{
						&notExpr{
							pos: position{line: 612, col: 14, offset: 17059},
							expr: &litMatcher{
								pos:        position{line: 612, col: 15, offset: 17060},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 612, col: 20, offset: 17065},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 612, col: 27, offset: 17072},
							expr: &litMatcher{
								pos:        position{line: 612, col: 27, offset: 17072},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:    position{line: 612, col: 32, offset: 17077},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 612, col: 42, offset: 17087},
							expr: &ruleRefExpr{
								pos:    position{line: 612, col: 43, offset: 17088},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 616, col: 1, offset: 17159},
			expr: &actionExpr{
				pos: position{line: 616, col: 18, offset: 17176},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 616, col: 18, offset: 17176},
					exprs: []any{
						&notExpr{
							pos: position{line: 616, col: 18, offset: 17176},
							expr: &ruleRefExpr{
								pos:    position{line: 616, col: 19, offset: 17177},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 616, col: 28, offset: 17186},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 616, col: 36, offset: 17194},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 616, col: 46, offset: 17204},
							expr: &ruleRefExpr{
								pos:    position{line: 616, col: 48, offset: 17206},
								offset: 297,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableEmptyLine",
			pos:  position{line: 620, col: 1, offset: 17287},
			expr: &actionExpr{
				pos: position{line: 620, col: 26, offset: 17312},
				run: (*parser).callonIncludedTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 620, col: 26, offset: 17312},
					exprs: []any{
						&notExpr{
							pos: position{line: 620, col: 26, offset: 17312},
							expr: &ruleRefExpr{
								pos:    position{line: 620, col: 27, offset: 17313},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 620, col: 36, offset: 17322},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 620, col: 44, offset: 17330},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 620, col: 54, offset: 17340},
							expr: &choiceExpr{
								pos: position{line: 620, col: 56, offset: 17342},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 620, col: 56, offset: 17342},
										offset: 297,
									},
									&ruleRefExpr{
										pos:    position{line: 620, col: 66, offset: 17352},
										offset: 304,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 624, col: 1, offset: 17435},
			expr: &choiceExpr{
				pos: position{line: 624, col: 16, offset: 17450},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 624, col: 16, offset: 17450},
						offset: 114,
					},
					&ruleRefExpr{
						pos:    position{line: 624, col: 35, offset: 17469},
						offset: 116,
					},
					&ruleRefExpr{
						pos:    position{line: 624, col: 55, offset: 17489},
						offset: 113,
					},
					&ruleRefExpr{
						pos:    position{line: 624, col: 68, offset: 17502},
						offset: 115,
					},
					&ruleRefExpr{
						pos:    position{line: 624, col: 82, offset: 17516},
						offset: 119,
					},
					&ruleRefExpr{
						pos:    position{line: 624, col: 98, offset: 17532},
						offset: 120,
					},
					&ruleRefExpr{
						pos:    position{line: 624, col: 113, offset: 17547},
						offset: 121,
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 626, col: 1, offset: 17573},
			expr: &actionExpr{
				pos: position{line: 626, col: 14, offset: 17586},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 626, col: 14, offset: 17586},
					exprs: []any{
						&notExpr{
							pos: position{line: 626, col: 14, offset: 17586},
							expr: &ruleRefExpr{
								pos:    position{line: 626, col: 15, offset: 17587},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 626, col: 24, offset: 17596},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 626, col: 32, offset: 17604},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 626, col: 42, offset: 17614},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 626, col: 48, offset: 17620},
								offset: 271,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfDef",
			pos:  position{line: 630, col: 1, offset: 17683},
			expr: &actionExpr{
				pos: position{line: 630, col: 20, offset: 17702},
				run: (*parser).callonTableInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 630, col: 20, offset: 17702},
					exprs: []any{
						&notExpr{
							pos: position{line: 630, col: 20, offset: 17702},
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 21, offset: 17703},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 630, col: 30, offset: 17712},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 630, col: 38, offset: 17720},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 48, offset: 17730},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 54, offset: 17736},
								offset: 271,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 630, col: 60, offset: 17742},
							offset: 297,
						},
						&notExpr{
							pos: position{line: 630, col: 68, offset: 17750},
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 69, offset: 17751},
								offset: 146,
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 95, offset: 17777},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 104, offset: 17786},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 122, offset: 17804},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 630, col: 128, offset: 17810},
								offset: 119,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 644, col: 1, offset: 18151},
			expr: &actionExpr{
				pos: position{line: 644, col: 15, offset: 18165},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 644, col: 15, offset: 18165},
					exprs: []any{
						&notExpr{
							pos: position{line: 644, col: 15, offset: 18165},
							expr: &ruleRefExpr{
								pos:    position{line: 644, col: 16, offset: 18166},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 644, col: 25, offset: 18175},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 644, col: 33, offset: 18183},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 644, col: 43, offset: 18193},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 644, col: 50, offset: 18200},
								offset: 273,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfNDef",
			pos:  position{line: 648, col: 1, offset: 18267},
			expr: &actionExpr{
				pos: position{line: 648, col: 21, offset: 18287},
				run: (*parser).callonTableInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 648, col: 21, offset: 18287},
					exprs: []any{
						&notExpr{
							pos: position{line: 648, col: 21, offset: 18287},
							expr: &ruleRefExpr{
								pos:    position{line: 648, col: 22, offset: 18288},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 648, col: 31, offset: 18297},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 648, col: 39, offset: 18305},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 648, col: 49, offset: 18315},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:    position{line: 648, col: 56, offset: 18322},
								offset: 273,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 648, col: 63, offset: 18329},
							offset: 297,
						},
						&notExpr{
							pos: position{line: 648, col: 71, offset: 18337},
							expr: &ruleRefExpr{
								pos:    position{line: 648, col: 72, offset: 18338},
								offset: 146,
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 98, offset: 18364},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 648, col: 107, offset: 18373},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 125, offset: 18391},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 648, col: 131, offset: 18397},
								offset: 119,
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfEval",
			pos:  position{line: 662, col: 1, offset: 18740},
			expr: &actionExpr{
				pos: position{line: 662, col: 15, offset: 18754},
				run: (*parser).callonTableIfEval1,
				expr: &seqExpr{
					pos: position{line: 662, col: 15, offset: 18754},
					exprs: []any{
						&notExpr{
							pos: position{line: 662, col: 15, offset: 18754},
							expr: &ruleRefExpr{
								pos:    position{line: 662, col: 16, offset: 18755},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 662, col: 25, offset: 18764},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 662, col: 33, offset: 18772},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 662, col: 43, offset: 18782},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 662, col: 50, offset: 18789},
								offset: 282,
							},
						},
					},
				},
			},
		},
		{
			name: "TableInlineIfEval",
			pos:  position{line: 666, col: 1, offset: 18856},
			expr: &actionExpr{
				pos: position{line: 666, col: 21, offset: 18876},
				run: (*parser).callonTableInlineIfEval1,
				expr: &seqExpr{
					pos: position{line: 666, col: 21, offset: 18876},
					exprs: []any{
						&notExpr{
							pos: position{line: 666, col: 21, offset: 18876},
							expr: &ruleRefExpr{
								pos:    position{line: 666, col: 22, offset: 18877},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 666, col: 31, offset: 18886},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 666, col: 39, offset: 18894},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 666, col: 49, offset: 18904},
							label: "ifeval",
							expr: &ruleRefExpr{
								pos:    position{line: 666, col: 56, offset: 18911},
								offset: 282,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 666, col: 63, offset: 18918},
							offset: 297,
						},
						&notExpr{
							pos: position{line: 666, col: 71, offset: 18926},
							expr: &ruleRefExpr{
								pos:    position{line: 666, col: 72, offset: 18927},
								offset: 146,
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 98, offset: 18953},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 666, col: 107, offset: 18962},
								offset: 132,
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 125, offset: 18980},
							label: "endif",
							expr: &ruleRefExpr{
								pos:    position{line: 666, col: 131, offset: 18986},
								offset: 119,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 680, col: 1, offset: 19329},
			expr: &actionExpr{
				pos: position{line: 680, col: 17, offset: 19345},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 680, col: 17, offset: 19345},
					exprs: []any{
						&notExpr{
							pos: position{line: 680, col: 17, offset: 19345},
							expr: &ruleRefExpr{
								pos:    position{line: 680, col: 18, offset: 19346},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 680, col: 27, offset: 19355},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 680, col: 35, offset: 19363},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 680, col: 45, offset: 19373},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:    position{line: 680, col: 54, offset: 19382},
								offset: 277,
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 684, col: 1, offset: 19452},
			expr: &actionExpr{
				pos: position{line: 684, col: 16, offset: 19467},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 684, col: 16, offset: 19467},
					exprs: []any{
						&notExpr{
							pos: position{line: 684, col: 16, offset: 19467},
							expr: &ruleRefExpr{
								pos:    position{line: 684, col: 17, offset: 19468},
								offset: 126,
							},
						},
						&choiceExpr{
							pos: position{line: 684, col: 27, offset: 19478},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 684, col: 27, offset: 19478},
									offset: 297,
								},
								&ruleRefExpr{
									pos:    position{line: 684, col: 37, offset: 19488},
									offset: 306,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 54, offset: 19505},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 684, col: 63, offset: 19514},
								offset: 249,
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 688, col: 1, offset: 19605},
			expr: &actionExpr{
				pos: position{line: 688, col: 25, offset: 19629},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 688, col: 25, offset: 19629},
					exprs: []any{
						&notExpr{
							pos: position{line: 688, col: 25, offset: 19629},
							expr: &ruleRefExpr{
								pos:    position{line: 688, col: 26, offset: 19630},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 688, col: 35, offset: 19639},
							offset: 297,
						},
						&labeledExpr{
							pos:   position{line: 688, col: 43, offset: 19647},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 688, col: 52, offset: 19656},
								offset: 252,
							},
						},
					},
				},
			},
		},
		{
			name: "TableFileInclude",
			pos:  position{line: 692, col: 1, offset: 19745},
			expr: &actionExpr{
				pos: position{line: 692, col: 20, offset: 19764},
				run: (*parser).callonTableFileInclude1,
				expr: &seqExpr{
					pos: position{line: 692, col: 20, offset: 19764},
					exprs: []any{
						&notExpr{
							pos: position{line: 692, col: 20, offset: 19764},
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 21, offset: 19765},
								offset: 126,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 692, col: 30, offset: 19774},
							offset: 297,
						},
						&notExpr{
							pos: position{line: 692, col: 38, offset: 19782},
							expr: &litMatcher{
								pos:        position{line: 692, col: 39, offset: 19783},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 692, col: 44, offset: 19788},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 692, col: 56, offset: 19800},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 62, offset: 19806},
								offset: 94,
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 79, offset: 19823},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 91, offset: 19835},
								offset: 43,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 692, col: 109, offset: 19853},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 692, col: 119, offset: 19863},
							expr: &ruleRefExpr{
								pos:    position{line: 692, col: 120, offset: 19864},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 696, col: 1, offset: 20020},
			expr: &oneOrMoreExpr{
				pos: position{line: 696, col: 19, offset: 20038},
				expr: &ruleRefExpr{
					pos:    position{line: 696, col: 19, offset: 20038},
					offset: 110,
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 698, col: 1, offset: 20055},
			expr: &actionExpr{
				pos: position{line: 698, col: 26, offset: 20080},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 698, col: 26, offset: 20080},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 698, col: 26, offset: 20080},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 698, col: 34, offset: 20088},
								expr: &ruleRefExpr{
									pos:    position{line: 698, col: 35, offset: 20089},
									offset: 125,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 698, col: 67, offset: 20121},
							offset: 304,
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 702, col: 1, offset: 20199},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 20236},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 703, col: 5, offset: 20236},
						offset: 86,
					},
					&ruleRefExpr{
						pos:    position{line: 704, col: 5, offset: 20256},
						offset: 92,
					},
					&ruleRefExpr{
						pos:    position{line: 705, col: 5, offset: 20268},
						offset: 90,
					},
					&ruleRefExpr{
						pos:    position{line: 706, col: 5, offset: 20287},
						offset: 99,
					},
					&ruleRefExpr{
						pos:    position{line: 707, col: 5, offset: 20298},
						offset: 76,
					},
					&ruleRefExpr{
						pos:    position{line: 708, col: 5, offset: 20313},
						offset: 226,
					},
					&ruleRefExpr{
						pos:    position{line: 709, col: 5, offset: 20334},
						offset: 45,
					},
					&ruleRefExpr{
						pos:    position{line: 710, col: 5, offset: 20359},
						offset: 291,
					},
					&ruleRefExpr{
						pos:    position{line: 711, col: 5, offset: 20375},
						offset: 144,
					},
					&ruleRefExpr{
						pos:    position{line: 712, col: 5, offset: 20406},
						offset: 316,
					},
					&ruleRefExpr{
						pos:    position{line: 713, col: 5, offset: 20433},
						offset: 297,
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 716, col: 1, offset: 20450},
			expr: &seqExpr{
				pos: position{line: 716, col: 12, offset: 20461},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 716, col: 12, offset: 20461},
						offset: 297,
					},
					&notExpr{
						pos: position{line: 716, col: 20, offset: 20469},
						expr: &litMatcher{
							pos:        position{line: 716, col: 21, offset: 20470},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&litMatcher{
						pos:        position{line: 716, col: 26, offset: 20475},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 716, col: 33, offset: 20482},
						expr: &litMatcher{
							pos:        position{line: 716, col: 33, offset: 20482},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 716, col: 38, offset: 20487},
						offset: 314,
					},
					&andExpr{
						pos: position{line: 716, col: 48, offset: 20497},
						expr: &ruleRefExpr{
							pos:    position{line: 716, col: 49, offset: 20498},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 718, col: 1, offset: 20511},
			expr: &actionExpr{
				pos: position{line: 718, col: 12, offset: 20522},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 718, col: 12, offset: 20522},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 718, col: 12, offset: 20522},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 718, col: 21, offset: 20531},
								offset: 130,
							},
						},
						&labeledExpr{
							pos:   position{line: 718, col: 46, offset: 20556},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 718, col: 57, offset: 20567},
								expr: &ruleRefExpr{
									pos:    position{line: 718, col: 58, offset: 20568},
									offset: 131,
								},
							},
						},
						&andExpr{
							pos: position{line: 718, col: 86, offset: 20596},
							expr: &choiceExpr{
								pos: position{line: 718, col: 88, offset: 20598},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 718, col: 88, offset: 20598},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 718, col: 99, offset: 20609},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 718, col: 121, offset: 20631},
										offset: 297,
									},
									&ruleRefExpr{
										pos:    position{line: 718, col: 131, offset: 20641},
										offset: 304,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedTableRow",
			pos:  position{line: 727, col: 1, offset: 20882},
			expr: &actionExpr{
				pos: position{line: 727, col: 20, offset: 20901},
				run: (*parser).callonIncludedTableRow1,
				expr: &seqExpr{
					pos: position{line: 727, col: 20, offset: 20901},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 727, col: 20, offset: 20901},
							label: "initial",
							expr: &ruleRefExpr{
								pos:    position{line: 727, col: 29, offset: 20910},
								offset: 130,
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 54, offset: 20935},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 727, col: 65, offset: 20946},
								expr: &ruleRefExpr{
									pos:    position{line: 727, col: 66, offset: 20947},
									offset: 131,
								},
							},
						},
						&andExpr{
							pos: position{line: 727, col: 94, offset: 20975},
							expr: &choiceExpr{
								pos: position{line: 727, col: 96, offset: 20977},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 727, col: 96, offset: 20977},
										offset: 304,
									},
									&ruleRefExpr{
										pos:    position{line: 727, col: 108, offset: 20989},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 727, col: 130, offset: 21011},
										offset: 297,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 736, col: 1, offset: 21251},
			expr: &choiceExpr{
				pos: position{line: 736, col: 23, offset: 21273},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 736, col: 23, offset: 21273},
						offset: 147,
					},
					&ruleRefExpr{
						pos:    position{line: 736, col: 54, offset: 21304},
						offset: 146,
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 738, col: 1, offset: 21332},
			expr: &actionExpr{
				pos: position{line: 738, col: 26, offset: 21357},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 738, col: 26, offset: 21357},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 738, col: 26, offset: 21357},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 738, col: 34, offset: 21365},
								offset: 146,
							},
						},
						&labeledExpr{
							pos:   position{line: 738, col: 61, offset: 21392},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 738, col: 70, offset: 21401},
								offset: 132,
							},
						},
						&andExpr{
							pos: position{line: 738, col: 88, offset: 21419},
							expr: &choiceExpr{
								pos: position{line: 738, col: 90, offset: 21421},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 738, col: 90, offset: 21421},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 738, col: 101, offset: 21432},
										offset: 123,
									},
									&ruleRefExpr{
										pos:    position{line: 738, col: 119, offset: 21450},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 738, col: 133, offset: 21464},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 738, col: 155, offset: 21486},
										offset: 297,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 743, col: 1, offset: 21613},
			expr: &actionExpr{
				pos: position{line: 743, col: 30, offset: 21642},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 743, col: 30, offset: 21642},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 743, col: 30, offset: 21642},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 743, col: 38, offset: 21650},
								offset: 147,
							},
						},
						&labeledExpr{
							pos:   position{line: 743, col: 68, offset: 21680},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 743, col: 77, offset: 21689},
								offset: 132,
							},
						},
						&andExpr{
							pos: position{line: 743, col: 95, offset: 21707},
							expr: &choiceExpr{
								pos: position{line: 743, col: 97, offset: 21709},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 743, col: 97, offset: 21709},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 743, col: 108, offset: 21720},
										offset: 123,
									},
									&ruleRefExpr{
										pos:    position{line: 743, col: 126, offset: 21738},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 743, col: 140, offset: 21752},
										offset: 129,
									},
									&ruleRefExpr{
										pos:    position{line: 743, col: 162, offset: 21774},
										offset: 297,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 748, col: 1, offset: 21897},
			expr: &actionExpr{
				pos: position{line: 748, col: 20, offset: 21916},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 748, col: 20, offset: 21916},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 748, col: 29, offset: 21925},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 748, col: 29, offset: 21925},
								offset: 136,
							},
							&ruleRefExpr{
								pos:    position{line: 748, col: 50, offset: 21946},
								offset: 141,
							},
							&ruleRefExpr{
								pos:    position{line: 748, col: 72, offset: 21968},
								offset: 133,
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 752, col: 1, offset: 22012},
			expr: &actionExpr{
				pos: position{line: 752, col: 13, offset: 22024},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 752, col: 13, offset: 22024},
					expr: &choiceExpr{
						pos: position{line: 752, col: 15, offset: 22026},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 752, col: 15, offset: 22026},
								offset: 126,
							},
							&ruleRefExpr{
								pos:    position{line: 752, col: 26, offset: 22037},
								offset: 129,
							},
							&ruleRefExpr{
								pos:    position{line: 752, col: 48, offset: 22059},
								offset: 297,
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 756, col: 1, offset: 22108},
			expr: &seqExpr{
				pos: position{line: 756, col: 24, offset: 22131},
				exprs: []any{
					&notExpr{
						pos: position{line: 756, col: 24, offset: 22131},
						expr: &ruleRefExpr{
							pos:    position{line: 756, col: 25, offset: 22132},
							offset: 126,
						},
					},
					&notExpr{
						pos: position{line: 756, col: 34, offset: 22141},
						expr: &ruleRefExpr{
							pos:    position{line: 756, col: 35, offset: 22142},
							offset: 129,
						},
					},
					&notExpr{
						pos: position{line: 756, col: 54, offset: 22161},
						expr: &ruleRefExpr{
							pos:    position{line: 756, col: 55, offset: 22162},
							offset: 112,
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 758, col: 1, offset: 22175},
			expr: &notExpr{
				pos: position{line: 758, col: 33, offset: 22207},
				expr: &ruleRefExpr{
					pos:    position{line: 758, col: 34, offset: 22208},
					offset: 112,
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 760, col: 1, offset: 22221},
			expr: &actionExpr{
				pos: position{line: 760, col: 22, offset: 22242},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 760, col: 22, offset: 22242},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 760, col: 22, offset: 22242},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 760, col: 28, offset: 22248},
								expr: &ruleRefExpr{
									pos:    position{line: 760, col: 29, offset: 22249},
									offset: 137,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 760, col: 51, offset: 22271},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 760, col: 60, offset: 22280},
								offset: 140,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 770, col: 1, offset: 22538},
			expr: &choiceExpr{
				pos: position{line: 770, col: 23, offset: 22560},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 770, col: 23, offset: 22560},
						offset: 139,
					},
					&ruleRefExpr{
						pos:    position{line: 770, col: 50, offset: 22587},
						offset: 138,
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 772, col: 1, offset: 22621},
			expr: &actionExpr{
				pos: position{line: 772, col: 35, offset: 22655},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 772, col: 35, offset: 22655},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 772, col: 35, offset: 22655},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 772, col: 56, offset: 22676},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 772, col: 64, offset: 22684},
								expr: &ruleRefExpr{
									pos:    position{line: 772, col: 64, offset: 22684},
									offset: 297,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 772, col: 73, offset: 22693},
							offset: 135,
						},
						&labeledExpr{
							pos:   position{line: 772, col: 103, offset: 22723},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 772, col: 111, offset: 22731},
								expr: &ruleRefExpr{
									pos:    position{line: 772, col: 112, offset: 22732},
									offset: 142,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 772, col: 133, offset: 22753},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 772, col: 156, offset: 22776},
								expr: &actionExpr{
									pos: position{line: 772, col: 157, offset: 22777},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 772, col: 157, offset: 22777},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 772, col: 157, offset: 22777},
												label: "nl",
												expr: &ruleRefExpr{
													pos:    position{line: 772, col: 160, offset: 22780},
													offset: 297,
												},
											},
											&ruleRefExpr{
												pos:    position{line: 772, col: 168, offset: 22788},
												offset: 314,
											},
											&andExpr{
												pos: position{line: 772, col: 178, offset: 22798},
												expr: &ruleRefExpr{
													pos:    position{line: 772, col: 180, offset: 22800},
													offset: 297,
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 772, col: 209, offset: 22829},
							expr: &ruleRefExpr{
								pos:    position{line: 772, col: 210, offset: 22830},
								offset: 297,
							},
						},
						&notExpr{
							pos: position{line: 772, col: 218, offset: 22838},
							expr: &choiceExpr{
								pos: position{line: 772, col: 220, offset: 22840},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 772, col: 220, offset: 22840},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 772, col: 234, offset: 22854},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 772, col: 245, offset: 22865},
										offset: 129,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 772, col: 267, offset: 22887},
							expr: &choiceExpr{
								pos: position{line: 772, col: 269, offset: 22889},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 772, col: 269, offset: 22889},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 772, col: 291, offset: 22911},
										offset: 140,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 785, col: 1, offset: 23268},
			expr: &actionExpr{
				pos: position{line: 785, col: 28, offset: 23295},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 785, col: 28, offset: 23295},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 785, col: 28, offset: 23295},
							offset: 134,
						},
						&ruleRefExpr{
							pos:    position{line: 785, col: 49, offset: 23316},
							offset: 297,
						},
						&ruleRefExpr{
							pos:    position{line: 785, col: 57, offset: 23324},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 785, col: 67, offset: 23334},
							expr: &ruleRefExpr{
								pos:    position{line: 785, col: 69, offset: 23336},
								offset: 297,
							},
						},
						&notExpr{
							pos: position{line: 785, col: 78, offset: 23345},
							expr: &ruleRefExpr{
								pos:    position{line: 785, col: 79, offset: 23346},
								offset: 126,
							},
						},
						&notExpr{
							pos: position{line: 785, col: 88, offset: 23355},
							expr: &ruleRefExpr{
								pos:    position{line: 785, col: 89, offset: 23356},
								offset: 129,
							},
						},
						&notExpr{
							pos: position{line: 785, col: 108, offset: 23375},
							expr: &ruleRefExpr{
								pos:    position{line: 785, col: 109, offset: 23376},
								offset: 112,
							},
						},
						&andExpr{
							pos: position{line: 785, col: 121, offset: 23388},
							expr: &choiceExpr{
								pos: position{line: 785, col: 123, offset: 23390},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 785, col: 123, offset: 23390},
										offset: 137,
									},
									&ruleRefExpr{
										pos:    position{line: 785, col: 145, offset: 23412},
										offset: 140,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 790, col: 1, offset: 23499},
			expr: &actionExpr{
				pos: position{line: 790, col: 27, offset: 23525},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 790, col: 27, offset: 23525},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 790, col: 27, offset: 23525},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 790, col: 48, offset: 23546},
							label: "nl",
							expr: &ruleRefExpr{
								pos:    position{line: 790, col: 51, offset: 23549},
								offset: 297,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 790, col: 59, offset: 23557},
							offset: 135,
						},
						&labeledExpr{
							pos:   position{line: 790, col: 89, offset: 23587},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 790, col: 97, offset: 23595},
								expr: &ruleRefExpr{
									pos:    position{line: 790, col: 98, offset: 23596},
									offset: 142,
								},
							},
						},
						&andExpr{
							pos: position{line: 790, col: 119, offset: 23617},
							expr: &choiceExpr{
								pos: position{line: 790, col: 121, offset: 23619},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 790, col: 121, offset: 23619},
										offset: 126,
									},
									&ruleRefExpr{
										pos:    position{line: 790, col: 132, offset: 23630},
										offset: 123,
									},
									&ruleRefExpr{
										pos:    position{line: 790, col: 150, offset: 23648},
										offset: 112,
									},
									&ruleRefExpr{
										pos:    position{line: 790, col: 164, offset: 23662},
										offset: 129,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 797, col: 1, offset: 23837},
			expr: &actionExpr{
				pos: position{line: 797, col: 23, offset: 23859},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 797, col: 23, offset: 23859},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 797, col: 23, offset: 23859},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 797, col: 44, offset: 23880},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 797, col: 52, offset: 23888},
								expr: &ruleRefExpr{
									pos:    position{line: 797, col: 53, offset: 23889},
									offset: 142,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 802, col: 1, offset: 23976},
			expr: &actionExpr{
				pos: position{line: 802, col: 22, offset: 23997},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 802, col: 22, offset: 23997},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 802, col: 22, offset: 23997},
							offset: 134,
						},
						&labeledExpr{
							pos:   position{line: 802, col: 44, offset: 24019},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 803, col: 5, offset: 24033},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 803, col: 5, offset: 24033},
										offset: 144,
									},
									&ruleRefExpr{
										pos:    position{line: 804, col: 5, offset: 24064},
										offset: 145,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 809, col: 1, offset: 24129},
			expr: &actionExpr{
				pos: position{line: 809, col: 21, offset: 24149},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 809, col: 21, offset: 24149},
					exprs: []any{
						&notExpr{
							pos: position{line: 809, col: 21, offset: 24149},
							expr: &ruleRefExpr{
								pos:    position{line: 809, col: 22, offset: 24150},
								offset: 146,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 809, col: 48, offset: 24176},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 809, col: 59, offset: 24187},
							label: "element",
							expr: &ruleRefExpr{
								pos:    position{line: 809, col: 68, offset: 24196},
								offset: 2,
							},
						},
						&notExpr{
							pos: position{line: 809, col: 82, offset: 24210},
							expr: &ruleRefExpr{
								pos:    position{line: 809, col: 83, offset: 24211},
								offset: 129,
							},
						},
						&notExpr{
							pos: position{line: 809, col: 103, offset: 24231},
							expr: &ruleRefExpr{
								pos:    position{line: 809, col: 104, offset: 24232},
								offset: 126,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 814, col: 1, offset: 24277},
			expr: &actionExpr{
				pos: position{line: 814, col: 28, offset: 24304},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 814, col: 28, offset: 24304},
					expr: &seqExpr{
						pos: position{line: 814, col: 29, offset: 24305},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 814, col: 29, offset: 24305},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&notExpr{
								pos: position{line: 814, col: 39, offset: 24315},
								expr: &ruleRefExpr{
									pos:    position{line: 814, col: 40, offset: 24316},
									offset: 129,
								},
							},
							&notExpr{
								pos: position{line: 814, col: 59, offset: 24335},
								expr: &ruleRefExpr{
									pos:    position{line: 814, col: 60, offset: 24336},
									offset: 126,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 818, col: 1, offset: 24408},
			expr: &actionExpr{
				pos: position{line: 818, col: 27, offset: 24434},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &choiceExpr{
					pos: position{line: 818, col: 28, offset: 24435},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 818, col: 28, offset: 24435},
							val:        "\\|",
							ignoreCase: false,
							want:       "\"\\\\|\"",
						},
						&charClassMatcher{
							pos:        position{line: 818, col: 36, offset: 24443},
							val:        "[^|\\r\\n]",
							chars:      []rune{'|', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 823, col: 1, offset: 24562},
			expr: &actionExpr{
				pos: position{line: 823, col: 29, offset: 24590},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 823, col: 29, offset: 24590},
					exprs: []any{
						&notExpr{
							pos: position{line: 823, col: 29, offset: 24590},
							expr: &ruleRefExpr{
								pos:    position{line: 823, col: 30, offset: 24591},
								offset: 126,
							},
						},
						&choiceExpr{
							pos: position{line: 823, col: 40, offset: 24601},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 823, col: 40, offset: 24601},
									offset: 306,
								},
								&ruleRefExpr{
									pos:    position{line: 823, col: 58, offset: 24619},
									offset: 297,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 823, col: 67, offset: 24628},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 823, col: 77, offset: 24638},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 823, col: 84, offset: 24645},
								expr: &ruleRefExpr{
									pos:    position{line: 823, col: 85, offset: 24646},
									offset: 151,
								},
							},
						},
						&notExpr{
							pos: position{line: 823, col: 103, offset: 24664},
							expr: &litMatcher{
								pos:        position{line: 823, col: 104, offset: 24665},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 823, col: 109, offset: 24670},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 830, col: 1, offset: 24786},
			expr: &actionExpr{
				pos: position{line: 830, col: 32, offset: 24817},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 830, col: 32, offset: 24817},
					exprs: []any{
						&notExpr{
							pos: position{line: 830, col: 32, offset: 24817},
							expr: &ruleRefExpr{
								pos:    position{line: 830, col: 33, offset: 24818},
								offset: 126,
							},
						},
						&labeledExpr{
							pos:   position{line: 830, col: 42, offset: 24827},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 830, col: 49, offset: 24834},
								expr: &ruleRefExpr{
									pos:    position{line: 830, col: 50, offset: 24835},
									offset: 149,
								},
							},
						},
						&notExpr{
							pos: position{line: 830, col: 78, offset: 24863},
							expr: &litMatcher{
								pos:        position{line: 830, col: 79, offset: 24864},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 830, col: 84, offset: 24869},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 835, col: 1, offset: 24974},
			expr: &actionExpr{
				pos: position{line: 835, col: 26, offset: 24999},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 835, col: 26, offset: 24999},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 835, col: 26, offset: 24999},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 835, col: 36, offset: 25009},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 835, col: 44, offset: 25017},
								offset: 151,
							},
						},
						&andCodeExpr{
							pos: position{line: 835, col: 61, offset: 25034},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 842, col: 1, offset: 25160},
			expr: &actionExpr{
				pos: position{line: 842, col: 29, offset: 25188},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 842, col: 29, offset: 25188},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 842, col: 29, offset: 25188},
							label: "lead",
							expr: &ruleRefExpr{
								pos:    position{line: 842, col: 35, offset: 25194},
								offset: 318,
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 39, offset: 25198},
							label: "format",
							expr: &ruleRefExpr{
								pos:    position{line: 842, col: 47, offset: 25206},
								offset: 151,
							},
						},
						&andCodeExpr{
							pos: position{line: 842, col: 64, offset: 25223},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 848, col: 1, offset: 25309},
			expr: &actionExpr{
				pos: position{line: 848, col: 17, offset: 25325},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 848, col: 17, offset: 25325},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 848, col: 17, offset: 25325},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 24, offset: 25332},
								expr: &actionExpr{
									pos: position{line: 848, col: 25, offset: 25333},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 848, col: 25, offset: 25333},
										label: "n",
										expr: &ruleRefExpr{
											pos:    position{line: 848, col: 27, offset: 25335},
											offset: 299,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 12, offset: 25406},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 17, offset: 25411},
								expr: &actionExpr{
									pos: position{line: 850, col: 18, offset: 25412},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 850, col: 18, offset: 25412},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 850, col: 18, offset: 25412},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 850, col: 22, offset: 25416},
												label: "n",
												expr: &ruleRefExpr{
													pos:    position{line: 850, col: 24, offset: 25418},
													offset: 299,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 853, col: 11, offset: 25496},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 861, col: 1, offset: 25724},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 25748},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 25748},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 25748},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 862, col: 16, offset: 25759},
								expr: &actionExpr{
									pos: position{line: 863, col: 9, offset: 25769},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 863, col: 9, offset: 25769},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 863, col: 9, offset: 25769},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 863, col: 21, offset: 25781},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 863, col: 21, offset: 25781},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 863, col: 21, offset: 25781},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 863, col: 26, offset: 25786},
																expr: &charClassMatcher{
																	pos:        position{line: 863, col: 26, offset: 25786},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 863, col: 63, offset: 25823},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 25905},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 867, col: 10, offset: 25910},
								expr: &actionExpr{
									pos: position{line: 868, col: 9, offset: 25920},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 868, col: 9, offset: 25920},
										label: "span",
										expr: &ruleRefExpr{
											pos:    position{line: 868, col: 15, offset: 25926},
											offset: 150,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 872, col: 5, offset: 25997},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 872, col: 21, offset: 26013},
								expr: &choiceExpr{
									pos: position{line: 873, col: 9, offset: 26023},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 873, col: 9, offset: 26023},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 873, col: 9, offset: 26023},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 874, col: 11, offset: 26091},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 874, col: 11, offset: 26091},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 875, col: 11, offset: 26160},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 875, col: 11, offset: 26160},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 877, col: 5, offset: 26232},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 877, col: 19, offset: 26246},
								expr: &choiceExpr{
									pos: position{line: 878, col: 9, offset: 26256},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 878, col: 9, offset: 26256},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 878, col: 9, offset: 26256},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 879, col: 11, offset: 26322},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 879, col: 11, offset: 26322},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 880, col: 11, offset: 26391},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 880, col: 11, offset: 26391},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 882, col: 5, offset: 26461},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 882, col: 11, offset: 26467},
								expr: &choiceExpr{
									pos: position{line: 883, col: 9, offset: 26477},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 883, col: 9, offset: 26477},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 883, col: 9, offset: 26477},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 884, col: 11, offset: 26539},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 884, col: 11, offset: 26539},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 885, col: 11, offset: 26600},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 885, col: 11, offset: 26600},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 886, col: 11, offset: 26663},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 886, col: 11, offset: 26663},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 887, col: 11, offset: 26724},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 887, col: 11, offset: 26724},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 888, col: 11, offset: 26786},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 888, col: 11, offset: 26786},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 889, col: 11, offset: 26850},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 889, col: 11, offset: 26850},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 891, col: 6, offset: 26913},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 908, col: 1, offset: 27518},
			expr: &choiceExpr{
				pos: position{line: 908, col: 14, offset: 27531},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 908, col: 14, offset: 27531},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 27, offset: 27544},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 39, offset: 27556},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 50, offset: 27567},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 61, offset: 27578},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 910, col: 1, offset: 27591},
			expr: &actionExpr{
				pos: position{line: 910, col: 7, offset: 27597},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 910, col: 7, offset: 27597},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 910, col: 7, offset: 27597},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 910, col: 14, offset: 27604},
								expr: &ruleRefExpr{
									pos:    position{line: 910, col: 15, offset: 27605},
									offset: 152,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 27, offset: 27617},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 910, col: 33, offset: 27623},
								offset: 155,
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 914, col: 1, offset: 27716},
			expr: &actionExpr{
				pos: position{line: 914, col: 11, offset: 27726},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 914, col: 11, offset: 27726},
					exprs: []any{
						&notExpr{
							pos: position{line: 914, col: 11, offset: 27726},
							expr: &litMatcher{
								pos:        position{line: 914, col: 12, offset: 27727},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 16, offset: 27731},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:    position{line: 914, col: 24, offset: 27739},
								offset: 152,
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 35, offset: 27750},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 914, col: 41, offset: 27756},
								offset: 155,
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 921, col: 1, offset: 27852},
			expr: &actionExpr{
				pos: position{line: 921, col: 8, offset: 27859},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 921, col: 8, offset: 27859},
					exprs: []any{
						&notExpr{
							pos: position{line: 921, col: 8, offset: 27859},
							expr: &litMatcher{
								pos:        position{line: 921, col: 9, offset: 27860},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 13, offset: 27864},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 921, col: 24, offset: 27875},
								expr: &ruleRefExpr{
									pos:    position{line: 921, col: 24, offset: 27875},
									offset: 156,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 925, col: 1, offset: 27946},
			expr: &choiceExpr{
				pos: position{line: 925, col: 16, offset: 27961},
				alternatives: []any{
					&oneOrMoreExpr{
						pos: position{line: 925, col: 16, offset: 27961},
						expr: &charClassMatcher{
							pos:        position{line: 925, col: 17, offset: 27962},
							val:        "[^\\n{.<>!?,;[\\] ]",
							chars:      []rune{'\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 926, col: 5, offset: 27987},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 926, col: 5, offset: 27987},
								val:        "[.?!;,]",
								chars:      []rune{'.', '?', '!', ';', ','},
								ignoreCase: false,
								inverted:   false,
							},
							&andExpr{
								pos: position{line: 926, col: 13, offset: 27995},
								expr: &seqExpr{
									pos: position{line: 926, col: 15, offset: 27997},
									exprs: []any{
										&notExpr{
											pos: position{line: 926, col: 15, offset: 27997},
											expr: &ruleRefExpr{
												pos:    position{line: 926, col: 16, offset: 27998},
												offset: 319,
											},
										},
										&notExpr{
											pos: position{line: 926, col: 18, offset: 28000},
											expr: &ruleRefExpr{
												pos:    position{line: 926, col: 19, offset: 28001},
												offset: 304,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 927, col: 4, offset: 28016},
						offset: 45,
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 931, col: 1, offset: 28040},
			expr: &actionExpr{
				pos: position{line: 931, col: 9, offset: 28048},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 931, col: 9, offset: 28048},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 931, col: 9, offset: 28048},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 931, col: 15, offset: 28054},
								offset: 158,
							},
						},
						&litMatcher{
							pos:        position{line: 931, col: 26, offset: 28065},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 931, col: 30, offset: 28069},
							label: "domain",
							expr: &ruleRefExpr{
								pos:    position{line: 931, col: 38, offset: 28077},
								offset: 159,
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 935, col: 1, offset: 28175},
			expr: &actionExpr{
				pos: position{line: 935, col: 13, offset: 28187},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 935, col: 13, offset: 28187},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 935, col: 13, offset: 28187},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 935, col: 19, offset: 28193},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 935, col: 19, offset: 28193},
									expr: &choiceExpr{
										pos: position{line: 935, col: 20, offset: 28194},
										alternatives: []any{
											&ruleRefExpr{
												pos:    position{line: 935, col: 20, offset: 28194},
												offset: 303,
											},
											&charClassMatcher{
												pos:        position{line: 935, col: 35, offset: 28209},
												val:        "[!#$%&'*+-/=?^_`{|}~.]",
												chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:     []rune{'+', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 937, col: 4, offset: 28337},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 944, col: 1, offset: 28503},
			expr: &actionExpr{
				pos: position{line: 944, col: 15, offset: 28517},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 944, col: 15, offset: 28517},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 944, col: 15, offset: 28517},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 944, col: 23, offset: 28525},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 944, col: 24, offset: 28526},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 944, col: 24, offset: 28526},
											expr: &ruleRefExpr{
												pos:    position{line: 944, col: 25, offset: 28527},
												offset: 303,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 944, col: 40, offset: 28542},
											expr: &seqExpr{
												pos: position{line: 944, col: 41, offset: 28543},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 944, col: 41, offset: 28543},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 944, col: 45, offset: 28547},
														expr: &choiceExpr{
															pos: position{line: 944, col: 46, offset: 28548},
															alternatives: []any{
																&ruleRefExpr{
																	pos:    position{line: 944, col: 46, offset: 28548},
																	offset: 303,
																},
																&litMatcher{
																	pos:        position{line: 944, col: 61, offset: 28563},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 946, col: 4, offset: 28608},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 954, col: 1, offset: 28750},
			expr: &actionExpr{
				pos: position{line: 955, col: 5, offset: 28764},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 955, col: 5, offset: 28764},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 955, col: 5, offset: 28764},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 955, col: 12, offset: 28771},
								offset: 161,
							},
						},
						&labeledExpr{
							pos:   position{line: 956, col: 5, offset: 28789},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 956, col: 11, offset: 28795},
								expr: &ruleRefExpr{
									pos:    position{line: 956, col: 12, offset: 28796},
									offset: 165,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 957, col: 5, offset: 28814},
							offset: 162,
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 961, col: 1, offset: 28972},
			expr: &actionExpr{
				pos: position{line: 961, col: 16, offset: 28987},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 961, col: 16, offset: 28987},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 961, col: 16, offset: 28987},
							offset: 307,
						},
						&labeledExpr{
							pos:   position{line: 961, col: 32, offset: 29003},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 961, col: 42, offset: 29013},
								offset: 164,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 961, col: 59, offset: 29030},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 961, col: 69, offset: 29040},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 968, col: 1, offset: 29217},
			expr: &seqExpr{
				pos: position{line: 968, col: 14, offset: 29230},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 968, col: 14, offset: 29230},
						offset: 307,
					},
					&labeledExpr{
						pos:   position{line: 968, col: 30, offset: 29246},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 968, col: 40, offset: 29256},
							offset: 164,
						},
					},
					&andExpr{
						pos: position{line: 968, col: 57, offset: 29273},
						expr: &ruleRefExpr{
							pos:    position{line: 968, col: 58, offset: 29274},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 968, col: 68, offset: 29284},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 977, col: 1, offset: 29544},
			expr: &actionExpr{
				pos: position{line: 977, col: 18, offset: 29561},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 977, col: 18, offset: 29561},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 977, col: 18, offset: 29561},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 977, col: 27, offset: 29570},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 977, col: 27, offset: 29570},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 977, col: 34, offset: 29577},
										expr: &litMatcher{
											pos:        position{line: 977, col: 34, offset: 29577},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 977, col: 40, offset: 29583},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 984, col: 1, offset: 29702},
			expr: &actionExpr{
				pos: position{line: 984, col: 20, offset: 29721},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 984, col: 20, offset: 29721},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 984, col: 20, offset: 29721},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 984, col: 29, offset: 29730},
								offset: 163,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 985, col: 5, offset: 29751},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 990, col: 1, offset: 29878},
			expr: &actionExpr{
				pos: position{line: 990, col: 15, offset: 29892},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 990, col: 16, offset: 29893},
					exprs: []any{
						&notExpr{
							pos: position{line: 990, col: 16, offset: 29893},
							expr: &ruleRefExpr{
								pos:    position{line: 990, col: 17, offset: 29894},
								offset: 164,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 990, col: 34, offset: 29911},
							offset: 305,
						},
						&labeledExpr{
							pos:   position{line: 990, col: 47, offset: 29924},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 990, col: 52, offset: 29929},
								offset: 313,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 990, col: 60, offset: 29937},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 994, col: 1, offset: 29988},
			expr: &actionExpr{
				pos: position{line: 995, col: 5, offset: 29999},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 995, col: 5, offset: 29999},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 995, col: 5, offset: 29999},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 995, col: 12, offset: 30006},
								offset: 167,
							},
						},
						&labeledExpr{
							pos:   position{line: 996, col: 5, offset: 30021},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 996, col: 11, offset: 30027},
								expr: &seqExpr{
									pos: position{line: 996, col: 12, offset: 30028},
									exprs: []any{
										&notExpr{
											pos: position{line: 996, col: 12, offset: 30028},
											expr: &ruleRefExpr{
												pos:    position{line: 996, col: 13, offset: 30029},
												offset: 170,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 996, col: 27, offset: 30043},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 997, col: 5, offset: 30057},
							offset: 168,
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 1001, col: 1, offset: 30206},
			expr: &actionExpr{
				pos: position{line: 1001, col: 13, offset: 30218},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 13, offset: 30218},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1001, col: 13, offset: 30218},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1001, col: 23, offset: 30228},
								offset: 170,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1001, col: 37, offset: 30242},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1001, col: 47, offset: 30252},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 1008, col: 1, offset: 30426},
			expr: &seqExpr{
				pos: position{line: 1008, col: 11, offset: 30436},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1008, col: 11, offset: 30436},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1008, col: 21, offset: 30446},
							offset: 170,
						},
					},
					&andExpr{
						pos: position{line: 1008, col: 35, offset: 30460},
						expr: &ruleRefExpr{
							pos:    position{line: 1008, col: 36, offset: 30461},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1008, col: 46, offset: 30471},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 1017, col: 1, offset: 30725},
			expr: &actionExpr{
				pos: position{line: 1017, col: 14, offset: 30738},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 1017, col: 14, offset: 30738},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 1017, col: 23, offset: 30747},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 1022, col: 1, offset: 30803},
			expr: &actionExpr{
				pos: position{line: 1022, col: 17, offset: 30819},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1022, col: 17, offset: 30819},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1022, col: 17, offset: 30819},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1022, col: 26, offset: 30828},
								offset: 169,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1023, col: 5, offset: 30845},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1029, col: 1, offset: 30978},
			expr: &choiceExpr{
				pos: position{line: 1029, col: 15, offset: 30992},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1029, col: 15, offset: 30992},
						offset: 172,
					},
					&ruleRefExpr{
						pos:    position{line: 1029, col: 34, offset: 31011},
						offset: 175,
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1031, col: 1, offset: 31030},
			expr: &actionExpr{
				pos: position{line: 1031, col: 20, offset: 31049},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 20, offset: 31049},
					exprs: []any{
						&notExpr{
							pos: position{line: 1031, col: 20, offset: 31049},
							expr: &ruleRefExpr{
								pos:    position{line: 1031, col: 21, offset: 31050},
								offset: 320,
							},
						},
						&litMatcher{
							pos:        position{line: 1031, col: 28, offset: 31057},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1031, col: 32, offset: 31061},
							expr: &notExpr{
								pos: position{line: 1031, col: 34, offset: 31063},
								expr: &litMatcher{
									pos:        position{line: 1031, col: 35, offset: 31064},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1031, col: 40, offset: 31069},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1031, col: 47, offset: 31076},
								offset: 173,
							},
						},
						&litMatcher{
							pos:        position{line: 1031, col: 70, offset: 31099},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1031, col: 74, offset: 31103},
							expr: &litMatcher{
								pos:        position{line: 1031, col: 75, offset: 31104},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1031, col: 79, offset: 31108},
							expr: &notExpr{
								pos: position{line: 1031, col: 81, offset: 31110},
								expr: &ruleRefExpr{
									pos:    position{line: 1031, col: 82, offset: 31111},
									offset: 303,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1035, col: 1, offset: 31156},
			expr: &actionExpr{
				pos: position{line: 1035, col: 25, offset: 31180},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 25, offset: 31180},
					exprs: []any{
						&notExpr{
							pos: position{line: 1035, col: 25, offset: 31180},
							expr: &ruleRefExpr{
								pos:    position{line: 1035, col: 26, offset: 31181},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 28, offset: 31183},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1035, col: 34, offset: 31189},
								expr: &actionExpr{
									pos: position{line: 1035, col: 35, offset: 31190},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1035, col: 35, offset: 31190},
										exprs: []any{
											&notExpr{
												pos: position{line: 1035, col: 35, offset: 31190},
												expr: &ruleRefExpr{
													pos:    position{line: 1035, col: 36, offset: 31191},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 1035, col: 38, offset: 31193},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1035, col: 44, offset: 31199},
													expr: &ruleRefExpr{
														pos:    position{line: 1035, col: 45, offset: 31200},
														offset: 174,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1039, col: 1, offset: 31354},
			expr: &seqExpr{
				pos: position{line: 1039, col: 27, offset: 31380},
				exprs: []any{
					&notExpr{
						pos: position{line: 1039, col: 27, offset: 31380},
						expr: &seqExpr{
							pos: position{line: 1039, col: 29, offset: 31382},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1039, col: 29, offset: 31382},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&notExpr{
									pos: position{line: 1039, col: 33, offset: 31386},
									expr: &litMatcher{
										pos:        position{line: 1039, col: 34, offset: 31387},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1039, col: 39, offset: 31392},
						offset: 87,
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1041, col: 1, offset: 31414},
			expr: &actionExpr{
				pos: position{line: 1041, col: 20, offset: 31433},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 20, offset: 31433},
					exprs: []any{
						&notExpr{
							pos: position{line: 1041, col: 20, offset: 31433},
							expr: &ruleRefExpr{
								pos:    position{line: 1041, col: 21, offset: 31434},
								offset: 321,
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 34, offset: 31447},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 39, offset: 31452},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1041, col: 46, offset: 31459},
								offset: 176,
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 69, offset: 31482},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1045, col: 1, offset: 31519},
			expr: &actionExpr{
				pos: position{line: 1045, col: 25, offset: 31543},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 25, offset: 31543},
					exprs: []any{
						&notExpr{
							pos: position{line: 1045, col: 25, offset: 31543},
							expr: &ruleRefExpr{
								pos:    position{line: 1045, col: 26, offset: 31544},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 1045, col: 28, offset: 31546},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1045, col: 34, offset: 31552},
								expr: &actionExpr{
									pos: position{line: 1045, col: 35, offset: 31553},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1045, col: 35, offset: 31553},
										exprs: []any{
											&notExpr{
												pos: position{line: 1045, col: 35, offset: 31553},
												expr: &ruleRefExpr{
													pos:    position{line: 1045, col: 36, offset: 31554},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 1045, col: 38, offset: 31556},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1045, col: 44, offset: 31562},
													expr: &ruleRefExpr{
														pos:    position{line: 1045, col: 45, offset: 31563},
														offset: 177,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1049, col: 1, offset: 31729},
			expr: &seqExpr{
				pos: position{line: 1049, col: 27, offset: 31755},
				exprs: []any{
					&notExpr{
						pos: position{line: 1049, col: 27, offset: 31755},
						expr: &litMatcher{
							pos:        position{line: 1049, col: 29, offset: 31757},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1049, col: 35, offset: 31763},
						offset: 87,
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1052, col: 1, offset: 31786},
			expr: &actionExpr{
				pos: position{line: 1053, col: 5, offset: 31800},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 5, offset: 31800},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1053, col: 5, offset: 31800},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1053, col: 12, offset: 31807},
								offset: 179,
							},
						},
						&labeledExpr{
							pos:   position{line: 1054, col: 5, offset: 31825},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1054, col: 11, offset: 31831},
								expr: &seqExpr{
									pos: position{line: 1054, col: 12, offset: 31832},
									exprs: []any{
										&notExpr{
											pos: position{line: 1054, col: 12, offset: 31832},
											expr: &ruleRefExpr{
												pos:    position{line: 1054, col: 13, offset: 31833},
												offset: 182,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1054, col: 30, offset: 31850},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1055, col: 5, offset: 31864},
							offset: 180,
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1059, col: 1, offset: 32022},
			expr: &actionExpr{
				pos: position{line: 1059, col: 16, offset: 32037},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 16, offset: 32037},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1059, col: 16, offset: 32037},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1059, col: 26, offset: 32047},
								offset: 182,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1059, col: 43, offset: 32064},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1059, col: 53, offset: 32074},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1066, col: 1, offset: 32259},
			expr: &seqExpr{
				pos: position{line: 1066, col: 14, offset: 32272},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1066, col: 14, offset: 32272},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1066, col: 24, offset: 32282},
							offset: 182,
						},
					},
					&andExpr{
						pos: position{line: 1066, col: 41, offset: 32299},
						expr: &ruleRefExpr{
							pos:    position{line: 1066, col: 42, offset: 32300},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1066, col: 52, offset: 32310},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1075, col: 1, offset: 32578},
			expr: &actionExpr{
				pos: position{line: 1075, col: 17, offset: 32594},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1075, col: 17, offset: 32594},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1075, col: 17, offset: 32594},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1075, col: 26, offset: 32603},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1075, col: 26, offset: 32603},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1075, col: 33, offset: 32610},
										expr: &litMatcher{
											pos:        position{line: 1075, col: 33, offset: 32610},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1075, col: 39, offset: 32616},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1082, col: 1, offset: 32739},
			expr: &actionExpr{
				pos: position{line: 1082, col: 20, offset: 32758},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 20, offset: 32758},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1082, col: 20, offset: 32758},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1082, col: 29, offset: 32767},
								offset: 181,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1083, col: 5, offset: 32787},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1088, col: 1, offset: 32918},
			expr: &actionExpr{
				pos: position{line: 1088, col: 15, offset: 32932},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1088, col: 16, offset: 32933},
					exprs: []any{
						&notExpr{
							pos: position{line: 1088, col: 16, offset: 32933},
							expr: &ruleRefExpr{
								pos:    position{line: 1088, col: 17, offset: 32934},
								offset: 182,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1088, col: 34, offset: 32951},
							offset: 305,
						},
						&labeledExpr{
							pos:   position{line: 1088, col: 47, offset: 32964},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1088, col: 52, offset: 32969},
								offset: 313,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1088, col: 60, offset: 32977},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1094, col: 1, offset: 33026},
			expr: &actionExpr{
				pos: position{line: 1095, col: 5, offset: 33040},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 5, offset: 33040},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 33040},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1095, col: 12, offset: 33047},
								offset: 185,
							},
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 5, offset: 33065},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1096, col: 11, offset: 33071},
								expr: &ruleRefExpr{
									pos:    position{line: 1096, col: 12, offset: 33072},
									offset: 189,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1097, col: 5, offset: 33090},
							offset: 186,
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1101, col: 1, offset: 33257},
			expr: &actionExpr{
				pos: position{line: 1101, col: 16, offset: 33272},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1101, col: 16, offset: 33272},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1101, col: 16, offset: 33272},
							offset: 307,
						},
						&labeledExpr{
							pos:   position{line: 1101, col: 32, offset: 33288},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1101, col: 42, offset: 33298},
								offset: 188,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1101, col: 59, offset: 33315},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1101, col: 69, offset: 33325},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1108, col: 1, offset: 33502},
			expr: &seqExpr{
				pos: position{line: 1108, col: 14, offset: 33515},
				exprs: []any{
					&ruleRefExpr{
						pos:    position{line: 1108, col: 14, offset: 33515},
						offset: 307,
					},
					&labeledExpr{
						pos:   position{line: 1108, col: 30, offset: 33531},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1108, col: 40, offset: 33541},
							offset: 188,
						},
					},
					&andExpr{
						pos: position{line: 1108, col: 57, offset: 33558},
						expr: &ruleRefExpr{
							pos:    position{line: 1108, col: 58, offset: 33559},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1108, col: 68, offset: 33569},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1117, col: 1, offset: 33829},
			expr: &actionExpr{
				pos: position{line: 1117, col: 15, offset: 33843},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 15, offset: 33843},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1117, col: 15, offset: 33843},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1117, col: 21, offset: 33849},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1117, col: 21, offset: 33849},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1117, col: 28, offset: 33856},
										expr: &litMatcher{
											pos:        position{line: 1117, col: 28, offset: 33856},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1117, col: 34, offset: 33862},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1124, col: 1, offset: 33975},
			expr: &actionExpr{
				pos: position{line: 1124, col: 20, offset: 33994},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1124, col: 20, offset: 33994},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1124, col: 20, offset: 33994},
							label: "dots",
							expr: &ruleRefExpr{
								pos:    position{line: 1124, col: 26, offset: 34000},
								offset: 187,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1125, col: 5, offset: 34018},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1130, col: 1, offset: 34142},
			expr: &actionExpr{
				pos: position{line: 1130, col: 15, offset: 34156},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 16, offset: 34157},
					exprs: []any{
						&notExpr{
							pos: position{line: 1130, col: 16, offset: 34157},
							expr: &ruleRefExpr{
								pos:    position{line: 1130, col: 17, offset: 34158},
								offset: 188,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1130, col: 34, offset: 34175},
							offset: 305,
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 47, offset: 34188},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1130, col: 52, offset: 34193},
								offset: 313,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1130, col: 60, offset: 34201},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1134, col: 1, offset: 34248},
			expr: &actionExpr{
				pos: position{line: 1135, col: 5, offset: 34262},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 5, offset: 34262},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1135, col: 5, offset: 34262},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1135, col: 12, offset: 34269},
								offset: 191,
							},
						},
						&labeledExpr{
							pos:   position{line: 1136, col: 5, offset: 34287},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1136, col: 11, offset: 34293},
								expr: &seqExpr{
									pos: position{line: 1136, col: 12, offset: 34294},
									exprs: []any{
										&notExpr{
											pos: position{line: 1136, col: 12, offset: 34294},
											expr: &ruleRefExpr{
												pos:    position{line: 1136, col: 13, offset: 34295},
												offset: 194,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1136, col: 30, offset: 34312},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1137, col: 5, offset: 34326},
							offset: 192,
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1141, col: 1, offset: 34484},
			expr: &actionExpr{
				pos: position{line: 1141, col: 16, offset: 34499},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1141, col: 16, offset: 34499},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1141, col: 16, offset: 34499},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1141, col: 26, offset: 34509},
								offset: 194,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1141, col: 43, offset: 34526},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1141, col: 53, offset: 34536},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1148, col: 1, offset: 34713},
			expr: &seqExpr{
				pos: position{line: 1148, col: 14, offset: 34726},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1148, col: 14, offset: 34726},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1148, col: 24, offset: 34736},
							offset: 194,
						},
					},
					&andExpr{
						pos: position{line: 1148, col: 41, offset: 34753},
						expr: &ruleRefExpr{
							pos:    position{line: 1148, col: 42, offset: 34754},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1148, col: 52, offset: 34764},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1157, col: 1, offset: 35024},
			expr: &actionExpr{
				pos: position{line: 1157, col: 20, offset: 35043},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 20, offset: 35043},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1157, col: 20, offset: 35043},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1157, col: 31, offset: 35054},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1157, col: 31, offset: 35054},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1157, col: 38, offset: 35061},
										expr: &litMatcher{
											pos:        position{line: 1157, col: 38, offset: 35061},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1157, col: 44, offset: 35067},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1164, col: 1, offset: 35190},
			expr: &actionExpr{
				pos: position{line: 1164, col: 20, offset: 35209},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 20, offset: 35209},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1164, col: 20, offset: 35209},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:    position{line: 1164, col: 31, offset: 35220},
								offset: 193,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1165, col: 5, offset: 35243},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1171, col: 1, offset: 35373},
			expr: &actionExpr{
				pos: position{line: 1171, col: 12, offset: 35384},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 12, offset: 35384},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1171, col: 12, offset: 35384},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1171, col: 20, offset: 35392},
								expr: &ruleRefExpr{
									pos:    position{line: 1171, col: 21, offset: 35393},
									offset: 196,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1171, col: 39, offset: 35411},
							offset: 304,
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1175, col: 1, offset: 35468},
			expr: &actionExpr{
				pos: position{line: 1175, col: 19, offset: 35486},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 19, offset: 35486},
					exprs: []any{
						&notExpr{
							pos: position{line: 1175, col: 19, offset: 35486},
							expr: &ruleRefExpr{
								pos:    position{line: 1175, col: 20, offset: 35487},
								offset: 304,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1175, col: 30, offset: 35497},
							offset: 307,
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 46, offset: 35513},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1175, col: 55, offset: 35522},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1175, col: 55, offset: 35522},
										offset: 199,
									},
									&ruleRefExpr{
										pos:    position{line: 1175, col: 68, offset: 35535},
										offset: 200,
									},
									&ruleRefExpr{
										pos:    position{line: 1175, col: 82, offset: 35549},
										offset: 201,
									},
									&ruleRefExpr{
										pos:    position{line: 1175, col: 96, offset: 35563},
										offset: 22,
									},
									&ruleRefExpr{
										pos:    position{line: 1175, col: 113, offset: 35580},
										offset: 26,
									},
									&ruleRefExpr{
										pos:    position{line: 1175, col: 130, offset: 35597},
										offset: 93,
									},
									&ruleRefExpr{
										pos:    position{line: 1175, col: 144, offset: 35611},
										offset: 197,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1175, col: 158, offset: 35625},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1179, col: 1, offset: 35664},
			expr: &actionExpr{
				pos: position{line: 1179, col: 16, offset: 35679},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 16, offset: 35679},
					exprs: []any{
						&notExpr{
							pos: position{line: 1179, col: 16, offset: 35679},
							expr: &ruleRefExpr{
								pos:    position{line: 1179, col: 17, offset: 35680},
								offset: 276,
							},
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 35, offset: 35698},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1179, col: 43, offset: 35706},
								expr: &ruleRefExpr{
									pos:    position{line: 1179, col: 43, offset: 35706},
									offset: 198,
								},
							},
						},
						&andExpr{
							pos: position{line: 1179, col: 64, offset: 35727},
							expr: &ruleRefExpr{
								pos:    position{line: 1179, col: 65, offset: 35728},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1183, col: 1, offset: 35815},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 4, offset: 35842},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1184, col: 4, offset: 35842},
						offset: 45,
					},
					&oneOrMoreExpr{
						pos: position{line: 1186, col: 6, offset: 35873},
						expr: &charClassMatcher{
							pos:        position{line: 1186, col: 6, offset: 35873},
							val:        "[^\\r\\n{]",
							chars:      []rune{'\r', '\n', '{'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&litMatcher{
						pos:        position{line: 1187, col: 7, offset: 35891},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1190, col: 1, offset: 35899},
			expr: &actionExpr{
				pos: position{line: 1190, col: 14, offset: 35912},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1190, col: 14, offset: 35912},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1190, col: 14, offset: 35912},
							offset: 270,
						},
						&labeledExpr{
							pos:   position{line: 1190, col: 29, offset: 35927},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1190, col: 41, offset: 35939},
								offset: 278,
							},
						},
						&litMatcher{
							pos:        position{line: 1190, col: 64, offset: 35962},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1190, col: 69, offset: 35967},
							offset: 314,
						},
						&ruleRefExpr{
							pos:    position{line: 1190, col: 80, offset: 35978},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 1190, col: 90, offset: 35988},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1190, col: 96, offset: 35994},
								expr: &ruleRefExpr{
									pos:    position{line: 1190, col: 97, offset: 35995},
									offset: 196,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1190, col: 116, offset: 36014},
							offset: 277,
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1195, col: 1, offset: 36202},
			expr: &actionExpr{
				pos: position{line: 1195, col: 15, offset: 36216},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 15, offset: 36216},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1195, col: 15, offset: 36216},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 26, offset: 36227},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1195, col: 38, offset: 36239},
								offset: 278,
							},
						},
						&litMatcher{
							pos:        position{line: 1195, col: 61, offset: 36262},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1195, col: 66, offset: 36267},
							offset: 314,
						},
						&ruleRefExpr{
							pos:    position{line: 1195, col: 77, offset: 36278},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 87, offset: 36288},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1195, col: 93, offset: 36294},
								expr: &ruleRefExpr{
									pos:    position{line: 1195, col: 94, offset: 36295},
									offset: 196,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1195, col: 113, offset: 36314},
							offset: 277,
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1200, col: 1, offset: 36504},
			expr: &actionExpr{
				pos: position{line: 1200, col: 15, offset: 36518},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 15, offset: 36518},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1200, col: 15, offset: 36518},
							offset: 283,
						},
						&litMatcher{
							pos:        position{line: 1200, col: 31, offset: 36534},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1200, col: 35, offset: 36538},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 45, offset: 36548},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1200, col: 51, offset: 36554},
								offset: 284,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1200, col: 64, offset: 36567},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 75, offset: 36578},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1200, col: 84, offset: 36587},
								offset: 285,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1200, col: 100, offset: 36603},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 110, offset: 36613},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1200, col: 117, offset: 36620},
								offset: 284,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1200, col: 130, offset: 36633},
							offset: 314,
						},
						&litMatcher{
							pos:        position{line: 1200, col: 140, offset: 36643},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1200, col: 144, offset: 36647},
							offset: 314,
						},
						&ruleRefExpr{
							pos:    position{line: 1200, col: 155, offset: 36658},
							offset: 310,
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 165, offset: 36668},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1200, col: 171, offset: 36674},
								expr: &ruleRefExpr{
									pos:    position{line: 1200, col: 172, offset: 36675},
									offset: 196,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1200, col: 191, offset: 36694},
							offset: 277,
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1207, col: 1, offset: 36915},
			expr: &actionExpr{
				pos: position{line: 1208, col: 5, offset: 36927},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 5, offset: 36927},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1208, col: 5, offset: 36927},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1208, col: 12, offset: 36934},
								offset: 203,
							},
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 5, offset: 36950},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1209, col: 11, offset: 36956},
								expr: &seqExpr{
									pos: position{line: 1209, col: 12, offset: 36957},
									exprs: []any{
										&notExpr{
											pos: position{line: 1209, col: 12, offset: 36957},
											expr: &ruleRefExpr{
												pos:    position{line: 1209, col: 13, offset: 36958},
												offset: 206,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1209, col: 28, offset: 36973},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1210, col: 5, offset: 36987},
							offset: 204,
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1214, col: 1, offset: 37139},
			expr: &actionExpr{
				pos: position{line: 1214, col: 14, offset: 37152},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1214, col: 14, offset: 37152},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1214, col: 14, offset: 37152},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1214, col: 24, offset: 37162},
								offset: 206,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1214, col: 39, offset: 37177},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1214, col: 49, offset: 37187},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1221, col: 1, offset: 37362},
			expr: &seqExpr{
				pos: position{line: 1221, col: 12, offset: 37373},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1221, col: 12, offset: 37373},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1221, col: 22, offset: 37383},
							offset: 206,
						},
					},
					&andExpr{
						pos: position{line: 1221, col: 37, offset: 37398},
						expr: &ruleRefExpr{
							pos:    position{line: 1221, col: 38, offset: 37399},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1221, col: 48, offset: 37409},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1230, col: 1, offset: 37661},
			expr: &actionExpr{
				pos: position{line: 1230, col: 19, offset: 37679},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1230, col: 19, offset: 37679},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1230, col: 19, offset: 37679},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1230, col: 31, offset: 37691},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1230, col: 31, offset: 37691},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1230, col: 38, offset: 37698},
										expr: &litMatcher{
											pos:        position{line: 1230, col: 38, offset: 37698},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1230, col: 44, offset: 37704},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1237, col: 1, offset: 37829},
			expr: &actionExpr{
				pos: position{line: 1237, col: 18, offset: 37846},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 18, offset: 37846},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1237, col: 18, offset: 37846},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:    position{line: 1237, col: 30, offset: 37858},
								offset: 205,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1238, col: 5, offset: 37880},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1244, col: 1, offset: 38009},
			expr: &actionExpr{
				pos: position{line: 1244, col: 17, offset: 38025},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 17, offset: 38025},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1244, col: 17, offset: 38025},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1244, col: 22, offset: 38030},
								expr: &ruleRefExpr{
									pos:    position{line: 1244, col: 22, offset: 38030},
									offset: 81,
								},
							},
						},
						&andExpr{
							pos: position{line: 1244, col: 37, offset: 38045},
							expr: &ruleRefExpr{
								pos:    position{line: 1244, col: 38, offset: 38046},
								offset: 310,
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 48, offset: 38056},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1244, col: 54, offset: 38062},
								expr: &ruleRefExpr{
									pos:    position{line: 1244, col: 55, offset: 38063},
									offset: 210,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 70, offset: 38078},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1244, col: 85, offset: 38093},
								expr: &ruleRefExpr{
									pos:    position{line: 1244, col: 86, offset: 38094},
									offset: 211,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1255, col: 1, offset: 38337},
			expr: &actionExpr{
				pos: position{line: 1255, col: 24, offset: 38360},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 24, offset: 38360},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1255, col: 24, offset: 38360},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1255, col: 28, offset: 38364},
							offset: 314,
						},
						&ruleRefExpr{
							pos:    position{line: 1255, col: 38, offset: 38374},
							offset: 297,
						},
						&labeledExpr{
							pos:   position{line: 1255, col: 46, offset: 38382},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1255, col: 53, offset: 38389},
								offset: 3,
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1259, col: 1, offset: 38477},
			expr: &actionExpr{
				pos: position{line: 1259, col: 20, offset: 38496},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 20, offset: 38496},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1259, col: 20, offset: 38496},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1259, col: 24, offset: 38500},
							offset: 314,
						},
						&ruleRefExpr{
							pos:    position{line: 1259, col: 34, offset: 38510},
							offset: 297,
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 42, offset: 38518},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1259, col: 48, offset: 38524},
								offset: 2,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1263, col: 1, offset: 38620},
			expr: &actionExpr{
				pos: position{line: 1263, col: 16, offset: 38635},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 16, offset: 38635},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1263, col: 16, offset: 38635},
							offset: 310,
						},
						&notExpr{
							pos: position{line: 1263, col: 26, offset: 38645},
							expr: &ruleRefExpr{
								pos:    position{line: 1263, col: 27, offset: 38646},
								offset: 241,
							},
						},
						&notExpr{
							pos: position{line: 1263, col: 45, offset: 38664},
							expr: &ruleRefExpr{
								pos:    position{line: 1263, col: 46, offset: 38665},
								offset: 243,
							},
						},
						&notExpr{
							pos: position{line: 1263, col: 66, offset: 38685},
							expr: &ruleRefExpr{
								pos:    position{line: 1263, col: 67, offset: 38686},
								offset: 14,
							},
						},
						&notExpr{
							pos: position{line: 1263, col: 83, offset: 38702},
							expr: &ruleRefExpr{
								pos:    position{line: 1263, col: 84, offset: 38703},
								offset: 286,
							},
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 105, offset: 38724},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1263, col: 113, offset: 38732},
								expr: &ruleRefExpr{
									pos:    position{line: 1263, col: 114, offset: 38733},
									offset: 81,
								},
							},
						},
						&andExpr{
							pos: position{line: 1263, col: 130, offset: 38749},
							expr: &ruleRefExpr{
								pos:    position{line: 1263, col: 131, offset: 38750},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1267, col: 1, offset: 38836},
			expr: &actionExpr{
				pos: position{line: 1267, col: 18, offset: 38853},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 18, offset: 38853},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1267, col: 18, offset: 38853},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1267, col: 25, offset: 38860},
								expr: &ruleRefExpr{
									pos:    position{line: 1267, col: 26, offset: 38861},
									offset: 208,
								},
							},
						},
						&andExpr{
							pos: position{line: 1267, col: 49, offset: 38884},
							expr: &ruleRefExpr{
								pos:    position{line: 1267, col: 50, offset: 38885},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1272, col: 1, offset: 38924},
			expr: &actionExpr{
				pos: position{line: 1272, col: 17, offset: 38940},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 17, offset: 38940},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1272, col: 18, offset: 38941},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1272, col: 18, offset: 38941},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1272, col: 26, offset: 38949},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1272, col: 26, offset: 38949},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1272, col: 30, offset: 38953},
											expr: &ruleRefExpr{
												pos:    position{line: 1272, col: 30, offset: 38953},
												offset: 319,
											},
										},
										&litMatcher{
											pos:        position{line: 1272, col: 33, offset: 38956},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1272, col: 37, offset: 38960},
											expr: &ruleRefExpr{
												pos:    position{line: 1272, col: 37, offset: 38960},
												offset: 319,
											},
										},
										&litMatcher{
											pos:        position{line: 1272, col: 40, offset: 38963},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1272, col: 46, offset: 38969},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1272, col: 46, offset: 38969},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1272, col: 50, offset: 38973},
											expr: &ruleRefExpr{
												pos:    position{line: 1272, col: 50, offset: 38973},
												offset: 319,
											},
										},
										&litMatcher{
											pos:        position{line: 1272, col: 53, offset: 38976},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1272, col: 57, offset: 38980},
											expr: &ruleRefExpr{
												pos:    position{line: 1272, col: 57, offset: 38980},
												offset: 319,
											},
										},
										&litMatcher{
											pos:        position{line: 1272, col: 60, offset: 38983},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1272, col: 66, offset: 38989},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1272, col: 66, offset: 38989},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1272, col: 70, offset: 38993},
											expr: &ruleRefExpr{
												pos:    position{line: 1272, col: 70, offset: 38993},
												offset: 319,
											},
										},
										&litMatcher{
											pos:        position{line: 1272, col: 73, offset: 38996},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1272, col: 77, offset: 39000},
											expr: &ruleRefExpr{
												pos:    position{line: 1272, col: 77, offset: 39000},
												offset: 319,
											},
										},
										&litMatcher{
											pos:        position{line: 1272, col: 80, offset: 39003},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1272, col: 85, offset: 39008},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 1272, col: 95, offset: 39018},
							expr: &ruleRefExpr{
								pos:    position{line: 1272, col: 96, offset: 39019},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1277, col: 1, offset: 39090},
			expr: &actionExpr{
				pos: position{line: 1277, col: 13, offset: 39102},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 13, offset: 39102},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1277, col: 14, offset: 39103},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1277, col: 21, offset: 39110},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 1277, col: 31, offset: 39120},
							expr: &ruleRefExpr{
								pos:    position{line: 1277, col: 32, offset: 39121},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1282, col: 1, offset: 39188},
			expr: &actionExpr{
				pos: position{line: 1283, col: 5, offset: 39201},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1283, col: 5, offset: 39201},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1283, col: 5, offset: 39201},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1283, col: 12, offset: 39208},
								offset: 215,
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 5, offset: 39225},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1284, col: 11, offset: 39231},
								expr: &seqExpr{
									pos: position{line: 1284, col: 12, offset: 39232},
									exprs: []any{
										&notExpr{
											pos: position{line: 1284, col: 12, offset: 39232},
											expr: &ruleRefExpr{
												pos:    position{line: 1284, col: 13, offset: 39233},
												offset: 218,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1284, col: 29, offset: 39249},
											offset: 1,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1285, col: 5, offset: 39263},
							offset: 216,
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1289, col: 1, offset: 39418},
			expr: &actionExpr{
				pos: position{line: 1289, col: 15, offset: 39432},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1289, col: 15, offset: 39432},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1289, col: 15, offset: 39432},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1289, col: 25, offset: 39442},
								offset: 218,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1289, col: 41, offset: 39458},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1289, col: 51, offset: 39468},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1296, col: 1, offset: 39652},
			expr: &seqExpr{
				pos: position{line: 1296, col: 13, offset: 39664},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1296, col: 13, offset: 39664},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1296, col: 23, offset: 39674},
							offset: 218,
						},
					},
					&andExpr{
						pos: position{line: 1296, col: 39, offset: 39690},
						expr: &ruleRefExpr{
							pos:    position{line: 1296, col: 40, offset: 39691},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1296, col: 50, offset: 39701},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1305, col: 1, offset: 39967},
			expr: &actionExpr{
				pos: position{line: 1305, col: 19, offset: 39985},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1305, col: 19, offset: 39985},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1305, col: 19, offset: 39985},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1305, col: 30, offset: 39996},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1305, col: 30, offset: 39996},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1305, col: 36, offset: 40002},
										expr: &litMatcher{
											pos:        position{line: 1305, col: 36, offset: 40002},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1305, col: 42, offset: 40008},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1312, col: 1, offset: 40135},
			expr: &actionExpr{
				pos: position{line: 1312, col: 19, offset: 40153},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 19, offset: 40153},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1312, col: 19, offset: 40153},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:    position{line: 1312, col: 28, offset: 40162},
								offset: 217,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1313, col: 5, offset: 40184},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1318, col: 1, offset: 40314},
			expr: &actionExpr{
				pos: position{line: 1318, col: 14, offset: 40327},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 15, offset: 40328},
					exprs: []any{
						&notExpr{
							pos: position{line: 1318, col: 15, offset: 40328},
							expr: &ruleRefExpr{
								pos:    position{line: 1318, col: 16, offset: 40329},
								offset: 218,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1318, col: 32, offset: 40345},
							offset: 305,
						},
						&labeledExpr{
							pos:   position{line: 1318, col: 45, offset: 40358},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1318, col: 50, offset: 40363},
								offset: 313,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1318, col: 58, offset: 40371},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1324, col: 1, offset: 40420},
			expr: &actionExpr{
				pos: position{line: 1325, col: 5, offset: 40431},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 5, offset: 40431},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1325, col: 5, offset: 40431},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1325, col: 12, offset: 40438},
								offset: 221,
							},
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 5, offset: 40453},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1326, col: 11, offset: 40459},
								expr: &ruleRefExpr{
									pos:    position{line: 1326, col: 12, offset: 40460},
									offset: 225,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1327, col: 5, offset: 40475},
							offset: 222,
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1331, col: 1, offset: 40634},
			expr: &actionExpr{
				pos: position{line: 1331, col: 13, offset: 40646},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1331, col: 13, offset: 40646},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1331, col: 13, offset: 40646},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1331, col: 23, offset: 40656},
								offset: 224,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1331, col: 37, offset: 40670},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1331, col: 47, offset: 40680},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1338, col: 1, offset: 40854},
			expr: &seqExpr{
				pos: position{line: 1338, col: 11, offset: 40864},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1338, col: 11, offset: 40864},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1338, col: 21, offset: 40874},
							offset: 224,
						},
					},
					&andExpr{
						pos: position{line: 1338, col: 35, offset: 40888},
						expr: &ruleRefExpr{
							pos:    position{line: 1338, col: 36, offset: 40889},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1338, col: 46, offset: 40899},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1347, col: 1, offset: 41153},
			expr: &actionExpr{
				pos: position{line: 1347, col: 14, offset: 41166},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 14, offset: 41166},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1347, col: 14, offset: 41166},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1347, col: 22, offset: 41174},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1347, col: 22, offset: 41174},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1347, col: 29, offset: 41181},
										expr: &litMatcher{
											pos:        position{line: 1347, col: 29, offset: 41181},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1347, col: 35, offset: 41187},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1354, col: 1, offset: 41304},
			expr: &actionExpr{
				pos: position{line: 1354, col: 17, offset: 41320},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 17, offset: 41320},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1354, col: 17, offset: 41320},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:    position{line: 1354, col: 25, offset: 41328},
								offset: 223,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1355, col: 5, offset: 41345},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1360, col: 1, offset: 41468},
			expr: &actionExpr{
				pos: position{line: 1360, col: 12, offset: 41479},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 13, offset: 41480},
					exprs: []any{
						&notExpr{
							pos: position{line: 1360, col: 13, offset: 41480},
							expr: &ruleRefExpr{
								pos:    position{line: 1360, col: 14, offset: 41481},
								offset: 224,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1360, col: 28, offset: 41495},
							offset: 305,
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 41, offset: 41508},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1360, col: 46, offset: 41513},
								offset: 313,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1360, col: 54, offset: 41521},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1368, col: 1, offset: 41572},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 18, offset: 41589},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1368, col: 18, offset: 41589},
						offset: 227,
					},
					&ruleRefExpr{
						pos:    position{line: 1368, col: 43, offset: 41614},
						offset: 231,
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1370, col: 1, offset: 41638},
			expr: &actionExpr{
				pos: position{line: 1370, col: 26, offset: 41663},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1370, col: 26, offset: 41663},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1370, col: 26, offset: 41663},
							offset: 228,
						},
						&labeledExpr{
							pos:   position{line: 1370, col: 46, offset: 41683},
							label: "id",
							expr: &ruleRefExpr{
								pos:    position{line: 1370, col: 50, offset: 41687},
								offset: 229,
							},
						},
						&labeledExpr{
							pos:   position{line: 1370, col: 68, offset: 41705},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1370, col: 74, offset: 41711},
								expr: &actionExpr{
									pos: position{line: 1370, col: 75, offset: 41712},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1370, col: 75, offset: 41712},
										exprs: []any{
											&ruleRefExpr{
												pos:    position{line: 1370, col: 75, offset: 41712},
												offset: 314,
											},
											&litMatcher{
												pos:        position{line: 1370, col: 85, offset: 41722},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1370, col: 89, offset: 41726},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1370, col: 96, offset: 41733},
													exprs: []any{
														&ruleRefExpr{
															pos:    position{line: 1370, col: 96, offset: 41733},
															offset: 314,
														},
														&ruleRefExpr{
															pos:    position{line: 1370, col: 106, offset: 41743},
															offset: 230,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1370, col: 150, offset: 41787},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1378, col: 1, offset: 41991},
			expr: &litMatcher{
				pos:        position{line: 1378, col: 23, offset: 42013},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1380, col: 1, offset: 42020},
			expr: &actionExpr{
				pos: position{line: 1380, col: 21, offset: 42040},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1380, col: 21, offset: 42040},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1380, col: 22, offset: 42041},
							alternatives: []any{
								&ruleRefExpr{
									pos:    position{line: 1380, col: 22, offset: 42041},
									offset: 302,
								},
								&charClassMatcher{
									pos:        position{line: 1380, col: 30, offset: 42049},
									val:        "[:_]",
									chars:      []rune{':', '_'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1380, col: 36, offset: 42055},
							expr: &charClassMatcher{
								pos:        position{line: 1380, col: 36, offset: 42055},
								val:        "[\\p{L}\\p{N} _:.-]",
								chars:      []rune{' ', '_', ':', '.', '-'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1385, col: 1, offset: 42207},
			expr: &oneOrMoreExpr{
				pos: position{line: 1385, col: 23, offset: 42229},
				expr: &choiceExpr{
					pos: position{line: 1386, col: 5, offset: 42235},
					alternatives: []any{
						&oneOrMoreExpr{
							pos: position{line: 1386, col: 6, offset: 42236},
							expr: &charClassMatcher{
								pos:        position{line: 1386, col: 6, offset: 42236},
								val:        "[^<>{[\\]]",
								chars:      []rune{'<', '>', '{', '[', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1387, col: 7, offset: 42254},
							offset: 45,
						},
						&litMatcher{
							pos:        position{line: 1388, col: 7, offset: 42280},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentCrossReference",
			pos:  position{line: 1391, col: 1, offset: 42289},
			expr: &actionExpr{
				pos: position{line: 1391, col: 26, offset: 42314},
				run: (*parser).callonDocumentCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 26, offset: 42314},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1391, col: 26, offset: 42314},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 34, offset: 42322},
							label: "path",
							expr: &ruleRefExpr{
								pos:    position{line: 1391, col: 40, offset: 42328},
								offset: 155,
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 46, offset: 42334},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1391, col: 58, offset: 42346},
								offset: 43,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1398, col: 1, offset: 42512},
			expr: &actionExpr{
				pos: position{line: 1398, col: 18, offset: 42529},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 18, offset: 42529},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1398, col: 18, offset: 42529},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1398, col: 28, offset: 42539},
								expr: &litMatcher{
									pos:        position{line: 1398, col: 28, offset: 42539},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 33, offset: 42544},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1398, col: 42, offset: 42553},
								expr: &ruleRefExpr{
									pos:    position{line: 1398, col: 42, offset: 42553},
									offset: 233,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 66, offset: 42577},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1398, col: 71, offset: 42582},
								expr: &ruleRefExpr{
									pos:    position{line: 1398, col: 72, offset: 42583},
									offset: 234,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 93, offset: 42604},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1398, col: 98, offset: 42609},
								expr: &ruleRefExpr{
									pos:    position{line: 1398, col: 99, offset: 42610},
									offset: 235,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1398, col: 120, offset: 42631},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1405, col: 1, offset: 42755},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 5, offset: 42786},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1406, col: 5, offset: 42786},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1407, col: 7, offset: 42797},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1408, col: 8, offset: 42809},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1408, col: 8, offset: 42809},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1408, col: 12, offset: 42813},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1408, col: 21, offset: 42822},
									expr: &litMatcher{
										pos:        position{line: 1408, col: 21, offset: 42822},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1408, col: 26, offset: 42827},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1411, col: 1, offset: 42873},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 5, offset: 42900},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1412, col: 5, offset: 42900},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1413, col: 7, offset: 42911},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1414, col: 8, offset: 42923},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1414, col: 8, offset: 42923},
								expr: &litMatcher{
									pos:        position{line: 1414, col: 8, offset: 42923},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1414, col: 13, offset: 42928},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1414, col: 18, offset: 42933},
									expr: &litMatcher{
										pos:        position{line: 1414, col: 18, offset: 42933},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1414, col: 23, offset: 42938},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1417, col: 1, offset: 42980},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 5, offset: 43007},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1418, col: 5, offset: 43007},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1419, col: 7, offset: 43018},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1420, col: 8, offset: 43030},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1420, col: 8, offset: 43030},
								expr: &litMatcher{
									pos:        position{line: 1420, col: 8, offset: 43030},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1420, col: 13, offset: 43035},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1420, col: 18, offset: 43040},
									expr: &litMatcher{
										pos:        position{line: 1420, col: 18, offset: 43040},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1420, col: 23, offset: 43045},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1423, col: 1, offset: 43087},
			expr: &actionExpr{
				pos: position{line: 1423, col: 18, offset: 43104},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 18, offset: 43104},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1423, col: 18, offset: 43104},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1423, col: 28, offset: 43114},
								expr: &litMatcher{
									pos:        position{line: 1423, col: 28, offset: 43114},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 33, offset: 43119},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1423, col: 42, offset: 43128},
								expr: &ruleRefExpr{
									pos:    position{line: 1423, col: 42, offset: 43128},
									offset: 237,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 66, offset: 43152},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1423, col: 71, offset: 43157},
								expr: &ruleRefExpr{
									pos:    position{line: 1423, col: 72, offset: 43158},
									offset: 238,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 93, offset: 43179},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1423, col: 98, offset: 43184},
								expr: &ruleRefExpr{
									pos:    position{line: 1423, col: 99, offset: 43185},
									offset: 239,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1423, col: 120, offset: 43206},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1430, col: 1, offset: 43330},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 5, offset: 43361},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1431, col: 5, offset: 43361},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1432, col: 7, offset: 43372},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1433, col: 8, offset: 43384},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1433, col: 8, offset: 43384},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1433, col: 12, offset: 43388},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1433, col: 21, offset: 43397},
									expr: &litMatcher{
										pos:        position{line: 1433, col: 21, offset: 43397},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1433, col: 26, offset: 43402},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1436, col: 1, offset: 43448},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 5, offset: 43475},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1437, col: 5, offset: 43475},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1438, col: 7, offset: 43486},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1439, col: 8, offset: 43498},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1439, col: 8, offset: 43498},
								expr: &litMatcher{
									pos:        position{line: 1439, col: 8, offset: 43498},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1439, col: 13, offset: 43503},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1439, col: 18, offset: 43508},
									expr: &litMatcher{
										pos:        position{line: 1439, col: 18, offset: 43508},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1439, col: 23, offset: 43513},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1442, col: 1, offset: 43555},
			expr: &choiceExpr{
				pos: position{line: 1443, col: 5, offset: 43582},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1443, col: 5, offset: 43582},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1444, col: 7, offset: 43593},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1445, col: 8, offset: 43605},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1445, col: 8, offset: 43605},
								expr: &litMatcher{
									pos:        position{line: 1445, col: 8, offset: 43605},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1445, col: 13, offset: 43610},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1445, col: 18, offset: 43615},
									expr: &litMatcher{
										pos:        position{line: 1445, col: 18, offset: 43615},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1445, col: 23, offset: 43620},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1450, col: 1, offset: 43664},
			expr: &actionExpr{
				pos: position{line: 1450, col: 19, offset: 43682},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1450, col: 19, offset: 43682},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1450, col: 19, offset: 43682},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1450, col: 27, offset: 43690},
								offset: 241,
							},
						},
						&labeledExpr{
							pos:   position{line: 1450, col: 47, offset: 43710},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1450, col: 54, offset: 43717},
								offset: 207,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1456, col: 1, offset: 43906},
			expr: &actionExpr{
				pos: position{line: 1456, col: 21, offset: 43926},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 21, offset: 43926},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1456, col: 21, offset: 43926},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1456, col: 29, offset: 43934},
								offset: 314,
							},
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 40, offset: 43945},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1456, col: 48, offset: 43953},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1456, col: 48, offset: 43953},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1456, col: 48, offset: 43953},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1456, col: 48, offset: 43953},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1456, col: 57, offset: 43962},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1456, col: 58, offset: 43963},
															expr: &litMatcher{
																pos:        position{line: 1456, col: 58, offset: 43963},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1458, col: 4, offset: 44009},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1464, col: 3, offset: 44104},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1464, col: 3, offset: 44104},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1464, col: 3, offset: 44104},
													expr: &charClassMatcher{
														pos:        position{line: 1464, col: 3, offset: 44104},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1464, col: 10, offset: 44111},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1465, col: 3, offset: 44148},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1465, col: 3, offset: 44148},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1465, col: 3, offset: 44148},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1465, col: 9, offset: 44154},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1466, col: 3, offset: 44191},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1466, col: 3, offset: 44191},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1466, col: 3, offset: 44191},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1466, col: 9, offset: 44197},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1467, col: 3, offset: 44234},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1467, col: 3, offset: 44234},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1467, col: 3, offset: 44234},
													offset: 236,
												},
												&litMatcher{
													pos:        position{line: 1467, col: 18, offset: 44249},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1468, col: 3, offset: 44286},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1468, col: 3, offset: 44286},
											exprs: []any{
												&ruleRefExpr{
													pos:    position{line: 1468, col: 3, offset: 44286},
													offset: 232,
												},
												&litMatcher{
													pos:        position{line: 1468, col: 18, offset: 44301},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1470, col: 1, offset: 44338},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1478, col: 1, offset: 44429},
			expr: &actionExpr{
				pos: position{line: 1478, col: 21, offset: 44449},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 21, offset: 44449},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1478, col: 21, offset: 44449},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1478, col: 29, offset: 44457},
								offset: 243,
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 50, offset: 44478},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1478, col: 60, offset: 44488},
								expr: &ruleRefExpr{
									pos:    position{line: 1478, col: 61, offset: 44489},
									offset: 244,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 73, offset: 44501},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1478, col: 80, offset: 44508},
								offset: 207,
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1485, col: 1, offset: 44747},
			expr: &actionExpr{
				pos: position{line: 1485, col: 23, offset: 44769},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1485, col: 23, offset: 44769},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1485, col: 23, offset: 44769},
							label: "indent",
							expr: &ruleRefExpr{
								pos:    position{line: 1485, col: 31, offset: 44777},
								offset: 314,
							},
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 42, offset: 44788},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1485, col: 50, offset: 44796},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1485, col: 51, offset: 44797},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1485, col: 51, offset: 44797},
											expr: &litMatcher{
												pos:        position{line: 1485, col: 51, offset: 44797},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1485, col: 58, offset: 44804},
											expr: &litMatcher{
												pos:        position{line: 1485, col: 58, offset: 44804},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1487, col: 4, offset: 44846},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:    position{line: 1490, col: 1, offset: 44895},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1496, col: 1, offset: 44980},
			expr: &actionExpr{
				pos: position{line: 1496, col: 13, offset: 44992},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 13, offset: 44992},
					exprs: []any{
						&andExpr{
							pos: position{line: 1496, col: 13, offset: 44992},
							expr: &litMatcher{
								pos:        position{line: 1496, col: 14, offset: 44993},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 1, offset: 44998},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1498, col: 7, offset: 45016},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1498, col: 7, offset: 45016},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1498, col: 7, offset: 45016},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1499, col: 7, offset: 45073},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1499, col: 7, offset: 45073},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1500, col: 7, offset: 45128},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1500, col: 7, offset: 45128},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1501, col: 7, offset: 45182},
							offset: 318,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1506, col: 1, offset: 45225},
			expr: &actionExpr{
				pos: position{line: 1506, col: 23, offset: 45247},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 23, offset: 45247},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1506, col: 23, offset: 45247},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1506, col: 36, offset: 45260},
								expr: &ruleRefExpr{
									pos:    position{line: 1506, col: 37, offset: 45261},
									offset: 77,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 55, offset: 45279},
							label: "term",
							expr: &ruleRefExpr{
								pos:    position{line: 1506, col: 61, offset: 45285},
								offset: 246,
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 82, offset: 45306},
							label: "marker",
							expr: &ruleRefExpr{
								pos:    position{line: 1506, col: 90, offset: 45314},
								offset: 247,
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 113, offset: 45337},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1506, col: 124, offset: 45348},
								expr: &choiceExpr{
									pos: position{line: 1506, col: 125, offset: 45349},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1506, col: 125, offset: 45349},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:    position{line: 1506, col: 125, offset: 45349},
												offset: 319,
											},
										},
										&ruleRefExpr{
											pos:    position{line: 1506, col: 180, offset: 45404},
											offset: 297,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 190, offset: 45414},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1506, col: 197, offset: 45421},
								offset: 248,
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1517, col: 1, offset: 45933},
			expr: &actionExpr{
				pos: position{line: 1517, col: 23, offset: 45955},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1517, col: 23, offset: 45955},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1517, col: 28, offset: 45960},
						expr: &seqExpr{
							pos: position{line: 1517, col: 29, offset: 45961},
							exprs: []any{
								&notExpr{
									pos: position{line: 1517, col: 29, offset: 45961},
									expr: &ruleRefExpr{
										pos:    position{line: 1517, col: 30, offset: 45962},
										offset: 247,
									},
								},
								&notExpr{
									pos: position{line: 1517, col: 52, offset: 45984},
									expr: &ruleRefExpr{
										pos:    position{line: 1517, col: 53, offset: 45985},
										offset: 310,
									},
								},
								&ruleRefExpr{
									pos:    position{line: 1517, col: 63, offset: 45995},
									offset: 81,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1521, col: 1, offset: 46051},
			expr: &actionExpr{
				pos: position{line: 1521, col: 25, offset: 46075},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 25, offset: 46075},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1521, col: 25, offset: 46075},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 35, offset: 46085},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1521, col: 43, offset: 46093},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1521, col: 43, offset: 46093},
									expr: &choiceExpr{
										pos: position{line: 1521, col: 44, offset: 46094},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1521, col: 44, offset: 46094},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1521, col: 50, offset: 46100},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1523, col: 4, offset: 46142},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:    position{line: 1530, col: 1, offset: 46269},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1535, col: 1, offset: 46316},
			expr: &actionExpr{
				pos: position{line: 1535, col: 28, offset: 46343},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 28, offset: 46343},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1535, col: 28, offset: 46343},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1535, col: 34, offset: 46349},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1535, col: 34, offset: 46349},
										expr: &ruleRefExpr{
											pos:    position{line: 1535, col: 34, offset: 46349},
											offset: 81,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1535, col: 51, offset: 46366},
										offset: 2,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 65, offset: 46380},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1535, col: 80, offset: 46395},
								expr: &ruleRefExpr{
									pos:    position{line: 1535, col: 81, offset: 46396},
									offset: 211,
								},
							},
						},
						&andExpr{
							pos: position{line: 1535, col: 99, offset: 46414},
							expr: &ruleRefExpr{
								pos:    position{line: 1535, col: 100, offset: 46415},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1544, col: 1, offset: 46576},
			expr: &actionExpr{
				pos: position{line: 1544, col: 21, offset: 46596},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 21, offset: 46596},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1544, col: 21, offset: 46596},
							offset: 250,
						},
						&notExpr{
							pos: position{line: 1544, col: 48, offset: 46623},
							expr: &litMatcher{
								pos:        position{line: 1544, col: 49, offset: 46624},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 54, offset: 46629},
							label: "comment",
							expr: &ruleRefExpr{
								pos:    position{line: 1544, col: 63, offset: 46638},
								offset: 251,
							},
						},
						&andExpr{
							pos: position{line: 1544, col: 89, offset: 46664},
							expr: &ruleRefExpr{
								pos:    position{line: 1544, col: 90, offset: 46665},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1548, col: 1, offset: 46755},
			expr: &actionExpr{
				pos: position{line: 1548, col: 30, offset: 46784},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1548, col: 30, offset: 46784},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1552, col: 1, offset: 46829},
			expr: &actionExpr{
				pos: position{line: 1552, col: 28, offset: 46856},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1552, col: 28, offset: 46856},
					expr: &charClassMatcher{
						pos:        position{line: 1552, col: 28, offset: 46856},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1556, col: 1, offset: 46905},
			expr: &actionExpr{
				pos: position{line: 1557, col: 5, offset: 46928},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 5, offset: 46928},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1557, col: 5, offset: 46928},
							label: "start",
							expr: &ruleRefExpr{
								pos:    position{line: 1557, col: 12, offset: 46935},
								offset: 253,
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 5, offset: 46962},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1558, col: 11, offset: 46968},
								expr: &ruleRefExpr{
									pos:    position{line: 1558, col: 12, offset: 46969},
									offset: 257,
								},
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1559, col: 5, offset: 46996},
							offset: 254,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1563, col: 1, offset: 47181},
			expr: &actionExpr{
				pos: position{line: 1563, col: 25, offset: 47205},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1563, col: 25, offset: 47205},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1563, col: 25, offset: 47205},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:    position{line: 1563, col: 35, offset: 47215},
								offset: 256,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1563, col: 61, offset: 47241},
							offset: 310,
						},
						&andCodeExpr{
							pos: position{line: 1563, col: 72, offset: 47252},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1570, col: 1, offset: 47442},
			expr: &seqExpr{
				pos: position{line: 1570, col: 23, offset: 47464},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1570, col: 23, offset: 47464},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:    position{line: 1570, col: 33, offset: 47474},
							offset: 256,
						},
					},
					&andExpr{
						pos: position{line: 1570, col: 59, offset: 47500},
						expr: &ruleRefExpr{
							pos:    position{line: 1570, col: 60, offset: 47501},
							offset: 310,
						},
					},
					&andCodeExpr{
						pos: position{line: 1570, col: 70, offset: 47511},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1579, col: 1, offset: 47797},
			expr: &actionExpr{
				pos: position{line: 1579, col: 34, offset: 47830},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 34, offset: 47830},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1579, col: 34, offset: 47830},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1579, col: 50, offset: 47846},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1579, col: 50, offset: 47846},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1579, col: 57, offset: 47853},
										expr: &litMatcher{
											pos:        position{line: 1579, col: 57, offset: 47853},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1579, col: 63, offset: 47859},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1586, col: 1, offset: 48004},
			expr: &actionExpr{
				pos: position{line: 1586, col: 29, offset: 48032},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1586, col: 29, offset: 48032},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1586, col: 29, offset: 48032},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:    position{line: 1586, col: 45, offset: 48048},
								offset: 255,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1587, col: 5, offset: 48085},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1592, col: 1, offset: 48236},
			expr: &actionExpr{
				pos: position{line: 1592, col: 24, offset: 48259},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1592, col: 25, offset: 48260},
					exprs: []any{
						&notExpr{
							pos: position{line: 1592, col: 25, offset: 48260},
							expr: &ruleRefExpr{
								pos:    position{line: 1592, col: 26, offset: 48261},
								offset: 256,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1592, col: 52, offset: 48287},
							offset: 305,
						},
						&labeledExpr{
							pos:   position{line: 1592, col: 65, offset: 48300},
							label: "line",
							expr: &ruleRefExpr{
								pos:    position{line: 1592, col: 70, offset: 48305},
								offset: 313,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1592, col: 78, offset: 48313},
							offset: 310,
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1598, col: 1, offset: 48362},
			expr: &choiceExpr{
				pos: position{line: 1598, col: 11, offset: 48372},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1598, col: 11, offset: 48372},
						offset: 259,
					},
					&ruleRefExpr{
						pos:    position{line: 1598, col: 30, offset: 48391},
						offset: 260,
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1600, col: 1, offset: 48415},
			expr: &actionExpr{
				pos: position{line: 1600, col: 20, offset: 48434},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1600, col: 20, offset: 48434},
					exprs: []any{
						&notExpr{
							pos: position{line: 1600, col: 20, offset: 48434},
							expr: &litMatcher{
								pos:        position{line: 1600, col: 21, offset: 48435},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1600, col: 26, offset: 48440},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1600, col: 38, offset: 48452},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1600, col: 43, offset: 48457},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1600, col: 62, offset: 48476},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1600, col: 75, offset: 48489},
								expr: &ruleRefExpr{
									pos:    position{line: 1600, col: 76, offset: 48490},
									offset: 261,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1600, col: 98, offset: 48512},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1604, col: 1, offset: 48613},
			expr: &actionExpr{
				pos: position{line: 1604, col: 26, offset: 48638},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1604, col: 26, offset: 48638},
					exprs: []any{
						&notExpr{
							pos: position{line: 1604, col: 26, offset: 48638},
							expr: &litMatcher{
								pos:        position{line: 1604, col: 27, offset: 48639},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1604, col: 32, offset: 48644},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 45, offset: 48657},
							label: "name",
							expr: &ruleRefExpr{
								pos:    position{line: 1604, col: 50, offset: 48662},
								offset: 23,
							},
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 69, offset: 48681},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1604, col: 82, offset: 48694},
								expr: &ruleRefExpr{
									pos:    position{line: 1604, col: 83, offset: 48695},
									offset: 261,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1604, col: 105, offset: 48717},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1608, col: 1, offset: 48819},
			expr: &actionExpr{
				pos: position{line: 1608, col: 23, offset: 48841},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1608, col: 23, offset: 48841},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1608, col: 23, offset: 48841},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1608, col: 27, offset: 48845},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:    position{line: 1608, col: 40, offset: 48858},
								offset: 262,
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1612, col: 1, offset: 48911},
			expr: &choiceExpr{
				pos: position{line: 1612, col: 23, offset: 48933},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1612, col: 23, offset: 48933},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:        position{line: 1612, col: 23, offset: 48933},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1615, col: 7, offset: 48989},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1615, col: 7, offset: 48989},
							expr: &charClassMatcher{
								pos:        position{line: 1615, col: 7, offset: 48989},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1622, col: 1, offset: 49055},
			expr: &actionExpr{
				pos: position{line: 1622, col: 21, offset: 49075},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1622, col: 21, offset: 49075},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1622, col: 21, offset: 49075},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1622, col: 32, offset: 49086},
								expr: &ruleRefExpr{
									pos:    position{line: 1622, col: 33, offset: 49087},
									offset: 88,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 53, offset: 49107},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1622, col: 59, offset: 49113},
								alternatives: []any{
									&ruleRefExpr{
										pos:    position{line: 1622, col: 59, offset: 49113},
										offset: 264,
									},
									&ruleRefExpr{
										pos:    position{line: 1622, col: 85, offset: 49139},
										offset: 267,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1626, col: 1, offset: 49285},
			expr: &actionExpr{
				pos: position{line: 1626, col: 27, offset: 49311},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1626, col: 27, offset: 49311},
					exprs: []any{
						&notExpr{
							pos: position{line: 1626, col: 27, offset: 49311},
							expr: &ruleRefExpr{
								pos:    position{line: 1626, col: 28, offset: 49312},
								offset: 320,
							},
						},
						&litMatcher{
							pos:        position{line: 1626, col: 35, offset: 49319},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1626, col: 39, offset: 49323},
							expr: &notExpr{
								pos: position{line: 1626, col: 41, offset: 49325},
								expr: &litMatcher{
									pos:        position{line: 1626, col: 42, offset: 49326},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1626, col: 47, offset: 49331},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1626, col: 54, offset: 49338},
								offset: 265,
							},
						},
						&litMatcher{
							pos:        position{line: 1626, col: 82, offset: 49366},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1626, col: 86, offset: 49370},
							expr: &litMatcher{
								pos:        position{line: 1626, col: 87, offset: 49371},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1626, col: 91, offset: 49375},
							expr: &notExpr{
								pos: position{line: 1626, col: 93, offset: 49377},
								expr: &ruleRefExpr{
									pos:    position{line: 1626, col: 94, offset: 49378},
									offset: 303,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1630, col: 1, offset: 49423},
			expr: &actionExpr{
				pos: position{line: 1630, col: 30, offset: 49452},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 30, offset: 49452},
					exprs: []any{
						&notExpr{
							pos: position{line: 1630, col: 30, offset: 49452},
							expr: &ruleRefExpr{
								pos:    position{line: 1630, col: 31, offset: 49453},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 33, offset: 49455},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1630, col: 39, offset: 49461},
								expr: &actionExpr{
									pos: position{line: 1630, col: 40, offset: 49462},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1630, col: 40, offset: 49462},
										exprs: []any{
											&notExpr{
												pos: position{line: 1630, col: 40, offset: 49462},
												expr: &ruleRefExpr{
													pos:    position{line: 1630, col: 41, offset: 49463},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 1630, col: 43, offset: 49465},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1630, col: 49, offset: 49471},
													expr: &ruleRefExpr{
														pos:    position{line: 1630, col: 50, offset: 49472},
														offset: 266,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1634, col: 1, offset: 49653},
			expr: &seqExpr{
				pos: position{line: 1634, col: 32, offset: 49684},
				exprs: []any{
					&notExpr{
						pos: position{line: 1634, col: 32, offset: 49684},
						expr: &seqExpr{
							pos: position{line: 1634, col: 34, offset: 49686},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1634, col: 34, offset: 49686},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&notExpr{
									pos: position{line: 1634, col: 38, offset: 49690},
									expr: &litMatcher{
										pos:        position{line: 1634, col: 39, offset: 49691},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1634, col: 44, offset: 49696},
						offset: 87,
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1636, col: 1, offset: 49718},
			expr: &actionExpr{
				pos: position{line: 1636, col: 27, offset: 49744},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1636, col: 27, offset: 49744},
					exprs: []any{
						&notExpr{
							pos: position{line: 1636, col: 27, offset: 49744},
							expr: &ruleRefExpr{
								pos:    position{line: 1636, col: 28, offset: 49745},
								offset: 321,
							},
						},
						&litMatcher{
							pos:        position{line: 1636, col: 41, offset: 49758},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1636, col: 46, offset: 49763},
							label: "value",
							expr: &ruleRefExpr{
								pos:    position{line: 1636, col: 53, offset: 49770},
								offset: 268,
							},
						},
						&litMatcher{
							pos:        position{line: 1636, col: 81, offset: 49798},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1640, col: 1, offset: 49835},
			expr: &actionExpr{
				pos: position{line: 1640, col: 30, offset: 49864},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1640, col: 30, offset: 49864},
					exprs: []any{
						&notExpr{
							pos: position{line: 1640, col: 30, offset: 49864},
							expr: &ruleRefExpr{
								pos:    position{line: 1640, col: 31, offset: 49865},
								offset: 319,
							},
						},
						&labeledExpr{
							pos:   position{line: 1640, col: 33, offset: 49867},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1640, col: 39, offset: 49873},
								expr: &actionExpr{
									pos: position{line: 1640, col: 40, offset: 49874},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1640, col: 40, offset: 49874},
										exprs: []any{
											&notExpr{
												pos: position{line: 1640, col: 40, offset: 49874},
												expr: &ruleRefExpr{
													pos:    position{line: 1640, col: 41, offset: 49875},
													offset: 319,
												},
											},
											&labeledExpr{
												pos:   position{line: 1640, col: 43, offset: 49877},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1640, col: 49, offset: 49883},
													expr: &ruleRefExpr{
														pos:    position{line: 1640, col: 50, offset: 49884},
														offset: 269,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1644, col: 1, offset: 50077},
			expr: &seqExpr{
				pos: position{line: 1644, col: 32, offset: 50108},
				exprs: []any{
					&notExpr{
						pos: position{line: 1644, col: 32, offset: 50108},
						expr: &litMatcher{
							pos:        position{line: 1644, col: 34, offset: 50110},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1644, col: 40, offset: 50116},
						offset: 87,
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1647, col: 1, offset: 50139},
			expr: &litMatcher{
				pos:        position{line: 1647, col: 18, offset: 50156},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1649, col: 1, offset: 50168},
			expr: &actionExpr{
				pos: position{line: 1649, col: 9, offset: 50176},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1649, col: 9, offset: 50176},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1649, col: 9, offset: 50176},
							offset: 270,
						},
						&labeledExpr{
							pos:   position{line: 1649, col: 24, offset: 50191},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1649, col: 36, offset: 50203},
								offset: 278,
							},
						},
						&litMatcher{
							pos:        position{line: 1649, col: 59, offset: 50226},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1649, col: 64, offset: 50231},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 1649, col: 75, offset: 50242},
							expr: &ruleRefExpr{
								pos:    position{line: 1649, col: 76, offset: 50243},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "IfNDefStatement",
			pos:  position{line: 1654, col: 1, offset: 50363},
			expr: &litMatcher{
				pos:        position{line: 1654, col: 19, offset: 50381},
				val:        "ifndef::",
				ignoreCase: false,
				want:       "\"ifndef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1657, col: 1, offset: 50395},
			expr: &actionExpr{
				pos: position{line: 1657, col: 10, offset: 50404},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1657, col: 10, offset: 50404},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1657, col: 10, offset: 50404},
							offset: 272,
						},
						&labeledExpr{
							pos:   position{line: 1657, col: 26, offset: 50420},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1657, col: 38, offset: 50432},
								offset: 278,
							},
						},
						&litMatcher{
							pos:        position{line: 1657, col: 61, offset: 50455},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1657, col: 66, offset: 50460},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 1657, col: 77, offset: 50471},
							expr: &ruleRefExpr{
								pos:    position{line: 1657, col: 78, offset: 50472},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1662, col: 1, offset: 50594},
			expr: &actionExpr{
				pos: position{line: 1662, col: 15, offset: 50608},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1662, col: 15, offset: 50608},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1662, col: 15, offset: 50608},
							offset: 270,
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 30, offset: 50623},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1662, col: 42, offset: 50635},
								offset: 278,
							},
						},
						&litMatcher{
							pos:        position{line: 1662, col: 65, offset: 50658},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1662, col: 69, offset: 50662},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1662, col: 78, offset: 50671},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1662, col: 104, offset: 50697},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1662, col: 108, offset: 50701},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1667, col: 1, offset: 50879},
			expr: &actionExpr{
				pos: position{line: 1667, col: 16, offset: 50894},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1667, col: 16, offset: 50894},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1667, col: 16, offset: 50894},
							offset: 272,
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 32, offset: 50910},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:    position{line: 1667, col: 44, offset: 50922},
								offset: 278,
							},
						},
						&litMatcher{
							pos:        position{line: 1667, col: 67, offset: 50945},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 71, offset: 50949},
							label: "content",
							expr: &ruleRefExpr{
								pos:    position{line: 1667, col: 80, offset: 50958},
								offset: 281,
							},
						},
						&litMatcher{
							pos:        position{line: 1667, col: 106, offset: 50984},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1667, col: 110, offset: 50988},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1672, col: 1, offset: 51168},
			expr: &litMatcher{
				pos:        position{line: 1672, col: 21, offset: 51188},
				val:        "endif::",
				ignoreCase: false,
				want:       "\"endif::\"",
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1674, col: 1, offset: 51200},
			expr: &actionExpr{
				pos: position{line: 1674, col: 12, offset: 51211},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1674, col: 12, offset: 51211},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1674, col: 12, offset: 51211},
							offset: 276,
						},
						&labeledExpr{
							pos:   position{line: 1674, col: 30, offset: 51229},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1674, col: 41, offset: 51240},
								expr: &ruleRefExpr{
									pos:    position{line: 1674, col: 42, offset: 51241},
									offset: 278,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1674, col: 66, offset: 51265},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1674, col: 72, offset: 51271},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 1674, col: 82, offset: 51281},
							expr: &ruleRefExpr{
								pos:    position{line: 1674, col: 83, offset: 51282},
								offset: 310,
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1684, col: 1, offset: 51569},
			expr: &choiceExpr{
				pos: position{line: 1684, col: 25, offset: 51593},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1684, col: 25, offset: 51593},
						offset: 279,
					},
					&ruleRefExpr{
						pos:    position{line: 1684, col: 52, offset: 51620},
						offset: 280,
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1686, col: 1, offset: 51646},
			expr: &actionExpr{
				pos: position{line: 1686, col: 28, offset: 51673},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1686, col: 28, offset: 51673},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1686, col: 34, offset: 51679},
						expr: &actionExpr{
							pos: position{line: 1687, col: 5, offset: 51685},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1687, col: 5, offset: 51685},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1687, col: 5, offset: 51685},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1687, col: 10, offset: 51690},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1687, col: 29, offset: 51709},
										offset: 314,
									},
									&zeroOrOneExpr{
										pos: position{line: 1687, col: 39, offset: 51719},
										expr: &litMatcher{
											pos:        position{line: 1687, col: 39, offset: 51719},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1687, col: 44, offset: 51724},
										offset: 314,
									},
									&andCodeExpr{
										pos: position{line: 1688, col: 5, offset: 51739},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1698, col: 1, offset: 52000},
			expr: &actionExpr{
				pos: position{line: 1698, col: 28, offset: 52027},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1698, col: 28, offset: 52027},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1698, col: 34, offset: 52033},
						expr: &actionExpr{
							pos: position{line: 1699, col: 5, offset: 52039},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1699, col: 5, offset: 52039},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1699, col: 5, offset: 52039},
										label: "name",
										expr: &ruleRefExpr{
											pos:    position{line: 1699, col: 10, offset: 52044},
											offset: 23,
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1699, col: 29, offset: 52063},
										offset: 314,
									},
									&zeroOrOneExpr{
										pos: position{line: 1699, col: 39, offset: 52073},
										expr: &litMatcher{
											pos:        position{line: 1699, col: 39, offset: 52073},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:    position{line: 1699, col: 44, offset: 52078},
										offset: 314,
									},
									&andCodeExpr{
										pos: position{line: 1700, col: 5, offset: 52093},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1710, col: 1, offset: 52354},
			expr: &seqExpr{
				pos: position{line: 1710, col: 28, offset: 52381},
				exprs: []any{
					&notExpr{
						pos: position{line: 1710, col: 28, offset: 52381},
						expr: &litMatcher{
							pos:        position{line: 1710, col: 29, offset: 52382},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1710, col: 33, offset: 52386},
						expr: &ruleRefExpr{
							pos:    position{line: 1710, col: 33, offset: 52386},
							offset: 81,
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1712, col: 1, offset: 52403},
			expr: &actionExpr{
				pos: position{line: 1712, col: 10, offset: 52412},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1712, col: 10, offset: 52412},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1712, col: 10, offset: 52412},
							offset: 283,
						},
						&litMatcher{
							pos:        position{line: 1712, col: 26, offset: 52428},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1712, col: 30, offset: 52432},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 40, offset: 52442},
							label: "left",
							expr: &ruleRefExpr{
								pos:    position{line: 1712, col: 46, offset: 52448},
								offset: 284,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1712, col: 59, offset: 52461},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 70, offset: 52472},
							label: "operand",
							expr: &ruleRefExpr{
								pos:    position{line: 1712, col: 79, offset: 52481},
								offset: 285,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1712, col: 95, offset: 52497},
							offset: 314,
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 105, offset: 52507},
							label: "right",
							expr: &ruleRefExpr{
								pos:    position{line: 1712, col: 112, offset: 52514},
								offset: 284,
							},
						},
						&ruleRefExpr{
							pos:    position{line: 1712, col: 125, offset: 52527},
							offset: 314,
						},
						&litMatcher{
							pos:        position{line: 1712, col: 135, offset: 52537},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1712, col: 139, offset: 52541},
							offset: 314,
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1716, col: 1, offset: 52696},
			expr: &litMatcher{
				pos:        position{line: 1716, col: 19, offset: 52714},
				val:        "ifeval::",
				ignoreCase: false,
				want:       "\"ifeval::\"",
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1718, col: 1, offset: 52727},
			expr: &actionExpr{
				pos: position{line: 1718, col: 15, offset: 52741},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1718, col: 15, offset: 52741},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1718, col: 20, offset: 52746},
						alternatives: []any{
							&ruleRefExpr{
								pos:    position{line: 1718, col: 20, offset: 52746},
								offset: 38,
							},
							&ruleRefExpr{
								pos:    position{line: 1718, col: 48, offset: 52774},
								offset: 40,
							},
							&ruleRefExpr{
								pos:    position{line: 1718, col: 76, offset: 52802},
								offset: 42,
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1722, col: 1, offset: 52935},
			expr: &choiceExpr{
				pos: position{line: 1723, col: 7, offset: 52959},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1723, col: 8, offset: 52960},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1723, col: 8, offset: 52960},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1724, col: 8, offset: 53023},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1724, col: 8, offset: 53023},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1725, col: 8, offset: 53089},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1725, col: 8, offset: 53089},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1726, col: 8, offset: 53155},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1726, col: 8, offset: 53155},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1727, col: 8, offset: 53228},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1727, col: 8, offset: 53228},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1728, col: 8, offset: 53297},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1728, col: 8, offset: 53297},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "ConditionalStatement",
			pos:  position{line: 1730, col: 1, offset: 53367},
			expr: &choiceExpr{
				pos: position{line: 1730, col: 25, offset: 53391},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1730, col: 25, offset: 53391},
						offset: 270,
					},
					&ruleRefExpr{
						pos:    position{line: 1730, col: 42, offset: 53408},
						offset: 272,
					},
					&ruleRefExpr{
						pos:    position{line: 1730, col: 60, offset: 53426},
						offset: 283,
					},
					&ruleRefExpr{
						pos:    position{line: 1730, col: 78, offset: 53444},
						offset: 276,
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1733, col: 1, offset: 53465},
			expr: &actionExpr{
				pos: position{line: 1733, col: 20, offset: 53484},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1733, col: 21, offset: 53485},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1733, col: 21, offset: 53485},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1733, col: 27, offset: 53491},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1733, col: 33, offset: 53497},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1737, col: 1, offset: 53568},
			expr: &seqExpr{
				pos: position{line: 1737, col: 15, offset: 53582},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1737, col: 15, offset: 53582},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1737, col: 19, offset: 53586},
						expr: &notExpr{
							pos: position{line: 1737, col: 21, offset: 53588},
							expr: &litMatcher{
								pos:        position{line: 1737, col: 22, offset: 53589},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1739, col: 1, offset: 53595},
			expr: &choiceExpr{
				pos: position{line: 1739, col: 15, offset: 53609},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1739, col: 15, offset: 53609},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1739, col: 15, offset: 53609},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1739, col: 15, offset: 53609},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1739, col: 21, offset: 53615},
									expr: &charClassMatcher{
										pos:        position{line: 1739, col: 22, offset: 53616},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1741, col: 9, offset: 53674},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1741, col: 9, offset: 53674},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1741, col: 9, offset: 53674},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1741, col: 13, offset: 53678},
									expr: &charClassMatcher{
										pos:        position{line: 1741, col: 14, offset: 53679},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1746, col: 1, offset: 53742},
			expr: &actionExpr{
				pos: position{line: 1746, col: 15, offset: 53756},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1746, col: 17, offset: 53758},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 1746, col: 18, offset: 53759},
							val:        "[,;.?)/:!=\"'@-[\\]]",
							chars:      []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:     []rune{'@', '['},
							ignoreCase: false,
							inverted:   false,
						},
						&seqExpr{
							pos: position{line: 1746, col: 41, offset: 53782},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1746, col: 41, offset: 53782},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1746, col: 45, offset: 53786},
									expr: &litMatcher{
										pos:        position{line: 1746, col: 46, offset: 53787},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1750, col: 1, offset: 53854},
			expr: &actionExpr{
				pos: position{line: 1750, col: 13, offset: 53866},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1750, col: 13, offset: 53866},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1750, col: 13, offset: 53866},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:    position{line: 1750, col: 17, offset: 53870},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 1750, col: 27, offset: 53880},
							expr: &ruleRefExpr{
								pos:    position{line: 1750, col: 29, offset: 53882},
								offset: 310,
							},
						},
						&andCodeExpr{
							pos: position{line: 1750, col: 40, offset: 53893},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1756, col: 1, offset: 53994},
			expr: &choiceExpr{
				pos: position{line: 1756, col: 16, offset: 54009},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1756, col: 16, offset: 54009},
						offset: 294,
					},
					&ruleRefExpr{
						pos:    position{line: 1756, col: 36, offset: 54029},
						offset: 293,
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1758, col: 1, offset: 54049},
			expr: &choiceExpr{
				pos: position{line: 1758, col: 22, offset: 54070},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1758, col: 22, offset: 54070},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&litMatcher{
						pos:        position{line: 1758, col: 30, offset: 54078},
						val:        "`\"",
						ignoreCase: false,
						want:       "\"`\\\"\"",
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1760, col: 1, offset: 54087},
			expr: &choiceExpr{
				pos: position{line: 1760, col: 22, offset: 54108},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1760, col: 22, offset: 54108},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&litMatcher{
						pos:        position{line: 1760, col: 29, offset: 54115},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1762, col: 1, offset: 54123},
			expr: &actionExpr{
				pos: position{line: 1762, col: 13, offset: 54135},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1762, col: 13, offset: 54135},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1762, col: 13, offset: 54135},
							offset: 307,
						},
						&ruleRefExpr{
							pos:    position{line: 1762, col: 29, offset: 54151},
							offset: 314,
						},
						&ruleRefExpr{
							pos:    position{line: 1762, col: 39, offset: 54161},
							offset: 297,
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1766, col: 1, offset: 54251},
			expr: &seqExpr{
				pos: position{line: 1766, col: 15, offset: 54265},
				exprs: []any{
					&notExpr{
						pos: position{line: 1766, col: 15, offset: 54265},
						expr: &litMatcher{
							pos:        position{line: 1766, col: 16, offset: 54266},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:    position{line: 1766, col: 21, offset: 54271},
						offset: 297,
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1768, col: 1, offset: 54280},
			expr: &actionExpr{
				pos: position{line: 1768, col: 11, offset: 54290},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1768, col: 12, offset: 54291},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1768, col: 12, offset: 54291},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1768, col: 19, offset: 54298},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1772, col: 1, offset: 54358},
			expr: &actionExpr{
				pos: position{line: 1772, col: 15, offset: 54372},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1772, col: 15, offset: 54372},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1772, col: 15, offset: 54372},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:    position{line: 1772, col: 26, offset: 54383},
								offset: 299,
							},
						},
						&litMatcher{
							pos:        position{line: 1772, col: 42, offset: 54399},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1776, col: 1, offset: 54435},
			expr: &actionExpr{
				pos: position{line: 1776, col: 20, offset: 54454},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1776, col: 20, offset: 54454},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1776, col: 21, offset: 54455},
							expr: &charClassMatcher{
								pos:        position{line: 1776, col: 21, offset: 54455},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1776, col: 29, offset: 54463},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1782, col: 1, offset: 54554},
			expr: &notExpr{
				pos: position{line: 1782, col: 14, offset: 54567},
				expr: &ruleRefExpr{
					pos:    position{line: 1782, col: 15, offset: 54568},
					offset: 297,
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1784, col: 1, offset: 54577},
			expr: &notExpr{
				pos: position{line: 1784, col: 12, offset: 54588},
				expr: &ruleRefExpr{
					pos:    position{line: 1784, col: 13, offset: 54589},
					offset: 319,
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1786, col: 1, offset: 54592},
			expr: &charClassMatcher{
				pos:        position{line: 1786, col: 9, offset: 54600},
				val:        "[\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1788, col: 1, offset: 54609},
			expr: &charClassMatcher{
				pos:        position{line: 1788, col: 16, offset: 54624},
				val:        "[\\p{L}\\p{N}]",
				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1790, col: 1, offset: 54638},
			expr: &notExpr{
				pos: position{line: 1790, col: 13, offset: 54650},
				expr: &anyMatcher{
					line: 1790, col: 14, offset: 54651,
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1792, col: 1, offset: 54655},
			expr: &andExpr{
				pos: position{line: 1792, col: 16, offset: 54670},
				expr: &anyMatcher{
					line: 1792, col: 18, offset: 54672,
				},
			},
		},
		{
			name: "BeginningOfFile",
			pos:  position{line: 1794, col: 1, offset: 54676},
			expr: &seqExpr{
				pos: position{line: 1794, col: 19, offset: 54694},
				exprs: []any{
					&andExpr{
						pos: position{line: 1794, col: 19, offset: 54694},
						expr: &anyMatcher{
							line: 1794, col: 21, offset: 54696,
						},
					},
					&andCodeExpr{
						pos: position{line: 1794, col: 24, offset: 54699},
						run: (*parser).callonBeginningOfFile4,
					},
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1800, col: 1, offset: 54814},
			expr: &notExpr{
				pos: position{line: 1800, col: 19, offset: 54832},
				expr: &ruleRefExpr{
					pos:    position{line: 1800, col: 20, offset: 54833},
					offset: 308,
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1802, col: 1, offset: 54850},
			expr: &seqExpr{
				pos: position{line: 1802, col: 19, offset: 54868},
				exprs: []any{
					&anyMatcher{
						line: 1802, col: 19, offset: 54868,
					},
					&andCodeExpr{
						pos: position{line: 1802, col: 21, offset: 54870},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1806, col: 1, offset: 54918},
			expr: &actionExpr{
				pos: position{line: 1806, col: 10, offset: 54927},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1806, col: 10, offset: 54927},
					exprs: []any{
						&ruleRefExpr{
							pos:    position{line: 1806, col: 10, offset: 54927},
							offset: 314,
						},
						&andExpr{
							pos: position{line: 1806, col: 20, offset: 54937},
							expr: &notExpr{
								pos: position{line: 1806, col: 22, offset: 54939},
								expr: &ruleRefExpr{
									pos:    position{line: 1806, col: 23, offset: 54940},
									offset: 319,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1806, col: 26, offset: 54943},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1812, col: 1, offset: 55012},
			expr: &choiceExpr{
				pos: position{line: 1812, col: 13, offset: 55024},
				alternatives: []any{
					&ruleRefExpr{
						pos:    position{line: 1812, col: 13, offset: 55024},
						offset: 297,
					},
					&ruleRefExpr{
						pos:    position{line: 1812, col: 23, offset: 55034},
						offset: 304,
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1814, col: 1, offset: 55045},
			expr: &labeledExpr{
				pos:   position{line: 1814, col: 14, offset: 55058},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1814, col: 20, offset: 55064},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1814, col: 20, offset: 55064},
						expr: &ruleRefExpr{
							pos:    position{line: 1814, col: 20, offset: 55064},
							offset: 303,
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1816, col: 1, offset: 55110},
			expr: &actionExpr{
				pos: position{line: 1816, col: 16, offset: 55125},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1816, col: 16, offset: 55125},
					expr: &ruleRefExpr{
						pos:    position{line: 1816, col: 16, offset: 55125},
						offset: 316,
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1820, col: 1, offset: 55187},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1820, col: 11, offset: 55197},
				expr: &charClassMatcher{
					pos:        position{line: 1820, col: 11, offset: 55197},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1822, col: 1, offset: 55208},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1822, col: 13, offset: 55220},
				expr: &charClassMatcher{
					pos:        position{line: 1822, col: 13, offset: 55220},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1824, col: 1, offset: 55229},
			expr: &actionExpr{
				pos: position{line: 1824, col: 21, offset: 55249},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1824, col: 22, offset: 55250},
					alternatives: []any{
						&anyMatcher{
							line: 1824, col: 22, offset: 55250,
						},
						&ruleRefExpr{
							pos:    position{line: 1824, col: 26, offset: 55254},
							offset: 297,
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1828, col: 1, offset: 55303},
			expr: &charClassMatcher{
				pos:        position{line: 1828, col: 24, offset: 55326},
				val:        "[^\\r\\n]",
				chars:      []rune{'\r', '\n'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1830, col: 1, offset: 55336},
			expr: &charClassMatcher{
				pos:        position{line: 1830, col: 22, offset: 55357},
				val:        "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "__",
			pos:  position{line: 1832, col: 1, offset: 55400},
			expr: &actionExpr{
				pos: position{line: 1832, col: 6, offset: 55405},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1832, col: 6, offset: 55405},
					expr: &charClassMatcher{
						pos:        position{line: 1832, col: 6, offset: 55405},
						val:        "[ \\t]",
						chars:      []rune{' ', '\t'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1836, col: 1, offset: 55452},
			expr: &actionExpr{
				pos: position{line: 1836, col: 5, offset: 55456},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:        position{line: 1836, col: 5, offset: 55456},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1840, col: 1, offset: 55502},
			expr: &litMatcher{
				pos:        position{line: 1840, col: 10, offset: 55511},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1842, col: 1, offset: 55518},
			expr: &litMatcher{
				pos:        position{line: 1842, col: 16, offset: 55533},
				val:        "\\\\",
				ignoreCase: false,
				want:       "\"\\\\\\\\\"",
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Set))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onAlchemyEscape1(start, value, lines any) (any, error) {
	return compose(c, asciidoc.NewAlchemyEscape(), setLines[*asciidoc.AlchemyEscape](cast[any, string](lines.([]any))), setElements[*asciidoc.AlchemyEscape](value))

}

func (p *parser) callonAlchemyEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscape1(stack["start"], stack["value"], stack["lines"])
}

func (c *current) onAlchemyEscapeLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonAlchemyEscapeLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlchemyEscapeLine1(stack["line"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join(flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement2()
}

func (c *current) onSingleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonSingleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement8()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("\""), nil
}

func (p *parser) callonDoubleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement2()
}

func (c *current) onDoubleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonDoubleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement8()
}

func (c *current) onNakedAttributeValue10() (any, error) {
	// Stop on commas, equals, spaces or end bracket
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonNakedAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue10()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(string), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(asciidoc.NewString(id.(string)), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAdmonition2() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition2()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Set)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Set)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onIncludeParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonIncludeParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParse1(stack["content"])
}

func (c *current) onIncludeParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonIncludeParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseElement1(stack["element"])
}

func (c *current) onIncludeParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonIncludeParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludeParseLine1(stack["content"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLinkMacro(url.(asciidoc.URL)), setAttributes[*asciidoc.LinkMacro](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onIncludedTableElements1(content any) (any, error) {
	table := c.globalStore["table"].(*asciidoc.Table)
	return parseTableRows(table, content.([]any))
}

func (p *parser) callonIncludedTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableElements1(stack["content"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onIncludedTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonIncludedTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableInlineIfDef1(ifdef, content, endif any) (any, error) {
	id, err := compose(c, ifdef.(*asciidoc.IfDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Set{id}, content.(asciidoc.Set)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfDef1(stack["ifdef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableInlineIfNDef1(ifndef, content, endif any) (any, error) {
	id, err := compose(c, ifndef.(*asciidoc.IfNDef))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Set{id}, content.(asciidoc.Set)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfNDef1(stack["ifndef"], stack["content"], stack["endif"])
}

func (c *current) onTableIfEval1(ifeval any) (any, error) {
	return compose(c, ifeval.(*asciidoc.IfEval))
}

func (p *parser) callonTableIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfEval1(stack["ifeval"])
}

func (c *current) onTableInlineIfEval1(ifeval, content, endif any) (any, error) {
	id, err := compose(c, ifeval.(*asciidoc.IfEval))
	if err != nil {
		return nil, err
	}
	id.Inline = true
	ei, err := compose(c, endif.(*asciidoc.EndIf))
	if err != nil {
		return nil, err
	}
	out := append(asciidoc.Set{id}, content.(asciidoc.Set)...)
	return append(out, ei), nil
}

func (p *parser) callonTableInlineIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableInlineIfEval1(stack["ifeval"], stack["content"], stack["endif"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonTableFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onIncludedTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonIncludedTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Set{}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Set
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Set{asciidoc.EmptyLine{}}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return mergeStrings(flat(content.([]any))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe(column, span.Column.Value)
	span.Row = asciidoc.Maybe(row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe(multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe(horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe(verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe(style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Set)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(toString(scheme), path.(asciidoc.Set)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines.([]any)...)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return append([]any{&asciidoc.NewLine{}}, element.([]any)...), nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(string)), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceID1() (any, error) {

	// See: https://docs.asciidoctor.org/asciidoc/latest/attributes/id/#valid-id-characters
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1()
}

func (c *current) onDocumentCrossReference1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewDocumentCrossReference(path.(asciidoc.Set)), setAttributes[*asciidoc.DocumentCrossReference](attributes))
}

func (p *parser) callonDocumentCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentCrossReference1(stack["path"], stack["attributes"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 10, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 10, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Set))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Set)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Set(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return toString(line), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names, attr.union), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names, attr.union), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onBeginningOfFile4() (bool, error) {
	if c.pos.line == 0 && c.pos.col == 0 {
	}
	return c.pos.line == 0 && c.pos.col == 0, nil
}

func (p *parser) callonBeginningOfFile4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeginningOfFile4()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict

	parser                *parser                         // Alchemy patch: we keep a reference to the parent parser here, so inline code can access it
	delimitedBlockState   delimitedBlockState             // Alchemy patch: we keep track of levels of delimited blocks here
	tableColumnsAttribute *asciidoc.TableColumnsAttribute // Alchemy patch: we keep track of explicit table columns here to aid in allocating columns
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos    position
	offset int
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos position
	val string
	// Alchemy patch: we don't use this optimization, so don't allocate the array
	//basicLatinChars [128]bool
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore:         make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule offset to the rule node
	rules []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	offset position // Alchemy patch: we add an offset field to track element positions in the doc
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.rules = g.rules

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	var startRule *rule
	for _, r := range p.rules {
		if r.name == p.entrypoint {
			startRule = r
			break
		}
	}
	if startRule == nil {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	var ok bool
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.offset > len(p.rules)-1 {
		panic(fmt.Sprintf("%s: invalid rule: out of range", ref.pos))
	}

	rule := p.rules[ref.offset]
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any // Alchemy patch: we lazily allocate this array, as it's infrequently populated

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
