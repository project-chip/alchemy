// Code generated by pigeon; DO NOT EDIT.

package parse

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/hasty/alchemy/asciidoc"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 14, col: 1, offset: 92},
			expr: &actionExpr{
				pos: position{line: 14, col: 12, offset: 103},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 14, col: 12, offset: 103},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 14, col: 12, offset: 103},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 20, offset: 111},
								expr: &ruleRefExpr{
									pos:  position{line: 14, col: 21, offset: 112},
									name: "Element",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 31, offset: 122},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 18, col: 1, offset: 177},
			expr: &actionExpr{
				pos: position{line: 18, col: 11, offset: 187},
				run: (*parser).callonElement1,
				expr: &labeledExpr{
					pos:   position{line: 18, col: 11, offset: 187},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 18, col: 20, offset: 196},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 18, col: 20, offset: 196},
								name: "BlockElement",
							},
							&ruleRefExpr{
								pos:  position{line: 18, col: 35, offset: 211},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElement",
			pos:  position{line: 25, col: 1, offset: 260},
			expr: &actionExpr{
				pos: position{line: 25, col: 16, offset: 275},
				run: (*parser).callonBlockElement1,
				expr: &seqExpr{
					pos: position{line: 25, col: 16, offset: 275},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 25, col: 16, offset: 275},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 25, col: 32, offset: 291},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 41, offset: 300},
								name: "BlockElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 56, offset: 315},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 26, col: 1, offset: 325},
							run: (*parser).callonBlockElement7,
						},
					},
				},
			},
		},
		{
			name: "BlockElements",
			pos:  position{line: 32, col: 1, offset: 424},
			expr: &actionExpr{
				pos: position{line: 32, col: 17, offset: 440},
				run: (*parser).callonBlockElements1,
				expr: &labeledExpr{
					pos:   position{line: 32, col: 17, offset: 440},
					label: "blockElement",
					expr: &choiceExpr{
						pos: position{line: 33, col: 5, offset: 460},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 33, col: 5, offset: 460},
								name: "BlockEmptyLine",
							},
							&ruleRefExpr{
								pos:  position{line: 34, col: 5, offset: 481},
								name: "AttributableBlocks",
							},
							&ruleRefExpr{
								pos:  position{line: 35, col: 5, offset: 506},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 37, col: 5, offset: 541},
								name: "NakedBlocks",
							},
							&ruleRefExpr{
								pos:  position{line: 38, col: 5, offset: 559},
								name: "NakedBlockAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlocks",
			pos:  position{line: 43, col: 1, offset: 620},
			expr: &actionExpr{
				pos: position{line: 43, col: 15, offset: 634},
				run: (*parser).callonNakedBlocks1,
				expr: &labeledExpr{
					pos:   position{line: 43, col: 15, offset: 634},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 44, col: 5, offset: 647},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 44, col: 5, offset: 647},
								name: "MultiLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 45, col: 5, offset: 671},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 46, col: 5, offset: 695},
								name: "AttributeEntry",
							},
							&ruleRefExpr{
								pos:  position{line: 47, col: 5, offset: 717},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 48, col: 5, offset: 738},
								name: "IfDef",
							},
							&ruleRefExpr{
								pos:  position{line: 49, col: 5, offset: 750},
								name: "IfNDef",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 5, offset: 764},
								name: "IfEval",
							},
							&ruleRefExpr{
								pos:  position{line: 51, col: 5, offset: 777},
								name: "EndIfDef",
							},
							&ruleRefExpr{
								pos:  position{line: 52, col: 5, offset: 792},
								name: "FileInclude",
							},
							&ruleRefExpr{
								pos:  position{line: 53, col: 5, offset: 810},
								name: "DescriptionListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 54, col: 5, offset: 836},
								name: "ListContinuation",
							},
							&ruleRefExpr{
								pos:  position{line: 55, col: 5, offset: 859},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributableBlocks",
			pos:  position{line: 60, col: 1, offset: 900},
			expr: &actionExpr{
				pos: position{line: 60, col: 22, offset: 921},
				run: (*parser).callonAttributableBlocks1,
				expr: &seqExpr{
					pos: position{line: 60, col: 22, offset: 921},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 60, col: 22, offset: 921},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 33, offset: 932},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 34, offset: 933},
									name: "BlockElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 59, offset: 958},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 61, col: 5, offset: 973},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 61, col: 5, offset: 973},
										name: "Listing",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 5, offset: 988},
										name: "Open",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 5, offset: 999},
										name: "Example",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 5, offset: 1013},
										name: "Sidebar",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 5, offset: 1027},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 5, offset: 1039},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 5, offset: 1053},
										name: "Stem",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 5, offset: 1064},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 5, offset: 1079},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 5, offset: 1099},
										name: "PageBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 5, offset: 1115},
										name: "BlockImage",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 5, offset: 1132},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 5, offset: 1155},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 5, offset: 1180},
										name: "DescriptionListItem",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 75, col: 9, offset: 1209},
							run: (*parser).callonAttributableBlocks22,
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 87, col: 1, offset: 1607},
			expr: &actionExpr{
				pos: position{line: 87, col: 19, offset: 1625},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 87, col: 19, offset: 1625},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 88, col: 5, offset: 1641},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 88, col: 6, offset: 1642},
								run: (*parser).callonBlockAttributes4,
								expr: &labeledExpr{
									pos:   position{line: 88, col: 6, offset: 1642},
									label: "anchor",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 14, offset: 1650},
										name: "AnchorAttribute",
									},
								},
							},
							&actionExpr{
								pos: position{line: 91, col: 8, offset: 1711},
								run: (*parser).callonBlockAttributes7,
								expr: &labeledExpr{
									pos:   position{line: 91, col: 8, offset: 1711},
									label: "title",
									expr: &ruleRefExpr{
										pos:  position{line: 91, col: 15, offset: 1718},
										name: "BlockTitle",
									},
								},
							},
							&actionExpr{
								pos: position{line: 94, col: 8, offset: 1773},
								run: (*parser).callonBlockAttributes10,
								expr: &labeledExpr{
									pos:   position{line: 94, col: 8, offset: 1773},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 20, offset: 1785},
										name: "Attributes",
									},
								},
							},
							&actionExpr{
								pos: position{line: 97, col: 8, offset: 1846},
								run: (*parser).callonBlockAttributes13,
								expr: &labeledExpr{
									pos:   position{line: 97, col: 8, offset: 1846},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 20, offset: 1858},
										name: "ShorthandAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitle",
			pos:  position{line: 104, col: 1, offset: 1960},
			expr: &actionExpr{
				pos: position{line: 104, col: 14, offset: 1973},
				run: (*parser).callonBlockTitle1,
				expr: &seqExpr{
					pos: position{line: 104, col: 14, offset: 1973},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 104, col: 14, offset: 1973},
							name: "BeginningOfLine",
						},
						&litMatcher{
							pos:        position{line: 104, col: 30, offset: 1989},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&notExpr{
							pos: position{line: 104, col: 34, offset: 1993},
							expr: &charClassMatcher{
								pos:        position{line: 104, col: 35, offset: 1994},
								val:        "[ .]",
								chars:      []rune{' ', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 40, offset: 1999},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 49, offset: 2008},
								name: "BlockTitleContent",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTitleContent",
			pos:  position{line: 112, col: 1, offset: 2183},
			expr: &actionExpr{
				pos: position{line: 112, col: 21, offset: 2203},
				run: (*parser).callonBlockTitleContent1,
				expr: &labeledExpr{
					pos:   position{line: 112, col: 21, offset: 2203},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 29, offset: 2211},
						expr: &choiceExpr{
							pos: position{line: 112, col: 30, offset: 2212},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 112, col: 30, offset: 2212},
									name: "NakedInlineText",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 2230},
									name: "Alphanumeric",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 63, offset: 2245},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 67, offset: 2249},
									name: "Punctuation",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 81, offset: 2263},
									name: "AttributeReference",
								},
								&ruleRefExpr{
									pos:  position{line: 112, col: 102, offset: 2284},
									name: "CharacterClassInline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockEmptyLine",
			pos:  position{line: 116, col: 1, offset: 2351},
			expr: &actionExpr{
				pos: position{line: 116, col: 18, offset: 2368},
				run: (*parser).callonBlockEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 116, col: 18, offset: 2368},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 116, col: 18, offset: 2368},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 116, col: 28, offset: 2378},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 29, offset: 2379},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttribute",
			pos:  position{line: 120, col: 1, offset: 2457},
			expr: &actionExpr{
				pos: position{line: 120, col: 25, offset: 2481},
				run: (*parser).callonBlockElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 120, col: 25, offset: 2481},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 120, col: 25, offset: 2481},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 37, offset: 2493},
								name: "BlockAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 54, offset: 2510},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 120, col: 64, offset: 2520},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 65, offset: 2521},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAdditionalAttribute",
			pos:  position{line: 124, col: 1, offset: 2567},
			expr: &actionExpr{
				pos: position{line: 124, col: 35, offset: 2601},
				run: (*parser).callonBlockElementAdditionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 124, col: 35, offset: 2601},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 124, col: 35, offset: 2601},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 43, offset: 2609},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 55, offset: 2621},
								name: "BlockAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 124, col: 72, offset: 2638},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 124, col: 82, offset: 2648},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 83, offset: 2649},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockElementAttributes",
			pos:  position{line: 128, col: 1, offset: 2695},
			expr: &actionExpr{
				pos: position{line: 128, col: 26, offset: 2720},
				run: (*parser).callonBlockElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 128, col: 26, offset: 2720},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 128, col: 26, offset: 2720},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 37, offset: 2731},
								name: "BlockElementAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 60, offset: 2754},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 128, col: 81, offset: 2775},
								expr: &ruleRefExpr{
									pos:  position{line: 128, col: 82, offset: 2776},
									name: "BlockElementAdditionalAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 116, offset: 2810},
							name: "EndOfLine",
						},
						&zeroOrMoreExpr{
							pos: position{line: 128, col: 126, offset: 2820},
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 126, offset: 2820},
								name: "EmptyLine",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedBlockAttributes",
			pos:  position{line: 136, col: 1, offset: 3037},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 3060},
				run: (*parser).callonNakedBlockAttributes1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 3060},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 136, col: 24, offset: 3060},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 35, offset: 3071},
								name: "BlockElementAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 58, offset: 3094},
							label: "additionalAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 136, col: 79, offset: 3115},
								expr: &ruleRefExpr{
									pos:  position{line: 136, col: 80, offset: 3116},
									name: "BlockElementAdditionalAttribute",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiters",
			pos:  position{line: 148, col: 1, offset: 3458},
			expr: &actionExpr{
				pos: position{line: 149, col: 5, offset: 3481},
				run: (*parser).callonBlockDelimiters1,
				expr: &seqExpr{
					pos: position{line: 149, col: 5, offset: 3481},
					exprs: []any{
						&notExpr{
							pos: position{line: 149, col: 5, offset: 3481},
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 6, offset: 3482},
								name: "Alphanumeric",
							},
						},
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 3499},
							label: "delimiter",
							expr: &choiceExpr{
								pos: position{line: 151, col: 9, offset: 3519},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 151, col: 9, offset: 3519},
										name: "MultiLineCommentForwardSlashes",
									},
									&ruleRefExpr{
										pos:  position{line: 152, col: 11, offset: 3560},
										name: "ExampleEquals",
									},
									&ruleRefExpr{
										pos:  position{line: 153, col: 11, offset: 3584},
										name: "FencedBackticks",
									},
									&ruleRefExpr{
										pos:  position{line: 154, col: 11, offset: 3610},
										name: "ListingHyphens",
									},
									&ruleRefExpr{
										pos:  position{line: 155, col: 11, offset: 3635},
										name: "LiteralDots",
									},
									&ruleRefExpr{
										pos:  position{line: 156, col: 11, offset: 3657},
										name: "StemPluses",
									},
									&ruleRefExpr{
										pos:  position{line: 157, col: 11, offset: 3678},
										name: "QuoteUnderlines",
									},
									&ruleRefExpr{
										pos:  position{line: 158, col: 11, offset: 3704},
										name: "SidebarAsterisks",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 162, col: 1, offset: 3769},
			expr: &actionExpr{
				pos: position{line: 162, col: 11, offset: 3779},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 162, col: 11, offset: 3779},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 162, col: 11, offset: 3779},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 162, col: 18, offset: 3786},
								run: (*parser).callonSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 162, col: 18, offset: 3786},
									expr: &charClassMatcher{
										pos:        position{line: 162, col: 18, offset: 3786},
										val:        "[=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 165, col: 5, offset: 3845},
							run: (*parser).callonSection7,
						},
						&ruleRefExpr{
							pos:  position{line: 168, col: 5, offset: 3902},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 8, offset: 3905},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 15, offset: 3912},
								name: "SectionTitle",
							},
						},
						&andExpr{
							pos: position{line: 168, col: 29, offset: 3926},
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 30, offset: 3927},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 172, col: 1, offset: 4042},
			expr: &oneOrMoreExpr{
				pos: position{line: 172, col: 16, offset: 4057},
				expr: &ruleRefExpr{
					pos:  position{line: 172, col: 17, offset: 4058},
					name: "SectionTitleValue",
				},
			},
		},
		{
			name: "SectionTitleValue",
			pos:  position{line: 174, col: 1, offset: 4079},
			expr: &actionExpr{
				pos: position{line: 174, col: 21, offset: 4099},
				run: (*parser).callonSectionTitleValue1,
				expr: &seqExpr{
					pos: position{line: 174, col: 21, offset: 4099},
					exprs: []any{
						&notExpr{
							pos: position{line: 174, col: 21, offset: 4099},
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 22, offset: 4100},
								name: "EndOfLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 174, col: 32, offset: 4110},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 175, col: 5, offset: 4124},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 175, col: 5, offset: 4124},
										name: "UnbrokenText",
									},
									&ruleRefExpr{
										pos:  position{line: 176, col: 7, offset: 4144},
										name: "__",
									},
									&ruleRefExpr{
										pos:  position{line: 177, col: 7, offset: 4154},
										name: "Apostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 7, offset: 4172},
										name: "Punctuation",
									},
									&ruleRefExpr{
										pos:  position{line: 179, col: 7, offset: 4192},
										name: "FormattedText",
									},
									&ruleRefExpr{
										pos:  position{line: 180, col: 7, offset: 4212},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 181, col: 7, offset: 4236},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 182, col: 7, offset: 4248},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 183, col: 7, offset: 4272},
										name: "Icon",
									},
									&ruleRefExpr{
										pos:  position{line: 184, col: 7, offset: 4284},
										name: "AttributeReference",
									},
									&ruleRefExpr{
										pos:  position{line: 185, col: 7, offset: 4310},
										name: "Anchor",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 7, offset: 4339},
										name: "CharacterClassInline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntry",
			pos:  position{line: 192, col: 1, offset: 4391},
			expr: &actionExpr{
				pos: position{line: 192, col: 18, offset: 4408},
				run: (*parser).callonAttributeEntry1,
				expr: &seqExpr{
					pos: position{line: 192, col: 18, offset: 4408},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 192, col: 18, offset: 4408},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 22, offset: 4412},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 28, offset: 4418},
								name: "AttributeEntryName",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 48, offset: 4438},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 52, offset: 4442},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 62, offset: 4452},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 69, offset: 4459},
								name: "AttributeEntryElements",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryName",
			pos:  position{line: 196, col: 1, offset: 4603},
			expr: &actionExpr{
				pos: position{line: 196, col: 22, offset: 4624},
				run: (*parser).callonAttributeEntryName1,
				expr: &seqExpr{
					pos: position{line: 196, col: 22, offset: 4624},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 196, col: 22, offset: 4624},
							name: "CharacterGroupWord",
						},
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 41, offset: 4643},
							expr: &choiceExpr{
								pos: position{line: 196, col: 42, offset: 4644},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 196, col: 42, offset: 4644},
										name: "CharacterGroupWord",
									},
									&litMatcher{
										pos:        position{line: 196, col: 63, offset: 4665},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElements",
			pos:  position{line: 200, col: 1, offset: 4711},
			expr: &actionExpr{
				pos: position{line: 200, col: 26, offset: 4736},
				run: (*parser).callonAttributeEntryElements1,
				expr: &labeledExpr{
					pos:   position{line: 200, col: 26, offset: 4736},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 200, col: 32, offset: 4742},
						expr: &ruleRefExpr{
							pos:  position{line: 200, col: 32, offset: 4742},
							name: "AttributeEntryElement",
						},
					},
				},
			},
		},
		{
			name: "AttributeEntryElement",
			pos:  position{line: 204, col: 1, offset: 4836},
			expr: &choiceExpr{
				pos: position{line: 204, col: 26, offset: 4861},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 204, col: 26, offset: 4861},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 204, col: 26, offset: 4861},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 204, col: 36, offset: 4871},
								name: "EndOfLine",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 48, offset: 4883},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 206, col: 1, offset: 4907},
			expr: &choiceExpr{
				pos: position{line: 206, col: 18, offset: 4924},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 206, col: 18, offset: 4924},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 206, col: 18, offset: 4924},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 206, col: 18, offset: 4924},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 206, col: 23, offset: 4929},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 29, offset: 4935},
										name: "AttributeEntryName",
									},
								},
								&litMatcher{
									pos:        position{line: 206, col: 49, offset: 4955},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 206, col: 53, offset: 4959},
									name: "AnySpaces",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 5041},
						run: (*parser).callonAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 208, col: 5, offset: 5041},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 208, col: 5, offset: 5041},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 208, col: 9, offset: 5045},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 15, offset: 5051},
										name: "AttributeEntryName",
									},
								},
								&litMatcher{
									pos:        position{line: 208, col: 35, offset: 5071},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&ruleRefExpr{
									pos:  position{line: 208, col: 40, offset: 5076},
									name: "AnySpaces",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 213, col: 1, offset: 5236},
			expr: &actionExpr{
				pos: position{line: 213, col: 14, offset: 5249},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 213, col: 14, offset: 5249},
					exprs: []any{
						&notExpr{
							pos: position{line: 213, col: 14, offset: 5249},
							expr: &litMatcher{
								pos:        position{line: 213, col: 15, offset: 5250},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 20, offset: 5255},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 213, col: 24, offset: 5259},
							expr: &litMatcher{
								pos:        position{line: 213, col: 25, offset: 5260},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 29, offset: 5264},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 41, offset: 5276},
								name: "AttributeList",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 56, offset: 5291},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 218, col: 1, offset: 5333},
			expr: &actionExpr{
				pos: position{line: 218, col: 17, offset: 5349},
				run: (*parser).callonAttributeList1,
				expr: &labeledExpr{
					pos:   position{line: 218, col: 17, offset: 5349},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 218, col: 28, offset: 5360},
						expr: &ruleRefExpr{
							pos:  position{line: 218, col: 29, offset: 5361},
							name: "AttributeListItem",
						},
					},
				},
			},
		},
		{
			name: "AttributeListItem",
			pos:  position{line: 222, col: 1, offset: 5446},
			expr: &actionExpr{
				pos: position{line: 222, col: 21, offset: 5466},
				run: (*parser).callonAttributeListItem1,
				expr: &seqExpr{
					pos: position{line: 222, col: 21, offset: 5466},
					exprs: []any{
						&notExpr{
							pos: position{line: 222, col: 21, offset: 5466},
							expr: &litMatcher{
								pos:        position{line: 222, col: 22, offset: 5467},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 26, offset: 5471},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 36, offset: 5481},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 47, offset: 5492},
								name: "Attribute",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 58, offset: 5503},
							name: "AnySpaces",
						},
						&zeroOrOneExpr{
							pos: position{line: 222, col: 68, offset: 5513},
							expr: &litMatcher{
								pos:        position{line: 222, col: 68, offset: 5513},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 226, col: 1, offset: 5549},
			expr: &actionExpr{
				pos: position{line: 226, col: 13, offset: 5561},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 13, offset: 5561},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 226, col: 13, offset: 5561},
							label: "name",
							expr: &zeroOrOneExpr{
								pos: position{line: 226, col: 18, offset: 5566},
								expr: &actionExpr{
									pos: position{line: 226, col: 20, offset: 5568},
									run: (*parser).callonAttribute5,
									expr: &seqExpr{
										pos: position{line: 226, col: 21, offset: 5569},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 226, col: 21, offset: 5569},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 27, offset: 5575},
													name: "NamedAttributeName",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 47, offset: 5595},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 226, col: 57, offset: 5605},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 61, offset: 5609},
												name: "AnySpaces",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 95, offset: 5643},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 226, col: 102, offset: 5650},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 226, col: 102, offset: 5650},
										name: "SingleQuoteAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 130, offset: 5678},
										name: "DoubleQuoteAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 158, offset: 5706},
										name: "NakedAttributeValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributes",
			pos:  position{line: 233, col: 1, offset: 5962},
			expr: &actionExpr{
				pos: position{line: 233, col: 23, offset: 5984},
				run: (*parser).callonShorthandAttributes1,
				expr: &seqExpr{
					pos: position{line: 233, col: 23, offset: 5984},
					exprs: []any{
						&notExpr{
							pos: position{line: 233, col: 23, offset: 5984},
							expr: &litMatcher{
								pos:        position{line: 233, col: 24, offset: 5985},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 29, offset: 5990},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 233, col: 33, offset: 5994},
							expr: &litMatcher{
								pos:        position{line: 233, col: 34, offset: 5995},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 38, offset: 5999},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 49, offset: 6010},
								name: "ShorthandAttribute",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 69, offset: 6030},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttribute",
			pos:  position{line: 237, col: 1, offset: 6070},
			expr: &actionExpr{
				pos: position{line: 237, col: 22, offset: 6091},
				run: (*parser).callonShorthandAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 22, offset: 6091},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 22, offset: 6091},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 28, offset: 6097},
								expr: &ruleRefExpr{
									pos:  position{line: 237, col: 29, offset: 6098},
									name: "ShorthandAttributeValue",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 55, offset: 6124},
							label: "values",
							expr: &oneOrMoreExpr{
								pos: position{line: 237, col: 62, offset: 6131},
								expr: &choiceExpr{
									pos: position{line: 237, col: 63, offset: 6132},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 237, col: 63, offset: 6132},
											name: "ShorthandID",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 77, offset: 6146},
											name: "ShorthandRole",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 93, offset: 6162},
											name: "ShorthandOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandStyle",
			pos:  position{line: 241, col: 1, offset: 6250},
			expr: &actionExpr{
				pos: position{line: 241, col: 18, offset: 6267},
				run: (*parser).callonShorthandStyle1,
				expr: &labeledExpr{
					pos:   position{line: 241, col: 18, offset: 6267},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 241, col: 24, offset: 6273},
						name: "ShorthandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShorthandID",
			pos:  position{line: 245, col: 1, offset: 6367},
			expr: &actionExpr{
				pos: position{line: 245, col: 15, offset: 6381},
				run: (*parser).callonShorthandID1,
				expr: &seqExpr{
					pos: position{line: 245, col: 15, offset: 6381},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 15, offset: 6381},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 19, offset: 6385},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 25, offset: 6391},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandRole",
			pos:  position{line: 249, col: 1, offset: 6485},
			expr: &actionExpr{
				pos: position{line: 249, col: 17, offset: 6501},
				run: (*parser).callonShorthandRole1,
				expr: &seqExpr{
					pos: position{line: 249, col: 17, offset: 6501},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 249, col: 17, offset: 6501},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 21, offset: 6505},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 27, offset: 6511},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandOption",
			pos:  position{line: 253, col: 1, offset: 6607},
			expr: &actionExpr{
				pos: position{line: 253, col: 19, offset: 6625},
				run: (*parser).callonShorthandOption1,
				expr: &seqExpr{
					pos: position{line: 253, col: 19, offset: 6625},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 253, col: 19, offset: 6625},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 23, offset: 6629},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 29, offset: 6635},
								name: "ShorthandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShorthandAttributeValue",
			pos:  position{line: 257, col: 1, offset: 6733},
			expr: &actionExpr{
				pos: position{line: 257, col: 27, offset: 6759},
				run: (*parser).callonShorthandAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 257, col: 27, offset: 6759},
					label: "value",
					expr: &choiceExpr{
						pos: position{line: 257, col: 34, offset: 6766},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 257, col: 34, offset: 6766},
								exprs: []any{
									&notExpr{
										pos: position{line: 257, col: 34, offset: 6766},
										expr: &litMatcher{
											pos:        position{line: 257, col: 35, offset: 6767},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 39, offset: 6771},
										expr: &litMatcher{
											pos:        position{line: 257, col: 40, offset: 6772},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
									&notExpr{
										pos: position{line: 257, col: 44, offset: 6776},
										expr: &litMatcher{
											pos:        position{line: 257, col: 45, offset: 6777},
											val:        "%",
											ignoreCase: false,
											want:       "\"%\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 257, col: 49, offset: 6781},
										name: "SingleQuoteAttributeValue",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 257, col: 77, offset: 6809},
								name: "DoubleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 257, col: 105, offset: 6837},
								name: "NakedAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValue",
			pos:  position{line: 261, col: 1, offset: 6885},
			expr: &actionExpr{
				pos: position{line: 261, col: 29, offset: 6913},
				run: (*parser).callonSingleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 261, col: 29, offset: 6913},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 261, col: 29, offset: 6913},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 33, offset: 6917},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 39, offset: 6923},
								expr: &ruleRefExpr{
									pos:  position{line: 261, col: 40, offset: 6924},
									name: "SingleQuoteAttributeValueElement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 75, offset: 6959},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteAttributeValueElement",
			pos:  position{line: 265, col: 1, offset: 7068},
			expr: &choiceExpr{
				pos: position{line: 266, col: 5, offset: 7109},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7109},
						run: (*parser).callonSingleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 7109},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7162},
						name: "Alphanumeric",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7182},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7191},
						name: "CurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7210},
						name: "AttributeReference",
					},
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 7235},
						run: (*parser).callonSingleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 271, col: 5, offset: 7235},
							expr: &charClassMatcher{
								pos:        position{line: 271, col: 5, offset: 7235},
								val:        "[^\\r\\n\\\\' ]",
								chars:      []rune{'\r', '\n', '\\', '\'', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValue",
			pos:  position{line: 276, col: 1, offset: 7314},
			expr: &actionExpr{
				pos: position{line: 276, col: 29, offset: 7342},
				run: (*parser).callonDoubleQuoteAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 29, offset: 7342},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 276, col: 29, offset: 7342},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 34, offset: 7347},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 276, col: 40, offset: 7353},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 41, offset: 7354},
									name: "DoubleQuoteAttributeValueElement",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 76, offset: 7389},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteAttributeValueElement",
			pos:  position{line: 280, col: 1, offset: 7499},
			expr: &choiceExpr{
				pos: position{line: 281, col: 5, offset: 7540},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 7540},
						run: (*parser).callonDoubleQuoteAttributeValueElement2,
						expr: &litMatcher{
							pos:        position{line: 281, col: 5, offset: 7540},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7596},
						name: "Alphanumeric",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7616},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7625},
						name: "CurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 7643},
						name: "AttributeReference",
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 7668},
						run: (*parser).callonDoubleQuoteAttributeValueElement8,
						expr: &oneOrMoreExpr{
							pos: position{line: 286, col: 5, offset: 7668},
							expr: &charClassMatcher{
								pos:        position{line: 286, col: 5, offset: 7668},
								val:        "[^\\r\\n\\\\\" ]",
								chars:      []rune{'\r', '\n', '\\', '"', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NakedAttributeValue",
			pos:  position{line: 291, col: 1, offset: 7747},
			expr: &actionExpr{
				pos: position{line: 291, col: 23, offset: 7769},
				run: (*parser).callonNakedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 291, col: 23, offset: 7769},
					exprs: []any{
						&notExpr{
							pos: position{line: 291, col: 23, offset: 7769},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 24, offset: 7770},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 26, offset: 7772},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 291, col: 32, offset: 7778},
								expr: &choiceExpr{
									pos: position{line: 292, col: 5, offset: 7784},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 292, col: 5, offset: 7784},
											name: "AttributeReference",
										},
										&ruleRefExpr{
											pos:  position{line: 293, col: 5, offset: 7810},
											name: "_",
										},
										&actionExpr{
											pos: position{line: 294, col: 5, offset: 7819},
											run: (*parser).callonNakedAttributeValue10,
											expr: &oneOrMoreExpr{
												pos: position{line: 294, col: 5, offset: 7819},
												expr: &charClassMatcher{
													pos:        position{line: 294, col: 5, offset: 7819},
													val:        "[^=\\], ]",
													chars:      []rune{'=', ']', ',', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 301, col: 1, offset: 8032},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 8051},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 8051},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 8051},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 24, offset: 8055},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 36, offset: 8067},
								name: "AttributeList",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 51, offset: 8082},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeName",
			pos:  position{line: 305, col: 1, offset: 8122},
			expr: &actionExpr{
				pos: position{line: 305, col: 22, offset: 8143},
				run: (*parser).callonNamedAttributeName1,
				expr: &seqExpr{
					pos: position{line: 305, col: 22, offset: 8143},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 305, col: 22, offset: 8143},
							val:        "[A-Za-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 35, offset: 8156},
							expr: &charClassMatcher{
								pos:        position{line: 305, col: 35, offset: 8156},
								val:        "[A-Za-z0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReference",
			pos:  position{line: 309, col: 1, offset: 8211},
			expr: &actionExpr{
				pos: position{line: 309, col: 22, offset: 8232},
				run: (*parser).callonAttributeReference1,
				expr: &labeledExpr{
					pos:   position{line: 309, col: 22, offset: 8232},
					label: "attribute",
					expr: &choiceExpr{
						pos: position{line: 309, col: 33, offset: 8243},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 309, col: 33, offset: 8243},
								name: "AttributeReferenceValue",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 59, offset: 8269},
								name: "Counter",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReferenceValue",
			pos:  position{line: 313, col: 1, offset: 8309},
			expr: &actionExpr{
				pos: position{line: 313, col: 27, offset: 8335},
				run: (*parser).callonAttributeReferenceValue1,
				expr: &seqExpr{
					pos: position{line: 313, col: 27, offset: 8335},
					exprs: []any{
						&notExpr{
							pos: position{line: 313, col: 27, offset: 8335},
							expr: &litMatcher{
								pos:        position{line: 313, col: 28, offset: 8336},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 33, offset: 8341},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 37, offset: 8345},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 42, offset: 8350},
								name: "AttributeEntryName",
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 61, offset: 8369},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 321, col: 1, offset: 8465},
			expr: &choiceExpr{
				pos: position{line: 321, col: 13, offset: 8477},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 321, col: 13, offset: 8477},
						name: "SingleBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 30, offset: 8494},
						name: "DoubleBoldText",
					},
				},
			},
		},
		{
			name: "SingleBoldText",
			pos:  position{line: 323, col: 1, offset: 8511},
			expr: &actionExpr{
				pos: position{line: 323, col: 18, offset: 8528},
				run: (*parser).callonSingleBoldText1,
				expr: &seqExpr{
					pos: position{line: 323, col: 18, offset: 8528},
					exprs: []any{
						&notExpr{
							pos: position{line: 323, col: 18, offset: 8528},
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 19, offset: 8529},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 26, offset: 8536},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andExpr{
							pos: position{line: 323, col: 30, offset: 8540},
							expr: &notExpr{
								pos: position{line: 323, col: 32, offset: 8542},
								expr: &litMatcher{
									pos:        position{line: 323, col: 33, offset: 8543},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 38, offset: 8548},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 45, offset: 8555},
								name: "SingleBoldTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 66, offset: 8576},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 323, col: 70, offset: 8580},
							expr: &litMatcher{
								pos:        position{line: 323, col: 71, offset: 8581},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andExpr{
							pos: position{line: 323, col: 75, offset: 8585},
							expr: &notExpr{
								pos: position{line: 323, col: 77, offset: 8587},
								expr: &ruleRefExpr{
									pos:  position{line: 323, col: 78, offset: 8588},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextValue",
			pos:  position{line: 327, col: 1, offset: 8633},
			expr: &actionExpr{
				pos: position{line: 327, col: 23, offset: 8655},
				run: (*parser).callonSingleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 327, col: 23, offset: 8655},
					exprs: []any{
						&notExpr{
							pos: position{line: 327, col: 23, offset: 8655},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 24, offset: 8656},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 26, offset: 8658},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 327, col: 32, offset: 8664},
								expr: &actionExpr{
									pos: position{line: 327, col: 33, offset: 8665},
									run: (*parser).callonSingleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 327, col: 33, offset: 8665},
										exprs: []any{
											&notExpr{
												pos: position{line: 327, col: 33, offset: 8665},
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 34, offset: 8666},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 327, col: 36, offset: 8668},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 327, col: 42, offset: 8674},
													expr: &ruleRefExpr{
														pos:  position{line: 327, col: 43, offset: 8675},
														name: "SingleBoldTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleBoldTextElement",
			pos:  position{line: 331, col: 1, offset: 8823},
			expr: &actionExpr{
				pos: position{line: 331, col: 25, offset: 8847},
				run: (*parser).callonSingleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 331, col: 25, offset: 8847},
					exprs: []any{
						&notExpr{
							pos: position{line: 331, col: 25, offset: 8847},
							expr: &seqExpr{
								pos: position{line: 331, col: 27, offset: 8849},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 331, col: 27, offset: 8849},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&notExpr{
										pos: position{line: 331, col: 31, offset: 8853},
										expr: &litMatcher{
											pos:        position{line: 331, col: 32, offset: 8854},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 37, offset: 8859},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 46, offset: 8868},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldText",
			pos:  position{line: 335, col: 1, offset: 8923},
			expr: &actionExpr{
				pos: position{line: 335, col: 18, offset: 8940},
				run: (*parser).callonDoubleBoldText1,
				expr: &seqExpr{
					pos: position{line: 335, col: 18, offset: 8940},
					exprs: []any{
						&notExpr{
							pos: position{line: 335, col: 18, offset: 8940},
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 19, offset: 8941},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 32, offset: 8954},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 37, offset: 8959},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 44, offset: 8966},
								name: "DoubleBoldTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 65, offset: 8987},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextValue",
			pos:  position{line: 339, col: 1, offset: 9024},
			expr: &actionExpr{
				pos: position{line: 339, col: 23, offset: 9046},
				run: (*parser).callonDoubleBoldTextValue1,
				expr: &seqExpr{
					pos: position{line: 339, col: 23, offset: 9046},
					exprs: []any{
						&notExpr{
							pos: position{line: 339, col: 23, offset: 9046},
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 24, offset: 9047},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 26, offset: 9049},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 339, col: 32, offset: 9055},
								expr: &actionExpr{
									pos: position{line: 339, col: 33, offset: 9056},
									run: (*parser).callonDoubleBoldTextValue7,
									expr: &seqExpr{
										pos: position{line: 339, col: 33, offset: 9056},
										exprs: []any{
											&notExpr{
												pos: position{line: 339, col: 33, offset: 9056},
												expr: &ruleRefExpr{
													pos:  position{line: 339, col: 34, offset: 9057},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 339, col: 36, offset: 9059},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 339, col: 42, offset: 9065},
													expr: &ruleRefExpr{
														pos:  position{line: 339, col: 43, offset: 9066},
														name: "DoubleBoldTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleBoldTextElement",
			pos:  position{line: 343, col: 1, offset: 9226},
			expr: &actionExpr{
				pos: position{line: 343, col: 25, offset: 9250},
				run: (*parser).callonDoubleBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 343, col: 25, offset: 9250},
					exprs: []any{
						&notExpr{
							pos: position{line: 343, col: 25, offset: 9250},
							expr: &litMatcher{
								pos:        position{line: 343, col: 27, offset: 9252},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 33, offset: 9258},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 42, offset: 9267},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 349, col: 1, offset: 9324},
			expr: &choiceExpr{
				pos: position{line: 349, col: 15, offset: 9338},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 349, col: 15, offset: 9338},
						name: "SingleItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 34, offset: 9357},
						name: "DoubleItalicText",
					},
				},
			},
		},
		{
			name: "SingleItalicText",
			pos:  position{line: 351, col: 1, offset: 9376},
			expr: &actionExpr{
				pos: position{line: 351, col: 20, offset: 9395},
				run: (*parser).callonSingleItalicText1,
				expr: &seqExpr{
					pos: position{line: 351, col: 20, offset: 9395},
					exprs: []any{
						&notExpr{
							pos: position{line: 351, col: 20, offset: 9395},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 21, offset: 9396},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 28, offset: 9403},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andExpr{
							pos: position{line: 351, col: 32, offset: 9407},
							expr: &notExpr{
								pos: position{line: 351, col: 34, offset: 9409},
								expr: &litMatcher{
									pos:        position{line: 351, col: 35, offset: 9410},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 40, offset: 9415},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 47, offset: 9422},
								name: "SingleItalicTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 70, offset: 9445},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 351, col: 74, offset: 9449},
							expr: &litMatcher{
								pos:        position{line: 351, col: 75, offset: 9450},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 79, offset: 9454},
							expr: &notExpr{
								pos: position{line: 351, col: 81, offset: 9456},
								expr: &ruleRefExpr{
									pos:  position{line: 351, col: 82, offset: 9457},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextValue",
			pos:  position{line: 355, col: 1, offset: 9502},
			expr: &actionExpr{
				pos: position{line: 355, col: 25, offset: 9526},
				run: (*parser).callonSingleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 355, col: 25, offset: 9526},
					exprs: []any{
						&notExpr{
							pos: position{line: 355, col: 25, offset: 9526},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 26, offset: 9527},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 28, offset: 9529},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 355, col: 34, offset: 9535},
								expr: &actionExpr{
									pos: position{line: 355, col: 35, offset: 9536},
									run: (*parser).callonSingleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 355, col: 35, offset: 9536},
										exprs: []any{
											&notExpr{
												pos: position{line: 355, col: 35, offset: 9536},
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 36, offset: 9537},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 355, col: 38, offset: 9539},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 355, col: 44, offset: 9545},
													expr: &ruleRefExpr{
														pos:  position{line: 355, col: 45, offset: 9546},
														name: "SingleItalicTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleItalicTextElement",
			pos:  position{line: 359, col: 1, offset: 9660},
			expr: &actionExpr{
				pos: position{line: 359, col: 27, offset: 9686},
				run: (*parser).callonSingleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 359, col: 27, offset: 9686},
					exprs: []any{
						&notExpr{
							pos: position{line: 359, col: 27, offset: 9686},
							expr: &seqExpr{
								pos: position{line: 359, col: 29, offset: 9688},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 359, col: 29, offset: 9688},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
									&notExpr{
										pos: position{line: 359, col: 33, offset: 9692},
										expr: &litMatcher{
											pos:        position{line: 359, col: 34, offset: 9693},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 39, offset: 9698},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 48, offset: 9707},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicText",
			pos:  position{line: 363, col: 1, offset: 9762},
			expr: &actionExpr{
				pos: position{line: 363, col: 20, offset: 9781},
				run: (*parser).callonDoubleItalicText1,
				expr: &seqExpr{
					pos: position{line: 363, col: 20, offset: 9781},
					exprs: []any{
						&notExpr{
							pos: position{line: 363, col: 20, offset: 9781},
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 21, offset: 9782},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 34, offset: 9795},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 39, offset: 9800},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 46, offset: 9807},
								name: "DoubleItalicTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 69, offset: 9830},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextValue",
			pos:  position{line: 367, col: 1, offset: 9867},
			expr: &actionExpr{
				pos: position{line: 367, col: 25, offset: 9891},
				run: (*parser).callonDoubleItalicTextValue1,
				expr: &seqExpr{
					pos: position{line: 367, col: 25, offset: 9891},
					exprs: []any{
						&notExpr{
							pos: position{line: 367, col: 25, offset: 9891},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 26, offset: 9892},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 28, offset: 9894},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 34, offset: 9900},
								expr: &actionExpr{
									pos: position{line: 367, col: 35, offset: 9901},
									run: (*parser).callonDoubleItalicTextValue7,
									expr: &seqExpr{
										pos: position{line: 367, col: 35, offset: 9901},
										exprs: []any{
											&notExpr{
												pos: position{line: 367, col: 35, offset: 9901},
												expr: &ruleRefExpr{
													pos:  position{line: 367, col: 36, offset: 9902},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 367, col: 38, offset: 9904},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 367, col: 44, offset: 9910},
													expr: &ruleRefExpr{
														pos:  position{line: 367, col: 45, offset: 9911},
														name: "DoubleItalicTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleItalicTextElement",
			pos:  position{line: 371, col: 1, offset: 10031},
			expr: &actionExpr{
				pos: position{line: 371, col: 27, offset: 10057},
				run: (*parser).callonDoubleItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 371, col: 27, offset: 10057},
					exprs: []any{
						&notExpr{
							pos: position{line: 371, col: 27, offset: 10057},
							expr: &litMatcher{
								pos:        position{line: 371, col: 29, offset: 10059},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 35, offset: 10065},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 44, offset: 10074},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 378, col: 1, offset: 10132},
			expr: &actionExpr{
				pos: position{line: 378, col: 17, offset: 10148},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 378, col: 17, offset: 10148},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 378, col: 17, offset: 10148},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 22, offset: 10153},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 29, offset: 10160},
								name: "SubscriptTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 378, col: 49, offset: 10180},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextValue",
			pos:  position{line: 382, col: 1, offset: 10215},
			expr: &actionExpr{
				pos: position{line: 382, col: 22, offset: 10236},
				run: (*parser).callonSubscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 22, offset: 10236},
					exprs: []any{
						&notExpr{
							pos: position{line: 382, col: 22, offset: 10236},
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 23, offset: 10237},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 382, col: 25, offset: 10239},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 382, col: 31, offset: 10245},
								expr: &actionExpr{
									pos: position{line: 382, col: 32, offset: 10246},
									run: (*parser).callonSubscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 382, col: 32, offset: 10246},
										exprs: []any{
											&notExpr{
												pos: position{line: 382, col: 32, offset: 10246},
												expr: &ruleRefExpr{
													pos:  position{line: 382, col: 33, offset: 10247},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 382, col: 35, offset: 10249},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 382, col: 41, offset: 10255},
													expr: &ruleRefExpr{
														pos:  position{line: 382, col: 42, offset: 10256},
														name: "SubscriptTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 386, col: 1, offset: 10413},
			expr: &actionExpr{
				pos: position{line: 386, col: 24, offset: 10436},
				run: (*parser).callonSubscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 386, col: 24, offset: 10436},
					exprs: []any{
						&notExpr{
							pos: position{line: 386, col: 24, offset: 10436},
							expr: &litMatcher{
								pos:        position{line: 386, col: 26, offset: 10438},
								val:        "~",
								ignoreCase: false,
								want:       "\"~\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 31, offset: 10443},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 40, offset: 10452},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscript",
			pos:  position{line: 390, col: 1, offset: 10507},
			expr: &actionExpr{
				pos: position{line: 390, col: 20, offset: 10526},
				run: (*parser).callonEscapedSubscript1,
				expr: &seqExpr{
					pos: position{line: 390, col: 21, offset: 10527},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 390, col: 21, offset: 10527},
							name: "Escape",
						},
						&litMatcher{
							pos:        position{line: 390, col: 28, offset: 10534},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 32, offset: 10538},
							name: "SubscriptTextValue",
						},
						&litMatcher{
							pos:        position{line: 390, col: 51, offset: 10557},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 396, col: 1, offset: 10620},
			expr: &actionExpr{
				pos: position{line: 396, col: 19, offset: 10638},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 396, col: 19, offset: 10638},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 396, col: 19, offset: 10638},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 24, offset: 10643},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 31, offset: 10650},
								name: "SuperscriptTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 53, offset: 10672},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextValue",
			pos:  position{line: 400, col: 1, offset: 10707},
			expr: &actionExpr{
				pos: position{line: 400, col: 24, offset: 10730},
				run: (*parser).callonSuperscriptTextValue1,
				expr: &seqExpr{
					pos: position{line: 400, col: 24, offset: 10730},
					exprs: []any{
						&notExpr{
							pos: position{line: 400, col: 24, offset: 10730},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 25, offset: 10731},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 27, offset: 10733},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 33, offset: 10739},
								expr: &actionExpr{
									pos: position{line: 400, col: 34, offset: 10740},
									run: (*parser).callonSuperscriptTextValue7,
									expr: &seqExpr{
										pos: position{line: 400, col: 34, offset: 10740},
										exprs: []any{
											&notExpr{
												pos: position{line: 400, col: 34, offset: 10740},
												expr: &ruleRefExpr{
													pos:  position{line: 400, col: 35, offset: 10741},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 400, col: 37, offset: 10743},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 400, col: 43, offset: 10749},
													expr: &ruleRefExpr{
														pos:  position{line: 400, col: 44, offset: 10750},
														name: "SuperscriptTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 404, col: 1, offset: 10913},
			expr: &actionExpr{
				pos: position{line: 404, col: 26, offset: 10938},
				run: (*parser).callonSuperscriptTextElement1,
				expr: &seqExpr{
					pos: position{line: 404, col: 26, offset: 10938},
					exprs: []any{
						&notExpr{
							pos: position{line: 404, col: 26, offset: 10938},
							expr: &litMatcher{
								pos:        position{line: 404, col: 28, offset: 10940},
								val:        "^",
								ignoreCase: false,
								want:       "\"^\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 33, offset: 10945},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 42, offset: 10954},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscript",
			pos:  position{line: 408, col: 1, offset: 11009},
			expr: &actionExpr{
				pos: position{line: 408, col: 22, offset: 11030},
				run: (*parser).callonEscapedSuperscript1,
				expr: &seqExpr{
					pos: position{line: 408, col: 23, offset: 11031},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 408, col: 23, offset: 11031},
							name: "Escape",
						},
						&litMatcher{
							pos:        position{line: 408, col: 30, offset: 11038},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 34, offset: 11042},
							name: "SuperscriptTextValue",
						},
						&litMatcher{
							pos:        position{line: 408, col: 55, offset: 11063},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 413, col: 1, offset: 11125},
			expr: &choiceExpr{
				pos: position{line: 413, col: 18, offset: 11142},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 413, col: 18, offset: 11142},
						name: "SingleMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 413, col: 40, offset: 11164},
						name: "DoubleMonospaceText",
					},
				},
			},
		},
		{
			name: "SingleMonospaceText",
			pos:  position{line: 415, col: 1, offset: 11186},
			expr: &actionExpr{
				pos: position{line: 415, col: 22, offset: 11207},
				run: (*parser).callonSingleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 415, col: 22, offset: 11207},
					exprs: []any{
						&notExpr{
							pos: position{line: 415, col: 22, offset: 11207},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 23, offset: 11208},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 30, offset: 11215},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andExpr{
							pos: position{line: 415, col: 34, offset: 11219},
							expr: &notExpr{
								pos: position{line: 415, col: 36, offset: 11221},
								expr: &litMatcher{
									pos:        position{line: 415, col: 37, offset: 11222},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 42, offset: 11227},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 49, offset: 11234},
								name: "SingleMonospaceTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 75, offset: 11260},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&notExpr{
							pos: position{line: 415, col: 79, offset: 11264},
							expr: &litMatcher{
								pos:        position{line: 415, col: 80, offset: 11265},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&andExpr{
							pos: position{line: 415, col: 84, offset: 11269},
							expr: &notExpr{
								pos: position{line: 415, col: 86, offset: 11271},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 87, offset: 11272},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextValue",
			pos:  position{line: 419, col: 1, offset: 11317},
			expr: &actionExpr{
				pos: position{line: 419, col: 28, offset: 11344},
				run: (*parser).callonSingleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 419, col: 28, offset: 11344},
					exprs: []any{
						&notExpr{
							pos: position{line: 419, col: 28, offset: 11344},
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 29, offset: 11345},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 31, offset: 11347},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 419, col: 37, offset: 11353},
								expr: &actionExpr{
									pos: position{line: 419, col: 38, offset: 11354},
									run: (*parser).callonSingleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 419, col: 38, offset: 11354},
										exprs: []any{
											&notExpr{
												pos: position{line: 419, col: 38, offset: 11354},
												expr: &ruleRefExpr{
													pos:  position{line: 419, col: 39, offset: 11355},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 419, col: 41, offset: 11357},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 419, col: 47, offset: 11363},
													expr: &ruleRefExpr{
														pos:  position{line: 419, col: 48, offset: 11364},
														name: "SingleMonospaceTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMonospaceTextElement",
			pos:  position{line: 423, col: 1, offset: 11484},
			expr: &actionExpr{
				pos: position{line: 423, col: 30, offset: 11513},
				run: (*parser).callonSingleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 423, col: 30, offset: 11513},
					exprs: []any{
						&notExpr{
							pos: position{line: 423, col: 30, offset: 11513},
							expr: &seqExpr{
								pos: position{line: 423, col: 32, offset: 11515},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 423, col: 32, offset: 11515},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
									&notExpr{
										pos: position{line: 423, col: 36, offset: 11519},
										expr: &litMatcher{
											pos:        position{line: 423, col: 37, offset: 11520},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 42, offset: 11525},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 51, offset: 11534},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceText",
			pos:  position{line: 427, col: 1, offset: 11589},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 11610},
				run: (*parser).callonDoubleMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 11610},
					exprs: []any{
						&notExpr{
							pos: position{line: 427, col: 22, offset: 11610},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 23, offset: 11611},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 36, offset: 11624},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 41, offset: 11629},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 48, offset: 11636},
								name: "DoubleMonospaceTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 74, offset: 11662},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextValue",
			pos:  position{line: 431, col: 1, offset: 11699},
			expr: &actionExpr{
				pos: position{line: 431, col: 28, offset: 11726},
				run: (*parser).callonDoubleMonospaceTextValue1,
				expr: &seqExpr{
					pos: position{line: 431, col: 28, offset: 11726},
					exprs: []any{
						&notExpr{
							pos: position{line: 431, col: 28, offset: 11726},
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 29, offset: 11727},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 31, offset: 11729},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 431, col: 37, offset: 11735},
								expr: &actionExpr{
									pos: position{line: 431, col: 38, offset: 11736},
									run: (*parser).callonDoubleMonospaceTextValue7,
									expr: &seqExpr{
										pos: position{line: 431, col: 38, offset: 11736},
										exprs: []any{
											&notExpr{
												pos: position{line: 431, col: 38, offset: 11736},
												expr: &ruleRefExpr{
													pos:  position{line: 431, col: 39, offset: 11737},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 431, col: 41, offset: 11739},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 431, col: 47, offset: 11745},
													expr: &ruleRefExpr{
														pos:  position{line: 431, col: 48, offset: 11746},
														name: "DoubleMonospaceTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMonospaceTextElement",
			pos:  position{line: 435, col: 1, offset: 11872},
			expr: &actionExpr{
				pos: position{line: 435, col: 30, offset: 11901},
				run: (*parser).callonDoubleMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 435, col: 30, offset: 11901},
					exprs: []any{
						&notExpr{
							pos: position{line: 435, col: 30, offset: 11901},
							expr: &litMatcher{
								pos:        position{line: 435, col: 32, offset: 11903},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 38, offset: 11909},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 47, offset: 11918},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "Anchor",
			pos:  position{line: 441, col: 1, offset: 11975},
			expr: &actionExpr{
				pos: position{line: 441, col: 10, offset: 11984},
				run: (*parser).callonAnchor1,
				expr: &seqExpr{
					pos: position{line: 441, col: 10, offset: 11984},
					exprs: []any{
						&notExpr{
							pos: position{line: 441, col: 10, offset: 11984},
							expr: &litMatcher{
								pos:        position{line: 441, col: 11, offset: 11985},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 16, offset: 11990},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 21, offset: 11995},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 25, offset: 11999},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 43, offset: 12017},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 49, offset: 12023},
								expr: &actionExpr{
									pos: position{line: 441, col: 50, offset: 12024},
									run: (*parser).callonAnchor10,
									expr: &seqExpr{
										pos: position{line: 441, col: 50, offset: 12024},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 441, col: 50, offset: 12024},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 441, col: 60, offset: 12034},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 441, col: 64, offset: 12038},
												label: "label",
												expr: &ruleRefExpr{
													pos:  position{line: 441, col: 71, offset: 12045},
													name: "AnchorLabel",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 107, offset: 12081},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorAttribute",
			pos:  position{line: 449, col: 1, offset: 12242},
			expr: &actionExpr{
				pos: position{line: 449, col: 19, offset: 12260},
				run: (*parser).callonAnchorAttribute1,
				expr: &seqExpr{
					pos: position{line: 449, col: 19, offset: 12260},
					exprs: []any{
						&notExpr{
							pos: position{line: 449, col: 19, offset: 12260},
							expr: &litMatcher{
								pos:        position{line: 449, col: 20, offset: 12261},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 25, offset: 12266},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 30, offset: 12271},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 34, offset: 12275},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 52, offset: 12293},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 58, offset: 12299},
								expr: &actionExpr{
									pos: position{line: 449, col: 59, offset: 12300},
									run: (*parser).callonAnchorAttribute10,
									expr: &seqExpr{
										pos: position{line: 449, col: 59, offset: 12300},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 449, col: 59, offset: 12300},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 449, col: 69, offset: 12310},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 73, offset: 12314},
												label: "label",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 80, offset: 12321},
													name: "AnchorLabel",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 116, offset: 12357},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "AnchorLabel",
			pos:  position{line: 457, col: 1, offset: 12561},
			expr: &oneOrMoreExpr{
				pos: position{line: 457, col: 15, offset: 12575},
				expr: &choiceExpr{
					pos: position{line: 457, col: 17, offset: 12577},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 457, col: 17, offset: 12577},
							exprs: []any{
								&notExpr{
									pos: position{line: 457, col: 17, offset: 12577},
									expr: &litMatcher{
										pos:        position{line: 457, col: 18, offset: 12578},
										val:        "]]",
										ignoreCase: false,
										want:       "\"]]\"",
									},
								},
								&actionExpr{
									pos: position{line: 458, col: 6, offset: 12588},
									run: (*parser).callonAnchorLabel6,
									expr: &oneOrMoreExpr{
										pos: position{line: 458, col: 6, offset: 12588},
										expr: &charClassMatcher{
											pos:        position{line: 458, col: 6, offset: 12588},
											val:        "[^\\r\\n{\\]]",
											chars:      []rune{'\r', '\n', '{', ']'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 461, col: 7, offset: 12670},
							run: (*parser).callonAnchorLabel9,
							expr: &labeledExpr{
								pos:   position{line: 461, col: 7, offset: 12670},
								label: "arv",
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 11, offset: 12674},
									name: "AttributeReference",
								},
							},
						},
						&actionExpr{
							pos: position{line: 464, col: 8, offset: 12732},
							run: (*parser).callonAnchorLabel12,
							expr: &litMatcher{
								pos:        position{line: 464, col: 8, offset: 12732},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Admonition",
			pos:  position{line: 470, col: 1, offset: 12794},
			expr: &actionExpr{
				pos: position{line: 470, col: 14, offset: 12807},
				run: (*parser).callonAdmonition1,
				expr: &seqExpr{
					pos: position{line: 470, col: 14, offset: 12807},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 470, col: 14, offset: 12807},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 30, offset: 12823},
							label: "admonition",
							expr: &choiceExpr{
								pos: position{line: 471, col: 5, offset: 12840},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 471, col: 5, offset: 12840},
										run: (*parser).callonAdmonition6,
										expr: &litMatcher{
											pos:        position{line: 471, col: 5, offset: 12840},
											val:        "NOTE: ",
											ignoreCase: false,
											want:       "\"NOTE: \"",
										},
									},
									&actionExpr{
										pos: position{line: 472, col: 7, offset: 12923},
										run: (*parser).callonAdmonition8,
										expr: &litMatcher{
											pos:        position{line: 472, col: 7, offset: 12923},
											val:        "TIP: ",
											ignoreCase: false,
											want:       "\"TIP: \"",
										},
									},
									&actionExpr{
										pos: position{line: 473, col: 7, offset: 13004},
										run: (*parser).callonAdmonition10,
										expr: &litMatcher{
											pos:        position{line: 473, col: 7, offset: 13004},
											val:        "IMPORTANT: ",
											ignoreCase: false,
											want:       "\"IMPORTANT: \"",
										},
									},
									&actionExpr{
										pos: position{line: 474, col: 7, offset: 13097},
										run: (*parser).callonAdmonition12,
										expr: &litMatcher{
											pos:        position{line: 474, col: 7, offset: 13097},
											val:        "CAUTON: ",
											ignoreCase: false,
											want:       "\"CAUTON: \"",
										},
									},
									&actionExpr{
										pos: position{line: 475, col: 7, offset: 13185},
										run: (*parser).callonAdmonition14,
										expr: &litMatcher{
											pos:        position{line: 475, col: 7, offset: 13185},
											val:        "WARNING: ",
											ignoreCase: false,
											want:       "\"WARNING: \"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 482, col: 1, offset: 13311},
			expr: &actionExpr{
				pos: position{line: 482, col: 18, offset: 13328},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 482, col: 18, offset: 13328},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 482, col: 18, offset: 13328},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 482, col: 26, offset: 13336},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 27, offset: 13337},
									name: "InlineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 43, offset: 13353},
							label: "eol",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 47, offset: 13357},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 490, col: 1, offset: 13514},
			expr: &actionExpr{
				pos: position{line: 490, col: 17, offset: 13530},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 17, offset: 13530},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 491, col: 5, offset: 13544},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 491, col: 5, offset: 13544},
								name: "Admonition",
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 5, offset: 13561},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 5, offset: 13585},
								name: "FormattedText",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 5, offset: 13605},
								name: "Icon",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 5, offset: 13617},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 5, offset: 13636},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 5, offset: 13647},
								name: "Anchor",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 5, offset: 13661},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 5, offset: 13683},
								name: "AttributeReference",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 5, offset: 13708},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 5, offset: 13724},
								name: "NakedInlineText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 5, offset: 13746},
								name: "CharacterClassInline",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineText",
			pos:  position{line: 507, col: 1, offset: 13808},
			expr: &actionExpr{
				pos: position{line: 507, col: 19, offset: 13826},
				run: (*parser).callonNakedInlineText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 507, col: 19, offset: 13826},
					expr: &seqExpr{
						pos: position{line: 507, col: 20, offset: 13827},
						exprs: []any{
							&notExpr{
								pos: position{line: 507, col: 20, offset: 13827},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 21, offset: 13828},
									name: "URLScheme",
								},
							},
							&notExpr{
								pos: position{line: 507, col: 31, offset: 13838},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 32, offset: 13839},
									name: "InlineImageDelimiter",
								},
							},
							&charClassMatcher{
								pos:        position{line: 507, col: 53, offset: 13860},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Footnote",
			pos:  position{line: 512, col: 1, offset: 13934},
			expr: &actionExpr{
				pos: position{line: 512, col: 12, offset: 13945},
				run: (*parser).callonFootnote1,
				expr: &seqExpr{
					pos: position{line: 512, col: 12, offset: 13945},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 512, col: 12, offset: 13945},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 24, offset: 13957},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 27, offset: 13960},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 28, offset: 13961},
									name: "FootnoteId",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 41, offset: 13974},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 45, offset: 13978},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 512, col: 51, offset: 13984},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 52, offset: 13985},
									name: "FootnoteValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 68, offset: 14001},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteId",
			pos:  position{line: 516, col: 1, offset: 14075},
			expr: &actionExpr{
				pos: position{line: 516, col: 14, offset: 14088},
				run: (*parser).callonFootnoteId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 516, col: 14, offset: 14088},
					expr: &ruleRefExpr{
						pos:  position{line: 516, col: 14, offset: 14088},
						name: "Alphanumeric",
					},
				},
			},
		},
		{
			name: "FootnoteValue",
			pos:  position{line: 520, col: 1, offset: 14138},
			expr: &actionExpr{
				pos: position{line: 520, col: 17, offset: 14154},
				run: (*parser).callonFootnoteValue1,
				expr: &seqExpr{
					pos: position{line: 520, col: 17, offset: 14154},
					exprs: []any{
						&notExpr{
							pos: position{line: 520, col: 17, offset: 14154},
							expr: &litMatcher{
								pos:        position{line: 520, col: 18, offset: 14155},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 22, offset: 14159},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 520, col: 32, offset: 14169},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 520, col: 32, offset: 14169},
										name: "InlineText",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 45, offset: 14182},
										name: "__",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 50, offset: 14187},
										name: "Apostrophe",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 63, offset: 14200},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 71, offset: 14208},
										name: "Punctuation",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 85, offset: 14222},
										name: "Macro",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 93, offset: 14230},
										name: "LineBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 105, offset: 14242},
										name: "AttributeReference",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 126, offset: 14263},
										name: "SpecialCharacter",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 145, offset: 14282},
										name: "EmptyLine",
									},
									&ruleRefExpr{
										pos:  position{line: 520, col: 157, offset: 14294},
										name: "CharacterClassInline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedText",
			pos:  position{line: 525, col: 1, offset: 14346},
			expr: &actionExpr{
				pos: position{line: 525, col: 17, offset: 14362},
				run: (*parser).callonFormattedText1,
				expr: &seqExpr{
					pos: position{line: 525, col: 17, offset: 14362},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 525, col: 17, offset: 14362},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 28, offset: 14373},
								expr: &ruleRefExpr{
									pos:  position{line: 525, col: 29, offset: 14374},
									name: "ShorthandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 52, offset: 14397},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 526, col: 5, offset: 14408},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 526, col: 5, offset: 14408},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 7, offset: 14424},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 7, offset: 14442},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 7, offset: 14463},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 7, offset: 14480},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 7, offset: 14502},
										name: "SubscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormattedTextElement",
			pos:  position{line: 536, col: 1, offset: 14651},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 14680},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 537, col: 5, offset: 14680},
						name: "InlineText",
					},
					&ruleRefExpr{
						pos:  position{line: 538, col: 5, offset: 14698},
						name: "__",
					},
					&ruleRefExpr{
						pos:  position{line: 539, col: 5, offset: 14708},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 540, col: 5, offset: 14726},
						name: "Punctuation",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 14745},
						name: "AttributeReference",
					},
					&ruleRefExpr{
						pos:  position{line: 542, col: 5, offset: 14771},
						name: "FormattedText",
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 5, offset: 14792},
						name: "Icon",
					},
					&ruleRefExpr{
						pos:  position{line: 544, col: 5, offset: 14804},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 5, offset: 14823},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 14834},
						name: "Anchor",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 14848},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 14872},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "FormatAttributes",
			pos:  position{line: 551, col: 1, offset: 14896},
			expr: &actionExpr{
				pos: position{line: 551, col: 20, offset: 14915},
				run: (*parser).callonFormatAttributes1,
				expr: &seqExpr{
					pos: position{line: 551, col: 20, offset: 14915},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 551, col: 20, offset: 14915},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 24, offset: 14919},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 36, offset: 14931},
								name: "ShorthandAttribute",
							},
						},
						&litMatcher{
							pos:        position{line: 551, col: 56, offset: 14951},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 556, col: 1, offset: 14992},
			expr: &actionExpr{
				pos: position{line: 556, col: 14, offset: 15005},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 556, col: 14, offset: 15005},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 556, col: 14, offset: 15005},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 24, offset: 15015},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 30, offset: 15021},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 36, offset: 15027},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 48, offset: 15039},
								name: "InlineAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 556, col: 66, offset: 15057},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 560, col: 1, offset: 15189},
			expr: &actionExpr{
				pos: position{line: 560, col: 15, offset: 15203},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 560, col: 15, offset: 15203},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 560, col: 15, offset: 15203},
							name: "InlineImageDelimiter",
						},
						&notExpr{
							pos: position{line: 560, col: 36, offset: 15224},
							expr: &litMatcher{
								pos:        position{line: 560, col: 37, offset: 15225},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 41, offset: 15229},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 47, offset: 15235},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 53, offset: 15241},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 65, offset: 15253},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageDelimiter",
			pos:  position{line: 564, col: 1, offset: 15395},
			expr: &litMatcher{
				pos:        position{line: 564, col: 24, offset: 15418},
				val:        "image:",
				ignoreCase: false,
				want:       "\"image:\"",
			},
		},
		{
			name: "Icon",
			pos:  position{line: 568, col: 1, offset: 15430},
			expr: &actionExpr{
				pos: position{line: 568, col: 8, offset: 15437},
				run: (*parser).callonIcon1,
				expr: &seqExpr{
					pos: position{line: 568, col: 8, offset: 15437},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 8, offset: 15437},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 16, offset: 15445},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 568, col: 22, offset: 15451},
								run: (*parser).callonIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 568, col: 22, offset: 15451},
									expr: &choiceExpr{
										pos: position{line: 568, col: 23, offset: 15452},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 568, col: 23, offset: 15452},
												name: "Alphanumeric",
											},
											&litMatcher{
												pos:        position{line: 568, col: 38, offset: 15467},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&litMatcher{
												pos:        position{line: 568, col: 44, offset: 15473},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 81, offset: 15510},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 93, offset: 15522},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclude",
			pos:  position{line: 573, col: 1, offset: 15644},
			expr: &actionExpr{
				pos: position{line: 573, col: 15, offset: 15658},
				run: (*parser).callonFileInclude1,
				expr: &seqExpr{
					pos: position{line: 573, col: 15, offset: 15658},
					exprs: []any{
						&notExpr{
							pos: position{line: 573, col: 15, offset: 15658},
							expr: &litMatcher{
								pos:        position{line: 573, col: 16, offset: 15659},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 21, offset: 15664},
							val:        "include::",
							ignoreCase: false,
							want:       "\"include::\"",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 33, offset: 15676},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 39, offset: 15682},
								name: "FileIncludePath",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 56, offset: 15699},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 68, offset: 15711},
								name: "InlineAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 86, offset: 15729},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 573, col: 96, offset: 15739},
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 97, offset: 15740},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "FileIncludePath",
			pos:  position{line: 578, col: 1, offset: 15897},
			expr: &actionExpr{
				pos: position{line: 578, col: 19, offset: 15915},
				run: (*parser).callonFileIncludePath1,
				expr: &seqExpr{
					pos: position{line: 578, col: 19, offset: 15915},
					exprs: []any{
						&notExpr{
							pos: position{line: 578, col: 19, offset: 15915},
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 20, offset: 15916},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 22, offset: 15918},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 27, offset: 15923},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 585, col: 1, offset: 15957},
			expr: &actionExpr{
				pos: position{line: 585, col: 8, offset: 15964},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 585, col: 8, offset: 15964},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 585, col: 14, offset: 15970},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 585, col: 14, offset: 15970},
								name: "HTMLLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 25, offset: 15981},
								name: "PrefixedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 40, offset: 15996},
								name: "ExternalLink",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 55, offset: 16011},
								name: "Email",
							},
						},
					},
				},
			},
		},
		{
			name: "HTMLLink",
			pos:  position{line: 589, col: 1, offset: 16052},
			expr: &actionExpr{
				pos: position{line: 589, col: 12, offset: 16063},
				run: (*parser).callonHTMLLink1,
				expr: &seqExpr{
					pos: position{line: 589, col: 12, offset: 16063},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 589, col: 12, offset: 16063},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 16, offset: 16067},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 21, offset: 16072},
								name: "FullURL",
							},
						},
						&litMatcher{
							pos:        position{line: 589, col: 30, offset: 16081},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixedLink",
			pos:  position{line: 593, col: 1, offset: 16147},
			expr: &actionExpr{
				pos: position{line: 593, col: 16, offset: 16162},
				run: (*parser).callonPrefixedLink1,
				expr: &seqExpr{
					pos: position{line: 593, col: 16, offset: 16162},
					exprs: []any{
						&notExpr{
							pos: position{line: 593, col: 16, offset: 16162},
							expr: &litMatcher{
								pos:        position{line: 593, col: 17, offset: 16163},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 593, col: 22, offset: 16168},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 30, offset: 16176},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 34, offset: 16180},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 38, offset: 16184},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 50, offset: 16196},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 598, col: 1, offset: 16327},
			expr: &actionExpr{
				pos: position{line: 598, col: 16, offset: 16342},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 598, col: 16, offset: 16342},
					exprs: []any{
						&notExpr{
							pos: position{line: 598, col: 16, offset: 16342},
							expr: &litMatcher{
								pos:        position{line: 598, col: 17, offset: 16343},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 22, offset: 16348},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 27, offset: 16353},
								name: "FullURL",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 36, offset: 16362},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 47, offset: 16373},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 48, offset: 16374},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 604, col: 1, offset: 16507},
			expr: &actionExpr{
				pos: position{line: 604, col: 9, offset: 16515},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 604, col: 9, offset: 16515},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 604, col: 9, offset: 16515},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 604, col: 20, offset: 16526},
								expr: &ruleRefExpr{
									pos:  position{line: 604, col: 21, offset: 16527},
									name: "BlockElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 46, offset: 16552},
							name: "TableStart",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 57, offset: 16563},
							label: "cells",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 64, offset: 16570},
								name: "TableElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 79, offset: 16585},
							name: "TableEnd",
						},
					},
				},
			},
		},
		{
			name: "TableElements",
			pos:  position{line: 612, col: 1, offset: 16742},
			expr: &zeroOrMoreExpr{
				pos: position{line: 612, col: 17, offset: 16758},
				expr: &ruleRefExpr{
					pos:  position{line: 612, col: 18, offset: 16759},
					name: "TableElement",
				},
			},
		},
		{
			name: "TableElement",
			pos:  position{line: 614, col: 1, offset: 16776},
			expr: &choiceExpr{
				pos: position{line: 615, col: 9, offset: 16801},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 615, col: 9, offset: 16801},
						name: "TableEmptyLine",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 11, offset: 16827},
						name: "TableMacros",
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 11, offset: 16849},
						name: "TableRow",
					},
				},
			},
		},
		{
			name: "TableStart",
			pos:  position{line: 620, col: 1, offset: 16870},
			expr: &actionExpr{
				pos: position{line: 620, col: 14, offset: 16883},
				run: (*parser).callonTableStart1,
				expr: &seqExpr{
					pos: position{line: 620, col: 14, offset: 16883},
					exprs: []any{
						&notExpr{
							pos: position{line: 620, col: 14, offset: 16883},
							expr: &litMatcher{
								pos:        position{line: 620, col: 15, offset: 16884},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 620, col: 20, offset: 16889},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 620, col: 27, offset: 16896},
							expr: &litMatcher{
								pos:        position{line: 620, col: 27, offset: 16896},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 32, offset: 16901},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 620, col: 42, offset: 16911},
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 43, offset: 16912},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLine",
			pos:  position{line: 624, col: 1, offset: 16983},
			expr: &actionExpr{
				pos: position{line: 624, col: 18, offset: 17000},
				run: (*parser).callonTableEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 624, col: 18, offset: 17000},
					exprs: []any{
						&notExpr{
							pos: position{line: 624, col: 18, offset: 17000},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 19, offset: 17001},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 28, offset: 17010},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 36, offset: 17018},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 624, col: 46, offset: 17028},
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 48, offset: 17030},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableMacros",
			pos:  position{line: 628, col: 1, offset: 17111},
			expr: &choiceExpr{
				pos: position{line: 628, col: 16, offset: 17126},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 628, col: 16, offset: 17126},
						name: "TableIfDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 29, offset: 17139},
						name: "TableIfNDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 43, offset: 17153},
						name: "TableEndIfDef",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 59, offset: 17169},
						name: "TableComment",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 74, offset: 17184},
						name: "TableMultiLineComment",
					},
				},
			},
		},
		{
			name: "TableIfDef",
			pos:  position{line: 630, col: 1, offset: 17208},
			expr: &actionExpr{
				pos: position{line: 630, col: 14, offset: 17221},
				run: (*parser).callonTableIfDef1,
				expr: &seqExpr{
					pos: position{line: 630, col: 14, offset: 17221},
					exprs: []any{
						&notExpr{
							pos: position{line: 630, col: 14, offset: 17221},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 15, offset: 17222},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 24, offset: 17231},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 32, offset: 17239},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 42, offset: 17249},
							label: "ifdef",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 48, offset: 17255},
								name: "IfDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableIfNDef",
			pos:  position{line: 634, col: 1, offset: 17318},
			expr: &actionExpr{
				pos: position{line: 634, col: 15, offset: 17332},
				run: (*parser).callonTableIfNDef1,
				expr: &seqExpr{
					pos: position{line: 634, col: 15, offset: 17332},
					exprs: []any{
						&notExpr{
							pos: position{line: 634, col: 15, offset: 17332},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 16, offset: 17333},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 25, offset: 17342},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 634, col: 33, offset: 17350},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 634, col: 43, offset: 17360},
							label: "ifndef",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 50, offset: 17367},
								name: "IfNDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEndIfDef",
			pos:  position{line: 638, col: 1, offset: 17434},
			expr: &actionExpr{
				pos: position{line: 638, col: 17, offset: 17450},
				run: (*parser).callonTableEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 638, col: 17, offset: 17450},
					exprs: []any{
						&notExpr{
							pos: position{line: 638, col: 17, offset: 17450},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 18, offset: 17451},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 638, col: 27, offset: 17460},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 638, col: 35, offset: 17468},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 638, col: 45, offset: 17478},
							label: "endifdef",
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 54, offset: 17487},
								name: "EndIfDef",
							},
						},
					},
				},
			},
		},
		{
			name: "TableComment",
			pos:  position{line: 642, col: 1, offset: 17557},
			expr: &actionExpr{
				pos: position{line: 642, col: 16, offset: 17572},
				run: (*parser).callonTableComment1,
				expr: &seqExpr{
					pos: position{line: 642, col: 16, offset: 17572},
					exprs: []any{
						&notExpr{
							pos: position{line: 642, col: 16, offset: 17572},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 17, offset: 17573},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 26, offset: 17582},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 34, offset: 17590},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 43, offset: 17599},
								name: "SingleLineComment",
							},
						},
					},
				},
			},
		},
		{
			name: "TableMultiLineComment",
			pos:  position{line: 646, col: 1, offset: 17690},
			expr: &actionExpr{
				pos: position{line: 646, col: 25, offset: 17714},
				run: (*parser).callonTableMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 646, col: 25, offset: 17714},
					exprs: []any{
						&notExpr{
							pos: position{line: 646, col: 25, offset: 17714},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 26, offset: 17715},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 35, offset: 17724},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 646, col: 43, offset: 17732},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 52, offset: 17741},
								name: "MultiLineComment",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEmptyLines",
			pos:  position{line: 650, col: 1, offset: 17830},
			expr: &oneOrMoreExpr{
				pos: position{line: 650, col: 19, offset: 17848},
				expr: &ruleRefExpr{
					pos:  position{line: 650, col: 19, offset: 17848},
					name: "TableEmptyLine",
				},
			},
		},
		{
			name: "TableCellInlineContent",
			pos:  position{line: 652, col: 1, offset: 17865},
			expr: &actionExpr{
				pos: position{line: 652, col: 26, offset: 17890},
				run: (*parser).callonTableCellInlineContent1,
				expr: &seqExpr{
					pos: position{line: 652, col: 26, offset: 17890},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 652, col: 26, offset: 17890},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 652, col: 34, offset: 17898},
								expr: &ruleRefExpr{
									pos:  position{line: 652, col: 35, offset: 17899},
									name: "TableCellInlineContentElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 67, offset: 17931},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "TableCellInlineContentElement",
			pos:  position{line: 656, col: 1, offset: 18009},
			expr: &actionExpr{
				pos: position{line: 656, col: 33, offset: 18041},
				run: (*parser).callonTableCellInlineContentElement1,
				expr: &labeledExpr{
					pos:   position{line: 656, col: 33, offset: 18041},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 657, col: 5, offset: 18055},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 657, col: 5, offset: 18055},
								name: "FormattedText",
							},
							&ruleRefExpr{
								pos:  position{line: 658, col: 5, offset: 18075},
								name: "Icon",
							},
							&ruleRefExpr{
								pos:  position{line: 659, col: 5, offset: 18087},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 660, col: 5, offset: 18106},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 661, col: 5, offset: 18117},
								name: "Anchor",
							},
							&ruleRefExpr{
								pos:  position{line: 662, col: 5, offset: 18132},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 663, col: 5, offset: 18153},
								name: "AttributeReference",
							},
							&ruleRefExpr{
								pos:  position{line: 664, col: 5, offset: 18178},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 665, col: 5, offset: 18194},
								name: "NakedInlineTableCellText",
							},
							&ruleRefExpr{
								pos:  position{line: 666, col: 5, offset: 18225},
								name: "CharacterClassInline",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 5, offset: 18252},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableEnd",
			pos:  position{line: 672, col: 1, offset: 18301},
			expr: &actionExpr{
				pos: position{line: 672, col: 12, offset: 18312},
				run: (*parser).callonTableEnd1,
				expr: &seqExpr{
					pos: position{line: 672, col: 12, offset: 18312},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 672, col: 12, offset: 18312},
							name: "NewLine",
						},
						&notExpr{
							pos: position{line: 672, col: 20, offset: 18320},
							expr: &litMatcher{
								pos:        position{line: 672, col: 21, offset: 18321},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 672, col: 26, offset: 18326},
							val:        "|===",
							ignoreCase: false,
							want:       "\"|===\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 672, col: 33, offset: 18333},
							expr: &litMatcher{
								pos:        position{line: 672, col: 33, offset: 18333},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 672, col: 38, offset: 18338},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 672, col: 48, offset: 18348},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 49, offset: 18349},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableRow",
			pos:  position{line: 676, col: 1, offset: 18421},
			expr: &actionExpr{
				pos: position{line: 676, col: 12, offset: 18432},
				run: (*parser).callonTableRow1,
				expr: &seqExpr{
					pos: position{line: 676, col: 12, offset: 18432},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 676, col: 12, offset: 18432},
							label: "initial",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 21, offset: 18441},
								name: "InitialInlineTableCell",
							},
						},
						&labeledExpr{
							pos:   position{line: 676, col: 46, offset: 18466},
							label: "additional",
							expr: &zeroOrMoreExpr{
								pos: position{line: 676, col: 57, offset: 18477},
								expr: &ruleRefExpr{
									pos:  position{line: 676, col: 58, offset: 18478},
									name: "AdditionalInlineTableCell",
								},
							},
						},
						&andExpr{
							pos: position{line: 676, col: 86, offset: 18506},
							expr: &choiceExpr{
								pos: position{line: 676, col: 88, offset: 18508},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 676, col: 88, offset: 18508},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 99, offset: 18519},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 121, offset: 18541},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellDelimiter",
			pos:  position{line: 685, col: 1, offset: 18781},
			expr: &choiceExpr{
				pos: position{line: 685, col: 23, offset: 18803},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 685, col: 23, offset: 18803},
						name: "AdditionalTableCellDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 685, col: 54, offset: 18834},
						name: "InitialTableCellDelimiter",
					},
				},
			},
		},
		{
			name: "InitialInlineTableCell",
			pos:  position{line: 687, col: 1, offset: 18862},
			expr: &actionExpr{
				pos: position{line: 687, col: 26, offset: 18887},
				run: (*parser).callonInitialInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 687, col: 26, offset: 18887},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 687, col: 26, offset: 18887},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 34, offset: 18895},
								name: "InitialTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 61, offset: 18922},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 70, offset: 18931},
								name: "InlineTableLines",
							},
						},
						&andExpr{
							pos: position{line: 687, col: 88, offset: 18949},
							expr: &choiceExpr{
								pos: position{line: 687, col: 90, offset: 18951},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 687, col: 90, offset: 18951},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 101, offset: 18962},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 119, offset: 18980},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 133, offset: 18994},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 155, offset: 19016},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditionalInlineTableCell",
			pos:  position{line: 692, col: 1, offset: 19143},
			expr: &actionExpr{
				pos: position{line: 692, col: 30, offset: 19172},
				run: (*parser).callonAdditionalInlineTableCell1,
				expr: &seqExpr{
					pos: position{line: 692, col: 30, offset: 19172},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 692, col: 30, offset: 19172},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 38, offset: 19180},
								name: "AdditionalTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 68, offset: 19210},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 77, offset: 19219},
								name: "InlineTableLines",
							},
						},
						&andExpr{
							pos: position{line: 692, col: 95, offset: 19237},
							expr: &choiceExpr{
								pos: position{line: 692, col: 97, offset: 19239},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 692, col: 97, offset: 19239},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 108, offset: 19250},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 126, offset: 19268},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 140, offset: 19282},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 162, offset: 19304},
										name: "NewLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialBlockTableCell",
			pos:  position{line: 696, col: 1, offset: 19426},
			expr: &actionExpr{
				pos: position{line: 696, col: 25, offset: 19450},
				run: (*parser).callonInitialBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 696, col: 25, offset: 19450},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 696, col: 25, offset: 19450},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 33, offset: 19458},
								name: "InitialTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 60, offset: 19485},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 68, offset: 19493},
								expr: &choiceExpr{
									pos: position{line: 696, col: 69, offset: 19494},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 696, col: 69, offset: 19494},
											name: "BlockTableElement",
										},
										&ruleRefExpr{
											pos:  position{line: 696, col: 89, offset: 19514},
											name: "InlineTableElements",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 696, col: 111, offset: 19536},
							expr: &choiceExpr{
								pos: position{line: 696, col: 113, offset: 19538},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 696, col: 113, offset: 19538},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 124, offset: 19549},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 142, offset: 19567},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 156, offset: 19581},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 178, offset: 19603},
										name: "NewLine",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 696, col: 189, offset: 19614},
							run: (*parser).callonInitialBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "AdditionalBlockTableCell",
			pos:  position{line: 703, col: 1, offset: 19894},
			expr: &actionExpr{
				pos: position{line: 703, col: 28, offset: 19921},
				run: (*parser).callonAdditionalBlockTableCell1,
				expr: &seqExpr{
					pos: position{line: 703, col: 28, offset: 19921},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 703, col: 28, offset: 19921},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 36, offset: 19929},
								name: "AdditionalTableCellDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 66, offset: 19959},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 703, col: 74, offset: 19967},
								expr: &choiceExpr{
									pos: position{line: 703, col: 75, offset: 19968},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 703, col: 75, offset: 19968},
											name: "BlockTableElement",
										},
										&ruleRefExpr{
											pos:  position{line: 703, col: 95, offset: 19988},
											name: "InlineTableElements",
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 703, col: 117, offset: 20010},
							expr: &choiceExpr{
								pos: position{line: 703, col: 119, offset: 20012},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 703, col: 119, offset: 20012},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 130, offset: 20023},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 148, offset: 20041},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 162, offset: 20055},
										name: "TableCellDelimiter",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 184, offset: 20077},
										name: "NewLine",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 703, col: 195, offset: 20088},
							run: (*parser).callonAdditionalBlockTableCell17,
						},
					},
				},
			},
		},
		{
			name: "InlineTableLines",
			pos:  position{line: 710, col: 1, offset: 20368},
			expr: &actionExpr{
				pos: position{line: 710, col: 20, offset: 20387},
				run: (*parser).callonInlineTableLines1,
				expr: &labeledExpr{
					pos:   position{line: 710, col: 20, offset: 20387},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 710, col: 29, offset: 20396},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 710, col: 29, offset: 20396},
								name: "MultiLineTableCell",
							},
							&ruleRefExpr{
								pos:  position{line: 710, col: 50, offset: 20417},
								name: "InlineTableElements",
							},
							&ruleRefExpr{
								pos:  position{line: 710, col: 72, offset: 20439},
								name: "EmptyCell",
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyCell",
			pos:  position{line: 714, col: 1, offset: 20483},
			expr: &actionExpr{
				pos: position{line: 714, col: 13, offset: 20495},
				run: (*parser).callonEmptyCell1,
				expr: &andExpr{
					pos: position{line: 714, col: 13, offset: 20495},
					expr: &choiceExpr{
						pos: position{line: 714, col: 15, offset: 20497},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 714, col: 15, offset: 20497},
								name: "TableEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 26, offset: 20508},
								name: "TableCellDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 48, offset: 20530},
								name: "NewLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ValidTableCellPrefix",
			pos:  position{line: 718, col: 1, offset: 20613},
			expr: &seqExpr{
				pos: position{line: 718, col: 24, offset: 20636},
				exprs: []any{
					&notExpr{
						pos: position{line: 718, col: 24, offset: 20636},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 25, offset: 20637},
							name: "TableEnd",
						},
					},
					&notExpr{
						pos: position{line: 718, col: 34, offset: 20646},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 35, offset: 20647},
							name: "TableCellDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ValidMultilineTableCellPrefix",
			pos:  position{line: 720, col: 1, offset: 20668},
			expr: &seqExpr{
				pos: position{line: 720, col: 33, offset: 20700},
				exprs: []any{
					&notExpr{
						pos: position{line: 720, col: 33, offset: 20700},
						expr: &ruleRefExpr{
							pos:  position{line: 720, col: 34, offset: 20701},
							name: "MultiLineComment",
						},
					},
					&notExpr{
						pos: position{line: 720, col: 51, offset: 20718},
						expr: &ruleRefExpr{
							pos:  position{line: 720, col: 52, offset: 20719},
							name: "SingleLineComment",
						},
					},
				},
			},
		},
		{
			name: "MultiLineTableCell",
			pos:  position{line: 722, col: 1, offset: 20738},
			expr: &actionExpr{
				pos: position{line: 722, col: 22, offset: 20759},
				run: (*parser).callonMultiLineTableCell1,
				expr: &seqExpr{
					pos: position{line: 722, col: 22, offset: 20759},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 722, col: 22, offset: 20759},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 722, col: 28, offset: 20765},
								expr: &ruleRefExpr{
									pos:  position{line: 722, col: 29, offset: 20766},
									name: "InlineTableCellLine",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 51, offset: 20788},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 60, offset: 20797},
								name: "InlineTableCellLastLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLine",
			pos:  position{line: 732, col: 1, offset: 21055},
			expr: &choiceExpr{
				pos: position{line: 732, col: 23, offset: 21077},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 732, col: 23, offset: 21077},
						name: "InlineTableCellEmptyLine",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 50, offset: 21104},
						name: "InlineTableCellIntermediateLine",
					},
				},
			},
		},
		{
			name: "InlineTableCellIntermediateLine",
			pos:  position{line: 734, col: 1, offset: 21138},
			expr: &actionExpr{
				pos: position{line: 734, col: 35, offset: 21172},
				run: (*parser).callonInlineTableCellIntermediateLine1,
				expr: &seqExpr{
					pos: position{line: 734, col: 35, offset: 21172},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 734, col: 35, offset: 21172},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 56, offset: 21193},
							label: "newline",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 64, offset: 21201},
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 64, offset: 21201},
									name: "NewLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 73, offset: 21210},
							name: "ValidMultilineTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 103, offset: 21240},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 734, col: 111, offset: 21248},
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 112, offset: 21249},
									name: "InlineTableElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 133, offset: 21270},
							label: "newlineBeforeEmptyLine",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 156, offset: 21293},
								expr: &actionExpr{
									pos: position{line: 734, col: 157, offset: 21294},
									run: (*parser).callonInlineTableCellIntermediateLine13,
									expr: &seqExpr{
										pos: position{line: 734, col: 157, offset: 21294},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 734, col: 157, offset: 21294},
												label: "nl",
												expr: &ruleRefExpr{
													pos:  position{line: 734, col: 160, offset: 21297},
													name: "NewLine",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 734, col: 168, offset: 21305},
												name: "AnySpaces",
											},
											&andExpr{
												pos: position{line: 734, col: 178, offset: 21315},
												expr: &ruleRefExpr{
													pos:  position{line: 734, col: 180, offset: 21317},
													name: "NewLine",
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 209, offset: 21346},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 210, offset: 21347},
								name: "NewLine",
							},
						},
						&notExpr{
							pos: position{line: 734, col: 218, offset: 21355},
							expr: &choiceExpr{
								pos: position{line: 734, col: 220, offset: 21357},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 734, col: 220, offset: 21357},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 234, offset: 21371},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 245, offset: 21382},
										name: "TableCellDelimiter",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 734, col: 267, offset: 21404},
							expr: &choiceExpr{
								pos: position{line: 734, col: 269, offset: 21406},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 734, col: 269, offset: 21406},
										name: "InlineTableCellLine",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 291, offset: 21428},
										name: "InlineTableCellLastLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellEmptyLine",
			pos:  position{line: 747, col: 1, offset: 21785},
			expr: &actionExpr{
				pos: position{line: 747, col: 28, offset: 21812},
				run: (*parser).callonInlineTableCellEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 747, col: 28, offset: 21812},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 747, col: 28, offset: 21812},
							name: "ValidTableCellPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 49, offset: 21833},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 57, offset: 21841},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 747, col: 67, offset: 21851},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 69, offset: 21853},
								name: "NewLine",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 78, offset: 21862},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 79, offset: 21863},
								name: "TableEnd",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 88, offset: 21872},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 89, offset: 21873},
								name: "TableCellDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 108, offset: 21892},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 109, offset: 21893},
								name: "TableMacros",
							},
						},
						&andExpr{
							pos: position{line: 747, col: 121, offset: 21905},
							expr: &choiceExpr{
								pos: position{line: 747, col: 123, offset: 21907},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 747, col: 123, offset: 21907},
										name: "InlineTableCellLine",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 145, offset: 21929},
										name: "InlineTableCellLastLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableCellLastLine",
			pos:  position{line: 752, col: 1, offset: 22016},
			expr: &actionExpr{
				pos: position{line: 752, col: 27, offset: 22042},
				run: (*parser).callonInlineTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 752, col: 27, offset: 22042},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 752, col: 27, offset: 22042},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 48, offset: 22063},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 51, offset: 22066},
								name: "NewLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 59, offset: 22074},
							name: "ValidMultilineTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 89, offset: 22104},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 752, col: 97, offset: 22112},
								expr: &ruleRefExpr{
									pos:  position{line: 752, col: 98, offset: 22113},
									name: "InlineTableElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 752, col: 119, offset: 22134},
							expr: &choiceExpr{
								pos: position{line: 752, col: 121, offset: 22136},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 752, col: 121, offset: 22136},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 132, offset: 22147},
										name: "TableEmptyLines",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 150, offset: 22165},
										name: "TableMacros",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 164, offset: 22179},
										name: "TableCellDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLine",
			pos:  position{line: 759, col: 1, offset: 22354},
			expr: &actionExpr{
				pos: position{line: 759, col: 22, offset: 22375},
				run: (*parser).callonBlockTableCellLine1,
				expr: &labeledExpr{
					pos:   position{line: 759, col: 22, offset: 22375},
					label: "content",
					expr: &choiceExpr{
						pos: position{line: 759, col: 31, offset: 22384},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 759, col: 31, offset: 22384},
								name: "BlockTableElement",
							},
							&ruleRefExpr{
								pos:  position{line: 759, col: 51, offset: 22404},
								name: "InlineTableCellIntermediateLine",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableCellLastLine",
			pos:  position{line: 763, col: 1, offset: 22471},
			expr: &actionExpr{
				pos: position{line: 763, col: 26, offset: 22496},
				run: (*parser).callonBlockTableCellLastLine1,
				expr: &seqExpr{
					pos: position{line: 763, col: 26, offset: 22496},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 763, col: 26, offset: 22496},
							name: "ValidTableCellPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 47, offset: 22517},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 763, col: 55, offset: 22525},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 763, col: 63, offset: 22533},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 64, offset: 22534},
									name: "InlineTableElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 763, col: 85, offset: 22555},
							expr: &choiceExpr{
								pos: position{line: 763, col: 87, offset: 22557},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 763, col: 87, offset: 22557},
										name: "TableEnd",
									},
									&ruleRefExpr{
										pos:  position{line: 763, col: 98, offset: 22568},
										name: "TableCellDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElements",
			pos:  position{line: 768, col: 1, offset: 22656},
			expr: &actionExpr{
				pos: position{line: 768, col: 23, offset: 22678},
				run: (*parser).callonInlineTableElements1,
				expr: &seqExpr{
					pos: position{line: 768, col: 23, offset: 22678},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 768, col: 23, offset: 22678},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 44, offset: 22699},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 768, col: 52, offset: 22707},
								expr: &ruleRefExpr{
									pos:  position{line: 768, col: 53, offset: 22708},
									name: "InlineTableElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineTableElement",
			pos:  position{line: 773, col: 1, offset: 22801},
			expr: &actionExpr{
				pos: position{line: 773, col: 22, offset: 22822},
				run: (*parser).callonInlineTableElement1,
				expr: &seqExpr{
					pos: position{line: 773, col: 22, offset: 22822},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 773, col: 22, offset: 22822},
							name: "ValidTableCellPrefix",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 44, offset: 22844},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 774, col: 5, offset: 22858},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 774, col: 5, offset: 22858},
										name: "NakedInlineTableCellText",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 5, offset: 22889},
										name: "CharacterClassTableCell",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockTableElement",
			pos:  position{line: 780, col: 1, offset: 22954},
			expr: &actionExpr{
				pos: position{line: 780, col: 21, offset: 22974},
				run: (*parser).callonBlockTableElement1,
				expr: &seqExpr{
					pos: position{line: 780, col: 21, offset: 22974},
					exprs: []any{
						&notExpr{
							pos: position{line: 780, col: 21, offset: 22974},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 22, offset: 22975},
								name: "InitialTableCellDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 48, offset: 23001},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 59, offset: 23012},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 68, offset: 23021},
								name: "BlockElement",
							},
						},
						&notExpr{
							pos: position{line: 780, col: 82, offset: 23035},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 83, offset: 23036},
								name: "TableCellDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 780, col: 103, offset: 23056},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 104, offset: 23057},
								name: "TableEnd",
							},
						},
					},
				},
			},
		},
		{
			name: "NakedInlineTableCellText",
			pos:  position{line: 785, col: 1, offset: 23102},
			expr: &actionExpr{
				pos: position{line: 785, col: 28, offset: 23129},
				run: (*parser).callonNakedInlineTableCellText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 785, col: 28, offset: 23129},
					expr: &seqExpr{
						pos: position{line: 785, col: 29, offset: 23130},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 785, col: 29, offset: 23130},
								val:        "[A-Za-z ]",
								chars:      []rune{' '},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&notExpr{
								pos: position{line: 785, col: 39, offset: 23140},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 40, offset: 23141},
									name: "TableCellDelimiter",
								},
							},
							&notExpr{
								pos: position{line: 785, col: 59, offset: 23160},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 60, offset: 23161},
									name: "TableEnd",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CharacterClassTableCell",
			pos:  position{line: 789, col: 1, offset: 23233},
			expr: &actionExpr{
				pos: position{line: 789, col: 27, offset: 23259},
				run: (*parser).callonCharacterClassTableCell1,
				expr: &choiceExpr{
					pos: position{line: 789, col: 28, offset: 23260},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 789, col: 28, offset: 23260},
							val:        "\\|",
							ignoreCase: false,
							want:       "\"\\\\|\"",
						},
						&charClassMatcher{
							pos:        position{line: 789, col: 36, offset: 23268},
							val:        "[^|\\r\\n]",
							chars:      []rune{'|', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellDelimiter",
			pos:  position{line: 794, col: 1, offset: 23387},
			expr: &actionExpr{
				pos: position{line: 794, col: 29, offset: 23415},
				run: (*parser).callonInitialTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 794, col: 29, offset: 23415},
					exprs: []any{
						&notExpr{
							pos: position{line: 794, col: 29, offset: 23415},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 30, offset: 23416},
								name: "TableEnd",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 39, offset: 23425},
							name: "NewLine",
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 47, offset: 23433},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 57, offset: 23443},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 794, col: 64, offset: 23450},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 65, offset: 23451},
									name: "TableCellFormat",
								},
							},
						},
						&notExpr{
							pos: position{line: 794, col: 83, offset: 23469},
							expr: &litMatcher{
								pos:        position{line: 794, col: 84, offset: 23470},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 794, col: 89, offset: 23475},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellDelimiter",
			pos:  position{line: 801, col: 1, offset: 23591},
			expr: &actionExpr{
				pos: position{line: 801, col: 32, offset: 23622},
				run: (*parser).callonAdditionalTableCellDelimiter1,
				expr: &seqExpr{
					pos: position{line: 801, col: 32, offset: 23622},
					exprs: []any{
						&notExpr{
							pos: position{line: 801, col: 32, offset: 23622},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 33, offset: 23623},
								name: "TableEnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 42, offset: 23632},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 49, offset: 23639},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 50, offset: 23640},
									name: "AdditionalTableCellFormat",
								},
							},
						},
						&notExpr{
							pos: position{line: 801, col: 78, offset: 23668},
							expr: &litMatcher{
								pos:        position{line: 801, col: 79, offset: 23669},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 801, col: 84, offset: 23674},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
					},
				},
			},
		},
		{
			name: "InitialTableCellFormat",
			pos:  position{line: 806, col: 1, offset: 23779},
			expr: &actionExpr{
				pos: position{line: 806, col: 26, offset: 23804},
				run: (*parser).callonInitialTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 806, col: 26, offset: 23804},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 806, col: 26, offset: 23804},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 36, offset: 23814},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 44, offset: 23822},
								name: "TableCellFormat",
							},
						},
						&andCodeExpr{
							pos: position{line: 806, col: 61, offset: 23839},
							run: (*parser).callonInitialTableCellFormat6,
						},
					},
				},
			},
		},
		{
			name: "AdditionalTableCellFormat",
			pos:  position{line: 813, col: 1, offset: 23965},
			expr: &actionExpr{
				pos: position{line: 813, col: 29, offset: 23993},
				run: (*parser).callonAdditionalTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 813, col: 29, offset: 23993},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 813, col: 29, offset: 23993},
							label: "lead",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 35, offset: 23999},
								name: "__",
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 39, offset: 24003},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 47, offset: 24011},
								name: "TableCellFormat",
							},
						},
						&andCodeExpr{
							pos: position{line: 813, col: 64, offset: 24028},
							run: (*parser).callonAdditionalTableCellFormat7,
						},
					},
				},
			},
		},
		{
			name: "TableCellSpan",
			pos:  position{line: 819, col: 1, offset: 24114},
			expr: &actionExpr{
				pos: position{line: 819, col: 17, offset: 24130},
				run: (*parser).callonTableCellSpan1,
				expr: &seqExpr{
					pos: position{line: 819, col: 17, offset: 24130},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 819, col: 17, offset: 24130},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 819, col: 24, offset: 24137},
								expr: &actionExpr{
									pos: position{line: 819, col: 25, offset: 24138},
									run: (*parser).callonTableCellSpan5,
									expr: &labeledExpr{
										pos:   position{line: 819, col: 25, offset: 24138},
										label: "n",
										expr: &ruleRefExpr{
											pos:  position{line: 819, col: 27, offset: 24140},
											name: "PositiveInteger",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 12, offset: 24211},
							label: "row",
							expr: &zeroOrOneExpr{
								pos: position{line: 821, col: 17, offset: 24216},
								expr: &actionExpr{
									pos: position{line: 821, col: 18, offset: 24217},
									run: (*parser).callonTableCellSpan10,
									expr: &seqExpr{
										pos: position{line: 821, col: 18, offset: 24217},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 821, col: 18, offset: 24217},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 821, col: 22, offset: 24221},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 821, col: 24, offset: 24223},
													name: "PositiveInteger",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 824, col: 11, offset: 24301},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "TableCellFormat",
			pos:  position{line: 832, col: 1, offset: 24539},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 24563},
				run: (*parser).callonTableCellFormat1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 24563},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 833, col: 5, offset: 24563},
							label: "multiplier",
							expr: &zeroOrOneExpr{
								pos: position{line: 833, col: 16, offset: 24574},
								expr: &actionExpr{
									pos: position{line: 834, col: 9, offset: 24584},
									run: (*parser).callonTableCellFormat5,
									expr: &seqExpr{
										pos: position{line: 834, col: 9, offset: 24584},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 834, col: 9, offset: 24584},
												label: "multiplier",
												expr: &actionExpr{
													pos: position{line: 834, col: 21, offset: 24596},
													run: (*parser).callonTableCellFormat8,
													expr: &seqExpr{
														pos: position{line: 834, col: 21, offset: 24596},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 834, col: 21, offset: 24596},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 834, col: 26, offset: 24601},
																expr: &charClassMatcher{
																	pos:        position{line: 834, col: 26, offset: 24601},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 834, col: 63, offset: 24638},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 24720},
							label: "span",
							expr: &zeroOrOneExpr{
								pos: position{line: 838, col: 10, offset: 24725},
								expr: &actionExpr{
									pos: position{line: 839, col: 9, offset: 24735},
									run: (*parser).callonTableCellFormat16,
									expr: &labeledExpr{
										pos:   position{line: 839, col: 9, offset: 24735},
										label: "span",
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 15, offset: 24741},
											name: "TableCellSpan",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 5, offset: 24812},
							label: "horizontalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 843, col: 21, offset: 24828},
								expr: &choiceExpr{
									pos: position{line: 844, col: 9, offset: 24838},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 844, col: 9, offset: 24838},
											run: (*parser).callonTableCellFormat22,
											expr: &litMatcher{
												pos:        position{line: 844, col: 9, offset: 24838},
												val:        "<",
												ignoreCase: false,
												want:       "\"<\"",
											},
										},
										&actionExpr{
											pos: position{line: 845, col: 11, offset: 24906},
											run: (*parser).callonTableCellFormat24,
											expr: &litMatcher{
												pos:        position{line: 845, col: 11, offset: 24906},
												val:        ">",
												ignoreCase: false,
												want:       "\">\"",
											},
										},
										&actionExpr{
											pos: position{line: 846, col: 11, offset: 24975},
											run: (*parser).callonTableCellFormat26,
											expr: &litMatcher{
												pos:        position{line: 846, col: 11, offset: 24975},
												val:        "^",
												ignoreCase: false,
												want:       "\"^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 25047},
							label: "verticalAlign",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 19, offset: 25061},
								expr: &choiceExpr{
									pos: position{line: 849, col: 9, offset: 25071},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 849, col: 9, offset: 25071},
											run: (*parser).callonTableCellFormat31,
											expr: &litMatcher{
												pos:        position{line: 849, col: 9, offset: 25071},
												val:        ".<",
												ignoreCase: false,
												want:       "\".<\"",
											},
										},
										&actionExpr{
											pos: position{line: 850, col: 11, offset: 25137},
											run: (*parser).callonTableCellFormat33,
											expr: &litMatcher{
												pos:        position{line: 850, col: 11, offset: 25137},
												val:        ".>",
												ignoreCase: false,
												want:       "\".>\"",
											},
										},
										&actionExpr{
											pos: position{line: 851, col: 11, offset: 25206},
											run: (*parser).callonTableCellFormat35,
											expr: &litMatcher{
												pos:        position{line: 851, col: 11, offset: 25206},
												val:        ".^",
												ignoreCase: false,
												want:       "\".^\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 25276},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 853, col: 11, offset: 25282},
								expr: &choiceExpr{
									pos: position{line: 854, col: 9, offset: 25292},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 854, col: 9, offset: 25292},
											run: (*parser).callonTableCellFormat40,
											expr: &litMatcher{
												pos:        position{line: 854, col: 9, offset: 25292},
												val:        "a",
												ignoreCase: false,
												want:       "\"a\"",
											},
										},
										&actionExpr{
											pos: position{line: 855, col: 11, offset: 25354},
											run: (*parser).callonTableCellFormat42,
											expr: &litMatcher{
												pos:        position{line: 855, col: 11, offset: 25354},
												val:        "d",
												ignoreCase: false,
												want:       "\"d\"",
											},
										},
										&actionExpr{
											pos: position{line: 856, col: 11, offset: 25415},
											run: (*parser).callonTableCellFormat44,
											expr: &litMatcher{
												pos:        position{line: 856, col: 11, offset: 25415},
												val:        "e",
												ignoreCase: false,
												want:       "\"e\"",
											},
										},
										&actionExpr{
											pos: position{line: 857, col: 11, offset: 25478},
											run: (*parser).callonTableCellFormat46,
											expr: &litMatcher{
												pos:        position{line: 857, col: 11, offset: 25478},
												val:        "h",
												ignoreCase: false,
												want:       "\"h\"",
											},
										},
										&actionExpr{
											pos: position{line: 858, col: 11, offset: 25539},
											run: (*parser).callonTableCellFormat48,
											expr: &litMatcher{
												pos:        position{line: 858, col: 11, offset: 25539},
												val:        "l",
												ignoreCase: false,
												want:       "\"l\"",
											},
										},
										&actionExpr{
											pos: position{line: 859, col: 11, offset: 25601},
											run: (*parser).callonTableCellFormat50,
											expr: &litMatcher{
												pos:        position{line: 859, col: 11, offset: 25601},
												val:        "m",
												ignoreCase: false,
												want:       "\"m\"",
											},
										},
										&actionExpr{
											pos: position{line: 860, col: 11, offset: 25665},
											run: (*parser).callonTableCellFormat52,
											expr: &litMatcher{
												pos:        position{line: 860, col: 11, offset: 25665},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 862, col: 6, offset: 25728},
							run: (*parser).callonTableCellFormat54,
						},
					},
				},
			},
		},
		{
			name: "URLScheme",
			pos:  position{line: 879, col: 1, offset: 26431},
			expr: &actionExpr{
				pos: position{line: 879, col: 13, offset: 26443},
				run: (*parser).callonURLScheme1,
				expr: &choiceExpr{
					pos: position{line: 879, col: 14, offset: 26444},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 879, col: 14, offset: 26444},
							val:        "https://",
							ignoreCase: false,
							want:       "\"https://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 27, offset: 26457},
							val:        "http://",
							ignoreCase: false,
							want:       "\"http://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 39, offset: 26469},
							val:        "ftp://",
							ignoreCase: false,
							want:       "\"ftp://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 50, offset: 26480},
							val:        "irc://",
							ignoreCase: false,
							want:       "\"irc://\"",
						},
						&litMatcher{
							pos:        position{line: 879, col: 61, offset: 26491},
							val:        "mailto:",
							ignoreCase: false,
							want:       "\"mailto:\"",
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 883, col: 1, offset: 26542},
			expr: &actionExpr{
				pos: position{line: 883, col: 7, offset: 26548},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 883, col: 7, offset: 26548},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 883, col: 7, offset: 26548},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 14, offset: 26555},
								expr: &ruleRefExpr{
									pos:  position{line: 883, col: 15, offset: 26556},
									name: "URLScheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 27, offset: 26568},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 33, offset: 26574},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "FullURL",
			pos:  position{line: 888, col: 1, offset: 26680},
			expr: &actionExpr{
				pos: position{line: 888, col: 11, offset: 26690},
				run: (*parser).callonFullURL1,
				expr: &seqExpr{
					pos: position{line: 888, col: 11, offset: 26690},
					exprs: []any{
						&notExpr{
							pos: position{line: 888, col: 11, offset: 26690},
							expr: &litMatcher{
								pos:        position{line: 888, col: 12, offset: 26691},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 16, offset: 26695},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 24, offset: 26703},
								name: "URLScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 35, offset: 26714},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 41, offset: 26720},
								name: "Path",
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 895, col: 1, offset: 26815},
			expr: &actionExpr{
				pos: position{line: 895, col: 8, offset: 26822},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 895, col: 8, offset: 26822},
					exprs: []any{
						&notExpr{
							pos: position{line: 895, col: 8, offset: 26822},
							expr: &litMatcher{
								pos:        position{line: 895, col: 9, offset: 26823},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 13, offset: 26827},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 895, col: 24, offset: 26838},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 24, offset: 26838},
									name: "PathElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PathElement",
			pos:  position{line: 899, col: 1, offset: 26909},
			expr: &choiceExpr{
				pos: position{line: 899, col: 16, offset: 26924},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 899, col: 16, offset: 26924},
						run: (*parser).callonPathElement2,
						expr: &oneOrMoreExpr{
							pos: position{line: 899, col: 16, offset: 26924},
							expr: &charClassMatcher{
								pos:        position{line: 899, col: 17, offset: 26925},
								val:        "[^\\r\\n{.<>!?,;[\\] ]",
								chars:      []rune{'\r', '\n', '{', '.', '<', '>', '!', '?', ',', ';', '[', ']', ' '},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 27004},
						run: (*parser).callonPathElement5,
						expr: &seqExpr{
							pos: position{line: 901, col: 6, offset: 27005},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 901, col: 6, offset: 27005},
									val:        "[.?!;,]",
									chars:      []rune{'.', '?', '!', ';', ','},
									ignoreCase: false,
									inverted:   false,
								},
								&andExpr{
									pos: position{line: 901, col: 14, offset: 27013},
									expr: &seqExpr{
										pos: position{line: 901, col: 16, offset: 27015},
										exprs: []any{
											&notExpr{
												pos: position{line: 901, col: 16, offset: 27015},
												expr: &ruleRefExpr{
													pos:  position{line: 901, col: 17, offset: 27016},
													name: "_",
												},
											},
											&notExpr{
												pos: position{line: 901, col: 19, offset: 27018},
												expr: &ruleRefExpr{
													pos:  position{line: 901, col: 20, offset: 27019},
													name: "EndOfFile",
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 903, col: 5, offset: 27088},
						name: "AttributeReference",
					},
				},
			},
		},
		{
			name: "Email",
			pos:  position{line: 907, col: 1, offset: 27112},
			expr: &actionExpr{
				pos: position{line: 907, col: 9, offset: 27120},
				run: (*parser).callonEmail1,
				expr: &seqExpr{
					pos: position{line: 907, col: 9, offset: 27120},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 907, col: 9, offset: 27120},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 15, offset: 27126},
								name: "EmailName",
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 26, offset: 27137},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 30, offset: 27141},
							label: "domain",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 38, offset: 27149},
								name: "EmailDomain",
							},
						},
					},
				},
			},
		},
		{
			name: "EmailName",
			pos:  position{line: 911, col: 1, offset: 27247},
			expr: &actionExpr{
				pos: position{line: 911, col: 13, offset: 27259},
				run: (*parser).callonEmailName1,
				expr: &seqExpr{
					pos: position{line: 911, col: 13, offset: 27259},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 911, col: 13, offset: 27259},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 911, col: 19, offset: 27265},
								run: (*parser).callonEmailName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 911, col: 19, offset: 27265},
									expr: &choiceExpr{
										pos: position{line: 911, col: 20, offset: 27266},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 911, col: 20, offset: 27266},
												name: "Alphanumeric",
											},
											&charClassMatcher{
												pos:        position{line: 911, col: 35, offset: 27281},
												val:        "[!#$%&'*+-/=?^_`{|}~.]",
												chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
												ranges:     []rune{'+', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 913, col: 4, offset: 27409},
							run: (*parser).callonEmailName9,
						},
					},
				},
			},
		},
		{
			name: "EmailDomain",
			pos:  position{line: 920, col: 1, offset: 27575},
			expr: &actionExpr{
				pos: position{line: 920, col: 15, offset: 27589},
				run: (*parser).callonEmailDomain1,
				expr: &seqExpr{
					pos: position{line: 920, col: 15, offset: 27589},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 920, col: 15, offset: 27589},
							label: "domain",
							expr: &actionExpr{
								pos: position{line: 920, col: 23, offset: 27597},
								run: (*parser).callonEmailDomain4,
								expr: &seqExpr{
									pos: position{line: 920, col: 24, offset: 27598},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 920, col: 24, offset: 27598},
											expr: &ruleRefExpr{
												pos:  position{line: 920, col: 25, offset: 27599},
												name: "Alphanumeric",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 920, col: 40, offset: 27614},
											expr: &seqExpr{
												pos: position{line: 920, col: 41, offset: 27615},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 920, col: 41, offset: 27615},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 920, col: 45, offset: 27619},
														expr: &choiceExpr{
															pos: position{line: 920, col: 46, offset: 27620},
															alternatives: []any{
																&ruleRefExpr{
																	pos:  position{line: 920, col: 46, offset: 27620},
																	name: "Alphanumeric",
																},
																&litMatcher{
																	pos:        position{line: 920, col: 61, offset: 27635},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 922, col: 4, offset: 27680},
							run: (*parser).callonEmailDomain15,
						},
					},
				},
			},
		},
		{
			name: "Listing",
			pos:  position{line: 930, col: 1, offset: 27822},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 27836},
				run: (*parser).callonListing1,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 27836},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 931, col: 5, offset: 27836},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 12, offset: 27843},
								name: "ListingStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 5, offset: 27861},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 932, col: 11, offset: 27867},
								expr: &ruleRefExpr{
									pos:  position{line: 932, col: 12, offset: 27868},
									name: "ListingLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 5, offset: 27886},
							name: "ListingEnd",
						},
					},
				},
			},
		},
		{
			name: "ListingStart",
			pos:  position{line: 937, col: 1, offset: 28044},
			expr: &actionExpr{
				pos: position{line: 937, col: 16, offset: 28059},
				run: (*parser).callonListingStart1,
				expr: &seqExpr{
					pos: position{line: 937, col: 16, offset: 28059},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 937, col: 16, offset: 28059},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 937, col: 32, offset: 28075},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 42, offset: 28085},
								name: "ListingDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 937, col: 59, offset: 28102},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 937, col: 69, offset: 28112},
							run: (*parser).callonListingStart7,
						},
					},
				},
			},
		},
		{
			name: "ListingEnd",
			pos:  position{line: 944, col: 1, offset: 28289},
			expr: &seqExpr{
				pos: position{line: 944, col: 14, offset: 28302},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 944, col: 14, offset: 28302},
						name: "BeginningOfLine",
					},
					&labeledExpr{
						pos:   position{line: 944, col: 30, offset: 28318},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 40, offset: 28328},
							name: "ListingDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 944, col: 57, offset: 28345},
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 58, offset: 28346},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 944, col: 68, offset: 28356},
						run: (*parser).callonListingEnd7,
					},
				},
			},
		},
		{
			name: "ListingHyphens",
			pos:  position{line: 953, col: 1, offset: 28616},
			expr: &actionExpr{
				pos: position{line: 953, col: 18, offset: 28633},
				run: (*parser).callonListingHyphens1,
				expr: &seqExpr{
					pos: position{line: 953, col: 18, offset: 28633},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 953, col: 18, offset: 28633},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 953, col: 27, offset: 28642},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 953, col: 27, offset: 28642},
										val:        "----",
										ignoreCase: false,
										want:       "\"----\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 953, col: 34, offset: 28649},
										expr: &litMatcher{
											pos:        position{line: 953, col: 34, offset: 28649},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 953, col: 40, offset: 28655},
							run: (*parser).callonListingHyphens8,
						},
					},
				},
			},
		},
		{
			name: "ListingDelimiter",
			pos:  position{line: 960, col: 1, offset: 28774},
			expr: &actionExpr{
				pos: position{line: 960, col: 20, offset: 28793},
				run: (*parser).callonListingDelimiter1,
				expr: &seqExpr{
					pos: position{line: 960, col: 20, offset: 28793},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 960, col: 20, offset: 28793},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 29, offset: 28802},
								name: "ListingHyphens",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 5, offset: 28823},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "ListingLine",
			pos:  position{line: 966, col: 1, offset: 28950},
			expr: &actionExpr{
				pos: position{line: 966, col: 15, offset: 28964},
				run: (*parser).callonListingLine1,
				expr: &seqExpr{
					pos: position{line: 966, col: 16, offset: 28965},
					exprs: []any{
						&notExpr{
							pos: position{line: 966, col: 16, offset: 28965},
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 17, offset: 28966},
								name: "ListingDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 34, offset: 28983},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 966, col: 47, offset: 28996},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 52, offset: 29001},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 966, col: 60, offset: 29009},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Open",
			pos:  position{line: 970, col: 1, offset: 29059},
			expr: &actionExpr{
				pos: position{line: 971, col: 5, offset: 29070},
				run: (*parser).callonOpen1,
				expr: &seqExpr{
					pos: position{line: 971, col: 5, offset: 29070},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 971, col: 5, offset: 29070},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 971, col: 12, offset: 29077},
								name: "OpenStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 972, col: 5, offset: 29092},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 972, col: 11, offset: 29098},
								expr: &seqExpr{
									pos: position{line: 972, col: 12, offset: 29099},
									exprs: []any{
										&notExpr{
											pos: position{line: 972, col: 12, offset: 29099},
											expr: &ruleRefExpr{
												pos:  position{line: 972, col: 13, offset: 29100},
												name: "OpenDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 972, col: 27, offset: 29114},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 5, offset: 29128},
							name: "OpenEnd",
						},
					},
				},
			},
		},
		{
			name: "OpenStart",
			pos:  position{line: 977, col: 1, offset: 29277},
			expr: &actionExpr{
				pos: position{line: 977, col: 13, offset: 29289},
				run: (*parser).callonOpenStart1,
				expr: &seqExpr{
					pos: position{line: 977, col: 13, offset: 29289},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 977, col: 13, offset: 29289},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 23, offset: 29299},
								name: "OpenDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 977, col: 37, offset: 29313},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 977, col: 47, offset: 29323},
							run: (*parser).callonOpenStart6,
						},
					},
				},
			},
		},
		{
			name: "OpenEnd",
			pos:  position{line: 984, col: 1, offset: 29497},
			expr: &seqExpr{
				pos: position{line: 984, col: 11, offset: 29507},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 984, col: 11, offset: 29507},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 984, col: 21, offset: 29517},
							name: "OpenDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 984, col: 35, offset: 29531},
						expr: &ruleRefExpr{
							pos:  position{line: 984, col: 36, offset: 29532},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 984, col: 46, offset: 29542},
						run: (*parser).callonOpenEnd6,
					},
				},
			},
		},
		{
			name: "OpenEquals",
			pos:  position{line: 993, col: 1, offset: 29796},
			expr: &actionExpr{
				pos: position{line: 993, col: 14, offset: 29809},
				run: (*parser).callonOpenEquals1,
				expr: &labeledExpr{
					pos:   position{line: 993, col: 14, offset: 29809},
					label: "hyphens",
					expr: &litMatcher{
						pos:        position{line: 993, col: 23, offset: 29818},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
				},
			},
		},
		{
			name: "OpenDelimiter",
			pos:  position{line: 998, col: 1, offset: 29874},
			expr: &actionExpr{
				pos: position{line: 998, col: 17, offset: 29890},
				run: (*parser).callonOpenDelimiter1,
				expr: &seqExpr{
					pos: position{line: 998, col: 17, offset: 29890},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 998, col: 17, offset: 29890},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 26, offset: 29899},
								name: "OpenEquals",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 5, offset: 29916},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1005, col: 1, offset: 30049},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 15, offset: 30063},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 15, offset: 30063},
						name: "SingleMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 34, offset: 30082},
						name: "DoubleMarkedText",
					},
				},
			},
		},
		{
			name: "SingleMarkedText",
			pos:  position{line: 1007, col: 1, offset: 30101},
			expr: &actionExpr{
				pos: position{line: 1007, col: 20, offset: 30120},
				run: (*parser).callonSingleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1007, col: 20, offset: 30120},
					exprs: []any{
						&notExpr{
							pos: position{line: 1007, col: 20, offset: 30120},
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 21, offset: 30121},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 28, offset: 30128},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andExpr{
							pos: position{line: 1007, col: 32, offset: 30132},
							expr: &notExpr{
								pos: position{line: 1007, col: 34, offset: 30134},
								expr: &litMatcher{
									pos:        position{line: 1007, col: 35, offset: 30135},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1007, col: 40, offset: 30140},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 47, offset: 30147},
								name: "SingleMarkedTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1007, col: 70, offset: 30170},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 1007, col: 74, offset: 30174},
							expr: &litMatcher{
								pos:        position{line: 1007, col: 75, offset: 30175},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andExpr{
							pos: position{line: 1007, col: 79, offset: 30179},
							expr: &notExpr{
								pos: position{line: 1007, col: 81, offset: 30181},
								expr: &ruleRefExpr{
									pos:  position{line: 1007, col: 82, offset: 30182},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextValue",
			pos:  position{line: 1011, col: 1, offset: 30227},
			expr: &actionExpr{
				pos: position{line: 1011, col: 25, offset: 30251},
				run: (*parser).callonSingleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 25, offset: 30251},
					exprs: []any{
						&notExpr{
							pos: position{line: 1011, col: 25, offset: 30251},
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 26, offset: 30252},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 28, offset: 30254},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1011, col: 34, offset: 30260},
								expr: &actionExpr{
									pos: position{line: 1011, col: 35, offset: 30261},
									run: (*parser).callonSingleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1011, col: 35, offset: 30261},
										exprs: []any{
											&notExpr{
												pos: position{line: 1011, col: 35, offset: 30261},
												expr: &ruleRefExpr{
													pos:  position{line: 1011, col: 36, offset: 30262},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1011, col: 38, offset: 30264},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1011, col: 44, offset: 30270},
													expr: &ruleRefExpr{
														pos:  position{line: 1011, col: 45, offset: 30271},
														name: "SingleMarkedTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleMarkedTextElement",
			pos:  position{line: 1015, col: 1, offset: 30425},
			expr: &actionExpr{
				pos: position{line: 1015, col: 27, offset: 30451},
				run: (*parser).callonSingleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 27, offset: 30451},
					exprs: []any{
						&notExpr{
							pos: position{line: 1015, col: 27, offset: 30451},
							expr: &seqExpr{
								pos: position{line: 1015, col: 29, offset: 30453},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1015, col: 29, offset: 30453},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
									&notExpr{
										pos: position{line: 1015, col: 33, offset: 30457},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 34, offset: 30458},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1015, col: 39, offset: 30463},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1015, col: 48, offset: 30472},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedText",
			pos:  position{line: 1019, col: 1, offset: 30527},
			expr: &actionExpr{
				pos: position{line: 1019, col: 20, offset: 30546},
				run: (*parser).callonDoubleMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1019, col: 20, offset: 30546},
					exprs: []any{
						&notExpr{
							pos: position{line: 1019, col: 20, offset: 30546},
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 21, offset: 30547},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 34, offset: 30560},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1019, col: 39, offset: 30565},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 46, offset: 30572},
								name: "DoubleMarkedTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1019, col: 69, offset: 30595},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextValue",
			pos:  position{line: 1023, col: 1, offset: 30632},
			expr: &actionExpr{
				pos: position{line: 1023, col: 25, offset: 30656},
				run: (*parser).callonDoubleMarkedTextValue1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 25, offset: 30656},
					exprs: []any{
						&notExpr{
							pos: position{line: 1023, col: 25, offset: 30656},
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 26, offset: 30657},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 28, offset: 30659},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1023, col: 34, offset: 30665},
								expr: &actionExpr{
									pos: position{line: 1023, col: 35, offset: 30666},
									run: (*parser).callonDoubleMarkedTextValue7,
									expr: &seqExpr{
										pos: position{line: 1023, col: 35, offset: 30666},
										exprs: []any{
											&notExpr{
												pos: position{line: 1023, col: 35, offset: 30666},
												expr: &ruleRefExpr{
													pos:  position{line: 1023, col: 36, offset: 30667},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1023, col: 38, offset: 30669},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1023, col: 44, offset: 30675},
													expr: &ruleRefExpr{
														pos:  position{line: 1023, col: 45, offset: 30676},
														name: "DoubleMarkedTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleMarkedTextElement",
			pos:  position{line: 1027, col: 1, offset: 30842},
			expr: &actionExpr{
				pos: position{line: 1027, col: 27, offset: 30868},
				run: (*parser).callonDoubleMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 27, offset: 30868},
					exprs: []any{
						&notExpr{
							pos: position{line: 1027, col: 27, offset: 30868},
							expr: &litMatcher{
								pos:        position{line: 1027, col: 29, offset: 30870},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 35, offset: 30876},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 44, offset: 30885},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 1033, col: 1, offset: 30942},
			expr: &actionExpr{
				pos: position{line: 1034, col: 5, offset: 30956},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 5, offset: 30956},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1034, col: 5, offset: 30956},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 12, offset: 30963},
								name: "ExampleStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 5, offset: 30981},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1035, col: 11, offset: 30987},
								expr: &seqExpr{
									pos: position{line: 1035, col: 12, offset: 30988},
									exprs: []any{
										&notExpr{
											pos: position{line: 1035, col: 12, offset: 30988},
											expr: &ruleRefExpr{
												pos:  position{line: 1035, col: 13, offset: 30989},
												name: "ExampleDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1035, col: 30, offset: 31006},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1036, col: 5, offset: 31020},
							name: "ExampleEnd",
						},
					},
				},
			},
		},
		{
			name: "ExampleStart",
			pos:  position{line: 1040, col: 1, offset: 31178},
			expr: &actionExpr{
				pos: position{line: 1040, col: 16, offset: 31193},
				run: (*parser).callonExampleStart1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 16, offset: 31193},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1040, col: 16, offset: 31193},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1040, col: 26, offset: 31203},
								name: "ExampleDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1040, col: 43, offset: 31220},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1040, col: 53, offset: 31230},
							run: (*parser).callonExampleStart6,
						},
					},
				},
			},
		},
		{
			name: "ExampleEnd",
			pos:  position{line: 1047, col: 1, offset: 31415},
			expr: &seqExpr{
				pos: position{line: 1047, col: 14, offset: 31428},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1047, col: 14, offset: 31428},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1047, col: 24, offset: 31438},
							name: "ExampleDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1047, col: 41, offset: 31455},
						expr: &ruleRefExpr{
							pos:  position{line: 1047, col: 42, offset: 31456},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1047, col: 52, offset: 31466},
						run: (*parser).callonExampleEnd6,
					},
				},
			},
		},
		{
			name: "ExampleEquals",
			pos:  position{line: 1056, col: 1, offset: 31734},
			expr: &actionExpr{
				pos: position{line: 1056, col: 17, offset: 31750},
				run: (*parser).callonExampleEquals1,
				expr: &seqExpr{
					pos: position{line: 1056, col: 17, offset: 31750},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1056, col: 17, offset: 31750},
							label: "hyphens",
							expr: &seqExpr{
								pos: position{line: 1056, col: 26, offset: 31759},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1056, col: 26, offset: 31759},
										val:        "====",
										ignoreCase: false,
										want:       "\"====\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1056, col: 33, offset: 31766},
										expr: &litMatcher{
											pos:        position{line: 1056, col: 33, offset: 31766},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1056, col: 39, offset: 31772},
							run: (*parser).callonExampleEquals8,
						},
					},
				},
			},
		},
		{
			name: "ExampleDelimiter",
			pos:  position{line: 1063, col: 1, offset: 31895},
			expr: &actionExpr{
				pos: position{line: 1063, col: 20, offset: 31914},
				run: (*parser).callonExampleDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 20, offset: 31914},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1063, col: 20, offset: 31914},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 1063, col: 29, offset: 31923},
								name: "ExampleEquals",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1064, col: 5, offset: 31943},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "ExampleLine",
			pos:  position{line: 1069, col: 1, offset: 32074},
			expr: &actionExpr{
				pos: position{line: 1069, col: 15, offset: 32088},
				run: (*parser).callonExampleLine1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 16, offset: 32089},
					exprs: []any{
						&notExpr{
							pos: position{line: 1069, col: 16, offset: 32089},
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 17, offset: 32090},
								name: "ExampleDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 34, offset: 32107},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 47, offset: 32120},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 52, offset: 32125},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 60, offset: 32133},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1075, col: 1, offset: 32181},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 32195},
				run: (*parser).callonLiteral1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 32195},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1076, col: 5, offset: 32195},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 12, offset: 32202},
								name: "LiteralStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 5, offset: 32220},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1077, col: 11, offset: 32226},
								expr: &ruleRefExpr{
									pos:  position{line: 1077, col: 12, offset: 32227},
									name: "LiteralLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1078, col: 5, offset: 32245},
							name: "LiteralEnd",
						},
					},
				},
			},
		},
		{
			name: "LiteralStart",
			pos:  position{line: 1082, col: 1, offset: 32412},
			expr: &actionExpr{
				pos: position{line: 1082, col: 16, offset: 32427},
				run: (*parser).callonLiteralStart1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 16, offset: 32427},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1082, col: 16, offset: 32427},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 32, offset: 32443},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 42, offset: 32453},
								name: "LiteralDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1082, col: 59, offset: 32470},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1082, col: 69, offset: 32480},
							run: (*parser).callonLiteralStart7,
						},
					},
				},
			},
		},
		{
			name: "LiteralEnd",
			pos:  position{line: 1089, col: 1, offset: 32657},
			expr: &seqExpr{
				pos: position{line: 1089, col: 14, offset: 32670},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1089, col: 14, offset: 32670},
						name: "BeginningOfLine",
					},
					&labeledExpr{
						pos:   position{line: 1089, col: 30, offset: 32686},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1089, col: 40, offset: 32696},
							name: "LiteralDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1089, col: 57, offset: 32713},
						expr: &ruleRefExpr{
							pos:  position{line: 1089, col: 58, offset: 32714},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1089, col: 68, offset: 32724},
						run: (*parser).callonLiteralEnd7,
					},
				},
			},
		},
		{
			name: "LiteralDots",
			pos:  position{line: 1098, col: 1, offset: 32984},
			expr: &actionExpr{
				pos: position{line: 1098, col: 15, offset: 32998},
				run: (*parser).callonLiteralDots1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 15, offset: 32998},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1098, col: 15, offset: 32998},
							label: "dots",
							expr: &seqExpr{
								pos: position{line: 1098, col: 21, offset: 33004},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1098, col: 21, offset: 33004},
										val:        "....",
										ignoreCase: false,
										want:       "\"....\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1098, col: 28, offset: 33011},
										expr: &litMatcher{
											pos:        position{line: 1098, col: 28, offset: 33011},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1098, col: 34, offset: 33017},
							run: (*parser).callonLiteralDots8,
						},
					},
				},
			},
		},
		{
			name: "LiteralDelimiter",
			pos:  position{line: 1105, col: 1, offset: 33130},
			expr: &actionExpr{
				pos: position{line: 1105, col: 20, offset: 33149},
				run: (*parser).callonLiteralDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 20, offset: 33149},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1105, col: 20, offset: 33149},
							label: "dots",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 26, offset: 33155},
								name: "LiteralDots",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1106, col: 5, offset: 33173},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "LiteralLine",
			pos:  position{line: 1111, col: 1, offset: 33297},
			expr: &actionExpr{
				pos: position{line: 1111, col: 15, offset: 33311},
				run: (*parser).callonLiteralLine1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 16, offset: 33312},
					exprs: []any{
						&notExpr{
							pos: position{line: 1111, col: 16, offset: 33312},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 17, offset: 33313},
								name: "LiteralDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 34, offset: 33330},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 47, offset: 33343},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 52, offset: 33348},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 60, offset: 33356},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Sidebar",
			pos:  position{line: 1115, col: 1, offset: 33402},
			expr: &actionExpr{
				pos: position{line: 1116, col: 5, offset: 33416},
				run: (*parser).callonSidebar1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 5, offset: 33416},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1116, col: 5, offset: 33416},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 12, offset: 33423},
								name: "SidebarStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 5, offset: 33441},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1117, col: 11, offset: 33447},
								expr: &seqExpr{
									pos: position{line: 1117, col: 12, offset: 33448},
									exprs: []any{
										&notExpr{
											pos: position{line: 1117, col: 12, offset: 33448},
											expr: &ruleRefExpr{
												pos:  position{line: 1117, col: 13, offset: 33449},
												name: "SidebarDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1117, col: 30, offset: 33466},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1118, col: 5, offset: 33480},
							name: "SidebarEnd",
						},
					},
				},
			},
		},
		{
			name: "SidebarStart",
			pos:  position{line: 1122, col: 1, offset: 33638},
			expr: &actionExpr{
				pos: position{line: 1122, col: 16, offset: 33653},
				run: (*parser).callonSidebarStart1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 16, offset: 33653},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1122, col: 16, offset: 33653},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 26, offset: 33663},
								name: "SidebarDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1122, col: 43, offset: 33680},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1122, col: 53, offset: 33690},
							run: (*parser).callonSidebarStart6,
						},
					},
				},
			},
		},
		{
			name: "SidebarEnd",
			pos:  position{line: 1129, col: 1, offset: 33867},
			expr: &seqExpr{
				pos: position{line: 1129, col: 14, offset: 33880},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1129, col: 14, offset: 33880},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1129, col: 24, offset: 33890},
							name: "SidebarDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1129, col: 41, offset: 33907},
						expr: &ruleRefExpr{
							pos:  position{line: 1129, col: 42, offset: 33908},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1129, col: 52, offset: 33918},
						run: (*parser).callonSidebarEnd6,
					},
				},
			},
		},
		{
			name: "SidebarAsterisks",
			pos:  position{line: 1138, col: 1, offset: 34178},
			expr: &actionExpr{
				pos: position{line: 1138, col: 20, offset: 34197},
				run: (*parser).callonSidebarAsterisks1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 20, offset: 34197},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1138, col: 20, offset: 34197},
							label: "asterisks",
							expr: &seqExpr{
								pos: position{line: 1138, col: 31, offset: 34208},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1138, col: 31, offset: 34208},
										val:        "****",
										ignoreCase: false,
										want:       "\"****\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1138, col: 38, offset: 34215},
										expr: &litMatcher{
											pos:        position{line: 1138, col: 38, offset: 34215},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1138, col: 44, offset: 34221},
							run: (*parser).callonSidebarAsterisks8,
						},
					},
				},
			},
		},
		{
			name: "SidebarDelimiter",
			pos:  position{line: 1145, col: 1, offset: 34344},
			expr: &actionExpr{
				pos: position{line: 1145, col: 20, offset: 34363},
				run: (*parser).callonSidebarDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 20, offset: 34363},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1145, col: 20, offset: 34363},
							label: "asterisks",
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 31, offset: 34374},
								name: "SidebarAsterisks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1146, col: 5, offset: 34397},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "PreParse",
			pos:  position{line: 1152, col: 1, offset: 34527},
			expr: &actionExpr{
				pos: position{line: 1152, col: 12, offset: 34538},
				run: (*parser).callonPreParse1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 12, offset: 34538},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1152, col: 12, offset: 34538},
							label: "content",
							expr: &oneOrMoreExpr{
								pos: position{line: 1152, col: 20, offset: 34546},
								expr: &ruleRefExpr{
									pos:  position{line: 1152, col: 21, offset: 34547},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1152, col: 39, offset: 34565},
							name: "EndOfFile",
						},
					},
				},
			},
		},
		{
			name: "PreParseElement",
			pos:  position{line: 1156, col: 1, offset: 34622},
			expr: &actionExpr{
				pos: position{line: 1156, col: 19, offset: 34640},
				run: (*parser).callonPreParseElement1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 19, offset: 34640},
					exprs: []any{
						&notExpr{
							pos: position{line: 1156, col: 19, offset: 34640},
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 20, offset: 34641},
								name: "EndOfFile",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 30, offset: 34651},
							name: "BeginningOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 46, offset: 34667},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1156, col: 55, offset: 34676},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1156, col: 55, offset: 34676},
										name: "IfDefBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 68, offset: 34689},
										name: "IfNDefBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 82, offset: 34703},
										name: "IfEvalBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 96, offset: 34717},
										name: "AttributeEntry",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 113, offset: 34734},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 130, offset: 34751},
										name: "PreParseLine",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 144, offset: 34765},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "PreParseLine",
			pos:  position{line: 1160, col: 1, offset: 34804},
			expr: &actionExpr{
				pos: position{line: 1160, col: 16, offset: 34819},
				run: (*parser).callonPreParseLine1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 16, offset: 34819},
					exprs: []any{
						&notExpr{
							pos: position{line: 1160, col: 16, offset: 34819},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 17, offset: 34820},
								name: "EndIfDefStatement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 35, offset: 34838},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1160, col: 43, offset: 34846},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 43, offset: 34846},
									name: "PreParseLineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1160, col: 64, offset: 34867},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 65, offset: 34868},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "PreParseLineElement",
			pos:  position{line: 1164, col: 1, offset: 34955},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 34983},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 34983},
						run: (*parser).callonPreParseLineElement2,
						expr: &labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 34983},
							label: "arv",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 9, offset: 34987},
								name: "AttributeReference",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 6, offset: 35049},
						run: (*parser).callonPreParseLineElement5,
						expr: &oneOrMoreExpr{
							pos: position{line: 1169, col: 6, offset: 35049},
							expr: &charClassMatcher{
								pos:        position{line: 1169, col: 6, offset: 35049},
								val:        "[^\\r\\n{]",
								chars:      []rune{'\r', '\n', '{'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 8, offset: 35130},
						run: (*parser).callonPreParseLineElement8,
						expr: &litMatcher{
							pos:        position{line: 1172, col: 8, offset: 35130},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
					},
				},
			},
		},
		{
			name: "IfDefBlock",
			pos:  position{line: 1175, col: 1, offset: 35168},
			expr: &actionExpr{
				pos: position{line: 1175, col: 14, offset: 35181},
				run: (*parser).callonIfDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 14, offset: 35181},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1175, col: 14, offset: 35181},
							name: "IfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 29, offset: 35196},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 41, offset: 35208},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1175, col: 64, offset: 35231},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 69, offset: 35236},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 80, offset: 35247},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 90, offset: 35257},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1175, col: 96, offset: 35263},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 97, offset: 35264},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 116, offset: 35283},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "IfNDefBlock",
			pos:  position{line: 1180, col: 1, offset: 35471},
			expr: &actionExpr{
				pos: position{line: 1180, col: 15, offset: 35485},
				run: (*parser).callonIfNDefBlock1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 15, offset: 35485},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1180, col: 15, offset: 35485},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 26, offset: 35496},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 38, offset: 35508},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1180, col: 61, offset: 35531},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 66, offset: 35536},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 77, offset: 35547},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 87, offset: 35557},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1180, col: 93, offset: 35563},
								expr: &ruleRefExpr{
									pos:  position{line: 1180, col: 94, offset: 35564},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 113, offset: 35583},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "IfEvalBlock",
			pos:  position{line: 1185, col: 1, offset: 35773},
			expr: &actionExpr{
				pos: position{line: 1185, col: 15, offset: 35787},
				run: (*parser).callonIfEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 15, offset: 35787},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1185, col: 15, offset: 35787},
							name: "IfEvalStatement",
						},
						&litMatcher{
							pos:        position{line: 1185, col: 31, offset: 35803},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 35, offset: 35807},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 45, offset: 35817},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 51, offset: 35823},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 64, offset: 35836},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 75, offset: 35847},
							label: "operand",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 84, offset: 35856},
								name: "IfEvalOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 100, offset: 35872},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 110, offset: 35882},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 117, offset: 35889},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 130, offset: 35902},
							name: "AnySpaces",
						},
						&litMatcher{
							pos:        position{line: 1185, col: 140, offset: 35912},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 144, offset: 35916},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 155, offset: 35927},
							name: "EndOfLine",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 165, offset: 35937},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1185, col: 171, offset: 35943},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 172, offset: 35944},
									name: "PreParseElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 191, offset: 35963},
							name: "EndIfDef",
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 1192, col: 1, offset: 36184},
			expr: &actionExpr{
				pos: position{line: 1193, col: 5, offset: 36196},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 5, offset: 36196},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1193, col: 5, offset: 36196},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1193, col: 12, offset: 36203},
								name: "QuoteStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 5, offset: 36219},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1194, col: 11, offset: 36225},
								expr: &seqExpr{
									pos: position{line: 1194, col: 12, offset: 36226},
									exprs: []any{
										&notExpr{
											pos: position{line: 1194, col: 12, offset: 36226},
											expr: &ruleRefExpr{
												pos:  position{line: 1194, col: 13, offset: 36227},
												name: "QuoteDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1194, col: 28, offset: 36242},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 5, offset: 36256},
							name: "QuoteEnd",
						},
					},
				},
			},
		},
		{
			name: "QuoteStart",
			pos:  position{line: 1199, col: 1, offset: 36408},
			expr: &actionExpr{
				pos: position{line: 1199, col: 14, offset: 36421},
				run: (*parser).callonQuoteStart1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 14, offset: 36421},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1199, col: 14, offset: 36421},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 24, offset: 36431},
								name: "QuoteDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1199, col: 39, offset: 36446},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1199, col: 49, offset: 36456},
							run: (*parser).callonQuoteStart6,
						},
					},
				},
			},
		},
		{
			name: "QuoteEnd",
			pos:  position{line: 1206, col: 1, offset: 36631},
			expr: &seqExpr{
				pos: position{line: 1206, col: 12, offset: 36642},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1206, col: 12, offset: 36642},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 22, offset: 36652},
							name: "QuoteDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1206, col: 37, offset: 36667},
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 38, offset: 36668},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1206, col: 48, offset: 36678},
						run: (*parser).callonQuoteEnd6,
					},
				},
			},
		},
		{
			name: "QuoteUnderlines",
			pos:  position{line: 1215, col: 1, offset: 36930},
			expr: &actionExpr{
				pos: position{line: 1215, col: 19, offset: 36948},
				run: (*parser).callonQuoteUnderlines1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 19, offset: 36948},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1215, col: 19, offset: 36948},
							label: "underlines",
							expr: &seqExpr{
								pos: position{line: 1215, col: 31, offset: 36960},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1215, col: 31, offset: 36960},
										val:        "____",
										ignoreCase: false,
										want:       "\"____\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1215, col: 38, offset: 36967},
										expr: &litMatcher{
											pos:        position{line: 1215, col: 38, offset: 36967},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1215, col: 44, offset: 36973},
							run: (*parser).callonQuoteUnderlines8,
						},
					},
				},
			},
		},
		{
			name: "QuoteDelimiter",
			pos:  position{line: 1222, col: 1, offset: 37098},
			expr: &actionExpr{
				pos: position{line: 1222, col: 18, offset: 37115},
				run: (*parser).callonQuoteDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 18, offset: 37115},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1222, col: 18, offset: 37115},
							label: "underlines",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 30, offset: 37127},
								name: "QuoteUnderlines",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1223, col: 5, offset: 37149},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "ListItemValue",
			pos:  position{line: 1229, col: 1, offset: 37278},
			expr: &actionExpr{
				pos: position{line: 1229, col: 17, offset: 37294},
				run: (*parser).callonListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 17, offset: 37294},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1229, col: 17, offset: 37294},
							label: "line",
							expr: &oneOrMoreExpr{
								pos: position{line: 1229, col: 22, offset: 37299},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 22, offset: 37299},
									name: "InlineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1229, col: 37, offset: 37314},
							expr: &ruleRefExpr{
								pos:  position{line: 1229, col: 38, offset: 37315},
								name: "EndOfLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 48, offset: 37325},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1229, col: 54, offset: 37331},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 55, offset: 37332},
									name: "ListItemLine",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 70, offset: 37347},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1229, col: 85, offset: 37362},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 86, offset: 37363},
									name: "AttachedBlocks",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlock",
			pos:  position{line: 1240, col: 1, offset: 37595},
			expr: &actionExpr{
				pos: position{line: 1240, col: 17, offset: 37611},
				run: (*parser).callonAttachedBlock1,
				expr: &seqExpr{
					pos: position{line: 1240, col: 17, offset: 37611},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1240, col: 17, offset: 37611},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1240, col: 26, offset: 37620},
								name: "AttachedBlockElement",
							},
						},
						&andExpr{
							pos: position{line: 1240, col: 48, offset: 37642},
							expr: &ruleRefExpr{
								pos:  position{line: 1240, col: 49, offset: 37643},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlockElement",
			pos:  position{line: 1244, col: 1, offset: 37682},
			expr: &actionExpr{
				pos: position{line: 1244, col: 24, offset: 37705},
				run: (*parser).callonAttachedBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 24, offset: 37705},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1244, col: 24, offset: 37705},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 28, offset: 37709},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 38, offset: 37719},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 46, offset: 37727},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 53, offset: 37734},
								name: "BlockElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1248, col: 1, offset: 37822},
			expr: &actionExpr{
				pos: position{line: 1248, col: 20, offset: 37841},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 20, offset: 37841},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1248, col: 20, offset: 37841},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1248, col: 24, offset: 37845},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1248, col: 34, offset: 37855},
							name: "NewLine",
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 42, offset: 37863},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 48, offset: 37869},
								name: "BlockElement",
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemLine",
			pos:  position{line: 1252, col: 1, offset: 37965},
			expr: &actionExpr{
				pos: position{line: 1252, col: 16, offset: 37980},
				run: (*parser).callonListItemLine1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 16, offset: 37980},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1252, col: 16, offset: 37980},
							name: "EndOfLine",
						},
						&notExpr{
							pos: position{line: 1252, col: 26, offset: 37990},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 27, offset: 37991},
								name: "OrderedListMarker",
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 45, offset: 38009},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 46, offset: 38010},
								name: "UnorderedListMarker",
							},
						},
						&notExpr{
							pos: position{line: 1252, col: 66, offset: 38030},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 67, offset: 38031},
								name: "BlockDelimiters",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 84, offset: 38048},
							label: "element",
							expr: &oneOrMoreExpr{
								pos: position{line: 1252, col: 92, offset: 38056},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 92, offset: 38056},
									name: "InlineElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1252, col: 107, offset: 38071},
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 108, offset: 38072},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "AttachedBlocks",
			pos:  position{line: 1256, col: 1, offset: 38139},
			expr: &actionExpr{
				pos: position{line: 1256, col: 18, offset: 38156},
				run: (*parser).callonAttachedBlocks1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 18, offset: 38156},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1256, col: 18, offset: 38156},
							label: "blocks",
							expr: &oneOrMoreExpr{
								pos: position{line: 1256, col: 25, offset: 38163},
								expr: &ruleRefExpr{
									pos:  position{line: 1256, col: 26, offset: 38164},
									name: "AttachedBlockElement",
								},
							},
						},
						&andExpr{
							pos: position{line: 1256, col: 49, offset: 38187},
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 50, offset: 38188},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1261, col: 1, offset: 38227},
			expr: &actionExpr{
				pos: position{line: 1261, col: 17, offset: 38243},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 17, offset: 38243},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1261, col: 18, offset: 38244},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1261, col: 18, offset: 38244},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
								&seqExpr{
									pos: position{line: 1261, col: 26, offset: 38252},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 26, offset: 38252},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 30, offset: 38256},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 30, offset: 38256},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 33, offset: 38259},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 37, offset: 38263},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 37, offset: 38263},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 40, offset: 38266},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 46, offset: 38272},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 46, offset: 38272},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 50, offset: 38276},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 50, offset: 38276},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 53, offset: 38279},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 57, offset: 38283},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 57, offset: 38283},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 60, offset: 38286},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1261, col: 66, offset: 38292},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1261, col: 66, offset: 38292},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 70, offset: 38296},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 70, offset: 38296},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 73, offset: 38299},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 1261, col: 77, offset: 38303},
											expr: &ruleRefExpr{
												pos:  position{line: 1261, col: 77, offset: 38303},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 1261, col: 80, offset: 38306},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1261, col: 85, offset: 38311},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1261, col: 95, offset: 38321},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 96, offset: 38322},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "PageBreak",
			pos:  position{line: 1266, col: 1, offset: 38393},
			expr: &actionExpr{
				pos: position{line: 1266, col: 13, offset: 38405},
				run: (*parser).callonPageBreak1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 13, offset: 38405},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1266, col: 14, offset: 38406},
							val:        "<<<",
							ignoreCase: false,
							want:       "\"<<<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 21, offset: 38413},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1266, col: 31, offset: 38423},
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 32, offset: 38424},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "Fenced",
			pos:  position{line: 1271, col: 1, offset: 38491},
			expr: &actionExpr{
				pos: position{line: 1272, col: 5, offset: 38504},
				run: (*parser).callonFenced1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 5, offset: 38504},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1272, col: 5, offset: 38504},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 12, offset: 38511},
								name: "FencedStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 5, offset: 38528},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1273, col: 11, offset: 38534},
								expr: &seqExpr{
									pos: position{line: 1273, col: 12, offset: 38535},
									exprs: []any{
										&notExpr{
											pos: position{line: 1273, col: 12, offset: 38535},
											expr: &ruleRefExpr{
												pos:  position{line: 1273, col: 13, offset: 38536},
												name: "FencedDelimiter",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1273, col: 29, offset: 38552},
											name: "Element",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1274, col: 5, offset: 38566},
							name: "FencedEnd",
						},
					},
				},
			},
		},
		{
			name: "FencedStart",
			pos:  position{line: 1278, col: 1, offset: 38721},
			expr: &actionExpr{
				pos: position{line: 1278, col: 15, offset: 38735},
				run: (*parser).callonFencedStart1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 15, offset: 38735},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1278, col: 15, offset: 38735},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 25, offset: 38745},
								name: "FencedDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1278, col: 41, offset: 38761},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1278, col: 51, offset: 38771},
							run: (*parser).callonFencedStart6,
						},
					},
				},
			},
		},
		{
			name: "FencedEnd",
			pos:  position{line: 1285, col: 1, offset: 38955},
			expr: &seqExpr{
				pos: position{line: 1285, col: 13, offset: 38967},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1285, col: 13, offset: 38967},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1285, col: 23, offset: 38977},
							name: "FencedDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1285, col: 39, offset: 38993},
						expr: &ruleRefExpr{
							pos:  position{line: 1285, col: 40, offset: 38994},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1285, col: 50, offset: 39004},
						run: (*parser).callonFencedEnd6,
					},
				},
			},
		},
		{
			name: "FencedBackticks",
			pos:  position{line: 1294, col: 1, offset: 39270},
			expr: &actionExpr{
				pos: position{line: 1294, col: 19, offset: 39288},
				run: (*parser).callonFencedBackticks1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 19, offset: 39288},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1294, col: 19, offset: 39288},
							label: "backticks",
							expr: &seqExpr{
								pos: position{line: 1294, col: 30, offset: 39299},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1294, col: 30, offset: 39299},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1294, col: 36, offset: 39305},
										expr: &litMatcher{
											pos:        position{line: 1294, col: 36, offset: 39305},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1294, col: 42, offset: 39311},
							run: (*parser).callonFencedBackticks8,
						},
					},
				},
			},
		},
		{
			name: "FencedDelimiter",
			pos:  position{line: 1301, col: 1, offset: 39438},
			expr: &actionExpr{
				pos: position{line: 1301, col: 19, offset: 39456},
				run: (*parser).callonFencedDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 19, offset: 39456},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1301, col: 19, offset: 39456},
							label: "hyphens",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 28, offset: 39465},
								name: "FencedBackticks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1302, col: 5, offset: 39487},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "FencedLine",
			pos:  position{line: 1307, col: 1, offset: 39617},
			expr: &actionExpr{
				pos: position{line: 1307, col: 14, offset: 39630},
				run: (*parser).callonFencedLine1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 15, offset: 39631},
					exprs: []any{
						&notExpr{
							pos: position{line: 1307, col: 15, offset: 39631},
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 16, offset: 39632},
								name: "FencedDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 32, offset: 39648},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 45, offset: 39661},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 50, offset: 39666},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 58, offset: 39674},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Stem",
			pos:  position{line: 1313, col: 1, offset: 39722},
			expr: &actionExpr{
				pos: position{line: 1314, col: 5, offset: 39733},
				run: (*parser).callonStem1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 5, offset: 39733},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1314, col: 5, offset: 39733},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 12, offset: 39740},
								name: "StemStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 5, offset: 39755},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1315, col: 11, offset: 39761},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 12, offset: 39762},
									name: "StemLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1316, col: 5, offset: 39777},
							name: "StemEnd",
						},
					},
				},
			},
		},
		{
			name: "StemStart",
			pos:  position{line: 1320, col: 1, offset: 39936},
			expr: &actionExpr{
				pos: position{line: 1320, col: 13, offset: 39948},
				run: (*parser).callonStemStart1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 13, offset: 39948},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1320, col: 13, offset: 39948},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 23, offset: 39958},
								name: "StemDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1320, col: 37, offset: 39972},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1320, col: 47, offset: 39982},
							run: (*parser).callonStemStart6,
						},
					},
				},
			},
		},
		{
			name: "StemEnd",
			pos:  position{line: 1327, col: 1, offset: 40156},
			expr: &seqExpr{
				pos: position{line: 1327, col: 11, offset: 40166},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1327, col: 11, offset: 40166},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 21, offset: 40176},
							name: "StemDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1327, col: 35, offset: 40190},
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 36, offset: 40191},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1327, col: 46, offset: 40201},
						run: (*parser).callonStemEnd6,
					},
				},
			},
		},
		{
			name: "StemPluses",
			pos:  position{line: 1336, col: 1, offset: 40455},
			expr: &actionExpr{
				pos: position{line: 1336, col: 14, offset: 40468},
				run: (*parser).callonStemPluses1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 14, offset: 40468},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1336, col: 14, offset: 40468},
							label: "pluses",
							expr: &seqExpr{
								pos: position{line: 1336, col: 22, offset: 40476},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1336, col: 22, offset: 40476},
										val:        "++++",
										ignoreCase: false,
										want:       "\"++++\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1336, col: 29, offset: 40483},
										expr: &litMatcher{
											pos:        position{line: 1336, col: 29, offset: 40483},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1336, col: 35, offset: 40489},
							run: (*parser).callonStemPluses8,
						},
					},
				},
			},
		},
		{
			name: "StemDelimiter",
			pos:  position{line: 1343, col: 1, offset: 40606},
			expr: &actionExpr{
				pos: position{line: 1343, col: 17, offset: 40622},
				run: (*parser).callonStemDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 17, offset: 40622},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1343, col: 17, offset: 40622},
							label: "pluses",
							expr: &ruleRefExpr{
								pos:  position{line: 1343, col: 25, offset: 40630},
								name: "StemPluses",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1344, col: 5, offset: 40647},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "StemLine",
			pos:  position{line: 1349, col: 1, offset: 40770},
			expr: &actionExpr{
				pos: position{line: 1349, col: 12, offset: 40781},
				run: (*parser).callonStemLine1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 13, offset: 40782},
					exprs: []any{
						&notExpr{
							pos: position{line: 1349, col: 13, offset: 40782},
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 14, offset: 40783},
								name: "StemDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 28, offset: 40797},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 41, offset: 40810},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 46, offset: 40815},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 54, offset: 40823},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1357, col: 1, offset: 40873},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 18, offset: 40890},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1357, col: 18, offset: 40890},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 43, offset: 40915},
						name: "DocumentCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1359, col: 1, offset: 40939},
			expr: &actionExpr{
				pos: position{line: 1359, col: 26, offset: 40964},
				run: (*parser).callonInternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1359, col: 26, offset: 40964},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1359, col: 26, offset: 40964},
							name: "CrossReferenceStart",
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 46, offset: 40984},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 50, offset: 40988},
								name: "CrossReferenceID",
							},
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 68, offset: 41006},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 1359, col: 74, offset: 41012},
								expr: &actionExpr{
									pos: position{line: 1359, col: 75, offset: 41013},
									run: (*parser).callonInternalCrossReference8,
									expr: &seqExpr{
										pos: position{line: 1359, col: 75, offset: 41013},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1359, col: 75, offset: 41013},
												name: "AnySpaces",
											},
											&litMatcher{
												pos:        position{line: 1359, col: 85, offset: 41023},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 1359, col: 89, offset: 41027},
												label: "label",
												expr: &seqExpr{
													pos: position{line: 1359, col: 96, offset: 41034},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 1359, col: 96, offset: 41034},
															name: "AnySpaces",
														},
														&ruleRefExpr{
															pos:  position{line: 1359, col: 106, offset: 41044},
															name: "CrossReferenceLabel",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1359, col: 150, offset: 41088},
							val:        ">>",
							ignoreCase: false,
							want:       "\">>\"",
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceStart",
			pos:  position{line: 1367, col: 1, offset: 41292},
			expr: &litMatcher{
				pos:        position{line: 1367, col: 23, offset: 41314},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
		},
		{
			name: "CrossReferenceID",
			pos:  position{line: 1369, col: 1, offset: 41321},
			expr: &actionExpr{
				pos: position{line: 1369, col: 21, offset: 41341},
				run: (*parser).callonCrossReferenceID1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 21, offset: 41341},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1369, col: 22, offset: 41342},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1369, col: 22, offset: 41342},
									name: "Alpha",
								},
								&charClassMatcher{
									pos:        position{line: 1369, col: 30, offset: 41350},
									val:        "[:_]",
									chars:      []rune{':', '_'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1369, col: 36, offset: 41356},
							expr: &charClassMatcher{
								pos:        position{line: 1369, col: 36, offset: 41356},
								val:        "[\\p{L}\\p{N} _:.-]",
								chars:      []rune{' ', '_', ':', '.', '-'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1374, col: 1, offset: 41508},
			expr: &oneOrMoreExpr{
				pos: position{line: 1374, col: 23, offset: 41530},
				expr: &choiceExpr{
					pos: position{line: 1375, col: 5, offset: 41536},
					alternatives: []any{
						&actionExpr{
							pos: position{line: 1375, col: 6, offset: 41537},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &oneOrMoreExpr{
								pos: position{line: 1375, col: 6, offset: 41537},
								expr: &charClassMatcher{
									pos:        position{line: 1375, col: 6, offset: 41537},
									val:        "[^<>{[\\]]",
									chars:      []rune{'<', '>', '{', '[', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&actionExpr{
							pos: position{line: 1378, col: 7, offset: 41618},
							run: (*parser).callonCrossReferenceLabel6,
							expr: &labeledExpr{
								pos:   position{line: 1378, col: 7, offset: 41618},
								label: "arv",
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 11, offset: 41622},
									name: "AttributeReference",
								},
							},
						},
						&actionExpr{
							pos: position{line: 1381, col: 8, offset: 41680},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1381, col: 8, offset: 41680},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentCrossReference",
			pos:  position{line: 1384, col: 1, offset: 41719},
			expr: &actionExpr{
				pos: position{line: 1384, col: 26, offset: 41744},
				run: (*parser).callonDocumentCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 26, offset: 41744},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1384, col: 26, offset: 41744},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 34, offset: 41752},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 40, offset: 41758},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 46, offset: 41764},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 58, offset: 41776},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRoman",
			pos:  position{line: 1391, col: 1, offset: 41942},
			expr: &actionExpr{
				pos: position{line: 1391, col: 18, offset: 41959},
				run: (*parser).callonUppercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 18, offset: 41959},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1391, col: 18, offset: 41959},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1391, col: 28, offset: 41969},
								expr: &litMatcher{
									pos:        position{line: 1391, col: 28, offset: 41969},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 33, offset: 41974},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 42, offset: 41983},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 42, offset: 41983},
									name: "UppercaseRomanHundreds",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 66, offset: 42007},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 71, offset: 42012},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 72, offset: 42013},
									name: "UppercaseRomanTens",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 93, offset: 42034},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 98, offset: 42039},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 99, offset: 42040},
									name: "UppercaseRomanOnes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1391, col: 120, offset: 42061},
							run: (*parser).callonUppercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanHundreds",
			pos:  position{line: 1398, col: 1, offset: 42185},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 5, offset: 42216},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 42216},
						val:        "CM",
						ignoreCase: false,
						want:       "\"CM\"",
					},
					&litMatcher{
						pos:        position{line: 1400, col: 7, offset: 42227},
						val:        "CD",
						ignoreCase: false,
						want:       "\"CD\"",
					},
					&seqExpr{
						pos: position{line: 1401, col: 8, offset: 42239},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1401, col: 8, offset: 42239},
								val:        "D",
								ignoreCase: false,
								want:       "\"D\"",
							},
							&labeledExpr{
								pos:   position{line: 1401, col: 12, offset: 42243},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1401, col: 21, offset: 42252},
									expr: &litMatcher{
										pos:        position{line: 1401, col: 21, offset: 42252},
										val:        "C",
										ignoreCase: false,
										want:       "\"C\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1401, col: 26, offset: 42257},
								run: (*parser).callonUppercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanTens",
			pos:  position{line: 1404, col: 1, offset: 42303},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 5, offset: 42330},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 42330},
						val:        "XC",
						ignoreCase: false,
						want:       "\"XC\"",
					},
					&litMatcher{
						pos:        position{line: 1406, col: 7, offset: 42341},
						val:        "XL",
						ignoreCase: false,
						want:       "\"XL\"",
					},
					&seqExpr{
						pos: position{line: 1407, col: 8, offset: 42353},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1407, col: 8, offset: 42353},
								expr: &litMatcher{
									pos:        position{line: 1407, col: 8, offset: 42353},
									val:        "L",
									ignoreCase: false,
									want:       "\"L\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1407, col: 13, offset: 42358},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1407, col: 18, offset: 42363},
									expr: &litMatcher{
										pos:        position{line: 1407, col: 18, offset: 42363},
										val:        "X",
										ignoreCase: false,
										want:       "\"X\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1407, col: 23, offset: 42368},
								run: (*parser).callonUppercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "UppercaseRomanOnes",
			pos:  position{line: 1410, col: 1, offset: 42410},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 42437},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1411, col: 5, offset: 42437},
						val:        "IX",
						ignoreCase: false,
						want:       "\"IX\"",
					},
					&litMatcher{
						pos:        position{line: 1412, col: 7, offset: 42448},
						val:        "IV",
						ignoreCase: false,
						want:       "\"IV\"",
					},
					&seqExpr{
						pos: position{line: 1413, col: 8, offset: 42460},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1413, col: 8, offset: 42460},
								expr: &litMatcher{
									pos:        position{line: 1413, col: 8, offset: 42460},
									val:        "V",
									ignoreCase: false,
									want:       "\"V\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1413, col: 13, offset: 42465},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1413, col: 18, offset: 42470},
									expr: &litMatcher{
										pos:        position{line: 1413, col: 18, offset: 42470},
										val:        "I",
										ignoreCase: false,
										want:       "\"I\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1413, col: 23, offset: 42475},
								run: (*parser).callonUppercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRoman",
			pos:  position{line: 1416, col: 1, offset: 42517},
			expr: &actionExpr{
				pos: position{line: 1416, col: 18, offset: 42534},
				run: (*parser).callonLowercaseRoman1,
				expr: &seqExpr{
					pos: position{line: 1416, col: 18, offset: 42534},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1416, col: 18, offset: 42534},
							label: "thousands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1416, col: 28, offset: 42544},
								expr: &litMatcher{
									pos:        position{line: 1416, col: 28, offset: 42544},
									val:        "m",
									ignoreCase: false,
									want:       "\"m\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 33, offset: 42549},
							label: "hundreds",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 42, offset: 42558},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 42, offset: 42558},
									name: "LowercaseRomanHundreds",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 66, offset: 42582},
							label: "tens",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 71, offset: 42587},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 72, offset: 42588},
									name: "LowercaseRomanTens",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 93, offset: 42609},
							label: "ones",
							expr: &zeroOrOneExpr{
								pos: position{line: 1416, col: 98, offset: 42614},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 99, offset: 42615},
									name: "LowercaseRomanOnes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1416, col: 120, offset: 42636},
							run: (*parser).callonLowercaseRoman15,
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanHundreds",
			pos:  position{line: 1423, col: 1, offset: 42760},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 5, offset: 42791},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 42791},
						val:        "cm",
						ignoreCase: false,
						want:       "\"cm\"",
					},
					&litMatcher{
						pos:        position{line: 1425, col: 7, offset: 42802},
						val:        "cd",
						ignoreCase: false,
						want:       "\"cd\"",
					},
					&seqExpr{
						pos: position{line: 1426, col: 8, offset: 42814},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1426, col: 8, offset: 42814},
								val:        "d",
								ignoreCase: false,
								want:       "\"d\"",
							},
							&labeledExpr{
								pos:   position{line: 1426, col: 12, offset: 42818},
								label: "hundreds",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1426, col: 21, offset: 42827},
									expr: &litMatcher{
										pos:        position{line: 1426, col: 21, offset: 42827},
										val:        "c",
										ignoreCase: false,
										want:       "\"c\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1426, col: 26, offset: 42832},
								run: (*parser).callonLowercaseRomanHundreds9,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanTens",
			pos:  position{line: 1429, col: 1, offset: 42878},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 5, offset: 42905},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1430, col: 5, offset: 42905},
						val:        "xc",
						ignoreCase: false,
						want:       "\"xc\"",
					},
					&litMatcher{
						pos:        position{line: 1431, col: 7, offset: 42916},
						val:        "xl",
						ignoreCase: false,
						want:       "\"xl\"",
					},
					&seqExpr{
						pos: position{line: 1432, col: 8, offset: 42928},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1432, col: 8, offset: 42928},
								expr: &litMatcher{
									pos:        position{line: 1432, col: 8, offset: 42928},
									val:        "l",
									ignoreCase: false,
									want:       "\"l\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1432, col: 13, offset: 42933},
								label: "tens",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1432, col: 18, offset: 42938},
									expr: &litMatcher{
										pos:        position{line: 1432, col: 18, offset: 42938},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1432, col: 23, offset: 42943},
								run: (*parser).callonLowercaseRomanTens10,
							},
						},
					},
				},
			},
		},
		{
			name: "LowercaseRomanOnes",
			pos:  position{line: 1435, col: 1, offset: 42985},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 5, offset: 43012},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1436, col: 5, offset: 43012},
						val:        "ix",
						ignoreCase: false,
						want:       "\"ix\"",
					},
					&litMatcher{
						pos:        position{line: 1437, col: 7, offset: 43023},
						val:        "iv",
						ignoreCase: false,
						want:       "\"iv\"",
					},
					&seqExpr{
						pos: position{line: 1438, col: 8, offset: 43035},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1438, col: 8, offset: 43035},
								expr: &litMatcher{
									pos:        position{line: 1438, col: 8, offset: 43035},
									val:        "v",
									ignoreCase: false,
									want:       "\"v\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 1438, col: 13, offset: 43040},
								label: "ones",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1438, col: 18, offset: 43045},
									expr: &litMatcher{
										pos:        position{line: 1438, col: 18, offset: 43045},
										val:        "i",
										ignoreCase: false,
										want:       "\"i\"",
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1438, col: 23, offset: 43050},
								run: (*parser).callonLowercaseRomanOnes10,
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 1443, col: 1, offset: 43094},
			expr: &actionExpr{
				pos: position{line: 1443, col: 19, offset: 43112},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 19, offset: 43112},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1443, col: 19, offset: 43112},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 27, offset: 43120},
								name: "OrderedListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 47, offset: 43140},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 54, offset: 43147},
								name: "ListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListMarker",
			pos:  position{line: 1449, col: 1, offset: 43336},
			expr: &actionExpr{
				pos: position{line: 1449, col: 21, offset: 43356},
				run: (*parser).callonOrderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1449, col: 21, offset: 43356},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1449, col: 21, offset: 43356},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 1449, col: 29, offset: 43364},
								name: "AnySpaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 1449, col: 40, offset: 43375},
							label: "marker",
							expr: &choiceExpr{
								pos: position{line: 1449, col: 48, offset: 43383},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1449, col: 48, offset: 43383},
										run: (*parser).callonOrderedListMarker7,
										expr: &seqExpr{
											pos: position{line: 1449, col: 48, offset: 43383},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1449, col: 48, offset: 43383},
													label: "ordinal",
													expr: &actionExpr{
														pos: position{line: 1449, col: 57, offset: 43392},
														run: (*parser).callonOrderedListMarker10,
														expr: &oneOrMoreExpr{
															pos: position{line: 1449, col: 58, offset: 43393},
															expr: &litMatcher{
																pos:        position{line: 1449, col: 58, offset: 43393},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1451, col: 4, offset: 43439},
													run: (*parser).callonOrderedListMarker13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1457, col: 3, offset: 43533},
										run: (*parser).callonOrderedListMarker14,
										expr: &seqExpr{
											pos: position{line: 1457, col: 3, offset: 43533},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 1457, col: 3, offset: 43533},
													expr: &charClassMatcher{
														pos:        position{line: 1457, col: 3, offset: 43533},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 1457, col: 10, offset: 43540},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1458, col: 3, offset: 43577},
										run: (*parser).callonOrderedListMarker19,
										expr: &seqExpr{
											pos: position{line: 1458, col: 3, offset: 43577},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1458, col: 3, offset: 43577},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1458, col: 9, offset: 43583},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1459, col: 3, offset: 43620},
										run: (*parser).callonOrderedListMarker23,
										expr: &seqExpr{
											pos: position{line: 1459, col: 3, offset: 43620},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1459, col: 3, offset: 43620},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 1459, col: 9, offset: 43626},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1460, col: 3, offset: 43663},
										run: (*parser).callonOrderedListMarker27,
										expr: &seqExpr{
											pos: position{line: 1460, col: 3, offset: 43663},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1460, col: 3, offset: 43663},
													name: "LowercaseRoman",
												},
												&litMatcher{
													pos:        position{line: 1460, col: 18, offset: 43678},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1461, col: 3, offset: 43715},
										run: (*parser).callonOrderedListMarker31,
										expr: &seqExpr{
											pos: position{line: 1461, col: 3, offset: 43715},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1461, col: 3, offset: 43715},
													name: "UppercaseRoman",
												},
												&litMatcher{
													pos:        position{line: 1461, col: 18, offset: 43730},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 1, offset: 43767},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 1471, col: 1, offset: 43858},
			expr: &actionExpr{
				pos: position{line: 1471, col: 21, offset: 43878},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 21, offset: 43878},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1471, col: 21, offset: 43878},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 29, offset: 43886},
								name: "UnorderedListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 50, offset: 43907},
							label: "checklist",
							expr: &zeroOrOneExpr{
								pos: position{line: 1471, col: 60, offset: 43917},
								expr: &ruleRefExpr{
									pos:  position{line: 1471, col: 61, offset: 43918},
									name: "Checklist",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 73, offset: 43930},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 80, offset: 43937},
								name: "ListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListMarker",
			pos:  position{line: 1478, col: 1, offset: 44176},
			expr: &actionExpr{
				pos: position{line: 1478, col: 23, offset: 44198},
				run: (*parser).callonUnorderedListMarker1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 23, offset: 44198},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1478, col: 23, offset: 44198},
							label: "indent",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 31, offset: 44206},
								name: "AnySpaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 42, offset: 44217},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1478, col: 50, offset: 44225},
								run: (*parser).callonUnorderedListMarker6,
								expr: &choiceExpr{
									pos: position{line: 1478, col: 51, offset: 44226},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 51, offset: 44226},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 51, offset: 44226},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1478, col: 58, offset: 44233},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 58, offset: 44233},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1480, col: 4, offset: 44275},
							run: (*parser).callonUnorderedListMarker12,
						},
						&ruleRefExpr{
							pos:  position{line: 1483, col: 1, offset: 44323},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Checklist",
			pos:  position{line: 1489, col: 1, offset: 44408},
			expr: &actionExpr{
				pos: position{line: 1489, col: 13, offset: 44420},
				run: (*parser).callonChecklist1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 13, offset: 44420},
					exprs: []any{
						&andExpr{
							pos: position{line: 1489, col: 13, offset: 44420},
							expr: &litMatcher{
								pos:        position{line: 1489, col: 14, offset: 44421},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 1, offset: 44426},
							label: "checklist",
							expr: &choiceExpr{
								pos: position{line: 1491, col: 7, offset: 44444},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1491, col: 7, offset: 44444},
										run: (*parser).callonChecklist7,
										expr: &litMatcher{
											pos:        position{line: 1491, col: 7, offset: 44444},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1492, col: 7, offset: 44501},
										run: (*parser).callonChecklist9,
										expr: &litMatcher{
											pos:        position{line: 1492, col: 7, offset: 44501},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 1493, col: 7, offset: 44556},
										run: (*parser).callonChecklist11,
										expr: &litMatcher{
											pos:        position{line: 1493, col: 7, offset: 44556},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 7, offset: 44610},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItem",
			pos:  position{line: 1499, col: 1, offset: 44653},
			expr: &actionExpr{
				pos: position{line: 1499, col: 23, offset: 44675},
				run: (*parser).callonDescriptionListItem1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 23, offset: 44675},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1499, col: 23, offset: 44675},
							label: "inlineAnchor",
							expr: &zeroOrOneExpr{
								pos: position{line: 1499, col: 36, offset: 44688},
								expr: &ruleRefExpr{
									pos:  position{line: 1499, col: 37, offset: 44689},
									name: "AnchorAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 55, offset: 44707},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 61, offset: 44713},
								name: "DescriptionListTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 82, offset: 44734},
							label: "marker",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 90, offset: 44742},
								name: "DescriptionListMarker",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 113, offset: 44765},
							label: "whitespace",
							expr: &oneOrMoreExpr{
								pos: position{line: 1499, col: 124, offset: 44776},
								expr: &choiceExpr{
									pos: position{line: 1499, col: 125, offset: 44777},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1499, col: 125, offset: 44777},
											run: (*parser).callonDescriptionListItem13,
											expr: &ruleRefExpr{
												pos:  position{line: 1499, col: 125, offset: 44777},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1499, col: 180, offset: 44832},
											name: "NewLine",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 190, offset: 44842},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 197, offset: 44849},
								name: "DescriptionListItemValue",
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListTerm",
			pos:  position{line: 1510, col: 1, offset: 45361},
			expr: &actionExpr{
				pos: position{line: 1510, col: 23, offset: 45383},
				run: (*parser).callonDescriptionListTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1510, col: 23, offset: 45383},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 1510, col: 28, offset: 45388},
						expr: &seqExpr{
							pos: position{line: 1510, col: 29, offset: 45389},
							exprs: []any{
								&notExpr{
									pos: position{line: 1510, col: 29, offset: 45389},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 30, offset: 45390},
										name: "DescriptionListMarker",
									},
								},
								&notExpr{
									pos: position{line: 1510, col: 52, offset: 45412},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 53, offset: 45413},
										name: "EndOfLine",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1510, col: 63, offset: 45423},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DescriptionListMarker",
			pos:  position{line: 1514, col: 1, offset: 45479},
			expr: &actionExpr{
				pos: position{line: 1514, col: 25, offset: 45503},
				run: (*parser).callonDescriptionListMarker1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 25, offset: 45503},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1514, col: 25, offset: 45503},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 35, offset: 45513},
							label: "marker",
							expr: &actionExpr{
								pos: position{line: 1514, col: 43, offset: 45521},
								run: (*parser).callonDescriptionListMarker5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1514, col: 43, offset: 45521},
									expr: &choiceExpr{
										pos: position{line: 1514, col: 44, offset: 45522},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1514, col: 44, offset: 45522},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&litMatcher{
												pos:        position{line: 1514, col: 50, offset: 45528},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1516, col: 4, offset: 45570},
							run: (*parser).callonDescriptionListMarker10,
						},
						&ruleRefExpr{
							pos:  position{line: 1523, col: 1, offset: 45697},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "DescriptionListItemValue",
			pos:  position{line: 1528, col: 1, offset: 45744},
			expr: &actionExpr{
				pos: position{line: 1528, col: 28, offset: 45771},
				run: (*parser).callonDescriptionListItemValue1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 28, offset: 45771},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1528, col: 28, offset: 45771},
							label: "line",
							expr: &choiceExpr{
								pos: position{line: 1528, col: 34, offset: 45777},
								alternatives: []any{
									&oneOrMoreExpr{
										pos: position{line: 1528, col: 34, offset: 45777},
										expr: &ruleRefExpr{
											pos:  position{line: 1528, col: 34, offset: 45777},
											name: "InlineElement",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1528, col: 51, offset: 45794},
										name: "BlockElement",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 65, offset: 45808},
							label: "attachedBlocks",
							expr: &zeroOrOneExpr{
								pos: position{line: 1528, col: 80, offset: 45823},
								expr: &ruleRefExpr{
									pos:  position{line: 1528, col: 81, offset: 45824},
									name: "AttachedBlocks",
								},
							},
						},
						&andExpr{
							pos: position{line: 1528, col: 99, offset: 45842},
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 100, offset: 45843},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1537, col: 1, offset: 46004},
			expr: &actionExpr{
				pos: position{line: 1537, col: 21, offset: 46024},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 21, offset: 46024},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1537, col: 21, offset: 46024},
							name: "SingleLineCommentDelimiter",
						},
						&notExpr{
							pos: position{line: 1537, col: 48, offset: 46051},
							expr: &litMatcher{
								pos:        position{line: 1537, col: 49, offset: 46052},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 54, offset: 46057},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 63, offset: 46066},
								name: "SingleLineCommentContent",
							},
						},
						&andExpr{
							pos: position{line: 1537, col: 89, offset: 46092},
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 90, offset: 46093},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentDelimiter",
			pos:  position{line: 1541, col: 1, offset: 46183},
			expr: &actionExpr{
				pos: position{line: 1541, col: 30, offset: 46212},
				run: (*parser).callonSingleLineCommentDelimiter1,
				expr: &litMatcher{
					pos:        position{line: 1541, col: 30, offset: 46212},
					val:        "//",
					ignoreCase: false,
					want:       "\"//\"",
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1545, col: 1, offset: 46257},
			expr: &actionExpr{
				pos: position{line: 1545, col: 28, offset: 46284},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1545, col: 28, offset: 46284},
					expr: &charClassMatcher{
						pos:        position{line: 1545, col: 28, offset: 46284},
						val:        "[^\\n]",
						chars:      []rune{'\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1549, col: 1, offset: 46331},
			expr: &actionExpr{
				pos: position{line: 1550, col: 5, offset: 46354},
				run: (*parser).callonMultiLineComment1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 5, offset: 46354},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1550, col: 5, offset: 46354},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 12, offset: 46361},
								name: "MultiLineCommentStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 5, offset: 46388},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1551, col: 11, offset: 46394},
								expr: &ruleRefExpr{
									pos:  position{line: 1551, col: 12, offset: 46395},
									name: "MultiLineCommentLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1552, col: 5, offset: 46422},
							name: "MultiLineCommentEnd",
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentStart",
			pos:  position{line: 1556, col: 1, offset: 46607},
			expr: &actionExpr{
				pos: position{line: 1556, col: 25, offset: 46631},
				run: (*parser).callonMultiLineCommentStart1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 25, offset: 46631},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1556, col: 25, offset: 46631},
							label: "delimiter",
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 35, offset: 46641},
								name: "MultiLineCommentDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1556, col: 61, offset: 46667},
							name: "EndOfLine",
						},
						&andCodeExpr{
							pos: position{line: 1556, col: 72, offset: 46678},
							run: (*parser).callonMultiLineCommentStart6,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentEnd",
			pos:  position{line: 1563, col: 1, offset: 46868},
			expr: &seqExpr{
				pos: position{line: 1563, col: 23, offset: 46890},
				exprs: []any{
					&labeledExpr{
						pos:   position{line: 1563, col: 23, offset: 46890},
						label: "delimiter",
						expr: &ruleRefExpr{
							pos:  position{line: 1563, col: 33, offset: 46900},
							name: "MultiLineCommentDelimiter",
						},
					},
					&andExpr{
						pos: position{line: 1563, col: 59, offset: 46926},
						expr: &ruleRefExpr{
							pos:  position{line: 1563, col: 60, offset: 46927},
							name: "EndOfLine",
						},
					},
					&andCodeExpr{
						pos: position{line: 1563, col: 70, offset: 46937},
						run: (*parser).callonMultiLineCommentEnd6,
					},
				},
			},
		},
		{
			name: "MultiLineCommentForwardSlashes",
			pos:  position{line: 1572, col: 1, offset: 47223},
			expr: &actionExpr{
				pos: position{line: 1572, col: 34, offset: 47256},
				run: (*parser).callonMultiLineCommentForwardSlashes1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 34, offset: 47256},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1572, col: 34, offset: 47256},
							label: "forwardSlashes",
							expr: &seqExpr{
								pos: position{line: 1572, col: 50, offset: 47272},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1572, col: 50, offset: 47272},
										val:        "////",
										ignoreCase: false,
										want:       "\"////\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1572, col: 57, offset: 47279},
										expr: &litMatcher{
											pos:        position{line: 1572, col: 57, offset: 47279},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1572, col: 63, offset: 47285},
							run: (*parser).callonMultiLineCommentForwardSlashes8,
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentDelimiter",
			pos:  position{line: 1579, col: 1, offset: 47430},
			expr: &actionExpr{
				pos: position{line: 1579, col: 29, offset: 47458},
				run: (*parser).callonMultiLineCommentDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 29, offset: 47458},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1579, col: 29, offset: 47458},
							label: "forwardSlashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1579, col: 45, offset: 47474},
								name: "MultiLineCommentForwardSlashes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1580, col: 5, offset: 47511},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "MultiLineCommentLine",
			pos:  position{line: 1585, col: 1, offset: 47662},
			expr: &actionExpr{
				pos: position{line: 1585, col: 24, offset: 47685},
				run: (*parser).callonMultiLineCommentLine1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 25, offset: 47686},
					exprs: []any{
						&notExpr{
							pos: position{line: 1585, col: 25, offset: 47686},
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 26, offset: 47687},
								name: "MultiLineCommentDelimiter",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 52, offset: 47713},
							name: "NotEndOfFile",
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 65, offset: 47726},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 70, offset: 47731},
								name: "AnyText",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 78, offset: 47739},
							name: "EndOfLine",
						},
					},
				},
			},
		},
		{
			name: "Counter",
			pos:  position{line: 1591, col: 1, offset: 47787},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 11, offset: 47797},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1591, col: 11, offset: 47797},
						name: "CounterIncrement",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 30, offset: 47816},
						name: "CounterSilentIncrement",
					},
				},
			},
		},
		{
			name: "CounterIncrement",
			pos:  position{line: 1593, col: 1, offset: 47840},
			expr: &actionExpr{
				pos: position{line: 1593, col: 20, offset: 47859},
				run: (*parser).callonCounterIncrement1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 20, offset: 47859},
					exprs: []any{
						&notExpr{
							pos: position{line: 1593, col: 20, offset: 47859},
							expr: &litMatcher{
								pos:        position{line: 1593, col: 21, offset: 47860},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 26, offset: 47865},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 38, offset: 47877},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 43, offset: 47882},
								name: "AttributeEntryName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 62, offset: 47901},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1593, col: 75, offset: 47914},
								expr: &ruleRefExpr{
									pos:  position{line: 1593, col: 76, offset: 47915},
									name: "CounterInitialValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 98, offset: 47937},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSilentIncrement",
			pos:  position{line: 1597, col: 1, offset: 48038},
			expr: &actionExpr{
				pos: position{line: 1597, col: 26, offset: 48063},
				run: (*parser).callonCounterSilentIncrement1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 26, offset: 48063},
					exprs: []any{
						&notExpr{
							pos: position{line: 1597, col: 26, offset: 48063},
							expr: &litMatcher{
								pos:        position{line: 1597, col: 27, offset: 48064},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 32, offset: 48069},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 45, offset: 48082},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 50, offset: 48087},
								name: "AttributeEntryName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 69, offset: 48106},
							label: "initialValue",
							expr: &zeroOrOneExpr{
								pos: position{line: 1597, col: 82, offset: 48119},
								expr: &ruleRefExpr{
									pos:  position{line: 1597, col: 83, offset: 48120},
									name: "CounterInitialValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 105, offset: 48142},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterInitialValue",
			pos:  position{line: 1601, col: 1, offset: 48244},
			expr: &actionExpr{
				pos: position{line: 1601, col: 23, offset: 48266},
				run: (*parser).callonCounterInitialValue1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 23, offset: 48266},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1601, col: 23, offset: 48266},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 27, offset: 48270},
							label: "initializer",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 40, offset: 48283},
								name: "CounterInitializer",
							},
						},
					},
				},
			},
		},
		{
			name: "CounterInitializer",
			pos:  position{line: 1605, col: 1, offset: 48336},
			expr: &choiceExpr{
				pos: position{line: 1605, col: 23, offset: 48358},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1605, col: 23, offset: 48358},
						run: (*parser).callonCounterInitializer2,
						expr: &charClassMatcher{
							pos:        position{line: 1605, col: 23, offset: 48358},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 1608, col: 7, offset: 48414},
						run: (*parser).callonCounterInitializer4,
						expr: &oneOrMoreExpr{
							pos: position{line: 1608, col: 7, offset: 48414},
							expr: &charClassMatcher{
								pos:        position{line: 1608, col: 7, offset: 48414},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1615, col: 1, offset: 48480},
			expr: &actionExpr{
				pos: position{line: 1615, col: 21, offset: 48500},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 21, offset: 48500},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1615, col: 21, offset: 48500},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 32, offset: 48511},
								expr: &ruleRefExpr{
									pos:  position{line: 1615, col: 33, offset: 48512},
									name: "FormatAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 53, offset: 48532},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1615, col: 59, offset: 48538},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1615, col: 59, offset: 48538},
										name: "InlineSinglePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1615, col: 85, offset: 48564},
										name: "InlineDoublePassthrough",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineSinglePassthrough",
			pos:  position{line: 1619, col: 1, offset: 48710},
			expr: &actionExpr{
				pos: position{line: 1619, col: 27, offset: 48736},
				run: (*parser).callonInlineSinglePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 27, offset: 48736},
					exprs: []any{
						&notExpr{
							pos: position{line: 1619, col: 27, offset: 48736},
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 28, offset: 48737},
								name: "Escape",
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 35, offset: 48744},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&andExpr{
							pos: position{line: 1619, col: 39, offset: 48748},
							expr: &notExpr{
								pos: position{line: 1619, col: 41, offset: 48750},
								expr: &litMatcher{
									pos:        position{line: 1619, col: 42, offset: 48751},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 47, offset: 48756},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 54, offset: 48763},
								name: "SinglePassthroughTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1619, col: 82, offset: 48791},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&notExpr{
							pos: position{line: 1619, col: 86, offset: 48795},
							expr: &litMatcher{
								pos:        position{line: 1619, col: 87, offset: 48796},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
						},
						&andExpr{
							pos: position{line: 1619, col: 91, offset: 48800},
							expr: &notExpr{
								pos: position{line: 1619, col: 93, offset: 48802},
								expr: &ruleRefExpr{
									pos:  position{line: 1619, col: 94, offset: 48803},
									name: "Alphanumeric",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextValue",
			pos:  position{line: 1623, col: 1, offset: 48848},
			expr: &actionExpr{
				pos: position{line: 1623, col: 30, offset: 48877},
				run: (*parser).callonSinglePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 30, offset: 48877},
					exprs: []any{
						&notExpr{
							pos: position{line: 1623, col: 30, offset: 48877},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 31, offset: 48878},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 33, offset: 48880},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1623, col: 39, offset: 48886},
								expr: &actionExpr{
									pos: position{line: 1623, col: 40, offset: 48887},
									run: (*parser).callonSinglePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1623, col: 40, offset: 48887},
										exprs: []any{
											&notExpr{
												pos: position{line: 1623, col: 40, offset: 48887},
												expr: &ruleRefExpr{
													pos:  position{line: 1623, col: 41, offset: 48888},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1623, col: 43, offset: 48890},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1623, col: 49, offset: 48896},
													expr: &ruleRefExpr{
														pos:  position{line: 1623, col: 50, offset: 48897},
														name: "SinglePassthroughTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePassthroughTextElement",
			pos:  position{line: 1627, col: 1, offset: 49078},
			expr: &actionExpr{
				pos: position{line: 1627, col: 32, offset: 49109},
				run: (*parser).callonSinglePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 32, offset: 49109},
					exprs: []any{
						&notExpr{
							pos: position{line: 1627, col: 32, offset: 49109},
							expr: &seqExpr{
								pos: position{line: 1627, col: 34, offset: 49111},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1627, col: 34, offset: 49111},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&notExpr{
										pos: position{line: 1627, col: 38, offset: 49115},
										expr: &litMatcher{
											pos:        position{line: 1627, col: 39, offset: 49116},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 44, offset: 49121},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 53, offset: 49130},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDoublePassthrough",
			pos:  position{line: 1631, col: 1, offset: 49185},
			expr: &actionExpr{
				pos: position{line: 1631, col: 27, offset: 49211},
				run: (*parser).callonInlineDoublePassthrough1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 27, offset: 49211},
					exprs: []any{
						&notExpr{
							pos: position{line: 1631, col: 27, offset: 49211},
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 28, offset: 49212},
								name: "DoubleEscape",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 41, offset: 49225},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 46, offset: 49230},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 53, offset: 49237},
								name: "DoublePassthroughTextValue",
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 81, offset: 49265},
							val:        "++",
							ignoreCase: false,
							want:       "\"++\"",
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextValue",
			pos:  position{line: 1635, col: 1, offset: 49302},
			expr: &actionExpr{
				pos: position{line: 1635, col: 30, offset: 49331},
				run: (*parser).callonDoublePassthroughTextValue1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 30, offset: 49331},
					exprs: []any{
						&notExpr{
							pos: position{line: 1635, col: 30, offset: 49331},
							expr: &ruleRefExpr{
								pos:  position{line: 1635, col: 31, offset: 49332},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 1635, col: 33, offset: 49334},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 1635, col: 39, offset: 49340},
								expr: &actionExpr{
									pos: position{line: 1635, col: 40, offset: 49341},
									run: (*parser).callonDoublePassthroughTextValue7,
									expr: &seqExpr{
										pos: position{line: 1635, col: 40, offset: 49341},
										exprs: []any{
											&notExpr{
												pos: position{line: 1635, col: 40, offset: 49341},
												expr: &ruleRefExpr{
													pos:  position{line: 1635, col: 41, offset: 49342},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 1635, col: 43, offset: 49344},
												label: "value",
												expr: &oneOrMoreExpr{
													pos: position{line: 1635, col: 49, offset: 49350},
													expr: &ruleRefExpr{
														pos:  position{line: 1635, col: 50, offset: 49351},
														name: "DoublePassthroughTextElement",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoublePassthroughTextElement",
			pos:  position{line: 1639, col: 1, offset: 49544},
			expr: &actionExpr{
				pos: position{line: 1639, col: 32, offset: 49575},
				run: (*parser).callonDoublePassthroughTextElement1,
				expr: &seqExpr{
					pos: position{line: 1639, col: 32, offset: 49575},
					exprs: []any{
						&notExpr{
							pos: position{line: 1639, col: 32, offset: 49575},
							expr: &litMatcher{
								pos:        position{line: 1639, col: 34, offset: 49577},
								val:        "++",
								ignoreCase: false,
								want:       "\"++\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1639, col: 40, offset: 49583},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1639, col: 49, offset: 49592},
								name: "FormattedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "IfDef",
			pos:  position{line: 1644, col: 1, offset: 49648},
			expr: &actionExpr{
				pos: position{line: 1644, col: 9, offset: 49656},
				run: (*parser).callonIfDef1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 9, offset: 49656},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1644, col: 9, offset: 49656},
							name: "IfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 24, offset: 49671},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 36, offset: 49683},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1644, col: 59, offset: 49706},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1644, col: 64, offset: 49711},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1644, col: 75, offset: 49722},
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 76, offset: 49723},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "IfDefStatement",
			pos:  position{line: 1649, col: 1, offset: 49843},
			expr: &litMatcher{
				pos:        position{line: 1649, col: 18, offset: 49860},
				val:        "ifdef::",
				ignoreCase: false,
				want:       "\"ifdef::\"",
			},
		},
		{
			name: "IfNDef",
			pos:  position{line: 1651, col: 1, offset: 49872},
			expr: &actionExpr{
				pos: position{line: 1651, col: 10, offset: 49881},
				run: (*parser).callonIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 10, offset: 49881},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1651, col: 10, offset: 49881},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 21, offset: 49892},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 33, offset: 49904},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1651, col: 56, offset: 49927},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1651, col: 61, offset: 49932},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1651, col: 72, offset: 49943},
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 73, offset: 49944},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfDef",
			pos:  position{line: 1656, col: 1, offset: 50066},
			expr: &actionExpr{
				pos: position{line: 1656, col: 15, offset: 50080},
				run: (*parser).callonInlineIfDef1,
				expr: &seqExpr{
					pos: position{line: 1656, col: 15, offset: 50080},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1656, col: 15, offset: 50080},
							val:        "ifdef::",
							ignoreCase: false,
							want:       "\"ifdef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 25, offset: 50090},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 37, offset: 50102},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1656, col: 60, offset: 50125},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 64, offset: 50129},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 73, offset: 50138},
								name: "InlineConditionalContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1656, col: 99, offset: 50164},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1656, col: 103, offset: 50168},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "InlineIfNDef",
			pos:  position{line: 1661, col: 1, offset: 50334},
			expr: &actionExpr{
				pos: position{line: 1661, col: 16, offset: 50349},
				run: (*parser).callonInlineIfNDef1,
				expr: &seqExpr{
					pos: position{line: 1661, col: 16, offset: 50349},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1661, col: 16, offset: 50349},
							val:        "ifndef::",
							ignoreCase: false,
							want:       "\"ifndef::\"",
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 27, offset: 50360},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1661, col: 39, offset: 50372},
								name: "ConditionalAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1661, col: 62, offset: 50395},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 66, offset: 50399},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1661, col: 75, offset: 50408},
								name: "InlineConditionalContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1661, col: 101, offset: 50434},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1661, col: 105, offset: 50438},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "EndIfDef",
			pos:  position{line: 1666, col: 1, offset: 50606},
			expr: &actionExpr{
				pos: position{line: 1666, col: 12, offset: 50617},
				run: (*parser).callonEndIfDef1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 12, offset: 50617},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1666, col: 12, offset: 50617},
							name: "EndIfDefStatement",
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 30, offset: 50635},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1666, col: 41, offset: 50646},
								expr: &ruleRefExpr{
									pos:  position{line: 1666, col: 42, offset: 50647},
									name: "ConditionalAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1666, col: 66, offset: 50671},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1666, col: 72, offset: 50677},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1666, col: 82, offset: 50687},
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 83, offset: 50688},
								name: "EndOfLine",
							},
						},
					},
				},
			},
		},
		{
			name: "EndIfDefStatement",
			pos:  position{line: 1676, col: 1, offset: 50975},
			expr: &actionExpr{
				pos: position{line: 1676, col: 21, offset: 50995},
				run: (*parser).callonEndIfDefStatement1,
				expr: &litMatcher{
					pos:        position{line: 1676, col: 21, offset: 50995},
					val:        "endif::",
					ignoreCase: false,
					want:       "\"endif::\"",
				},
			},
		},
		{
			name: "ConditionalAttributes",
			pos:  position{line: 1680, col: 1, offset: 51045},
			expr: &actionExpr{
				pos: position{line: 1680, col: 25, offset: 51069},
				run: (*parser).callonConditionalAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 1680, col: 25, offset: 51069},
					label: "attr",
					expr: &choiceExpr{
						pos: position{line: 1680, col: 31, offset: 51075},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1680, col: 31, offset: 51075},
								name: "ConditionalAttributesAny",
							},
							&ruleRefExpr{
								pos:  position{line: 1680, col: 58, offset: 51102},
								name: "ConditionalAttributesAll",
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAny",
			pos:  position{line: 1684, col: 1, offset: 51159},
			expr: &actionExpr{
				pos: position{line: 1684, col: 28, offset: 51186},
				run: (*parser).callonConditionalAttributesAny1,
				expr: &labeledExpr{
					pos:   position{line: 1684, col: 28, offset: 51186},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1684, col: 34, offset: 51192},
						expr: &actionExpr{
							pos: position{line: 1685, col: 5, offset: 51198},
							run: (*parser).callonConditionalAttributesAny4,
							expr: &seqExpr{
								pos: position{line: 1685, col: 5, offset: 51198},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1685, col: 5, offset: 51198},
										label: "name",
										expr: &ruleRefExpr{
											pos:  position{line: 1685, col: 10, offset: 51203},
											name: "AttributeEntryName",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1685, col: 29, offset: 51222},
										name: "AnySpaces",
									},
									&zeroOrOneExpr{
										pos: position{line: 1685, col: 39, offset: 51232},
										expr: &litMatcher{
											pos:        position{line: 1685, col: 39, offset: 51232},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1685, col: 44, offset: 51237},
										name: "AnySpaces",
									},
									&andCodeExpr{
										pos: position{line: 1686, col: 5, offset: 51252},
										run: (*parser).callonConditionalAttributesAny12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalAttributesAll",
			pos:  position{line: 1696, col: 1, offset: 51513},
			expr: &actionExpr{
				pos: position{line: 1696, col: 28, offset: 51540},
				run: (*parser).callonConditionalAttributesAll1,
				expr: &labeledExpr{
					pos:   position{line: 1696, col: 28, offset: 51540},
					label: "names",
					expr: &oneOrMoreExpr{
						pos: position{line: 1696, col: 34, offset: 51546},
						expr: &actionExpr{
							pos: position{line: 1697, col: 5, offset: 51552},
							run: (*parser).callonConditionalAttributesAll4,
							expr: &seqExpr{
								pos: position{line: 1697, col: 5, offset: 51552},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 1697, col: 5, offset: 51552},
										label: "name",
										expr: &ruleRefExpr{
											pos:  position{line: 1697, col: 10, offset: 51557},
											name: "AttributeEntryName",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1697, col: 29, offset: 51576},
										name: "AnySpaces",
									},
									&zeroOrOneExpr{
										pos: position{line: 1697, col: 39, offset: 51586},
										expr: &litMatcher{
											pos:        position{line: 1697, col: 39, offset: 51586},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1697, col: 44, offset: 51591},
										name: "AnySpaces",
									},
									&andCodeExpr{
										pos: position{line: 1698, col: 5, offset: 51606},
										run: (*parser).callonConditionalAttributesAll12,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineConditionalContent",
			pos:  position{line: 1708, col: 1, offset: 51867},
			expr: &actionExpr{
				pos: position{line: 1708, col: 28, offset: 51894},
				run: (*parser).callonInlineConditionalContent1,
				expr: &labeledExpr{
					pos:   position{line: 1708, col: 28, offset: 51894},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 1708, col: 36, offset: 51902},
						expr: &actionExpr{
							pos: position{line: 1708, col: 37, offset: 51903},
							run: (*parser).callonInlineConditionalContent4,
							expr: &seqExpr{
								pos: position{line: 1708, col: 37, offset: 51903},
								exprs: []any{
									&notExpr{
										pos: position{line: 1708, col: 37, offset: 51903},
										expr: &litMatcher{
											pos:        position{line: 1708, col: 38, offset: 51904},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
									&labeledExpr{
										pos:   position{line: 1708, col: 42, offset: 51908},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 1708, col: 50, offset: 51916},
											name: "InlineElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfEval",
			pos:  position{line: 1714, col: 1, offset: 51989},
			expr: &actionExpr{
				pos: position{line: 1714, col: 10, offset: 51998},
				run: (*parser).callonIfEval1,
				expr: &seqExpr{
					pos: position{line: 1714, col: 10, offset: 51998},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1714, col: 10, offset: 51998},
							name: "IfEvalStatement",
						},
						&litMatcher{
							pos:        position{line: 1714, col: 26, offset: 52014},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 30, offset: 52018},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 40, offset: 52028},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 46, offset: 52034},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 59, offset: 52047},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 70, offset: 52058},
							label: "operand",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 79, offset: 52067},
								name: "IfEvalOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 95, offset: 52083},
							name: "AnySpaces",
						},
						&labeledExpr{
							pos:   position{line: 1714, col: 105, offset: 52093},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1714, col: 112, offset: 52100},
								name: "IfEvalValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 125, offset: 52113},
							name: "AnySpaces",
						},
						&litMatcher{
							pos:        position{line: 1714, col: 135, offset: 52123},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1714, col: 139, offset: 52127},
							name: "AnySpaces",
						},
					},
				},
			},
		},
		{
			name: "IfEvalStatement",
			pos:  position{line: 1718, col: 1, offset: 52282},
			expr: &actionExpr{
				pos: position{line: 1718, col: 19, offset: 52300},
				run: (*parser).callonIfEvalStatement1,
				expr: &litMatcher{
					pos:        position{line: 1718, col: 19, offset: 52300},
					val:        "ifeval::",
					ignoreCase: false,
					want:       "\"ifeval::\"",
				},
			},
		},
		{
			name: "IfEvalValue",
			pos:  position{line: 1722, col: 1, offset: 52351},
			expr: &actionExpr{
				pos: position{line: 1722, col: 15, offset: 52365},
				run: (*parser).callonIfEvalValue1,
				expr: &labeledExpr{
					pos:   position{line: 1722, col: 15, offset: 52365},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 1722, col: 20, offset: 52370},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1722, col: 20, offset: 52370},
								name: "SingleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1722, col: 48, offset: 52398},
								name: "DoubleQuoteAttributeValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1722, col: 76, offset: 52426},
								name: "NakedAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "IfEvalOperator",
			pos:  position{line: 1733, col: 1, offset: 52866},
			expr: &choiceExpr{
				pos: position{line: 1734, col: 7, offset: 52890},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1734, col: 8, offset: 52891},
						run: (*parser).callonIfEvalOperator2,
						expr: &litMatcher{
							pos:        position{line: 1734, col: 8, offset: 52891},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 1735, col: 8, offset: 52954},
						run: (*parser).callonIfEvalOperator4,
						expr: &litMatcher{
							pos:        position{line: 1735, col: 8, offset: 52954},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1736, col: 8, offset: 53020},
						run: (*parser).callonIfEvalOperator6,
						expr: &litMatcher{
							pos:        position{line: 1736, col: 8, offset: 53020},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 1737, col: 8, offset: 53086},
						run: (*parser).callonIfEvalOperator8,
						expr: &litMatcher{
							pos:        position{line: 1737, col: 8, offset: 53086},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1738, col: 8, offset: 53159},
						run: (*parser).callonIfEvalOperator10,
						expr: &litMatcher{
							pos:        position{line: 1738, col: 8, offset: 53159},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 1739, col: 8, offset: 53228},
						run: (*parser).callonIfEvalOperator12,
						expr: &litMatcher{
							pos:        position{line: 1739, col: 8, offset: 53228},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 1742, col: 1, offset: 53299},
			expr: &actionExpr{
				pos: position{line: 1742, col: 20, offset: 53318},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1742, col: 21, offset: 53319},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1742, col: 21, offset: 53319},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1742, col: 27, offset: 53325},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 1742, col: 33, offset: 53331},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
					},
				},
			},
		},
		{
			name: "SingleTilde",
			pos:  position{line: 1746, col: 1, offset: 53402},
			expr: &seqExpr{
				pos: position{line: 1746, col: 15, offset: 53416},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1746, col: 15, offset: 53416},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andExpr{
						pos: position{line: 1746, col: 19, offset: 53420},
						expr: &notExpr{
							pos: position{line: 1746, col: 21, offset: 53422},
							expr: &litMatcher{
								pos:        position{line: 1746, col: 22, offset: 53423},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1748, col: 1, offset: 53429},
			expr: &choiceExpr{
				pos: position{line: 1748, col: 15, offset: 53443},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1748, col: 15, offset: 53443},
						run: (*parser).callonApostrophe2,
						expr: &seqExpr{
							pos: position{line: 1748, col: 15, offset: 53443},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1748, col: 15, offset: 53443},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 1748, col: 21, offset: 53449},
									expr: &charClassMatcher{
										pos:        position{line: 1748, col: 22, offset: 53450},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1750, col: 9, offset: 53508},
						run: (*parser).callonApostrophe7,
						expr: &seqExpr{
							pos: position{line: 1750, col: 9, offset: 53508},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1750, col: 9, offset: 53508},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 1750, col: 13, offset: 53512},
									expr: &charClassMatcher{
										pos:        position{line: 1750, col: 14, offset: 53513},
										val:        "[\\p{L}]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Punctuation",
			pos:  position{line: 1755, col: 1, offset: 53576},
			expr: &actionExpr{
				pos: position{line: 1755, col: 15, offset: 53590},
				run: (*parser).callonPunctuation1,
				expr: &choiceExpr{
					pos: position{line: 1755, col: 17, offset: 53592},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 1755, col: 18, offset: 53593},
							val:        "[,;.?)/:!=\"'@-[\\]]",
							chars:      []rune{',', ';', '.', '?', ')', '/', ':', '!', '=', '"', '\'', ']'},
							ranges:     []rune{'@', '['},
							ignoreCase: false,
							inverted:   false,
						},
						&seqExpr{
							pos: position{line: 1755, col: 41, offset: 53616},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1755, col: 41, offset: 53616},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&notExpr{
									pos: position{line: 1755, col: 45, offset: 53620},
									expr: &litMatcher{
										pos:        position{line: 1755, col: 46, offset: 53621},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1759, col: 1, offset: 53688},
			expr: &actionExpr{
				pos: position{line: 1759, col: 13, offset: 53700},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1759, col: 13, offset: 53700},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1759, col: 13, offset: 53700},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1759, col: 17, offset: 53704},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1759, col: 27, offset: 53714},
							expr: &ruleRefExpr{
								pos:  position{line: 1759, col: 29, offset: 53716},
								name: "EndOfLine",
							},
						},
						&andCodeExpr{
							pos: position{line: 1759, col: 40, offset: 53727},
							run: (*parser).callonLineBreak7,
						},
					},
				},
			},
		},
		{
			name: "CurvedQuote",
			pos:  position{line: 1765, col: 1, offset: 53828},
			expr: &choiceExpr{
				pos: position{line: 1765, col: 16, offset: 53843},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1765, col: 16, offset: 53843},
						name: "SingleCurvedQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 1765, col: 36, offset: 53863},
						name: "DoubleCurvedQuote",
					},
				},
			},
		},
		{
			name: "DoubleCurvedQuote",
			pos:  position{line: 1767, col: 1, offset: 53883},
			expr: &actionExpr{
				pos: position{line: 1767, col: 21, offset: 53903},
				run: (*parser).callonDoubleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1767, col: 22, offset: 53904},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1767, col: 22, offset: 53904},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&litMatcher{
							pos:        position{line: 1767, col: 30, offset: 53912},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleCurvedQuote",
			pos:  position{line: 1769, col: 1, offset: 53950},
			expr: &actionExpr{
				pos: position{line: 1769, col: 21, offset: 53970},
				run: (*parser).callonSingleCurvedQuote1,
				expr: &choiceExpr{
					pos: position{line: 1769, col: 22, offset: 53971},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1769, col: 22, offset: 53971},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&litMatcher{
							pos:        position{line: 1769, col: 29, offset: 53978},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "EmptyLine",
			pos:  position{line: 1771, col: 1, offset: 54015},
			expr: &actionExpr{
				pos: position{line: 1771, col: 13, offset: 54027},
				run: (*parser).callonEmptyLine1,
				expr: &seqExpr{
					pos: position{line: 1771, col: 13, offset: 54027},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1771, col: 13, offset: 54027},
							name: "BeginningOfLine",
						},
						&ruleRefExpr{
							pos:  position{line: 1771, col: 29, offset: 54043},
							name: "AnySpaces",
						},
						&ruleRefExpr{
							pos:  position{line: 1771, col: 39, offset: 54053},
							name: "NewLine",
						},
					},
				},
			},
		},
		{
			name: "SoftNewLine",
			pos:  position{line: 1775, col: 1, offset: 54143},
			expr: &seqExpr{
				pos: position{line: 1775, col: 15, offset: 54157},
				exprs: []any{
					&notExpr{
						pos: position{line: 1775, col: 15, offset: 54157},
						expr: &litMatcher{
							pos:        position{line: 1775, col: 16, offset: 54158},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1775, col: 21, offset: 54163},
						name: "NewLine",
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 1777, col: 1, offset: 54172},
			expr: &actionExpr{
				pos: position{line: 1777, col: 11, offset: 54182},
				run: (*parser).callonNewLine1,
				expr: &choiceExpr{
					pos: position{line: 1777, col: 12, offset: 54183},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1777, col: 12, offset: 54183},
							val:        "\n",
							ignoreCase: false,
							want:       "\"\\n\"",
						},
						&litMatcher{
							pos:        position{line: 1777, col: 19, offset: 54190},
							val:        "\r",
							ignoreCase: false,
							want:       "\"\\r\"",
						},
						&litMatcher{
							pos:        position{line: 1777, col: 26, offset: 54197},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Percentage",
			pos:  position{line: 1781, col: 1, offset: 54259},
			expr: &actionExpr{
				pos: position{line: 1781, col: 15, offset: 54273},
				run: (*parser).callonPercentage1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 15, offset: 54273},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1781, col: 15, offset: 54273},
							label: "percentage",
							expr: &ruleRefExpr{
								pos:  position{line: 1781, col: 26, offset: 54284},
								name: "PositiveInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 1781, col: 42, offset: 54300},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 1785, col: 1, offset: 54336},
			expr: &actionExpr{
				pos: position{line: 1785, col: 20, offset: 54355},
				run: (*parser).callonPositiveInteger1,
				expr: &seqExpr{
					pos: position{line: 1785, col: 20, offset: 54355},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1785, col: 21, offset: 54356},
							expr: &charClassMatcher{
								pos:        position{line: 1785, col: 21, offset: 54356},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1785, col: 29, offset: 54364},
							run: (*parser).callonPositiveInteger5,
						},
					},
				},
			},
		},
		{
			name: "NotNewLine",
			pos:  position{line: 1791, col: 1, offset: 54455},
			expr: &notExpr{
				pos: position{line: 1791, col: 14, offset: 54468},
				expr: &ruleRefExpr{
					pos:  position{line: 1791, col: 15, offset: 54469},
					name: "NewLine",
				},
			},
		},
		{
			name: "NotSpace",
			pos:  position{line: 1793, col: 1, offset: 54478},
			expr: &notExpr{
				pos: position{line: 1793, col: 12, offset: 54489},
				expr: &ruleRefExpr{
					pos:  position{line: 1793, col: 13, offset: 54490},
					name: "_",
				},
			},
		},
		{
			name: "Alpha",
			pos:  position{line: 1795, col: 1, offset: 54493},
			expr: &charClassMatcher{
				pos:        position{line: 1795, col: 9, offset: 54501},
				val:        "[\\p{L}]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Alphanumeric",
			pos:  position{line: 1797, col: 1, offset: 54510},
			expr: &charClassMatcher{
				pos:        position{line: 1797, col: 16, offset: 54525},
				val:        "[\\p{L}\\p{N}]",
				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EndOfFile",
			pos:  position{line: 1799, col: 1, offset: 54539},
			expr: &actionExpr{
				pos: position{line: 1799, col: 13, offset: 54551},
				run: (*parser).callonEndOfFile1,
				expr: &notExpr{
					pos: position{line: 1799, col: 13, offset: 54551},
					expr: &anyMatcher{
						line: 1799, col: 14, offset: 54552,
					},
				},
			},
		},
		{
			name: "NotEndOfFile",
			pos:  position{line: 1803, col: 1, offset: 54594},
			expr: &andExpr{
				pos: position{line: 1803, col: 16, offset: 54609},
				expr: &anyMatcher{
					line: 1803, col: 18, offset: 54611,
				},
			},
		},
		{
			name: "BeginningOfLine",
			pos:  position{line: 1805, col: 1, offset: 54615},
			expr: &notExpr{
				pos: position{line: 1805, col: 19, offset: 54633},
				expr: &ruleRefExpr{
					pos:  position{line: 1805, col: 20, offset: 54634},
					name: "OffsetCharacter",
				},
			},
		},
		{
			name: "OffsetCharacter",
			pos:  position{line: 1807, col: 1, offset: 54651},
			expr: &seqExpr{
				pos: position{line: 1807, col: 19, offset: 54669},
				exprs: []any{
					&anyMatcher{
						line: 1807, col: 19, offset: 54669,
					},
					&andCodeExpr{
						pos: position{line: 1807, col: 21, offset: 54671},
						run: (*parser).callonOffsetCharacter3,
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 1811, col: 1, offset: 54719},
			expr: &actionExpr{
				pos: position{line: 1811, col: 10, offset: 54728},
				run: (*parser).callonIndent1,
				expr: &seqExpr{
					pos: position{line: 1811, col: 10, offset: 54728},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1811, col: 10, offset: 54728},
							name: "AnySpaces",
						},
						&andExpr{
							pos: position{line: 1811, col: 20, offset: 54738},
							expr: &notExpr{
								pos: position{line: 1811, col: 22, offset: 54740},
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 23, offset: 54741},
									name: "_",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1811, col: 26, offset: 54744},
							run: (*parser).callonIndent7,
						},
					},
				},
			},
		},
		{
			name: "EndOfLine",
			pos:  position{line: 1817, col: 1, offset: 54813},
			expr: &choiceExpr{
				pos: position{line: 1817, col: 13, offset: 54825},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1817, col: 13, offset: 54825},
						name: "NewLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 23, offset: 54835},
						name: "EndOfFile",
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 1819, col: 1, offset: 54846},
			expr: &labeledExpr{
				pos:   position{line: 1819, col: 14, offset: 54859},
				label: "text",
				expr: &actionExpr{
					pos: position{line: 1819, col: 20, offset: 54865},
					run: (*parser).callonInlineText2,
					expr: &oneOrMoreExpr{
						pos: position{line: 1819, col: 20, offset: 54865},
						expr: &ruleRefExpr{
							pos:  position{line: 1819, col: 20, offset: 54865},
							name: "Alphanumeric",
						},
					},
				},
			},
		},
		{
			name: "UnbrokenText",
			pos:  position{line: 1821, col: 1, offset: 54911},
			expr: &actionExpr{
				pos: position{line: 1821, col: 16, offset: 54926},
				run: (*parser).callonUnbrokenText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1821, col: 16, offset: 54926},
					expr: &ruleRefExpr{
						pos:  position{line: 1821, col: 16, offset: 54926},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AnyText",
			pos:  position{line: 1825, col: 1, offset: 54988},
			expr: &actionExpr{
				pos: position{line: 1825, col: 11, offset: 54998},
				run: (*parser).callonAnyText1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1825, col: 11, offset: 54998},
					expr: &ruleRefExpr{
						pos:  position{line: 1825, col: 11, offset: 54998},
						name: "CharacterClassInline",
					},
				},
			},
		},
		{
			name: "AnySpaces",
			pos:  position{line: 1829, col: 1, offset: 55060},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1829, col: 13, offset: 55072},
				expr: &charClassMatcher{
					pos:        position{line: 1829, col: 13, offset: 55072},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CharacterClassAll",
			pos:  position{line: 1831, col: 1, offset: 55081},
			expr: &actionExpr{
				pos: position{line: 1831, col: 21, offset: 55101},
				run: (*parser).callonCharacterClassAll1,
				expr: &choiceExpr{
					pos: position{line: 1831, col: 22, offset: 55102},
					alternatives: []any{
						&anyMatcher{
							line: 1831, col: 22, offset: 55102,
						},
						&ruleRefExpr{
							pos:  position{line: 1831, col: 26, offset: 55106},
							name: "NewLine",
						},
					},
				},
			},
		},
		{
			name: "CharacterClassInline",
			pos:  position{line: 1835, col: 1, offset: 55155},
			expr: &charClassMatcher{
				pos:        position{line: 1835, col: 24, offset: 55178},
				val:        "[^\\n]",
				chars:      []rune{'\n'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "CharacterGroupWord",
			pos:  position{line: 1837, col: 1, offset: 55186},
			expr: &actionExpr{
				pos: position{line: 1837, col: 22, offset: 55207},
				run: (*parser).callonCharacterGroupWord1,
				expr: &charClassMatcher{
					pos:        position{line: 1837, col: 22, offset: 55207},
					val:        "[\\p{M}\\p{Nd}\\p{Pc}\\p{Join_Control}\\p{L}]",
					classes:    []*unicode.RangeTable{rangeTable("M"), rangeTable("Nd"), rangeTable("Pc"), rangeTable("Join_Control"), rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1841, col: 1, offset: 55308},
			expr: &actionExpr{
				pos: position{line: 1841, col: 6, offset: 55313},
				run: (*parser).callon__1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1841, col: 6, offset: 55313},
					expr: &charClassMatcher{
						pos:        position{line: 1841, col: 6, offset: 55313},
						val:        "[ \\t]",
						chars:      []rune{' ', '\t'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1845, col: 1, offset: 55360},
			expr: &actionExpr{
				pos: position{line: 1845, col: 5, offset: 55364},
				run: (*parser).callon_1,
				expr: &charClassMatcher{
					pos:        position{line: 1845, col: 5, offset: 55364},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Escape",
			pos:  position{line: 1849, col: 1, offset: 55410},
			expr: &actionExpr{
				pos: position{line: 1849, col: 10, offset: 55419},
				run: (*parser).callonEscape1,
				expr: &litMatcher{
					pos:        position{line: 1849, col: 10, offset: 55419},
					val:        "\\",
					ignoreCase: false,
					want:       "\"\\\\\"",
				},
			},
		},
		{
			name: "DoubleEscape",
			pos:  position{line: 1851, col: 1, offset: 55456},
			expr: &actionExpr{
				pos: position{line: 1851, col: 16, offset: 55471},
				run: (*parser).callonDoubleEscape1,
				expr: &litMatcher{
					pos:        position{line: 1851, col: 16, offset: 55471},
					val:        "\\\\",
					ignoreCase: false,
					want:       "\"\\\\\\\\\"",
				},
			},
		},
	},
}

func (c *current) onDocument1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["content"])
}

func (c *current) onElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["element"])
}

func (c *current) onBlockElement7(element any) (bool, error) {
	return element != nil, nil
}

func (p *parser) callonBlockElement7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement7(stack["element"])
}

func (c *current) onBlockElement1(element any) (any, error) {
	return compose(c, element.(asciidoc.Element))
}

func (p *parser) callonBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElement1(stack["element"])
}

func (c *current) onBlockElements1(blockElement any) (any, error) {
	return blockElement, nil
}

func (p *parser) callonBlockElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElements1(stack["blockElement"])
}

func (c *current) onNakedBlocks1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonNakedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlocks1(stack["block"])
}

func (c *current) onAttributableBlocks22(attributes, element any) (bool, error) {
	return attributes != nil || element != nil, nil

}

func (p *parser) callonAttributableBlocks22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks22(stack["attributes"], stack["element"])
}

func (c *current) onAttributableBlocks1(attributes, element any) (any, error) {
	if element == nil {
		return asciidoc.NewBlockAttributes(attributes.(asciidoc.AttributeList)), nil
	}
	if attributes != nil {
	}
	return compose(c, element.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonAttributableBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributableBlocks1(stack["attributes"], stack["element"])
}

func (c *current) onBlockAttributes4(anchor any) (any, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes4(stack["anchor"])
}

func (c *current) onBlockAttributes7(title any) (any, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes7(stack["title"])
}

func (c *current) onBlockAttributes10(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes10(stack["attributes"])
}

func (c *current) onBlockAttributes13(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes13(stack["attributes"])
}

func (c *current) onBlockAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attribute"])
}

func (c *current) onBlockTitle1(content any) (any, error) {
	els, err := coalesce(content.(asciidoc.Set))
	if err != nil {
		return nil, err
	}
	return asciidoc.NewTitleAttribute(els), nil
}

func (p *parser) callonBlockTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitle1(stack["content"])
}

func (c *current) onBlockTitleContent1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonBlockTitleContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTitleContent1(stack["content"])
}

func (c *current) onBlockEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonBlockEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockEmptyLine1()
}

func (c *current) onBlockElementAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAdditionalAttribute1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonBlockElementAdditionalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAdditionalAttribute1(stack["attributes"])
}

func (c *current) onBlockElementAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	return extractAttributes(attributes, nil)
}

func (p *parser) callonBlockElementAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockElementAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onNakedBlockAttributes1(attribute, additionalAttributes any) (any, error) {
	attributes := []any{attribute}
	if additionalAttributes != nil {
		attributes = append(attributes, additionalAttributes.([]any)...)
	}
	as, err := extractAttributes(attributes, nil)
	if err != nil {
		return nil, err
	}
	return asciidoc.NewBlockAttributes(as), nil
}

func (p *parser) callonNakedBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedBlockAttributes1(stack["attribute"], stack["additionalAttributes"])
}

func (c *current) onBlockDelimiters1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonBlockDelimiters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockDelimiters1(stack["delimiter"])
}

func (c *current) onSection4() (any, error) {
	return len(c.text) - 1, nil

}

func (p *parser) callonSection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4()
}

func (c *current) onSection7(level any) (bool, error) {
	return level.(int) < 6, nil

}

func (p *parser) callonSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7(stack["level"])
}

func (c *current) onSection1(level, title any) (any, error) {
	return compose(c, asciidoc.NewSection(join(flat(title.([]any))), level.(int)))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onSectionTitleValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSectionTitleValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleValue1(stack["element"])
}

func (c *current) onAttributeEntry1(name, value any) (any, error) {
	return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

func (p *parser) callonAttributeEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntry1(stack["name"], stack["value"])
}

func (c *current) onAttributeEntryName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeEntryName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryName1()
}

func (c *current) onAttributeEntryElements1(value any) (any, error) {
	return join[asciidoc.Element](flat(value.([]any))), nil
}

func (p *parser) callonAttributeEntryElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeEntryElements1(stack["value"])
}

func (c *current) onAttributeReset2(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset9(name any) (any, error) {
	return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

func (p *parser) callonAttributeReset9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset9(stack["name"])
}

func (c *current) onAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attributes"])
}

func (c *current) onAttributeList1(attributes any) (any, error) {
	return extractAttributes(attributes.([]any), nil)
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributes"])
}

func (c *current) onAttributeListItem1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeListItem1(stack["attribute"])
}

func (c *current) onAttribute5(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute5(stack["name"])
}

func (c *current) onAttribute1(name, value any) (any, error) {
	if name != nil {
		return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
	}
	return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

func (p *parser) callonAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["name"], stack["value"])
}

func (c *current) onShorthandAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonShorthandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributes1(stack["attribute"])
}

func (c *current) onShorthandAttribute1(style, values any) (any, error) {
	return asciidoc.NewShorthandAttribute(style, values.([]any))
}

func (p *parser) callonShorthandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttribute1(stack["style"], stack["values"])
}

func (c *current) onShorthandStyle1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandStyle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandStyle1(stack["value"])
}

func (c *current) onShorthandID1(value any) (any, error) {
	return asciidoc.NewShorthandID(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandID1(stack["value"])
}

func (c *current) onShorthandRole1(value any) (any, error) {
	return asciidoc.NewShorthandRole(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandRole1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandRole1(stack["value"])
}

func (c *current) onShorthandOption1(value any) (any, error) {
	return asciidoc.NewShorthandOption(value.(asciidoc.Set)...), nil
}

func (p *parser) callonShorthandOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandOption1(stack["value"])
}

func (c *current) onShorthandAttributeValue1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonShorthandAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShorthandAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeSingle}, nil
}

func (p *parser) callonSingleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValue1(stack["value"])
}

func (c *current) onSingleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("'"), nil
}

func (p *parser) callonSingleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement2()
}

func (c *current) onSingleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonSingleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteAttributeValueElement8()
}

func (c *current) onDoubleQuoteAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join(value.([]any)), quote: asciidoc.AttributeQuoteTypeDouble}, nil
}

func (p *parser) callonDoubleQuoteAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValue1(stack["value"])
}

func (c *current) onDoubleQuoteAttributeValueElement2() (any, error) {
	return asciidoc.NewString("\""), nil
}

func (p *parser) callonDoubleQuoteAttributeValueElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement2()
}

func (c *current) onDoubleQuoteAttributeValueElement8() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonDoubleQuoteAttributeValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteAttributeValueElement8()
}

func (c *current) onNakedAttributeValue10() (any, error) {
	// Stop on commas, equals, spaces or end bracket
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonNakedAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue10()
}

func (c *current) onNakedAttributeValue1(value any) (any, error) {
	return &attributeValue{value: join[asciidoc.Element](flat(value.([]any)))}, nil
}

func (p *parser) callonNakedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedAttributeValue1(stack["value"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onNamedAttributeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttributeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeName1()
}

func (c *current) onAttributeReference1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonAttributeReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReference1(stack["attribute"])
}

func (c *current) onAttributeReferenceValue1(name any) (any, error) {
	return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}

func (p *parser) callonAttributeReferenceValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReferenceValue1(stack["name"])
}

func (c *current) onSingleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldText1(stack["value"])
}

func (c *current) onSingleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue7(stack["value"])
}

func (c *current) onSingleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewBold(), setElements[*asciidoc.Bold](flat(value.([]any))))
}

func (p *parser) callonSingleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextValue1(stack["value"])
}

func (c *current) onSingleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleBoldTextElement1(stack["element"])
}

func (c *current) onDoubleBoldText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldText1(stack["value"])
}

func (c *current) onDoubleBoldTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleBoldTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue7(stack["value"])
}

func (c *current) onDoubleBoldTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleBold(), setElements[*asciidoc.DoubleBold](flat(value.([]any))))
}

func (p *parser) callonDoubleBoldTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextValue1(stack["value"])
}

func (c *current) onDoubleBoldTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleBoldTextElement1(stack["element"])
}

func (c *current) onSingleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicText1(stack["value"])
}

func (c *current) onSingleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue7(stack["value"])
}

func (c *current) onSingleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewItalic(flat(value.([]any))), nil
}

func (p *parser) callonSingleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextValue1(stack["value"])
}

func (c *current) onSingleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleItalicTextElement1(stack["element"])
}

func (c *current) onDoubleItalicText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicText1(stack["value"])
}

func (c *current) onDoubleItalicTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleItalicTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue7(stack["value"])
}

func (c *current) onDoubleItalicTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleItalic(flat(value.([]any))), nil
}

func (p *parser) callonDoubleItalicTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextValue1(stack["value"])
}

func (c *current) onDoubleItalicTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleItalicTextElement1(stack["element"])
}

func (c *current) onSubscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["value"])
}

func (c *current) onSubscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSubscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue7(stack["value"])
}

func (c *current) onSubscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSubscript(), setElements[*asciidoc.Subscript](flat(value.([]any))))
}

func (p *parser) callonSubscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextValue1(stack["value"])
}

func (c *current) onSubscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSubscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSubscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSubscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscript1()
}

func (c *current) onSuperscriptText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["value"])
}

func (c *current) onSuperscriptTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSuperscriptTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue7(stack["value"])
}

func (c *current) onSuperscriptTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewSuperscript(), setElements[*asciidoc.Superscript](flat(value.([]any))))
}

func (p *parser) callonSuperscriptTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextValue1(stack["value"])
}

func (c *current) onSuperscriptTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSuperscriptTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement1(stack["element"])
}

func (c *current) onEscapedSuperscript1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonEscapedSuperscript1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscript1()
}

func (c *current) onSingleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceText1(stack["value"])
}

func (c *current) onSingleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue7(stack["value"])
}

func (c *current) onSingleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewMonospace(flat(value.([]any))), nil
}

func (p *parser) callonSingleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextValue1(stack["value"])
}

func (c *current) onSingleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleMonospaceText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceText1(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMonospaceTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue7(stack["value"])
}

func (c *current) onDoubleMonospaceTextValue1(value any) (any, error) {
	return asciidoc.NewDoubleMonospace(flat(value.([]any))), nil
}

func (p *parser) callonDoubleMonospaceTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextValue1(stack["value"])
}

func (c *current) onDoubleMonospaceTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMonospaceTextElement1(stack["element"])
}

func (c *current) onAnchor10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchor10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor10(stack["label"])
}

func (c *current) onAnchor1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewAnchor(id.(string), lbl))
}

func (p *parser) callonAnchor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchor1(stack["id"], stack["label"])
}

func (c *current) onAnchorAttribute10(label any) (any, error) {
	return label, nil
}

func (p *parser) callonAnchorAttribute10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute10(stack["label"])
}

func (c *current) onAnchorAttribute1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return populatePosition(c, asciidoc.NewAnchorAttribute(asciidoc.NewString(id.(string)), lbl)), nil
}

func (p *parser) callonAnchorAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorAttribute1(stack["id"], stack["label"])
}

func (c *current) onAnchorLabel6() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonAnchorLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel6()
}

func (c *current) onAnchorLabel9(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonAnchorLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel9(stack["arv"])
}

func (c *current) onAnchorLabel12() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonAnchorLabel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnchorLabel12()
}

func (c *current) onAdmonition6() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeNote), nil
}

func (p *parser) callonAdmonition6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition6()
}

func (c *current) onAdmonition8() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeTip), nil
}

func (p *parser) callonAdmonition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition8()
}

func (c *current) onAdmonition10() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeImportant), nil
}

func (p *parser) callonAdmonition10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition10()
}

func (c *current) onAdmonition12() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeCaution), nil
}

func (p *parser) callonAdmonition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition12()
}

func (c *current) onAdmonition14() (any, error) {
	return asciidoc.NewAdmonition(asciidoc.AdmonitionTypeWarning), nil
}

func (p *parser) callonAdmonition14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition14()
}

func (c *current) onAdmonition1(admonition any) (any, error) {
	return admonition, nil
}

func (p *parser) callonAdmonition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonition1(stack["admonition"])
}

func (c *current) onInlineElements1(content, eol any) (any, error) {
	els := flat(content.([]any))
	if eol, ok := eol.(*asciidoc.NewLine); ok {
		els = append(els, eol)
	}
	return els, nil
}

func (p *parser) callonInlineElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["content"], stack["eol"])
}

func (c *current) onInlineElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onNakedInlineText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineText1()
}

func (c *current) onFootnote1(id, value any) (any, error) {
	return asciidoc.NewFootnote(id.(string), value.([]any)), nil
}

func (p *parser) callonFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnote1(stack["id"], stack["value"])
}

func (c *current) onFootnoteId1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteId1()
}

func (c *current) onFootnoteValue1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonFootnoteValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteValue1(stack["element"])
}

func (c *current) onFormattedText1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))

}

func (p *parser) callonFormattedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormattedText1(stack["attributes"], stack["text"])
}

func (c *current) onFormatAttributes1(attributes any) (any, error) {
	return attributes, nil
}

func (p *parser) callonFormatAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatAttributes1(stack["attributes"])
}

func (c *current) onBlockImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewBlockImage(path.(asciidoc.Set)), setAttributes[*asciidoc.BlockImage](attributes))
}

func (p *parser) callonBlockImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewInlineImage(path.(asciidoc.Set)), setAttributes[*asciidoc.InlineImage](attributes))
}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon5()
}

func (c *current) onIcon1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewIcon(path.(string)), setAttributes[*asciidoc.Icon](attributes))
}

func (p *parser) callonIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIcon1(stack["path"], stack["attributes"])
}

func (c *current) onFileInclude1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewFileInclude(), setElements[*asciidoc.FileInclude](path), setAttributes[*asciidoc.FileInclude](attributes))
}

func (p *parser) callonFileInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclude1(stack["path"], stack["attributes"])
}

func (c *current) onFileIncludePath1(path any) (any, error) {
	return path, nil
}

func (p *parser) callonFileIncludePath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludePath1(stack["path"])
}

func (c *current) onLink1(link any) (any, error) {
	return link, nil
}

func (p *parser) callonLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onHTMLLink1(url any) (any, error) {
	return asciidoc.NewLink(url.(asciidoc.URL)), nil
}

func (p *parser) callonHTMLLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLLink1(stack["url"])
}

func (c *current) onPrefixedLink1(url, attributes any) (any, error) {

	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonPrefixedLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixedLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink1(url, attributes any) (any, error) {
	return compose(c, asciidoc.NewLink(url.(asciidoc.URL)), setAttributes[*asciidoc.Link](attributes))
}

func (p *parser) callonExternalLink1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onTable1(attributes, cells any) (any, error) {
	table, err := parseTable(attributes, cells.([]any))
	if err != nil {
		return nil, err
	}
	return compose(c, table)
}

func (p *parser) callonTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["cells"])
}

func (c *current) onTableStart1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableStart1()
}

func (c *current) onTableEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))
}

func (p *parser) callonTableEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEmptyLine1()
}

func (c *current) onTableIfDef1(ifdef any) (any, error) {
	return compose(c, ifdef.(*asciidoc.IfDef))
}

func (p *parser) callonTableIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfDef1(stack["ifdef"])
}

func (c *current) onTableIfNDef1(ifndef any) (any, error) {
	return compose(c, ifndef.(*asciidoc.IfNDef))
}

func (p *parser) callonTableIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableIfNDef1(stack["ifndef"])
}

func (c *current) onTableEndIfDef1(endifdef any) (any, error) {
	return compose(c, endifdef.(*asciidoc.EndIf))
}

func (p *parser) callonTableEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEndIfDef1(stack["endifdef"])
}

func (c *current) onTableComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.SingleLineComment))
}

func (p *parser) callonTableComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableComment1(stack["comment"])
}

func (c *current) onTableMultiLineComment1(comment any) (any, error) {
	return compose(c, comment.(*asciidoc.MultiLineComment))
}

func (p *parser) callonTableMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableMultiLineComment1(stack["comment"])
}

func (c *current) onTableCellInlineContent1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonTableCellInlineContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContent1(stack["content"])
}

func (c *current) onTableCellInlineContentElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonTableCellInlineContentElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellInlineContentElement1(stack["element"])
}

func (c *current) onTableEnd1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonTableEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableEnd1()
}

func (c *current) onTableRow1(initial, additional any) (any, error) {

	var rows = []*asciidoc.TableCell{initial.(*asciidoc.TableCell)}
	if len(additional.([]any)) > 0 {
		rows = append(rows, cast[any, *asciidoc.TableCell](additional.([]any))...)
	}
	return rows, nil
}

func (p *parser) callonTableRow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableRow1(stack["initial"], stack["additional"])
}

func (c *current) onInitialInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonInitialInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalInlineTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](content.(asciidoc.Set)))
}

func (p *parser) callonAdditionalInlineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalInlineTableCell1(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonInitialBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onInitialBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonInitialBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell17(format, content any) (bool, error) {
	return format != nil && format.(*asciidoc.TableCellFormat).Style.Value == asciidoc.TableCellStyleAsciiDoc, nil

}

func (p *parser) callonAdditionalBlockTableCell17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell17(stack["format"], stack["content"])
}

func (c *current) onAdditionalBlockTableCell1(format, content any) (any, error) {
	return compose(c, newTableCell(format), setElements[*asciidoc.TableCell](asciidoc.Set(cast[any, asciidoc.Element](content.([]any)))))
}

func (p *parser) callonAdditionalBlockTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalBlockTableCell1(stack["format"], stack["content"])
}

func (c *current) onInlineTableLines1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineTableLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableLines1(stack["content"])
}

func (c *current) onEmptyCell1() (any, error) {
	return asciidoc.Set{asciidoc.NewString(string(c.text))}, nil
}

func (p *parser) callonEmptyCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyCell1()
}

func (c *current) onMultiLineTableCell1(lines, content any) (any, error) {
	var cellLines asciidoc.Set
	if lines != nil {
		cellLines = flat(lines.([]any))
	} else {
	}
	cellLines = append(cellLines, content.([]asciidoc.Element)...)
	return trim(cellLines), nil
}

func (p *parser) callonMultiLineTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineTableCell1(stack["lines"], stack["content"])
}

func (c *current) onInlineTableCellIntermediateLine13(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonInlineTableCellIntermediateLine13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine13(stack["nl"])
}

func (c *current) onInlineTableCellIntermediateLine1(newline, content, newlineBeforeEmptyLine any) (any, error) {
	var els []asciidoc.Element
	if newline != nil {
		els = []asciidoc.Element{newline.(*asciidoc.NewLine)}
	}
	els = append(els, mergeStrings(flat(content.([]any)))...)
	if newlineBeforeEmptyLine != nil {
		els = append(els, newlineBeforeEmptyLine.(*asciidoc.NewLine))
	}
	return els, nil
}

func (p *parser) callonInlineTableCellIntermediateLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellIntermediateLine1(stack["newline"], stack["content"], stack["newlineBeforeEmptyLine"])
}

func (c *current) onInlineTableCellEmptyLine1() (any, error) {
	return asciidoc.Set{asciidoc.EmptyLine{}}, nil
}

func (p *parser) callonInlineTableCellEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellEmptyLine1()
}

func (c *current) onInlineTableCellLastLine1(nl, content any) (any, error) {
	var els = []asciidoc.Element{nl.(*asciidoc.NewLine)}
	els = append(els, trim(mergeStrings(flat(content.([]any))))...)
	return els, nil
}

func (p *parser) callonInlineTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableCellLastLine1(stack["nl"], stack["content"])
}

func (c *current) onBlockTableCellLine1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonBlockTableCellLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLine1(stack["content"])
}

func (c *current) onBlockTableCellLastLine1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonBlockTableCellLastLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableCellLastLine1(stack["content"])
}

func (c *current) onInlineTableElements1(content any) (any, error) {
	return trim(mergeStrings(flat(content.([]any)))), nil
}

func (p *parser) callonInlineTableElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElements1(stack["content"])
}

func (c *current) onInlineTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineTableElement1(stack["element"])
}

func (c *current) onBlockTableElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonBlockTableElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockTableElement1(stack["element"])
}

func (c *current) onNakedInlineTableCellText1() (any, error) {

	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonNakedInlineTableCellText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNakedInlineTableCellText1()
}

func (c *current) onCharacterClassTableCell1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassTableCell1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassTableCell1()
}

func (c *current) onInitialTableCellDelimiter1(format any) (any, error) {
	if format != nil {
		return format, nil
	}
	return asciidoc.NewTableCellFormat(), nil
}

func (p *parser) callonInitialTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellDelimiter1(stack["format"])
}

func (c *current) onAdditionalTableCellDelimiter1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellDelimiter1(stack["format"])
}

func (c *current) onInitialTableCellFormat6(format any) (bool, error) {
	return format != nil, nil
}

func (p *parser) callonInitialTableCellFormat6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat6(stack["format"])
}

func (c *current) onInitialTableCellFormat1(format any) (any, error) {
	return format, nil
}

func (p *parser) callonInitialTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialTableCellFormat1(stack["format"])
}

func (c *current) onAdditionalTableCellFormat7(lead, format any) (bool, error) {
	return lead != nil && format != nil, nil
}

func (p *parser) callonAdditionalTableCellFormat7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat7(stack["lead"], stack["format"])
}

func (c *current) onAdditionalTableCellFormat1(lead, format any) (any, error) {
	return format, nil
}

func (p *parser) callonAdditionalTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditionalTableCellFormat1(stack["lead"], stack["format"])
}

func (c *current) onTableCellSpan5(n any) (any, error) {

	return n, nil
}

func (p *parser) callonTableCellSpan5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan5(stack["n"])
}

func (c *current) onTableCellSpan10(n any) (any, error) {

	return n, nil

}

func (p *parser) callonTableCellSpan10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan10(stack["n"])
}

func (c *current) onTableCellSpan1(column, row any) (any, error) {
	span := asciidoc.NewTableCellSpan()
	span.Column = asciidoc.Maybe[int](column, span.Column.Value)
	span.Row = asciidoc.Maybe[int](row, span.Row.Value)
	return span, nil

}

func (p *parser) callonTableCellSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellSpan1(stack["column"], stack["row"])
}

func (c *current) onTableCellFormat8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableCellFormat8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat8()
}

func (c *current) onTableCellFormat5(multiplier any) (any, error) {

	return strconv.Atoi(multiplier.(string))

}

func (p *parser) callonTableCellFormat5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat5(stack["multiplier"])
}

func (c *current) onTableCellFormat16(span any) (any, error) {
	return span, nil

}

func (p *parser) callonTableCellFormat16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat16(stack["span"])
}

func (c *current) onTableCellFormat22() (any, error) {
	return asciidoc.TableCellHorizontalAlignLeft, nil
}

func (p *parser) callonTableCellFormat22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat22()
}

func (c *current) onTableCellFormat24() (any, error) {
	return asciidoc.TableCellHorizontalAlignRight, nil
}

func (p *parser) callonTableCellFormat24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat24()
}

func (c *current) onTableCellFormat26() (any, error) {
	return asciidoc.TableCellHorizontalAlignCenter, nil
}

func (p *parser) callonTableCellFormat26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat26()
}

func (c *current) onTableCellFormat31() (any, error) {
	return asciidoc.TableCellVerticalAlignTop, nil
}

func (p *parser) callonTableCellFormat31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat31()
}

func (c *current) onTableCellFormat33() (any, error) {
	return asciidoc.TableCellVerticalAlignBottom, nil
}

func (p *parser) callonTableCellFormat33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat33()
}

func (c *current) onTableCellFormat35() (any, error) {
	return asciidoc.TableCellVerticalAlignMiddle, nil
}

func (p *parser) callonTableCellFormat35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat35()
}

func (c *current) onTableCellFormat40() (any, error) {
	return asciidoc.TableCellStyleAsciiDoc, nil
}

func (p *parser) callonTableCellFormat40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat40()
}

func (c *current) onTableCellFormat42() (any, error) {
	return asciidoc.TableCellStyleDefault, nil
}

func (p *parser) callonTableCellFormat42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat42()
}

func (c *current) onTableCellFormat44() (any, error) {
	return asciidoc.TableCellStyleEmphasis, nil
}

func (p *parser) callonTableCellFormat44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat44()
}

func (c *current) onTableCellFormat46() (any, error) {
	return asciidoc.TableCellStyleHeader, nil
}

func (p *parser) callonTableCellFormat46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat46()
}

func (c *current) onTableCellFormat48() (any, error) {
	return asciidoc.TableCellStyleLiteral, nil
}

func (p *parser) callonTableCellFormat48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat48()
}

func (c *current) onTableCellFormat50() (any, error) {
	return asciidoc.TableCellStyleMonospace, nil
}

func (p *parser) callonTableCellFormat50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat50()
}

func (c *current) onTableCellFormat52() (any, error) {
	return asciidoc.TableCellStyleStrong, nil
}

func (p *parser) callonTableCellFormat52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat52()
}

func (c *current) onTableCellFormat54(multiplier, span, horizontalAlign, verticalAlign, style any) (bool, error) {
	return (multiplier != nil || span != nil || horizontalAlign != nil || verticalAlign != nil || style != nil), nil

}

func (p *parser) callonTableCellFormat54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat54(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onTableCellFormat1(multiplier, span, horizontalAlign, verticalAlign, style any) (any, error) {
	format := asciidoc.NewTableCellFormat()
	format.Multiplier = asciidoc.Maybe[int](multiplier, format.Multiplier.Value)
	if span != nil {
		format.Span = span.(asciidoc.TableCellSpan)
	}
	format.HorizontalAlign = asciidoc.Maybe[asciidoc.TableCellHorizontalAlign](horizontalAlign, format.HorizontalAlign.Value)
	format.VerticalAlign = asciidoc.Maybe[asciidoc.TableCellVerticalAlign](verticalAlign, format.VerticalAlign.Value)
	format.Style = asciidoc.Maybe[asciidoc.TableCellStyle](style, format.Style.Value)
	return format, nil
}

func (p *parser) callonTableCellFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCellFormat1(stack["multiplier"], stack["span"], stack["horizontalAlign"], stack["verticalAlign"], stack["style"])
}

func (c *current) onURLScheme1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonURLScheme1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURLScheme1()
}

func (c *current) onURL1(scheme, path any) (any, error) {
	s, _ := scheme.(string)
	return compose(c, asciidoc.NewURL(s, path.(asciidoc.Set)))
}

func (p *parser) callonURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1(stack["scheme"], stack["path"])
}

func (c *current) onFullURL1(scheme, path any) (any, error) {
	return compose(c, asciidoc.NewURL(scheme.(string), path.(asciidoc.Set)))
}

func (p *parser) callonFullURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullURL1(stack["scheme"], stack["path"])
}

func (c *current) onPath1(elements any) (any, error) {
	return mergeStrings(elements.([]any)), nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["elements"])
}

func (c *current) onPathElement2() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement2()
}

func (c *current) onPathElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPathElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathElement5()
}

func (c *current) onEmail1(name, domain any) (any, error) {
	return compose(c, asciidoc.NewEmail(name.(string)+"@"+domain.(string)))
}

func (p *parser) callonEmail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmail1(stack["name"], stack["domain"])
}

func (c *current) onEmailName4() (any, error) {
	// See https://en.wikipedia.org/wiki/Email_address#Local-part
	return string(c.text), nil
}

func (p *parser) callonEmailName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName4()
}

func (c *current) onEmailName9(name any) (bool, error) {
	n := name.(string)
	return !strings.Contains(n, "..") && !strings.HasPrefix(n, ".") && !strings.HasSuffix(n, "."), nil
}

func (p *parser) callonEmailName9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName9(stack["name"])
}

func (c *current) onEmailName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonEmailName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailName1(stack["name"])
}

func (c *current) onEmailDomain4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEmailDomain4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain4()
}

func (c *current) onEmailDomain15(domain any) (bool, error) {
	d := domain.(string)
	return !strings.HasPrefix(d, "-") && !strings.HasSuffix(d, "-"), nil
}

func (p *parser) callonEmailDomain15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain15(stack["domain"])
}

func (c *current) onEmailDomain1(domain any) (any, error) {
	return domain.(string), nil
}

func (p *parser) callonEmailDomain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmailDomain1(stack["domain"])
}

func (c *current) onListing1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewListing(start.(asciidoc.Delimiter)), setLines[*asciidoc.Listing](cast[any, string](lines.([]any))))

}

func (p *parser) callonListing1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListing1(stack["start"], stack["lines"])
}

func (c *current) onListingStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeListing, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonListingStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart7(stack["delimiter"])
}

func (c *current) onListingStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListingStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingStart1(stack["delimiter"])
}

func (c *current) onListingEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeListing)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonListingEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingEnd7(stack["delimiter"])
}

func (c *current) onListingHyphens8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) == 4, nil

}

func (p *parser) callonListingHyphens8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens8(stack["hyphens"])
}

func (c *current) onListingHyphens1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonListingHyphens1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingHyphens1(stack["hyphens"])
}

func (c *current) onListingDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeListing, Length: hyphens.(int)}, nil

}

func (p *parser) callonListingDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingDelimiter1(stack["hyphens"])
}

func (c *current) onListingLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonListingLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingLine1(stack["line"])
}

func (c *current) onOpen1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewOpenBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.OpenBlock](join(lines.([]any))))

}

func (p *parser) callonOpen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpen1(stack["start"], stack["lines"])
}

func (c *current) onOpenStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeOpen, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonOpenStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart6(stack["delimiter"])
}

func (c *current) onOpenStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonOpenStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStart1(stack["delimiter"])
}

func (c *current) onOpenEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeOpen)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonOpenEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEnd6(stack["delimiter"])
}

func (c *current) onOpenEquals1(hyphens any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonOpenEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenEquals1(stack["hyphens"])
}

func (c *current) onOpenDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeOpen, Length: len(hyphens.(string))}, nil

}

func (p *parser) callonOpenDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenDelimiter1(stack["hyphens"])
}

func (c *current) onSingleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedText1(stack["value"])
}

func (c *current) onSingleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSingleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue7(stack["value"])
}

func (c *current) onSingleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewMarked(), setElements[*asciidoc.Marked](flat(value.([]any))))
}

func (p *parser) callonSingleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextValue1(stack["value"])
}

func (c *current) onSingleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleMarkedTextElement1(stack["element"])
}

func (c *current) onDoubleMarkedText1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedText1(stack["value"])
}

func (c *current) onDoubleMarkedTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoubleMarkedTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue7(stack["value"])
}

func (c *current) onDoubleMarkedTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewDoubleMarked(), setElements[*asciidoc.DoubleMarked](flat(value.([]any))))
}

func (p *parser) callonDoubleMarkedTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextValue1(stack["value"])
}

func (c *current) onDoubleMarkedTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoubleMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleMarkedTextElement1(stack["element"])
}

func (c *current) onExample1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewExampleBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.ExampleBlock](join(lines.([]any))))

}

func (p *parser) callonExample1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1(stack["start"], stack["lines"])
}

func (c *current) onExampleStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeExample, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonExampleStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart6(stack["delimiter"])
}

func (c *current) onExampleStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExampleStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleStart1(stack["delimiter"])
}

func (c *current) onExampleEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeExample)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonExampleEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEnd6(stack["delimiter"])
}

func (c *current) onExampleEquals8(hyphens any) (bool, error) {
	return delimitedLength(hyphens) >= 4, nil

}

func (p *parser) callonExampleEquals8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals8(stack["hyphens"])
}

func (c *current) onExampleEquals1(hyphens any) (any, error) {

	return delimitedLength(hyphens), nil

}

func (p *parser) callonExampleEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleEquals1(stack["hyphens"])
}

func (c *current) onExampleDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeExample, Length: hyphens.(int)}, nil

}

func (p *parser) callonExampleDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleDelimiter1(stack["hyphens"])
}

func (c *current) onExampleLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonExampleLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleLine1(stack["line"])
}

func (c *current) onLiteral1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewLiteralBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.LiteralBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["start"], stack["lines"])
}

func (c *current) onLiteralStart7(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonLiteralStart7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart7(stack["delimiter"])
}

func (c *current) onLiteralStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonLiteralStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStart1(stack["delimiter"])
}

func (c *current) onLiteralEnd7(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeLiteral)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonLiteralEnd7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralEnd7(stack["delimiter"])
}

func (c *current) onLiteralDots8(dots any) (bool, error) {
	return delimitedLength(dots) >= 4, nil

}

func (p *parser) callonLiteralDots8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots8(stack["dots"])
}

func (c *current) onLiteralDots1(dots any) (any, error) {

	return delimitedLength(dots), nil

}

func (p *parser) callonLiteralDots1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDots1(stack["dots"])
}

func (c *current) onLiteralDelimiter1(dots any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeLiteral, Length: dots.(int)}, nil

}

func (p *parser) callonLiteralDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralDelimiter1(stack["dots"])
}

func (c *current) onLiteralLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonLiteralLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralLine1(stack["line"])
}

func (c *current) onSidebar1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewSidebarBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.SidebarBlock](join(lines.([]any))))

}

func (p *parser) callonSidebar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebar1(stack["start"], stack["lines"])
}

func (c *current) onSidebarStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonSidebarStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart6(stack["delimiter"])
}

func (c *current) onSidebarStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonSidebarStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarStart1(stack["delimiter"])
}

func (c *current) onSidebarEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeSidebar)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonSidebarEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarEnd6(stack["delimiter"])
}

func (c *current) onSidebarAsterisks8(asterisks any) (bool, error) {
	return delimitedLength(asterisks) >= 4, nil

}

func (p *parser) callonSidebarAsterisks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks8(stack["asterisks"])
}

func (c *current) onSidebarAsterisks1(asterisks any) (any, error) {

	return delimitedLength(asterisks), nil

}

func (p *parser) callonSidebarAsterisks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarAsterisks1(stack["asterisks"])
}

func (c *current) onSidebarDelimiter1(asterisks any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeSidebar, Length: asterisks.(int)}, nil

}

func (p *parser) callonSidebarDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarDelimiter1(stack["asterisks"])
}

func (c *current) onPreParse1(content any) (any, error) {
	return flat(content.([]any)), nil
}

func (p *parser) callonPreParse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParse1(stack["content"])
}

func (c *current) onPreParseElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonPreParseElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseElement1(stack["element"])
}

func (c *current) onPreParseLine1(content any) (any, error) {
	return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

func (p *parser) callonPreParseLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLine1(stack["content"])
}

func (c *current) onPreParseLineElement2(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonPreParseLineElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement2(stack["arv"])
}

func (c *current) onPreParseLineElement5() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonPreParseLineElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement5()
}

func (c *current) onPreParseLineElement8() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPreParseLineElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreParseLineElement8()
}

func (c *current) onIfDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfNDefBlock1(attributes, lines any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

func (p *parser) callonIfNDefBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDefBlock1(stack["attributes"], stack["lines"])
}

func (c *current) onIfEvalBlock1(left, operand, right, lines any) (any, error) {
	return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

func (p *parser) callonIfEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalBlock1(stack["left"], stack["operand"], stack["right"], stack["lines"])
}

func (c *current) onQuote1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewQuoteBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.QuoteBlock](join(lines.([]any))))

}

func (p *parser) callonQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["start"], stack["lines"])
}

func (c *current) onQuoteStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeQuote, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonQuoteStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart6(stack["delimiter"])
}

func (c *current) onQuoteStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonQuoteStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteStart1(stack["delimiter"])
}

func (c *current) onQuoteEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeQuote)
		return true, nil
	}
	return false, nil
}

func (p *parser) callonQuoteEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteEnd6(stack["delimiter"])
}

func (c *current) onQuoteUnderlines8(underlines any) (bool, error) {
	return delimitedLength(underlines) >= 4, nil

}

func (p *parser) callonQuoteUnderlines8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines8(stack["underlines"])
}

func (c *current) onQuoteUnderlines1(underlines any) (any, error) {

	return delimitedLength(underlines), nil

}

func (p *parser) callonQuoteUnderlines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteUnderlines1(stack["underlines"])
}

func (c *current) onQuoteDelimiter1(underlines any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeQuote, Length: underlines.(int)}, nil

}

func (p *parser) callonQuoteDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteDelimiter1(stack["underlines"])
}

func (c *current) onListItemValue1(line, lines, attachedBlocks any) (any, error) {
	value := []any{line}
	if lines != nil {
		value = append(value, lines)
	}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemValue1(stack["line"], stack["lines"], stack["attachedBlocks"])
}

func (c *current) onAttachedBlock1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonAttachedBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlock1(stack["element"])
}

func (c *current) onAttachedBlockElement1(value any) (any, error) {
	return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

func (p *parser) callonAttachedBlockElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlockElement1(stack["value"])
}

func (c *current) onListContinuation1(value any) (any, error) {
	return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["value"])
}

func (c *current) onListItemLine1(element any) (any, error) {
	return []any{&asciidoc.NewLine{}, element}, nil
}

func (p *parser) callonListItemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemLine1(stack["element"])
}

func (c *current) onAttachedBlocks1(blocks any) (any, error) {
	return blocks, nil
}

func (p *parser) callonAttachedBlocks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttachedBlocks1(stack["blocks"])
}

func (c *current) onThematicBreak1() (any, error) {
	return compose(c, asciidoc.NewThematicBreak())
}

func (p *parser) callonThematicBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onPageBreak1() (any, error) {
	return compose(c, asciidoc.NewPageBreak())
}

func (p *parser) callonPageBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPageBreak1()
}

func (c *current) onFenced1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewFencedBlock(start.(asciidoc.Delimiter)), setElements[*asciidoc.FencedBlock](join(lines.([]any))))

}

func (p *parser) callonFenced1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFenced1(stack["start"], stack["lines"])
}

func (c *current) onFencedStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeFenced, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonFencedStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart6(stack["delimiter"])
}

func (c *current) onFencedStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonFencedStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedStart1(stack["delimiter"])
}

func (c *current) onFencedEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeFenced)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonFencedEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedEnd6(stack["delimiter"])
}

func (c *current) onFencedBackticks8(backticks any) (bool, error) {
	return delimitedLength(backticks) >= 4, nil

}

func (p *parser) callonFencedBackticks8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks8(stack["backticks"])
}

func (c *current) onFencedBackticks1(backticks any) (any, error) {

	return delimitedLength(backticks), nil

}

func (p *parser) callonFencedBackticks1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBackticks1(stack["backticks"])
}

func (c *current) onFencedDelimiter1(hyphens any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeFenced, Length: hyphens.(int)}, nil

}

func (p *parser) callonFencedDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedDelimiter1(stack["hyphens"])
}

func (c *current) onFencedLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonFencedLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedLine1(stack["line"])
}

func (c *current) onStem1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewStemBlock(start.(asciidoc.Delimiter)), setLines[*asciidoc.StemBlock](cast[any, string](lines.([]any))))

}

func (p *parser) callonStem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStem1(stack["start"], stack["lines"])
}

func (c *current) onStemStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeStem, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonStemStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart6(stack["delimiter"])
}

func (c *current) onStemStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonStemStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemStart1(stack["delimiter"])
}

func (c *current) onStemEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeStem)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonStemEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemEnd6(stack["delimiter"])
}

func (c *current) onStemPluses8(pluses any) (bool, error) {
	return delimitedLength(pluses) >= 4, nil

}

func (p *parser) callonStemPluses8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses8(stack["pluses"])
}

func (c *current) onStemPluses1(pluses any) (any, error) {

	return delimitedLength(pluses), nil

}

func (p *parser) callonStemPluses1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemPluses1(stack["pluses"])
}

func (c *current) onStemDelimiter1(pluses any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeStem, Length: pluses.(int)}, nil

}

func (p *parser) callonStemDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemDelimiter1(stack["pluses"])
}

func (c *current) onStemLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonStemLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStemLine1(stack["line"])
}

func (c *current) onInternalCrossReference8(label any) (any, error) {
	return label, nil
}

func (p *parser) callonInternalCrossReference8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference8(stack["label"])
}

func (c *current) onInternalCrossReference1(id, label any) (any, error) {
	var lbl asciidoc.Set
	if label != nil {
		lbl = join(label.([]any))
	}
	return compose(c, asciidoc.NewCrossReference(id.(string)), setElements[*asciidoc.CrossReference](lbl))
}

func (p *parser) callonInternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference1(stack["id"], stack["label"])
}

func (c *current) onCrossReferenceID1() (any, error) {

	// See: https://docs.asciidoctor.org/asciidoc/latest/attributes/id/#valid-id-characters
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceID1()
}

func (c *current) onCrossReferenceLabel3() (any, error) {
	return asciidoc.NewString(string(c.text)), nil

}

func (p *parser) callonCrossReferenceLabel3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel6(arv any) (any, error) {
	return arv, nil

}

func (p *parser) callonCrossReferenceLabel6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel6(stack["arv"])
}

func (c *current) onCrossReferenceLabel9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onDocumentCrossReference1(path, attributes any) (any, error) {
	return compose(c, asciidoc.NewDocumentCrossReference(path.(asciidoc.Set)), setAttributes[*asciidoc.DocumentCrossReference](attributes))
}

func (p *parser) callonDocumentCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentCrossReference1(stack["path"], stack["attributes"])
}

func (c *current) onUppercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonUppercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUppercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onUppercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onUppercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanTens10(stack["tens"])
}

func (c *current) onUppercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonUppercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUppercaseRomanOnes10(stack["ones"])
}

func (c *current) onLowercaseRoman15(thousands, hundreds, tens, ones any) (bool, error) {
	return thousands != nil || hundreds != nil || tens != nil || ones != nil, nil
}

func (p *parser) callonLowercaseRoman15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman15(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRoman1(thousands, hundreds, tens, ones any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLowercaseRoman1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRoman1(stack["thousands"], stack["hundreds"], stack["tens"], stack["ones"])
}

func (c *current) onLowercaseRomanHundreds9(hundreds any) (bool, error) {
	return len(hundreds.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanHundreds9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanHundreds9(stack["hundreds"])
}

func (c *current) onLowercaseRomanTens10(tens any) (bool, error) {
	return len(tens.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanTens10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanTens10(stack["tens"])
}

func (c *current) onLowercaseRomanOnes10(ones any) (bool, error) {
	return len(ones.([]any)) < 4, nil
}

func (p *parser) callonLowercaseRomanOnes10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowercaseRomanOnes10(stack["ones"])
}

func (c *current) onOrderedListItem1(marker, value any) (any, error) {
	m := marker.(listMarker)
	return compose(c, asciidoc.NewOrderedListItem(m.indent, m.marker), setElements[*asciidoc.OrderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonOrderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["marker"], stack["value"])
}

func (c *current) onOrderedListMarker10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker10()
}

func (c *current) onOrderedListMarker13(ordinal any) (bool, error) {
	return len(ordinal.(string)) <= 5, nil
}

func (p *parser) callonOrderedListMarker13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker13(stack["ordinal"])
}

func (c *current) onOrderedListMarker7(ordinal any) (any, error) {

	return ordinal, nil
}

func (p *parser) callonOrderedListMarker7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker7(stack["ordinal"])
}

func (c *current) onOrderedListMarker14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker14()
}

func (c *current) onOrderedListMarker19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker19()
}

func (c *current) onOrderedListMarker23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker23()
}

func (c *current) onOrderedListMarker27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker27()
}

func (c *current) onOrderedListMarker31() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonOrderedListMarker31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker31()
}

func (c *current) onOrderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonOrderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListItem1(marker, checklist, value any) (any, error) {
	cl, _ := checklist.(asciidoc.Checklist)
	m := marker.(listMarker)
	return compose(c, asciidoc.NewUnorderedListItem(m.indent, m.marker, cl), setElements[*asciidoc.UnorderedListItem](value.(asciidoc.Set)))
}

func (p *parser) callonUnorderedListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["marker"], stack["checklist"], stack["value"])
}

func (c *current) onUnorderedListMarker6() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnorderedListMarker6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker6()
}

func (c *current) onUnorderedListMarker12(indent, marker any) (bool, error) {
	return len(marker.(string)) <= 5, nil
}

func (p *parser) callonUnorderedListMarker12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker12(stack["indent"], stack["marker"])
}

func (c *current) onUnorderedListMarker1(indent, marker any) (any, error) {
	return listMarker{marker: marker.(string), indent: toString(indent)}, nil
}

func (p *parser) callonUnorderedListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListMarker1(stack["indent"], stack["marker"])
}

func (c *current) onChecklist7() (any, error) {
	return asciidoc.ChecklistUnchecked, nil
}

func (p *parser) callonChecklist7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist7()
}

func (c *current) onChecklist9() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist9()
}

func (c *current) onChecklist11() (any, error) {
	return asciidoc.ChecklistChecked, nil
}

func (p *parser) callonChecklist11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist11()
}

func (c *current) onChecklist1(checklist any) (any, error) {
	return checklist, nil

}

func (p *parser) callonChecklist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChecklist1(stack["checklist"])
}

func (c *current) onDescriptionListItem13() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonDescriptionListItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem13()
}

func (c *current) onDescriptionListItem1(inlineAnchor, term, marker, whitespace, value any) (any, error) {
	dli := asciidoc.NewDescriptionListItem(marker.(string), term.(asciidoc.Set))
	values := cast[any, asciidoc.Element](whitespace.([]any))
	values = append(values, value.(asciidoc.Set)...)
	cos := []composeOption[*asciidoc.DescriptionListItem]{setElements[*asciidoc.DescriptionListItem](asciidoc.Set(values))}
	if inlineAnchor != nil {
		cos = append(cos, setAttributes[*asciidoc.DescriptionListItem](inlineAnchor))
	}
	return compose(c, dli, cos...)
}

func (p *parser) callonDescriptionListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItem1(stack["inlineAnchor"], stack["term"], stack["marker"], stack["whitespace"], stack["value"])
}

func (c *current) onDescriptionListTerm1(term any) (any, error) {
	return flat(term.([]any)), nil
}

func (p *parser) callonDescriptionListTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListTerm1(stack["term"])
}

func (c *current) onDescriptionListMarker5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDescriptionListMarker5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker5()
}

func (c *current) onDescriptionListMarker10(marker any) (bool, error) {
	switch marker.(string) {
	case "::", ":::", "::::", ";;":
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDescriptionListMarker10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker10(stack["marker"])
}

func (c *current) onDescriptionListMarker1(marker any) (any, error) {
	return marker.(string), nil
}

func (p *parser) callonDescriptionListMarker1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListMarker1(stack["marker"])
}

func (c *current) onDescriptionListItemValue1(line, attachedBlocks any) (any, error) {
	value := []any{line}
	if attachedBlocks != nil {
		value = append(value, attachedBlocks.([]any))
	}
	return flat(value), nil
}

func (p *parser) callonDescriptionListItemValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescriptionListItemValue1(stack["line"], stack["attachedBlocks"])
}

func (c *current) onSingleLineComment1(comment any) (any, error) {
	return compose(c, asciidoc.NewSingleLineComment(comment.(string)))
}

func (p *parser) callonSingleLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["comment"])
}

func (c *current) onSingleLineCommentDelimiter1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentDelimiter1()
}

func (c *current) onSingleLineCommentContent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onMultiLineComment1(start, lines any) (any, error) {
	return compose(c, asciidoc.NewMultiLineComment(start.(asciidoc.Delimiter)), setLines[*asciidoc.MultiLineComment](cast[any, string](lines.([]any))))

}

func (p *parser) callonMultiLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineComment1(stack["start"], stack["lines"])
}

func (c *current) onMultiLineCommentStart6(delimiter any) (bool, error) {
	c.pushDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment, delimiter.(asciidoc.Delimiter).Length)
	return true, nil

}

func (p *parser) callonMultiLineCommentStart6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart6(stack["delimiter"])
}

func (c *current) onMultiLineCommentStart1(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonMultiLineCommentStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentStart1(stack["delimiter"])
}

func (c *current) onMultiLineCommentEnd6(delimiter any) (bool, error) {
	previous := c.peekDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
	if previous == delimiter.(asciidoc.Delimiter).Length {
		c.popDelimitedLevel(asciidoc.DelimitedBlockTypeMultiLineComment)
		return true, nil
	}
	return false, nil

}

func (p *parser) callonMultiLineCommentEnd6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentEnd6(stack["delimiter"])
}

func (c *current) onMultiLineCommentForwardSlashes8(forwardSlashes any) (bool, error) {
	return delimitedLength(forwardSlashes) >= 4, nil

}

func (p *parser) callonMultiLineCommentForwardSlashes8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes8(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentForwardSlashes1(forwardSlashes any) (any, error) {

	return delimitedLength(forwardSlashes), nil

}

func (p *parser) callonMultiLineCommentForwardSlashes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentForwardSlashes1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentDelimiter1(forwardSlashes any) (any, error) {
	return asciidoc.Delimiter{Type: asciidoc.DelimitedBlockTypeMultiLineComment, Length: forwardSlashes.(int)}, nil

}

func (p *parser) callonMultiLineCommentDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentDelimiter1(stack["forwardSlashes"])
}

func (c *current) onMultiLineCommentLine1(line any) (any, error) {
	return line.(string), nil
}

func (p *parser) callonMultiLineCommentLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineCommentLine1(stack["line"])
}

func (c *current) onCounterIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, true)), nil
}

func (p *parser) callonCounterIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterSilentIncrement1(name, initialValue any) (any, error) {
	return populatePosition(c, asciidoc.NewCounter(name.(string), initialValue, false)), nil
}

func (p *parser) callonCounterSilentIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSilentIncrement1(stack["name"], stack["initialValue"])
}

func (c *current) onCounterInitialValue1(initializer any) (any, error) {
	return initializer, nil
}

func (p *parser) callonCounterInitialValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitialValue1(stack["initializer"])
}

func (c *current) onCounterInitializer2() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCounterInitializer2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer2()
}

func (c *current) onCounterInitializer4() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonCounterInitializer4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterInitializer4()
}

func (c *current) onInlinePassthrough1(attributes, text any) (any, error) {
	return compose(c, text.(asciidoc.AttributableElement), setAttributes[asciidoc.AttributableElement](attributes))
}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["attributes"], stack["text"])
}

func (c *current) onInlineSinglePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineSinglePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineSinglePassthrough1(stack["value"])
}

func (c *current) onSinglePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonSinglePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue7(stack["value"])
}

func (c *current) onSinglePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlinePassthrough(), setElements[*asciidoc.InlinePassthrough](flat(value.([]any))))
}

func (p *parser) callonSinglePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextValue1(stack["value"])
}

func (c *current) onSinglePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSinglePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePassthroughTextElement1(stack["element"])
}

func (c *current) onInlineDoublePassthrough1(value any) (any, error) {
	return value, nil
}

func (p *parser) callonInlineDoublePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDoublePassthrough1(stack["value"])
}

func (c *current) onDoublePassthroughTextValue7(value any) (any, error) {
	return value, nil
}

func (p *parser) callonDoublePassthroughTextValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue7(stack["value"])
}

func (c *current) onDoublePassthroughTextValue1(value any) (any, error) {
	return compose(c, asciidoc.NewInlineDoublePassthrough(), setElements[*asciidoc.InlineDoublePassthrough](flat(value.([]any))))
}

func (p *parser) callonDoublePassthroughTextValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextValue1(stack["value"])
}

func (c *current) onDoublePassthroughTextElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonDoublePassthroughTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoublePassthroughTextElement1(stack["element"])
}

func (c *current) onIfDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfDef(attr.names, attr.union), nil
}

func (p *parser) callonIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfDef1(stack["attributes"])
}

func (c *current) onIfNDef1(attributes any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

func (p *parser) callonIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfNDef1(stack["attributes"])
}

func (c *current) onInlineIfDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfDef(attr.names), setElements[*asciidoc.InlineIfDef](content))
}

func (p *parser) callonInlineIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfDef1(stack["attributes"], stack["content"])
}

func (c *current) onInlineIfNDef1(attributes, content any) (any, error) {
	attr := attributes.(conditionalAttributes)
	return compose(c, asciidoc.NewInlineIfNDef(attr.names), setElements[*asciidoc.InlineIfNDef](content))
}

func (p *parser) callonInlineIfNDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfNDef1(stack["attributes"], stack["content"])
}

func (c *current) onEndIfDef1(attributes any) (any, error) {
	var attr []asciidoc.AttributeName
	var union asciidoc.ConditionalUnion
	if attributes != nil {
		attr = attributes.(conditionalAttributes).names
		union = attributes.(conditionalAttributes).union
	}
	return asciidoc.NewEndIf(attr, union), nil
}

func (p *parser) callonEndIfDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDef1(stack["attributes"])
}

func (c *current) onEndIfDefStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndIfDefStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndIfDefStatement1()
}

func (c *current) onConditionalAttributes1(attr any) (any, error) {
	return attr, nil
}

func (p *parser) callonConditionalAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributes1(stack["attr"])
}

func (c *current) onConditionalAttributesAny12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAny12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny12(stack["name"])
}

func (c *current) onConditionalAttributesAny4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAny4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny4(stack["name"])
}

func (c *current) onConditionalAttributesAny1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

func (p *parser) callonConditionalAttributesAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAny1(stack["names"])
}

func (c *current) onConditionalAttributesAll12(name any) (bool, error) {
	return len(name.(string)) > 0, nil

}

func (p *parser) callonConditionalAttributesAll12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll12(stack["name"])
}

func (c *current) onConditionalAttributesAll4(name any) (any, error) {
	return asciidoc.AttributeName(name.(string)), nil

}

func (p *parser) callonConditionalAttributesAll4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll4(stack["name"])
}

func (c *current) onConditionalAttributesAll1(names any) (any, error) {
	return conditionalAttributes{names: cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

func (p *parser) callonConditionalAttributesAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalAttributesAll1(stack["names"])
}

func (c *current) onInlineConditionalContent4(element any) (any, error) {
	return element, nil
}

func (p *parser) callonInlineConditionalContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent4(stack["element"])
}

func (c *current) onInlineConditionalContent1(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineConditionalContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineConditionalContent1(stack["content"])
}

func (c *current) onIfEval1(left, operand, right any) (any, error) {
	return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

func (p *parser) callonIfEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEval1(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onIfEvalStatement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIfEvalStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalStatement1()
}

func (c *current) onIfEvalValue1(val any) (any, error) {
	return asciidoc.IfEvalValue{Quote: val.(*attributeValue).quote, Value: val.(*attributeValue).value}, nil
}

func (p *parser) callonIfEvalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalValue1(stack["val"])
}

func (c *current) onIfEvalOperator2() (any, error) {
	return asciidoc.ConditionalOperatorEqual, nil
}

func (p *parser) callonIfEvalOperator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator2()
}

func (c *current) onIfEvalOperator4() (any, error) {
	return asciidoc.ConditionalOperatorNotEqual, nil
}

func (p *parser) callonIfEvalOperator4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator4()
}

func (c *current) onIfEvalOperator6() (any, error) {
	return asciidoc.ConditionalOperatorLessThan, nil
}

func (p *parser) callonIfEvalOperator6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator6()
}

func (c *current) onIfEvalOperator8() (any, error) {
	return asciidoc.ConditionalOperatorLessThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator8()
}

func (c *current) onIfEvalOperator10() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThan, nil
}

func (p *parser) callonIfEvalOperator10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator10()
}

func (c *current) onIfEvalOperator12() (any, error) {
	return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil
}

func (p *parser) callonIfEvalOperator12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfEvalOperator12()
}

func (c *current) onSpecialCharacter1() (any, error) {
	return asciidoc.NewSpecialCharacter(string(c.text)), nil
}

func (p *parser) callonSpecialCharacter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onApostrophe2() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe2()
}

func (c *current) onApostrophe7() (any, error) {
	return asciidoc.NewString("'"), nil

}

func (p *parser) callonApostrophe7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe7()
}

func (c *current) onPunctuation1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonPunctuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPunctuation1()
}

func (c *current) onLineBreak7() (bool, error) {
	return c.previousRuneIsWhitespace(), nil
}

func (p *parser) callonLineBreak7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak7()
}

func (c *current) onLineBreak1() (any, error) {
	return &asciidoc.LineBreak{}, nil
}

func (p *parser) callonLineBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onDoubleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleCurvedQuote1()
}

func (c *current) onSingleCurvedQuote1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCurvedQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCurvedQuote1()
}

func (c *current) onEmptyLine1() (any, error) {
	return compose(c, asciidoc.NewEmptyLine(string(c.text)))

}

func (p *parser) callonEmptyLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyLine1()
}

func (c *current) onNewLine1() (any, error) {
	return compose(c, &asciidoc.NewLine{})
}

func (p *parser) callonNewLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLine1()
}

func (c *current) onPercentage1(percentage any) (any, error) {
	return percentage, nil
}

func (p *parser) callonPercentage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPercentage1(stack["percentage"])
}

func (c *current) onPositiveInteger5() (bool, error) {
	return len(string(c.text)) < 10, nil
}

func (p *parser) callonPositiveInteger5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger5()
}

func (c *current) onPositiveInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1()
}

func (c *current) onEndOfFile1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEndOfFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfFile1()
}

func (c *current) onOffsetCharacter3() (bool, error) {
	return c.currentColumn() > 1, nil
}

func (p *parser) callonOffsetCharacter3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetCharacter3()
}

func (c *current) onIndent7() (bool, error) {
	return c.pos.col < 2, nil
}

func (p *parser) callonIndent7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent7()
}

func (c *current) onIndent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onInlineText2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText2()
}

func (c *current) onUnbrokenText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnbrokenText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnbrokenText1()
}

func (c *current) onAnyText1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAnyText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyText1()
}

func (c *current) onCharacterClassAll1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCharacterClassAll1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterClassAll1()
}

func (c *current) onCharacterGroupWord1() (any, error) {
	return asciidoc.NewString(string(c.text)), nil
}

func (p *parser) callonCharacterGroupWord1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacterGroupWord1()
}

func (c *current) on__1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon__1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

func (c *current) onEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscape1()
}

func (c *current) onDoubleEscape1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleEscape1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleEscape1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
	delimitedBlockState delimitedBlockState
	parser *parser
	tableColumnsAttribute *asciidoc.TableColumnsAttribute
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
			delimitedBlockState: make(delimitedBlockState),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)
	p.cur.parser = p

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
	offset position
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
