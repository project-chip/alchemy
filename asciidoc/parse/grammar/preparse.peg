
PreParse = content:(PreParseElement)+ EndOfFile {
    debugPosition(c, "complete preparse: %T\n", flat(content.([]any)))
    return flat(content.([]any)), nil
}

PreParseElement = !EndOfFile BeginningOfLine element:(IfDefBlock / IfNDefBlock / IfEvalBlock / AttributeEntry / AttributeReset / FileInclude / PreParseLine) EndOfLine {
    return element, nil
}

PreParseLine = !EndIfDefStatement content:PreParseLineElement* &EndOfLine {
     debugPosition(c, "matched preparse line: \"%s\"\n", string(c.text))
    return flat(append(content.([]any), &asciidoc.NewLine{})), nil
}

PreParseLineElement = (
   AttributeReference 
    /
    ([^\r\n{]+ )
    / "{" 
)

IfDefBlock = IfDefStatement attributes:(ConditionalAttributes) "[]" AnySpaces  EndOfLine lines:(PreParseElement)*  EndIfDef  {
    attr := attributes.(conditionalAttributes)
    return compose(c, asciidoc.NewIfDefBlock(attr.names, attr.union), setElements[*asciidoc.IfDefBlock](flat(lines.([]any))))
}

IfNDefBlock = "ifndef::" attributes:(ConditionalAttributes) "[]" AnySpaces  EndOfLine lines:(PreParseElement)*  EndIfDef  {
    attr := attributes.(conditionalAttributes)
    return compose(c, asciidoc.NewIfNDefBlock(attr.names, attr.union), setElements[*asciidoc.IfNDefBlock](flat(lines.([]any))))
}

IfEvalBlock = IfEvalStatement "[" AnySpaces left:(IfEvalValue) AnySpaces  operand:(IfEvalOperator) AnySpaces right:(IfEvalValue) AnySpaces "]" AnySpaces  EndOfLine lines:(PreParseElement)*  EndIfDef  {
    return compose(c, asciidoc.NewIfEvalBlock(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), setElements[*asciidoc.IfEvalBlock](flat(lines.([]any))))

}

