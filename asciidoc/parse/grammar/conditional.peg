
IfDefStatement = "ifdef::" 

IfDef = IfDefStatement attributes:(ConditionalAttributes) "[]" AnySpaces  &EndOfLine {
    attr := attributes.(conditionalAttributes)
    return asciidoc.NewIfDef(attr.names, attr.union), nil
}

IfNDefStatement = "ifndef::" 


IfNDef = IfNDefStatement attributes:(ConditionalAttributes) "[]" AnySpaces  &EndOfLine {
     attr := attributes.(conditionalAttributes)
    return asciidoc.NewIfNDef(attr.names, attr.union), nil
}

InlineIfDef = IfDefStatement attributes:(ConditionalAttributes) "[" content:(InlineConditionalContent) "]" AnySpaces {
    attr := attributes.(conditionalAttributes)
    return compose(c, asciidoc.NewInlineIfDef(attr.names, attr.union), setElements[*asciidoc.InlineIfDef](content))
}

InlineIfNDef = IfNDefStatement attributes:(ConditionalAttributes) "[" content:(InlineConditionalContent) "]" AnySpaces {
    attr := attributes.(conditionalAttributes)
    return compose(c, asciidoc.NewInlineIfNDef(attr.names, attr.union), setElements[*asciidoc.InlineIfNDef](content))
}

EndIfDefStatement = "endif::" 

EndIfDef = EndIfDefStatement attributes:(ConditionalAttributes)? "[]"  AnySpaces &EndOfLine  {
    var attr []asciidoc.AttributeName
    var union asciidoc.ConditionalUnion
    if attributes != nil {
        attr = attributes.(conditionalAttributes).names
        union = attributes.(conditionalAttributes).union
    }
    return asciidoc.NewEndIf(attr, union), nil
}

ConditionalAttributes = ConditionalAttributesAny / ConditionalAttributesAll

ConditionalAttributesAny = names:(
    name:AttributeEntryName AnySpaces ","? AnySpaces 
    &{
        return len(name.(string)) > 0, nil
    }
    {
        return asciidoc.AttributeName(name.(string)), nil
    }
)+ {
    return conditionalAttributes{names:cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAny}, nil
}

ConditionalAttributesAll = names:(
    name:AttributeEntryName AnySpaces "+"? AnySpaces 
    &{
        return len(name.(string)) > 0, nil
    }
    {
        return asciidoc.AttributeName(name.(string)), nil
    }
)+ {
    return conditionalAttributes{names:cast[any, asciidoc.AttributeName](names.([]any)), union: asciidoc.ConditionalUnionAll}, nil
}

InlineConditionalContent = !"]" InlineElement+ 

IfEval = IfEvalStatement "[" AnySpaces left:(IfEvalValue) AnySpaces  operand:(IfEvalOperator) AnySpaces right:(IfEvalValue) AnySpaces "]" AnySpaces  {
     debugPosition(c, "matched ifeval: %s\n", string(c.text))
    return asciidoc.NewIfEval(left.(asciidoc.IfEvalValue), operand.(asciidoc.ConditionalOperator), right.(asciidoc.IfEvalValue)), nil
}

IfEvalStatement = "ifeval::" 

IfEvalValue = val:(SingleQuoteAttributeValue / DoubleQuoteAttributeValue / NakedAttributeValue) {
    return asciidoc.IfEvalValue{Quote:val.(*attributeValue).quote, Value:val.(*attributeValue).value}, nil
}

IfEvalOperator <-
      ("==" { return asciidoc.ConditionalOperatorEqual, nil })
    / ("!=" { return asciidoc.ConditionalOperatorNotEqual, nil })
    / ("<"  { return asciidoc.ConditionalOperatorLessThan, nil })
    / ("<=" { return asciidoc.ConditionalOperatorLessThanOrEqual, nil })
    / (">"  { return asciidoc.ConditionalOperatorGreaterThan, nil })
    / (">=" { return asciidoc.ConditionalOperatorGreaterThanOrEqual, nil })

ConditionalStatement = (IfDefStatement / IfNDefStatement / IfEvalStatement / EndIfDefStatement)