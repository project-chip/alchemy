
ListItemValue = line:InlineElement+ &EndOfLine lines:(ListItemLine)* attachedBlocks:(AttachedBlocks)? {
    value := []any{line}
    if lines != nil {
        value = append(value, lines.([]any)...)
    }
     if attachedBlocks != nil {
        value = append(value, attachedBlocks.([]any))
    }
    return flat(value), nil
}

AttachedBlockElement = "+" AnySpaces NewLine value:(BlockElements) {
    return asciidoc.NewAttachedBlock(value.(asciidoc.Element)), nil
}

ListContinuation = "+" AnySpaces NewLine value:BlockElement {
    return compose(c, asciidoc.NewListContinuation(value.(asciidoc.Element)))
}

ListItemLine = EndOfLine !OrderedListMarker !UnorderedListMarker !BlockDelimiters !ConditionalStatement element:(InlineElement)+ &EndOfLine {
    return append([]any{&asciidoc.NewLine{}}, element.([]any)...), nil
}

AttachedBlocks = blocks:(AttachedBlockElement)+ &EndOfLine {
    return blocks, nil
}