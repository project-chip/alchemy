AttributeEntry = ":" name:(AttributeEntryName) ":" AnySpaces value:(AttributeEntryElements) {
    debugPosition(c, "matched attribute entry: %s value: %v\n", string(c.text), value)
    return compose(c, asciidoc.NewAttributeEntry(name.(string)), setElements[*asciidoc.AttributeEntry](value))
}

AttributeEntryName = CharacterGroupWord (CharacterGroupWord / "-")* {
    debugPosition(c, "matched attribute entry name: %s\n", string(c.text))
    return string(c.text), nil
}

AttributeEntryElements = value:AttributeEntryElement*  {
     debugPosition(c, "matched attribute entry elements: %s (%d)\n", string(c.text), len(value.([]any)))
    return join(flat(value.([]any))), nil
}

AttributeEntryElement = (LineBreak EndOfLine / CharacterClassInline) 

AttributeReset = ":!" name:(AttributeEntryName) ":" AnySpaces  {
    return compose(c, asciidoc.NewAttributeReset(name.(string)))
} / ":" name:(AttributeEntryName) "!:" AnySpaces  {
    return compose(c, asciidoc.NewAttributeReset(name.(string)))
}

// Attributes = !"\\" !"[" "[" !"[" attributes:(AttributeList) !"]" "]" !"]" {
Attributes = !"\\" "[" !"[" attributes:(AttributeList) "]" {
     debugPosition(c, "matched attributes: %s\n", string(c.text))
    return attributes, nil
}


AttributeList = attributes:(AttributeListItem)*  {
     debugPosition(c, "matched attribute list: %s\n", string(c.text))
    return extractAttributes(attributes.([]any), nil)
}

AttributeListItem = !"]" AnySpaces attribute:(Attribute) AnySpaces ","? {
    return attribute, nil
}

Attribute = name:( (name:(NamedAttributeName) AnySpaces "=" AnySpaces) { return name, nil })? value:(SingleQuoteAttributeValue / DoubleQuoteAttributeValue / NakedAttributeValue) {
    if name != nil {
        return asciidoc.NewNamedAttribute(name.(string), value.(*attributeValue).value, value.(*attributeValue).quote), nil
    }
    return asciidoc.NewPositionalAttribute(value.(*attributeValue).value), nil
}

ShorthandAttributes = !"\\" "[" !"[" attribute:(ShorthandAttribute) "]" {
     debugPosition(c, "matched attributes: %s\n", string(c.text))
    return attribute, nil
}

ShorthandAttribute = style:(ShorthandAttributeValue)? values:(ShorthandID / ShorthandRole / ShorthandOption)+ {
    return asciidoc.NewShorthandAttribute(style, values.([]any))
}

ShorthandStyle = value:ShorthandAttributeValue {
    return asciidoc.NewShorthandID(value.(asciidoc.Elements)...), nil
}

ShorthandID = "#" value:ShorthandAttributeValue {
    return asciidoc.NewShorthandID(value.(asciidoc.Elements)...), nil
}

ShorthandRole = "." value:ShorthandAttributeValue {
    return asciidoc.NewShorthandRole(value.(asciidoc.Elements)...), nil
}

ShorthandOption = "%" value:ShorthandAttributeValue {
    return asciidoc.NewShorthandOption(value.(asciidoc.Elements)...), nil
}

ShorthandAttributeValue = (!"#" !"." !"%" SingleQuoteAttributeValue / DoubleQuoteAttributeValue / NakedAttributeValue)

SingleQuoteAttributeValue = "'" value:(SingleQuoteAttributeValueElements)* "'" {
    return &attributeValue{value:join(flat(value.([]any))), quote:asciidoc.AttributeQuoteTypeSingle}, nil
}

SingleQuoteAttributeValueElements = content:(AttributeReference / SingleQuoteAttributeValueElement)+

SingleQuoteAttributeValueElement = (!AttributeReference SingleQuoteAttributeValueCharacter)

SingleQuoteAttributeValueCharacter = (
    ("\\'" { return asciidoc.NewString("'"), nil } ) /
    Alphanumeric / 
    _ /
    CurvedQuote / 
    [^\r\n\\' ]
) 

DoubleQuoteAttributeValueElements = (AttributeReference / DoubleQuoteAttributeValueElement)

DoubleQuoteAttributeValue = "\"" value:(DoubleQuoteAttributeValueElements)* "\"" {
    return &attributeValue{value:join(flat(value.([]any))), quote:asciidoc.AttributeQuoteTypeDouble}, nil
}

DoubleQuoteAttributeValueElements = content:(AttributeReference / DoubleQuoteAttributeValueElement)+

DoubleQuoteAttributeValueElement = (!AttributeReference DoubleQuoteAttributeValueCharacter)

DoubleQuoteAttributeValueCharacter = (
    ("\\\"" { return asciidoc.NewString("'"), nil } ) /
    Alphanumeric / 
    _ /
    CurvedQuote / 
    [^\r\n\\" ]
)

NakedAttributeValue = !_ value:(NakedAttributeValueElements) {
    debugPosition(c, "matched naked attribute value elements: %s\n", string(c.text))
    return &attributeValue{value:join(flat(value.([]any)))}, nil
}

NakedAttributeValueElements = content:(AttributeReference / NakedAttributeValueElement)+

NakedAttributeValueElement = (!AttributeReference NakedAttributeValueCharacter)

NakedAttributeValueCharacter = (
    _ / 
    [^=\], ]
)

InlineAttributes = "[" attributes:(AttributeList) "]" {
    debugPosition(c, "matched inline attributes: %s\n", string(c.text))
    return attributes, nil
}

NamedAttributeName = [A-Za-z0-9_] [A-Za-z0-9_-]* {
    debugPosition(c, "matched named attribute name: %s\n", string(c.text))
    return string(c.text), nil
}

AttributeReference = AttributeReferenceValue / Counter

AttributeReferenceValue = !"\\" "{" name:AttributeEntryName "}" {
    return populatePosition(c, asciidoc.NewAttributeReference(name.(string))), nil
}


