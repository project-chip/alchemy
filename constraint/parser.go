// Code generated by pigeon; DO NOT EDIT.

package constraint

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/hasty/alchemy/matter"
	"github.com/shopspring/decimal"
)

func debug(format string, a ...any) (n int, err error) {
	return
	return fmt.Fprintf(os.Stdout, format, a...)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 21, col: 1, offset: 265},
			expr: &actionExpr{
				pos: position{line: 21, col: 10, offset: 274},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 21, col: 10, offset: 274},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 21, col: 10, offset: 274},
							label: "conf",
							expr: &oneOrMoreExpr{
								pos: position{line: 21, col: 15, offset: 279},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 15, offset: 279},
									name: "Cons",
								},
							},
						},
						&notExpr{
							pos: position{line: 217, col: 7, offset: 5115},
							expr: &anyMatcher{
								line: 217, col: 8, offset: 5116,
							},
						},
					},
				},
			},
		},
		{
			name: "Cons",
			pos:  position{line: 35, col: 1, offset: 517},
			expr: &actionExpr{
				pos: position{line: 35, col: 9, offset: 525},
				run: (*parser).callonCons1,
				expr: &seqExpr{
					pos: position{line: 35, col: 9, offset: 525},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 35, col: 9, offset: 525},
							label: "cons",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 14, offset: 530},
								name: "Constraint",
							},
						},
						&labeledExpr{
							pos:   position{line: 35, col: 25, offset: 541},
							label: "entry",
							expr: &zeroOrOneExpr{
								pos: position{line: 35, col: 31, offset: 547},
								expr: &ruleRefExpr{
									pos:  position{line: 35, col: 31, offset: 547},
									name: "EntryConstraint",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 35, col: 48, offset: 564},
							expr: &seqExpr{
								pos: position{line: 35, col: 49, offset: 565},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 205, col: 18, offset: 4954},
										expr: &charClassMatcher{
											pos:        position{line: 205, col: 18, offset: 4954},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 207, col: 10, offset: 4975},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 205, col: 18, offset: 4954},
										expr: &charClassMatcher{
											pos:        position{line: 205, col: 18, offset: 4954},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EntryConstraint",
			pos:  position{line: 45, col: 1, offset: 744},
			expr: &actionExpr{
				pos: position{line: 45, col: 20, offset: 763},
				run: (*parser).callonEntryConstraint1,
				expr: &seqExpr{
					pos: position{line: 45, col: 20, offset: 763},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 18, offset: 4954},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 18, offset: 4954},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 45, col: 22, offset: 765},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 18, offset: 4954},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 18, offset: 4954},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 45, col: 28, offset: 771},
							label: "cons",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 33, offset: 776},
								name: "Constraint",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 18, offset: 4954},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 18, offset: 4954},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 45, col: 46, offset: 789},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Constraint",
			pos:  position{line: 50, col: 1, offset: 879},
			expr: &actionExpr{
				pos: position{line: 50, col: 15, offset: 893},
				run: (*parser).callonConstraint1,
				expr: &labeledExpr{
					pos:   position{line: 50, col: 15, offset: 893},
					label: "cons",
					expr: &choiceExpr{
						pos: position{line: 50, col: 21, offset: 899},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 79, col: 14, offset: 1712},
								run: (*parser).callonConstraint4,
								expr: &litMatcher{
									pos:        position{line: 79, col: 14, offset: 1712},
									val:        "desc",
									ignoreCase: false,
									want:       "\"desc\"",
								},
							},
							&actionExpr{
								pos: position{line: 83, col: 8, offset: 1767},
								run: (*parser).callonConstraint6,
								expr: &labeledExpr{
									pos:   position{line: 83, col: 8, offset: 1767},
									label: "any",
									expr: &choiceExpr{
										pos: position{line: 83, col: 13, offset: 1772},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 83, col: 13, offset: 1772},
												val:        "any",
												ignoreCase: false,
												want:       "\"any\"",
											},
											&litMatcher{
												pos:        position{line: 83, col: 21, offset: 1780},
												val:        "all",
												ignoreCase: false,
												want:       "\"all\"",
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 40, offset: 918},
								name: "Range",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 48, offset: 926},
								name: "Min",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 54, offset: 932},
								name: "Max",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 60, offset: 938},
								name: "Limit",
							},
						},
					},
				},
			},
		},
		{
			name: "Range",
			pos:  position{line: 61, col: 1, offset: 1182},
			expr: &actionExpr{
				pos: position{line: 61, col: 10, offset: 1191},
				run: (*parser).callonRange1,
				expr: &seqExpr{
					pos: position{line: 61, col: 10, offset: 1191},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 61, col: 10, offset: 1191},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 15, offset: 1196},
								name: "Limit",
							},
						},
						&litMatcher{
							pos:        position{line: 61, col: 21, offset: 1202},
							val:        " to ",
							ignoreCase: false,
							want:       "\" to \"",
						},
						&labeledExpr{
							pos:   position{line: 61, col: 28, offset: 1209},
							label: "to",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 31, offset: 1212},
								name: "Limit",
							},
						},
					},
				},
			},
		},
		{
			name: "Min",
			pos:  position{line: 69, col: 1, offset: 1382},
			expr: &actionExpr{
				pos: position{line: 69, col: 8, offset: 1389},
				run: (*parser).callonMin1,
				expr: &seqExpr{
					pos: position{line: 69, col: 8, offset: 1389},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 69, col: 8, offset: 1389},
							val:        "[Mm]",
							chars:      []rune{'M', 'm'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 69, col: 13, offset: 1394},
							val:        "in ",
							ignoreCase: false,
							want:       "\"in \"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 18, offset: 4954},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 18, offset: 4954},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 21, offset: 1402},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 27, offset: 1408},
								name: "Limit",
							},
						},
					},
				},
			},
		},
		{
			name: "Max",
			pos:  position{line: 74, col: 1, offset: 1534},
			expr: &actionExpr{
				pos: position{line: 74, col: 8, offset: 1541},
				run: (*parser).callonMax1,
				expr: &seqExpr{
					pos: position{line: 74, col: 8, offset: 1541},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 74, col: 8, offset: 1541},
							val:        "[Mm]",
							chars:      []rune{'M', 'm'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 74, col: 13, offset: 1546},
							val:        "ax ",
							ignoreCase: false,
							want:       "\"ax \"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 18, offset: 4954},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 18, offset: 4954},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 21, offset: 1554},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 27, offset: 1560},
								name: "Limit",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 74, col: 33, offset: 1566},
							expr: &seqExpr{
								pos: position{line: 74, col: 34, offset: 1567},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 205, col: 18, offset: 4954},
										expr: &charClassMatcher{
											pos:        position{line: 205, col: 18, offset: 4954},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 74, col: 36, offset: 1569},
										val:        "chars",
										ignoreCase: false,
										want:       "\"chars\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Limit",
			pos:  position{line: 87, col: 1, offset: 1849},
			expr: &actionExpr{
				pos: position{line: 87, col: 10, offset: 1858},
				run: (*parser).callonLimit1,
				expr: &labeledExpr{
					pos:   position{line: 87, col: 10, offset: 1858},
					label: "limit",
					expr: &choiceExpr{
						pos: position{line: 87, col: 17, offset: 1865},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 92, col: 12, offset: 2068},
								run: (*parser).callonLimit4,
								expr: &litMatcher{
									pos:        position{line: 92, col: 12, offset: 2068},
									val:        "MS",
									ignoreCase: false,
									want:       "\"MS\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 87, col: 27, offset: 1875},
								name: "Expression",
							},
							&actionExpr{
								pos: position{line: 161, col: 13, offset: 3917},
								run: (*parser).callonLimit7,
								expr: &labeledExpr{
									pos:   position{line: 161, col: 13, offset: 3917},
									label: "h",
									expr: &actionExpr{
										pos: position{line: 176, col: 8, offset: 4284},
										run: (*parser).callonLimit9,
										expr: &seqExpr{
											pos: position{line: 176, col: 8, offset: 4284},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 176, col: 9, offset: 4285},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 176, col: 9, offset: 4285},
															val:        "0x",
															ignoreCase: false,
															want:       "\"0x\"",
														},
														&litMatcher{
															pos:        position{line: 176, col: 16, offset: 4292},
															val:        "0X",
															ignoreCase: false,
															want:       "\"0X\"",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 176, col: 22, offset: 4298},
													label: "hex",
													expr: &oneOrMoreExpr{
														pos: position{line: 176, col: 26, offset: 4302},
														expr: &charClassMatcher{
															pos:        position{line: 176, col: 26, offset: 4302},
															val:        "[0-9A-Fa-f]",
															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 127, col: 14, offset: 3008},
								run: (*parser).callonLimit17,
								expr: &seqExpr{
									pos: position{line: 127, col: 14, offset: 3008},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 127, col: 14, offset: 3008},
											label: "f",
											expr: &choiceExpr{
												pos: position{line: 127, col: 18, offset: 3012},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 166, col: 10, offset: 4025},
														run: (*parser).callonLimit21,
														expr: &seqExpr{
															pos: position{line: 166, col: 10, offset: 4025},
															exprs: []any{
																&actionExpr{
																	pos: position{line: 171, col: 12, offset: 4151},
																	run: (*parser).callonLimit23,
																	expr: &seqExpr{
																		pos: position{line: 171, col: 12, offset: 4151},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 171, col: 12, offset: 4151},
																				label: "sign",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 171, col: 17, offset: 4156},
																					expr: &charClassMatcher{
																						pos:        position{line: 171, col: 18, offset: 4157},
																						val:        "[-+]",
																						chars:      []rune{'-', '+'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 171, col: 28, offset: 4167},
																				label: "digits",
																				expr: &actionExpr{
																					pos: position{line: 209, col: 11, offset: 4991},
																					run: (*parser).callonLimit29,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 209, col: 11, offset: 4991},
																						expr: &charClassMatcher{
																							pos:        position{line: 209, col: 11, offset: 4991},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 166, col: 19, offset: 4034},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&oneOrMoreExpr{
																	pos: position{line: 166, col: 23, offset: 4038},
																	expr: &charClassMatcher{
																		pos:        position{line: 166, col: 23, offset: 4038},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 171, col: 12, offset: 4151},
														run: (*parser).callonLimit35,
														expr: &seqExpr{
															pos: position{line: 171, col: 12, offset: 4151},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 171, col: 12, offset: 4151},
																	label: "sign",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 171, col: 17, offset: 4156},
																		expr: &charClassMatcher{
																			pos:        position{line: 171, col: 18, offset: 4157},
																			val:        "[-+]",
																			chars:      []rune{'-', '+'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 171, col: 28, offset: 4167},
																	label: "digits",
																	expr: &actionExpr{
																		pos: position{line: 209, col: 11, offset: 4991},
																		run: (*parser).callonLimit41,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 209, col: 11, offset: 4991},
																			expr: &charClassMatcher{
																				pos:        position{line: 209, col: 11, offset: 4991},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 127, col: 36, offset: 3030},
											val:        "°C",
											ignoreCase: false,
											want:       "\"°C\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 139, col: 20, offset: 3349},
								run: (*parser).callonLimit45,
								expr: &seqExpr{
									pos: position{line: 139, col: 20, offset: 3349},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 139, col: 20, offset: 3349},
											label: "f",
											expr: &choiceExpr{
												pos: position{line: 139, col: 23, offset: 3352},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 166, col: 10, offset: 4025},
														run: (*parser).callonLimit49,
														expr: &seqExpr{
															pos: position{line: 166, col: 10, offset: 4025},
															exprs: []any{
																&actionExpr{
																	pos: position{line: 171, col: 12, offset: 4151},
																	run: (*parser).callonLimit51,
																	expr: &seqExpr{
																		pos: position{line: 171, col: 12, offset: 4151},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 171, col: 12, offset: 4151},
																				label: "sign",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 171, col: 17, offset: 4156},
																					expr: &charClassMatcher{
																						pos:        position{line: 171, col: 18, offset: 4157},
																						val:        "[-+]",
																						chars:      []rune{'-', '+'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 171, col: 28, offset: 4167},
																				label: "digits",
																				expr: &actionExpr{
																					pos: position{line: 209, col: 11, offset: 4991},
																					run: (*parser).callonLimit57,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 209, col: 11, offset: 4991},
																						expr: &charClassMatcher{
																							pos:        position{line: 209, col: 11, offset: 4991},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 166, col: 19, offset: 4034},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&oneOrMoreExpr{
																	pos: position{line: 166, col: 23, offset: 4038},
																	expr: &charClassMatcher{
																		pos:        position{line: 166, col: 23, offset: 4038},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 171, col: 12, offset: 4151},
														run: (*parser).callonLimit63,
														expr: &seqExpr{
															pos: position{line: 171, col: 12, offset: 4151},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 171, col: 12, offset: 4151},
																	label: "sign",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 171, col: 17, offset: 4156},
																		expr: &charClassMatcher{
																			pos:        position{line: 171, col: 18, offset: 4157},
																			val:        "[-+]",
																			chars:      []rune{'-', '+'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 171, col: 28, offset: 4167},
																	label: "digits",
																	expr: &actionExpr{
																		pos: position{line: 209, col: 11, offset: 4991},
																		run: (*parser).callonLimit69,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 209, col: 11, offset: 4991},
																			expr: &charClassMatcher{
																				pos:        position{line: 209, col: 11, offset: 4991},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 139, col: 40, offset: 3369},
											val:        "%",
											ignoreCase: false,
											want:       "\"%\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 151, col: 13, offset: 3673},
								run: (*parser).callonLimit73,
								expr: &seqExpr{
									pos: position{line: 151, col: 13, offset: 3673},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 151, col: 13, offset: 3673},
											label: "i",
											expr: &actionExpr{
												pos: position{line: 171, col: 12, offset: 4151},
												run: (*parser).callonLimit76,
												expr: &seqExpr{
													pos: position{line: 171, col: 12, offset: 4151},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 171, col: 12, offset: 4151},
															label: "sign",
															expr: &zeroOrOneExpr{
																pos: position{line: 171, col: 17, offset: 4156},
																expr: &charClassMatcher{
																	pos:        position{line: 171, col: 18, offset: 4157},
																	val:        "[-+]",
																	chars:      []rune{'-', '+'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 171, col: 28, offset: 4167},
															label: "digits",
															expr: &actionExpr{
																pos: position{line: 209, col: 11, offset: 4991},
																run: (*parser).callonLimit82,
																expr: &oneOrMoreExpr{
																	pos: position{line: 209, col: 11, offset: 4991},
																	expr: &charClassMatcher{
																		pos:        position{line: 209, col: 11, offset: 4991},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 151, col: 23, offset: 3683},
											label: "e",
											expr: &zeroOrOneExpr{
												pos: position{line: 151, col: 25, offset: 3685},
												expr: &actionExpr{
													pos: position{line: 213, col: 8, offset: 5059},
													run: (*parser).callonLimit87,
													expr: &seqExpr{
														pos: position{line: 213, col: 8, offset: 5059},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 213, col: 8, offset: 5059},
																val:        "^",
																ignoreCase: false,
																want:       "\"^\"",
															},
															&labeledExpr{
																pos:   position{line: 213, col: 12, offset: 5063},
																label: "digits",
																expr: &actionExpr{
																	pos: position{line: 209, col: 11, offset: 4991},
																	run: (*parser).callonLimit91,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 209, col: 11, offset: 4991},
																		expr: &charClassMatcher{
																			pos:        position{line: 209, col: 11, offset: 4991},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 213, col: 26, offset: 5077},
																expr: &litMatcher{
																	pos:        position{line: 213, col: 26, offset: 5077},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 87, col: 92, offset: 1940},
								name: "Term",
							},
							&actionExpr{
								pos: position{line: 122, col: 19, offset: 2875},
								run: (*parser).callonLimit97,
								expr: &actionExpr{
									pos: position{line: 185, col: 15, offset: 4516},
									run: (*parser).callonLimit98,
									expr: &seqExpr{
										pos: position{line: 185, col: 15, offset: 4516},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 185, col: 15, offset: 4516},
												expr: &actionExpr{
													pos: position{line: 190, col: 16, offset: 4634},
													run: (*parser).callonLimit101,
													expr: &seqExpr{
														pos: position{line: 190, col: 16, offset: 4634},
														exprs: []any{
															&actionExpr{
																pos: position{line: 195, col: 14, offset: 4750},
																run: (*parser).callonLimit103,
																expr: &charClassMatcher{
																	pos:        position{line: 195, col: 14, offset: 4750},
																	val:        "[A-Z]",
																	ranges:     []rune{'A', 'Z'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 190, col: 26, offset: 4644},
																expr: &actionExpr{
																	pos: position{line: 200, col: 14, offset: 4849},
																	run: (*parser).callonLimit106,
																	expr: &charClassMatcher{
																		pos:        position{line: 200, col: 14, offset: 4849},
																		val:        "[a-z]",
																		ranges:     []rune{'a', 'z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 185, col: 28, offset: 4529},
												expr: &actionExpr{
													pos: position{line: 190, col: 16, offset: 4634},
													run: (*parser).callonLimit109,
													expr: &seqExpr{
														pos: position{line: 190, col: 16, offset: 4634},
														exprs: []any{
															&actionExpr{
																pos: position{line: 195, col: 14, offset: 4750},
																run: (*parser).callonLimit111,
																expr: &charClassMatcher{
																	pos:        position{line: 195, col: 14, offset: 4750},
																	val:        "[A-Z]",
																	ranges:     []rune{'A', 'Z'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 190, col: 26, offset: 4644},
																expr: &actionExpr{
																	pos: position{line: 200, col: 14, offset: 4849},
																	run: (*parser).callonLimit114,
																	expr: &charClassMatcher{
																		pos:        position{line: 200, col: 14, offset: 4849},
																		val:        "[a-z]",
																		ranges:     []rune{'a', 'z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 96, col: 1, offset: 2132},
			expr: &choiceExpr{
				pos: position{line: 96, col: 9, offset: 2140},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 96, col: 9, offset: 2140},
						run: (*parser).callonTerm2,
						expr: &seqExpr{
							pos: position{line: 96, col: 9, offset: 2140},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 96, col: 9, offset: 2140},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 205, col: 18, offset: 4954},
									expr: &charClassMatcher{
										pos:        position{line: 205, col: 18, offset: 4954},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 96, col: 15, offset: 2146},
									label: "exp",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 19, offset: 2150},
										name: "Expression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 205, col: 18, offset: 4954},
									expr: &charClassMatcher{
										pos:        position{line: 205, col: 18, offset: 4954},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 96, col: 32, offset: 2163},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2248},
						run: (*parser).callonTerm12,
						expr: &labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2248},
							label: "exp",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 10, offset: 2253},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 104, col: 1, offset: 2343},
			expr: &actionExpr{
				pos: position{line: 104, col: 15, offset: 2357},
				run: (*parser).callonExpression1,
				expr: &seqExpr{
					pos: position{line: 104, col: 15, offset: 2357},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 104, col: 15, offset: 2357},
							label: "left",
							expr: &choiceExpr{
								pos: position{line: 104, col: 21, offset: 2363},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 151, col: 13, offset: 3673},
										run: (*parser).callonExpression5,
										expr: &seqExpr{
											pos: position{line: 151, col: 13, offset: 3673},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 151, col: 13, offset: 3673},
													label: "i",
													expr: &actionExpr{
														pos: position{line: 171, col: 12, offset: 4151},
														run: (*parser).callonExpression8,
														expr: &seqExpr{
															pos: position{line: 171, col: 12, offset: 4151},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 171, col: 12, offset: 4151},
																	label: "sign",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 171, col: 17, offset: 4156},
																		expr: &charClassMatcher{
																			pos:        position{line: 171, col: 18, offset: 4157},
																			val:        "[-+]",
																			chars:      []rune{'-', '+'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 171, col: 28, offset: 4167},
																	label: "digits",
																	expr: &actionExpr{
																		pos: position{line: 209, col: 11, offset: 4991},
																		run: (*parser).callonExpression14,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 209, col: 11, offset: 4991},
																			expr: &charClassMatcher{
																				pos:        position{line: 209, col: 11, offset: 4991},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 151, col: 23, offset: 3683},
													label: "e",
													expr: &zeroOrOneExpr{
														pos: position{line: 151, col: 25, offset: 3685},
														expr: &actionExpr{
															pos: position{line: 213, col: 8, offset: 5059},
															run: (*parser).callonExpression19,
															expr: &seqExpr{
																pos: position{line: 213, col: 8, offset: 5059},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 213, col: 8, offset: 5059},
																		val:        "^",
																		ignoreCase: false,
																		want:       "\"^\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 213, col: 12, offset: 5063},
																		label: "digits",
																		expr: &actionExpr{
																			pos: position{line: 209, col: 11, offset: 4991},
																			run: (*parser).callonExpression23,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 209, col: 11, offset: 4991},
																				expr: &charClassMatcher{
																					pos:        position{line: 209, col: 11, offset: 4991},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 213, col: 26, offset: 5077},
																		expr: &litMatcher{
																			pos:        position{line: 213, col: 26, offset: 5077},
																			val:        "^",
																			ignoreCase: false,
																			want:       "\"^\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 122, col: 19, offset: 2875},
										run: (*parser).callonExpression28,
										expr: &actionExpr{
											pos: position{line: 185, col: 15, offset: 4516},
											run: (*parser).callonExpression29,
											expr: &seqExpr{
												pos: position{line: 185, col: 15, offset: 4516},
												exprs: []any{
													&oneOrMoreExpr{
														pos: position{line: 185, col: 15, offset: 4516},
														expr: &actionExpr{
															pos: position{line: 190, col: 16, offset: 4634},
															run: (*parser).callonExpression32,
															expr: &seqExpr{
																pos: position{line: 190, col: 16, offset: 4634},
																exprs: []any{
																	&actionExpr{
																		pos: position{line: 195, col: 14, offset: 4750},
																		run: (*parser).callonExpression34,
																		expr: &charClassMatcher{
																			pos:        position{line: 195, col: 14, offset: 4750},
																			val:        "[A-Z]",
																			ranges:     []rune{'A', 'Z'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 190, col: 26, offset: 4644},
																		expr: &actionExpr{
																			pos: position{line: 200, col: 14, offset: 4849},
																			run: (*parser).callonExpression37,
																			expr: &charClassMatcher{
																				pos:        position{line: 200, col: 14, offset: 4849},
																				val:        "[a-z]",
																				ranges:     []rune{'a', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 185, col: 28, offset: 4529},
														expr: &actionExpr{
															pos: position{line: 190, col: 16, offset: 4634},
															run: (*parser).callonExpression40,
															expr: &seqExpr{
																pos: position{line: 190, col: 16, offset: 4634},
																exprs: []any{
																	&actionExpr{
																		pos: position{line: 195, col: 14, offset: 4750},
																		run: (*parser).callonExpression42,
																		expr: &charClassMatcher{
																			pos:        position{line: 195, col: 14, offset: 4750},
																			val:        "[A-Z]",
																			ranges:     []rune{'A', 'Z'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 190, col: 26, offset: 4644},
																		expr: &actionExpr{
																			pos: position{line: 200, col: 14, offset: 4849},
																			run: (*parser).callonExpression45,
																			expr: &charClassMatcher{
																				pos:        position{line: 200, col: 14, offset: 4849},
																				val:        "[a-z]",
																				ranges:     []rune{'a', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 161, col: 13, offset: 3917},
										run: (*parser).callonExpression47,
										expr: &labeledExpr{
											pos:   position{line: 161, col: 13, offset: 3917},
											label: "h",
											expr: &actionExpr{
												pos: position{line: 176, col: 8, offset: 4284},
												run: (*parser).callonExpression49,
												expr: &seqExpr{
													pos: position{line: 176, col: 8, offset: 4284},
													exprs: []any{
														&choiceExpr{
															pos: position{line: 176, col: 9, offset: 4285},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 176, col: 9, offset: 4285},
																	val:        "0x",
																	ignoreCase: false,
																	want:       "\"0x\"",
																},
																&litMatcher{
																	pos:        position{line: 176, col: 16, offset: 4292},
																	val:        "0X",
																	ignoreCase: false,
																	want:       "\"0X\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 176, col: 22, offset: 4298},
															label: "hex",
															expr: &oneOrMoreExpr{
																pos: position{line: 176, col: 26, offset: 4302},
																expr: &charClassMatcher{
																	pos:        position{line: 176, col: 26, offset: 4302},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 18, offset: 4954},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 18, offset: 4954},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 61, offset: 2403},
							label: "operand",
							expr: &charClassMatcher{
								pos:        position{line: 104, col: 70, offset: 2412},
								val:        "[+-*]",
								chars:      []rune{'+', '-', '*'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 18, offset: 4954},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 18, offset: 4954},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 89, offset: 2431},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 95, offset: 2437},
								name: "Limit",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onInput1(conf any) (any, error) {
	cs := conf.([]interface{})

	var set ConstraintSet
	for _, i := range cs {
		con := i.(matter.Constraint)
		set = append(set, con)
	}
	if len(set) == 1 {
		return set[0], nil
	}
	return set, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["conf"])
}

func (c *current) onCons1(cons, entry any) (any, error) {
	if entry != nil {
		return &ListConstraint{
			Constraint:      cons.(matter.Constraint),
			EntryConstraint: entry.(matter.Constraint),
		}, nil
	}
	return cons, nil
}

func (p *parser) callonCons1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCons1(stack["cons"], stack["entry"])
}

func (c *current) onEntryConstraint1(cons any) (any, error) {
	debug("found entry %s\n", string(c.text))
	return cons.(matter.Constraint), nil
}

func (p *parser) callonEntryConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryConstraint1(stack["cons"])
}

func (c *current) onConstraint4() (any, error) {
	return &DescribedConstraint{}, nil
}

func (p *parser) callonConstraint4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstraint4()
}

func (c *current) onConstraint6(any any) (any, error) {
	return &AllConstraint{Value: string(any.([]uint8))}, nil
}

func (p *parser) callonConstraint6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstraint6(stack["any"])
}

func (c *current) onConstraint1(cons any) (any, error) {
	switch cons := cons.(type) {
	case matter.Constraint:
		return cons, nil
	case matter.ConstraintLimit:
		return &ExactConstraint{Value: cons}, nil
	default:
		return nil, fmt.Errorf("unexpected constraint type: %T", cons)
	}
}

func (p *parser) callonConstraint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstraint1(stack["cons"])
}

func (c *current) onRange1(from, to any) (any, error) {
	debug("found range %s\n", string(c.text))
	return &RangeConstraint{
		Minimum: from.(matter.ConstraintLimit),
		Maximum: to.(matter.ConstraintLimit),
	}, nil
}

func (p *parser) callonRange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRange1(stack["from"], stack["to"])
}

func (c *current) onMin1(limit any) (any, error) {
	debug("found min limit %s\n", string(c.text))
	return &MinConstraint{Minimum: limit.(matter.ConstraintLimit)}, nil
}

func (p *parser) callonMin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMin1(stack["limit"])
}

func (c *current) onMax1(limit any) (any, error) {
	debug("found max limit %s\n", string(c.text))
	return &MaxConstraint{Maximum: limit.(matter.ConstraintLimit)}, nil
}

func (p *parser) callonMax1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMax1(stack["limit"])
}

func (c *current) onLimit4() (any, error) {
	return &ManufacturerLimit{Value: string(c.text)}, nil
}

func (p *parser) callonLimit4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit4()
}

func (c *current) onLimit9(hex any) (any, error) {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	debug("found hex %s\n", string(val))
	return strconv.ParseUint(string(val), 16, 64)
}

func (p *parser) callonLimit9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit9(stack["hex"])
}

func (c *current) onLimit7(h any) (any, error) {
	debug("found hex limit %s\n", string(c.text))
	return &HexLimit{Value: h.(uint64)}, nil
}

func (p *parser) callonLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit7(stack["h"])
}

func (c *current) onLimit29() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit29()
}

func (c *current) onLimit23(sign, digits any) (any, error) {
	debug("found int %s\n", string(c.text))
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit23(stack["sign"], stack["digits"])
}

func (c *current) onLimit21(sign, digits any) (any, error) {
	debug("found float %s\n", string(c.text))
	return decimal.NewFromString(string(c.text))
}

func (p *parser) callonLimit21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit21(stack["sign"], stack["digits"])
}

func (c *current) onLimit41() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit41()
}

func (c *current) onLimit35(sign, digits any) (any, error) {
	debug("found int %s\n", string(c.text))
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit35(stack["sign"], stack["digits"])
}

func (c *current) onLimit17(f any) (any, error) {
	debug("found temp %s\n", string(c.text))
	switch f := f.(type) {
	case int64:
		return &TemperatureLimit{Value: decimal.NewFromInt(f)}, nil
	case decimal.Decimal:
		return &TemperatureLimit{Value: f}, nil
	default:
		return nil, fmt.Errorf("unknown temperature limit type: %T", f)
	}
}

func (p *parser) callonLimit17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit17(stack["f"])
}

func (c *current) onLimit57() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit57()
}

func (c *current) onLimit51(sign, digits any) (any, error) {
	debug("found int %s\n", string(c.text))
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit51(stack["sign"], stack["digits"])
}

func (c *current) onLimit49(sign, digits any) (any, error) {
	debug("found float %s\n", string(c.text))
	return decimal.NewFromString(string(c.text))
}

func (p *parser) callonLimit49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit49(stack["sign"], stack["digits"])
}

func (c *current) onLimit69() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit69()
}

func (c *current) onLimit63(sign, digits any) (any, error) {
	debug("found int %s\n", string(c.text))
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit63(stack["sign"], stack["digits"])
}

func (c *current) onLimit45(f any) (any, error) {
	debug("found percent %s\n", string(c.text))
	switch f := f.(type) {
	case int64:
		return &PercentLimit{Value: decimal.NewFromInt(f)}, nil
	case decimal.Decimal:
		return &PercentLimit{Value: f}, nil
	default:
		return nil, fmt.Errorf("unknown percentage limit type: %T", f)
	}
}

func (p *parser) callonLimit45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit45(stack["f"])
}

func (c *current) onLimit82() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit82()
}

func (c *current) onLimit76(sign, digits any) (any, error) {
	debug("found int %s\n", string(c.text))
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit76(stack["sign"], stack["digits"])
}

func (c *current) onLimit91() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonLimit91() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit91()
}

func (c *current) onLimit87(digits any) (any, error) {
	return digits, nil
}

func (p *parser) callonLimit87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit87(stack["digits"])
}

func (c *current) onLimit73(i, e any) (any, error) {
	if e != nil {
		debug("found exp limit %s\n", string(c.text))
		return &ExpLimit{Value: i.(int64), Exp: e.(int64)}, nil
	}
	debug("found int limit %s\n", string(c.text))
	return &IntLimit{Value: i.(int64)}, nil
}

func (p *parser) callonLimit73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit73(stack["i"], stack["e"])
}

func (c *current) onLimit103() (any, error) {
	debug("found uppercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonLimit103() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit103()
}

func (c *current) onLimit106() (any, error) {
	debug("found lowercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonLimit106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit106()
}

func (c *current) onLimit101() (any, error) {
	debug("found capitalized %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonLimit101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit101()
}

func (c *current) onLimit111() (any, error) {
	debug("found uppercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonLimit111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit111()
}

func (c *current) onLimit114() (any, error) {
	debug("found lowercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonLimit114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit114()
}

func (c *current) onLimit109() (any, error) {
	debug("found capitalized %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonLimit109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit109()
}

func (c *current) onLimit98() (any, error) {
	debug("found pascal %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonLimit98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit98()
}

func (c *current) onLimit97() (any, error) {
	debug("found reference limit %s\n", string(c.text))
	return &ReferenceLimit{Value: string(c.text)}, nil
}

func (p *parser) callonLimit97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit97()
}

func (c *current) onLimit1(limit any) (any, error) {
	debug("found limit %s\n", string(c.text))
	return limit.(matter.ConstraintLimit), nil
}

func (p *parser) callonLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit1(stack["limit"])
}

func (c *current) onTerm2(exp any) (any, error) {
	debug("found term add/subtract %s\n", string(c.text))
	return exp, nil
}

func (p *parser) callonTerm2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm2(stack["exp"])
}

func (c *current) onTerm12(exp any) (any, error) {
	debug("found term expression %s\n", string(c.text))
	return exp, nil
}

func (p *parser) callonTerm12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm12(stack["exp"])
}

func (c *current) onExpression14() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonExpression14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression14()
}

func (c *current) onExpression8(sign, digits any) (any, error) {
	debug("found int %s\n", string(c.text))
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonExpression8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression8(stack["sign"], stack["digits"])
}

func (c *current) onExpression23() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonExpression23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression23()
}

func (c *current) onExpression19(digits any) (any, error) {
	return digits, nil
}

func (p *parser) callonExpression19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression19(stack["digits"])
}

func (c *current) onExpression5(i, e any) (any, error) {
	if e != nil {
		debug("found exp limit %s\n", string(c.text))
		return &ExpLimit{Value: i.(int64), Exp: e.(int64)}, nil
	}
	debug("found int limit %s\n", string(c.text))
	return &IntLimit{Value: i.(int64)}, nil
}

func (p *parser) callonExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression5(stack["i"], stack["e"])
}

func (c *current) onExpression34() (any, error) {
	debug("found uppercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonExpression34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression34()
}

func (c *current) onExpression37() (any, error) {
	debug("found lowercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonExpression37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression37()
}

func (c *current) onExpression32() (any, error) {
	debug("found capitalized %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonExpression32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression32()
}

func (c *current) onExpression42() (any, error) {
	debug("found uppercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonExpression42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression42()
}

func (c *current) onExpression45() (any, error) {
	debug("found lowercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonExpression45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression45()
}

func (c *current) onExpression40() (any, error) {
	debug("found capitalized %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonExpression40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression40()
}

func (c *current) onExpression29() (any, error) {
	debug("found pascal %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonExpression29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression29()
}

func (c *current) onExpression28() (any, error) {
	debug("found reference limit %s\n", string(c.text))
	return &ReferenceLimit{Value: string(c.text)}, nil
}

func (p *parser) callonExpression28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression28()
}

func (c *current) onExpression49(hex any) (any, error) {
	var val []uint8
	for _, d := range hex.([]interface{}) {
		val = append(val, d.([]uint8)...)
	}
	debug("found hex %s\n", string(val))
	return strconv.ParseUint(string(val), 16, 64)
}

func (p *parser) callonExpression49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression49(stack["hex"])
}

func (c *current) onExpression47(h any) (any, error) {
	debug("found hex limit %s\n", string(c.text))
	return &HexLimit{Value: h.(uint64)}, nil
}

func (p *parser) callonExpression47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression47(stack["h"])
}

func (c *current) onExpression1(left, operand, right any) (any, error) {
	debug("found expression %s\n", string(c.text))
	var val []uint8
	for _, d := range operand.([]uint8) {
		val = append(val, d)
	}
	return &MathExpressionLimit{
		Operand: string(val),
		Left:    left.(matter.ConstraintLimit),
		Right:   right.(matter.ConstraintLimit),
	}, nil
}

func (p *parser) callonExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression1(stack["left"], stack["operand"], stack["right"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
