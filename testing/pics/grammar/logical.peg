
LogicalTerm <- _ not:'!'? '(' _  eq:Logical _ ')' _ {
    debug("matched logical term %s\n", string(c.text))
    if not != nil {
        switch eq := eq.(type) {
            case *LogicalExpression:
                eq.Not = true
        }
    }
    return eq, nil
} /  _  eq:PICSOp _ {
    debug("matched logical term %s\n", string(c.text))
    return eq, nil
} 

Logical <- Or

Or <- _ left:And _ right:OrOp* {
    debug("matched OR %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    orOps := right.([]any)
    if len(orOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression(LogicalOperatorOr, leftCE, orOps)
}

OrOp <- _ "||" _ f:And {
    debug("matched OR op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}



And <- _ left:LogicalTerm _ right:AndOp*  {
    debug("matched AND %s\n", string(c.text))
    if right == nil {
        return left, nil
    }
    addOps := right.([]any)
    if len(addOps) == 0 {
        return left, nil
    }
    leftCE := left.(Expression)
    return NewLogicalExpression(LogicalOperatorAnd, leftCE, addOps)
}

AndOp <- _ "&&" _ f:LogicalTerm {
    debug("matched AND op %s\n", string(c.text))
    fc := f.(Expression)
    return fc, nil
}
