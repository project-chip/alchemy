#
#    Copyright (c) {{year}} Project CHIP Authors
#    All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

# See https://github.com/project-chip/connectedhomeip/blob/master/docs/testing/python.md#defining-the-ci-test-arguments
# for details about the block below.
#
# === BEGIN CI TEST ARGUMENTS ===
# test-runner-runs:
#   run1:
#     app: ${ALL_CLUSTERS_APP}
#     app-args: >
#       --discriminator 1234
#       --KVS kvs1
#       --trace-to json:${TRACE_APP}.json
#       --enable-key 000102030405060708090a0b0c0d0e0f
#       --featureSet 0xa
#       --application evse
#     script-args: >
#       --storage-path admin_storage.json
#       --commissioning-method on-network
#       --discriminator 1234
#       --passcode 20202021
#       --hex-arg enableKey:000102030405060708090a0b0c0d0e0f
#       --endpoint 1
#       --trace-to json:${TRACE_TEST_JSON}.json
#       --trace-to perfetto:${TRACE_TEST_PERFETTO}.perfetto
#     factory-reset: true
#     quiet: true
# === END CI TEST ARGUMENTS ===

import logging

import chip.clusters as Clusters
from chip.clusters import Globals
from chip.clusters.Types import NullValue
from chip.testing import matter_asserts
from chip.testing.matter_testing import MatterBaseTest, TestStep, default_matter_test_main, has_cluster, run_if_endpoint_matches
from mobly import asserts

logger = logging.getLogger(__name__)

cluster = Clusters.{{clusterName test}}


class {{test.ID}}(MatterBaseTest):

    def desc_{{test.ID}}(self) -> str:
        """Returns a description of this test"""
        return {{quote test.Name}}

    def pics_{{test.ID}}(self) -> list[str]:
        """This function returns a list of PICS for this test case that must be True for the test to be run"""
        return [{{picsList test.PICSList}}]

    def steps_{{test.ID}}(self) -> list[TestStep]:
        steps = [
{{#each test.Steps}}
{{#if this.name}}
            TestStep({{quote this.name}}, {{quote this.description}}),
{{/if}}
{{/each}}
        ]
        return steps
{{#if test.GlobalVariableNames}}

{{#each test.GlobalVariableNames}}
    {{this}} = {{globalVariable this}}
{{/each ~}}
{{/if }}

    @run_if_endpoint_matches(has_cluster(Clusters.{{clusterName test}}))
    async def test_{{test.ID}}(self):
        endpoint = self.get_endpoint()
        attributes = cluster.Attributes

        {{> test/config/list test=test}}
{{#each test.PICSAliasList}}
{{#each this}}
{{#each this.Comments}}
        # {{raw this}}
{{/each}}
        {{this.alias}} = self.check_pics({{quote this.pics}})
{{/each}}

{{/each}}
{{#each test.Steps}}
        {{> test/step test=test step=this}}

{{/each }}
{{#each test.StructChecks ~}}
    {{> test/struct test=test step=this}}

{{/each }}

if __name__ == "__main__":
    default_matter_test_main()
