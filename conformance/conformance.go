// Code generated by pigeon; DO NOT EDIT.

package conformance

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/hasty/alchemy/matter"
)

func debug(format string, a ...any) (n int, err error) {
	return
	return fmt.Fprintf(os.Stdout, format, a...)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 18, col: 1, offset: 214},
			expr: &actionExpr{
				pos: position{line: 18, col: 10, offset: 223},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 18, col: 10, offset: 223},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 18, col: 10, offset: 223},
							label: "conf",
							expr: &oneOrMoreExpr{
								pos: position{line: 18, col: 15, offset: 228},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 15, offset: 228},
									name: "Conformance",
								},
							},
						},
						&notExpr{
							pos: position{line: 258, col: 7, offset: 5894},
							expr: &anyMatcher{
								line: 258, col: 8, offset: 5895,
							},
						},
					},
				},
			},
		},
		{
			name: "Conformance",
			pos:  position{line: 29, col: 1, offset: 431},
			expr: &choiceExpr{
				pos: position{line: 29, col: 16, offset: 446},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 29, col: 16, offset: 446},
						run: (*parser).callonConformance2,
						expr: &seqExpr{
							pos: position{line: 29, col: 16, offset: 446},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 29, col: 16, offset: 446},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 20, offset: 450},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 22, offset: 452},
										name: "Equality",
									},
								},
								&litMatcher{
									pos:        position{line: 29, col: 31, offset: 461},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 35, offset: 465},
									label: "choice",
									expr: &zeroOrOneExpr{
										pos: position{line: 29, col: 42, offset: 472},
										expr: &actionExpr{
											pos: position{line: 215, col: 11, offset: 4973},
											run: (*parser).callonConformance10,
											expr: &seqExpr{
												pos: position{line: 215, col: 11, offset: 4973},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 215, col: 11, offset: 4973},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&labeledExpr{
														pos:   position{line: 215, col: 15, offset: 4977},
														label: "set",
														expr: &actionExpr{
															pos: position{line: 211, col: 8, offset: 4920},
															run: (*parser).callonConformance14,
															expr: &oneOrMoreExpr{
																pos: position{line: 211, col: 8, offset: 4920},
																expr: &charClassMatcher{
																	pos:        position{line: 211, col: 8, offset: 4920},
																	val:        "[a-z]",
																	ranges:     []rune{'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 215, col: 23, offset: 4985},
														label: "limit",
														expr: &zeroOrOneExpr{
															pos: position{line: 215, col: 29, offset: 4991},
															expr: &actionExpr{
																pos: position{line: 207, col: 16, offset: 4814},
																run: (*parser).callonConformance19,
																expr: &labeledExpr{
																	pos:   position{line: 207, col: 16, offset: 4814},
																	label: "limit",
																	expr: &choiceExpr{
																		pos: position{line: 207, col: 23, offset: 4821},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 165, col: 16, offset: 3720},
																				run: (*parser).callonConformance22,
																				expr: &seqExpr{
																					pos: position{line: 165, col: 16, offset: 3720},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 165, col: 16, offset: 3720},
																							label: "lower",
																							expr: &actionExpr{
																								pos: position{line: 228, col: 12, offset: 5314},
																								run: (*parser).callonConformance25,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 228, col: 13, offset: 5315},
																									expr: &charClassMatcher{
																										pos:        position{line: 228, col: 13, offset: 5315},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 165, col: 30, offset: 3734},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 165, col: 34, offset: 3738},
																							label: "upper",
																							expr: &actionExpr{
																								pos: position{line: 228, col: 12, offset: 5314},
																								run: (*parser).callonConformance30,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 228, col: 13, offset: 5315},
																									expr: &charClassMatcher{
																										pos:        position{line: 228, col: 13, offset: 5315},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 177, col: 14, offset: 4080},
																				run: (*parser).callonConformance33,
																				expr: &seqExpr{
																					pos: position{line: 177, col: 14, offset: 4080},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 177, col: 14, offset: 4080},
																							label: "limit",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 177, col: 20, offset: 4086},
																								expr: &actionExpr{
																									pos: position{line: 228, col: 12, offset: 5314},
																									run: (*parser).callonConformance37,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 228, col: 13, offset: 5315},
																										expr: &charClassMatcher{
																											pos:        position{line: 228, col: 13, offset: 5315},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 177, col: 29, offset: 4095},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 188, col: 14, offset: 4351},
																				run: (*parser).callonConformance41,
																				expr: &seqExpr{
																					pos: position{line: 188, col: 14, offset: 4351},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 188, col: 14, offset: 4351},
																							label: "limit",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 188, col: 20, offset: 4357},
																								expr: &actionExpr{
																									pos: position{line: 228, col: 12, offset: 5314},
																									run: (*parser).callonConformance45,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 228, col: 13, offset: 5315},
																										expr: &charClassMatcher{
																											pos:        position{line: 228, col: 13, offset: 5315},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 188, col: 29, offset: 4366},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 199, col: 16, offset: 4622},
																				run: (*parser).callonConformance49,
																				expr: &labeledExpr{
																					pos:   position{line: 199, col: 16, offset: 4622},
																					label: "limit",
																					expr: &actionExpr{
																						pos: position{line: 228, col: 12, offset: 5314},
																						run: (*parser).callonConformance51,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 228, col: 13, offset: 5315},
																							expr: &charClassMatcher{
																								pos:        position{line: 228, col: 13, offset: 5315},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 29, col: 52, offset: 482},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 36, col: 5, offset: 673},
						run: (*parser).callonConformance60,
						expr: &seqExpr{
							pos: position{line: 36, col: 5, offset: 673},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 36, col: 5, offset: 673},
									label: "eq",
									expr: &ruleRefExpr{
										pos:  position{line: 36, col: 8, offset: 676},
										name: "Equality",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 36, col: 19, offset: 687},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 5, offset: 801},
						run: (*parser).callonConformance70,
						expr: &seqExpr{
							pos: position{line: 39, col: 5, offset: 801},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 39, col: 5, offset: 801},
									val:        "M",
									ignoreCase: false,
									want:       "\"M\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 39, col: 12, offset: 808},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 863},
						run: (*parser).callonConformance79,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 863},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 41, col: 5, offset: 863},
									val:        "O",
									ignoreCase: false,
									want:       "\"O\"",
								},
								&labeledExpr{
									pos:   position{line: 41, col: 9, offset: 867},
									label: "choice",
									expr: &zeroOrOneExpr{
										pos: position{line: 41, col: 16, offset: 874},
										expr: &actionExpr{
											pos: position{line: 215, col: 11, offset: 4973},
											run: (*parser).callonConformance84,
											expr: &seqExpr{
												pos: position{line: 215, col: 11, offset: 4973},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 215, col: 11, offset: 4973},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&labeledExpr{
														pos:   position{line: 215, col: 15, offset: 4977},
														label: "set",
														expr: &actionExpr{
															pos: position{line: 211, col: 8, offset: 4920},
															run: (*parser).callonConformance88,
															expr: &oneOrMoreExpr{
																pos: position{line: 211, col: 8, offset: 4920},
																expr: &charClassMatcher{
																	pos:        position{line: 211, col: 8, offset: 4920},
																	val:        "[a-z]",
																	ranges:     []rune{'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 215, col: 23, offset: 4985},
														label: "limit",
														expr: &zeroOrOneExpr{
															pos: position{line: 215, col: 29, offset: 4991},
															expr: &actionExpr{
																pos: position{line: 207, col: 16, offset: 4814},
																run: (*parser).callonConformance93,
																expr: &labeledExpr{
																	pos:   position{line: 207, col: 16, offset: 4814},
																	label: "limit",
																	expr: &choiceExpr{
																		pos: position{line: 207, col: 23, offset: 4821},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 165, col: 16, offset: 3720},
																				run: (*parser).callonConformance96,
																				expr: &seqExpr{
																					pos: position{line: 165, col: 16, offset: 3720},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 165, col: 16, offset: 3720},
																							label: "lower",
																							expr: &actionExpr{
																								pos: position{line: 228, col: 12, offset: 5314},
																								run: (*parser).callonConformance99,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 228, col: 13, offset: 5315},
																									expr: &charClassMatcher{
																										pos:        position{line: 228, col: 13, offset: 5315},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 165, col: 30, offset: 3734},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 165, col: 34, offset: 3738},
																							label: "upper",
																							expr: &actionExpr{
																								pos: position{line: 228, col: 12, offset: 5314},
																								run: (*parser).callonConformance104,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 228, col: 13, offset: 5315},
																									expr: &charClassMatcher{
																										pos:        position{line: 228, col: 13, offset: 5315},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 177, col: 14, offset: 4080},
																				run: (*parser).callonConformance107,
																				expr: &seqExpr{
																					pos: position{line: 177, col: 14, offset: 4080},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 177, col: 14, offset: 4080},
																							label: "limit",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 177, col: 20, offset: 4086},
																								expr: &actionExpr{
																									pos: position{line: 228, col: 12, offset: 5314},
																									run: (*parser).callonConformance111,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 228, col: 13, offset: 5315},
																										expr: &charClassMatcher{
																											pos:        position{line: 228, col: 13, offset: 5315},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 177, col: 29, offset: 4095},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 188, col: 14, offset: 4351},
																				run: (*parser).callonConformance115,
																				expr: &seqExpr{
																					pos: position{line: 188, col: 14, offset: 4351},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 188, col: 14, offset: 4351},
																							label: "limit",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 188, col: 20, offset: 4357},
																								expr: &actionExpr{
																									pos: position{line: 228, col: 12, offset: 5314},
																									run: (*parser).callonConformance119,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 228, col: 13, offset: 5315},
																										expr: &charClassMatcher{
																											pos:        position{line: 228, col: 13, offset: 5315},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 188, col: 29, offset: 4366},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 199, col: 16, offset: 4622},
																				run: (*parser).callonConformance123,
																				expr: &labeledExpr{
																					pos:   position{line: 199, col: 16, offset: 4622},
																					label: "limit",
																					expr: &actionExpr{
																						pos: position{line: 228, col: 12, offset: 5314},
																						run: (*parser).callonConformance125,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 228, col: 13, offset: 5315},
																							expr: &charClassMatcher{
																								pos:        position{line: 228, col: 13, offset: 5315},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 41, col: 27, offset: 885},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 1015},
						run: (*parser).callonConformance134,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 1015},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 47, col: 5, offset: 1015},
									val:        "P",
									ignoreCase: false,
									want:       "\"P\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 47, col: 12, offset: 1022},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1079},
						run: (*parser).callonConformance143,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1079},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1079},
									val:        "D",
									ignoreCase: false,
									want:       "\"D\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 49, col: 12, offset: 1086},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1142},
						run: (*parser).callonConformance152,
						expr: &seqExpr{
							pos: position{line: 51, col: 5, offset: 1142},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 51, col: 5, offset: 1142},
									val:        "X",
									ignoreCase: false,
									want:       "\"X\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 51, col: 12, offset: 1149},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1205},
						run: (*parser).callonConformance161,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1205},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 53, col: 5, offset: 1205},
									val:        "desc",
									ignoreCase: false,
									want:       "\"desc\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 53, col: 15, offset: 1215},
									expr: &litMatcher{
										pos:        position{line: 256, col: 10, offset: 5880},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Equality",
			pos:  position{line: 58, col: 1, offset: 1272},
			expr: &actionExpr{
				pos: position{line: 58, col: 13, offset: 1284},
				run: (*parser).callonEquality1,
				expr: &seqExpr{
					pos: position{line: 58, col: 13, offset: 1284},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 15, offset: 1286},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 20, offset: 1291},
								name: "Logical",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 28, offset: 1299},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 34, offset: 1305},
								expr: &ruleRefExpr{
									pos:  position{line: 58, col: 34, offset: 1305},
									name: "EqualsOp",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualsOp",
			pos:  position{line: 76, col: 1, offset: 1722},
			expr: &actionExpr{
				pos: position{line: 76, col: 13, offset: 1734},
				run: (*parser).callonEqualsOp1,
				expr: &seqExpr{
					pos: position{line: 76, col: 13, offset: 1734},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 76, col: 15, offset: 1736},
							label: "equals",
							expr: &choiceExpr{
								pos: position{line: 76, col: 23, offset: 1744},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 76, col: 23, offset: 1744},
										val:        "==",
										ignoreCase: false,
										want:       "\"==\"",
									},
									&litMatcher{
										pos:        position{line: 76, col: 28, offset: 1749},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 76, col: 36, offset: 1757},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 76, col: 38, offset: 1759},
								name: "Logical",
							},
						},
					},
				},
			},
		},
		{
			name: "Logical",
			pos:  position{line: 84, col: 1, offset: 1925},
			expr: &actionExpr{
				pos: position{line: 84, col: 12, offset: 1936},
				run: (*parser).callonLogical1,
				expr: &seqExpr{
					pos: position{line: 84, col: 12, offset: 1936},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 14, offset: 1938},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 19, offset: 1943},
								name: "FeatureTerm",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 33, offset: 1957},
							label: "right",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 39, offset: 1963},
								expr: &ruleRefExpr{
									pos:  position{line: 84, col: 39, offset: 1963},
									name: "LogicalOp",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOp",
			pos:  position{line: 102, col: 1, offset: 2374},
			expr: &actionExpr{
				pos: position{line: 102, col: 14, offset: 2387},
				run: (*parser).callonLogicalOp1,
				expr: &seqExpr{
					pos: position{line: 102, col: 14, offset: 2387},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 16, offset: 2389},
							label: "logical",
							expr: &actionExpr{
								pos: position{line: 110, col: 21, offset: 2602},
								run: (*parser).callonLogicalOp6,
								expr: &charClassMatcher{
									pos:        position{line: 110, col: 22, offset: 2603},
									val:        "[|&^]",
									chars:      []rune{'|', '&', '^'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 18, offset: 5859},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 18, offset: 5859},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 43, offset: 2416},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 45, offset: 2418},
								name: "FeatureTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "FeatureTerm",
			pos:  position{line: 114, col: 1, offset: 2648},
			expr: &choiceExpr{
				pos: position{line: 114, col: 16, offset: 2663},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 114, col: 16, offset: 2663},
						run: (*parser).callonFeatureTerm2,
						expr: &seqExpr{
							pos: position{line: 114, col: 16, offset: 2663},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 114, col: 16, offset: 2663},
									label: "not",
									expr: &zeroOrOneExpr{
										pos: position{line: 114, col: 20, offset: 2667},
										expr: &litMatcher{
											pos:        position{line: 114, col: 20, offset: 2667},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 114, col: 25, offset: 2672},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 114, col: 32, offset: 2679},
									label: "eq",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 35, offset: 2682},
										name: "Equality",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 254, col: 18, offset: 5859},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 18, offset: 5859},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 114, col: 46, offset: 2693},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 2926},
						run: (*parser).callonFeatureTerm15,
						expr: &labeledExpr{
							pos:   position{line: 124, col: 5, offset: 2926},
							label: "identifier",
							expr: &actionExpr{
								pos: position{line: 131, col: 17, offset: 3049},
								run: (*parser).callonFeatureTerm17,
								expr: &seqExpr{
									pos: position{line: 131, col: 17, offset: 3049},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 131, col: 17, offset: 3049},
											label: "not",
											expr: &zeroOrOneExpr{
												pos: position{line: 131, col: 21, offset: 3053},
												expr: &litMatcher{
													pos:        position{line: 131, col: 21, offset: 3053},
													val:        "!",
													ignoreCase: false,
													want:       "\"!\"",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 131, col: 26, offset: 3058},
											label: "identifier",
											expr: &actionExpr{
												pos: position{line: 141, col: 15, offset: 3236},
												run: (*parser).callonFeatureTerm23,
												expr: &actionExpr{
													pos: position{line: 232, col: 15, offset: 5390},
													run: (*parser).callonFeatureTerm24,
													expr: &seqExpr{
														pos: position{line: 232, col: 15, offset: 5390},
														exprs: []any{
															&oneOrMoreExpr{
																pos: position{line: 232, col: 15, offset: 5390},
																expr: &actionExpr{
																	pos: position{line: 238, col: 16, offset: 5518},
																	run: (*parser).callonFeatureTerm27,
																	expr: &seqExpr{
																		pos: position{line: 238, col: 16, offset: 5518},
																		exprs: []any{
																			&oneOrMoreExpr{
																				pos: position{line: 238, col: 16, offset: 5518},
																				expr: &actionExpr{
																					pos: position{line: 244, col: 14, offset: 5645},
																					run: (*parser).callonFeatureTerm30,
																					expr: &charClassMatcher{
																						pos:        position{line: 244, col: 14, offset: 5645},
																						val:        "[A-Z]",
																						ranges:     []rune{'A', 'Z'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 238, col: 27, offset: 5529},
																				expr: &actionExpr{
																					pos: position{line: 249, col: 14, offset: 5749},
																					run: (*parser).callonFeatureTerm33,
																					expr: &charClassMatcher{
																						pos:        position{line: 249, col: 14, offset: 5749},
																						val:        "[a-z]",
																						ranges:     []rune{'a', 'z'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 232, col: 28, offset: 5403},
																expr: &actionExpr{
																	pos: position{line: 238, col: 16, offset: 5518},
																	run: (*parser).callonFeatureTerm36,
																	expr: &seqExpr{
																		pos: position{line: 238, col: 16, offset: 5518},
																		exprs: []any{
																			&oneOrMoreExpr{
																				pos: position{line: 238, col: 16, offset: 5518},
																				expr: &actionExpr{
																					pos: position{line: 244, col: 14, offset: 5645},
																					run: (*parser).callonFeatureTerm39,
																					expr: &charClassMatcher{
																						pos:        position{line: 244, col: 14, offset: 5645},
																						val:        "[A-Z]",
																						ranges:     []rune{'A', 'Z'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 238, col: 27, offset: 5529},
																				expr: &actionExpr{
																					pos: position{line: 249, col: 14, offset: 5749},
																					run: (*parser).callonFeatureTerm42,
																					expr: &charClassMatcher{
																						pos:        position{line: 249, col: 14, offset: 5749},
																						val:        "[a-z]",
																						ranges:     []rune{'a', 'z'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 126, col: 5, offset: 2984},
						run: (*parser).callonFeatureTerm44,
						expr: &labeledExpr{
							pos:   position{line: 126, col: 5, offset: 2984},
							label: "feature",
							expr: &actionExpr{
								pos: position{line: 146, col: 14, offset: 3349},
								run: (*parser).callonFeatureTerm46,
								expr: &seqExpr{
									pos: position{line: 146, col: 14, offset: 3349},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 146, col: 14, offset: 3349},
											label: "not",
											expr: &zeroOrOneExpr{
												pos: position{line: 146, col: 18, offset: 3353},
												expr: &litMatcher{
													pos:        position{line: 146, col: 18, offset: 3353},
													val:        "!",
													ignoreCase: false,
													want:       "\"!\"",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 146, col: 23, offset: 3358},
											label: "feature",
											expr: &actionExpr{
												pos: position{line: 160, col: 12, offset: 3652},
												run: (*parser).callonFeatureTerm52,
												expr: &seqExpr{
													pos: position{line: 160, col: 12, offset: 3652},
													exprs: []any{
														&charClassMatcher{
															pos:        position{line: 160, col: 12, offset: 3652},
															val:        "[A-Z]",
															ranges:     []rune{'A', 'Z'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 160, col: 17, offset: 3657},
															expr: &charClassMatcher{
																pos:        position{line: 160, col: 17, offset: 3657},
																val:        "[_A-Z0-9]",
																chars:      []rune{'_'},
																ranges:     []rune{'A', 'Z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onInput1(conf any) (any, error) {
	cs := conf.([]interface{})

	var set ConformanceSet
	for _, i := range cs {
		con := i.(matter.Conformance)
		set = append(set, con)
	}
	return set, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["conf"])
}

func (c *current) onConformance14() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonConformance14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance14()
}

func (c *current) onConformance25() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance25()
}

func (c *current) onConformance30() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance30()
}

func (c *current) onConformance22(lower, upper any) (any, error) {
	minVal := lower.(int)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	maxVal := upper.(int)
	if maxVal <= 0 && minVal > maxVal {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceRangeLimit{Min: minVal, Max: maxVal}, nil
}

func (p *parser) callonConformance22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance22(stack["lower"], stack["upper"])
}

func (c *current) onConformance37() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance37()
}

func (c *current) onConformance33(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMinLimit{Min: 1}, nil
	}
	minVal := limit.(int)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	return &ChoiceMinLimit{Min: minVal}, nil
}

func (p *parser) callonConformance33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance33(stack["limit"])
}

func (c *current) onConformance45() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance45()
}

func (c *current) onConformance41(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMaxLimit{Max: 1}, nil
	}
	maxVal := limit.(int)
	if maxVal <= 0 {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceMaxLimit{Max: maxVal}, nil
}

func (p *parser) callonConformance41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance41(stack["limit"])
}

func (c *current) onConformance51() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance51()
}

func (c *current) onConformance49(limit any) (any, error) {
	exact := limit.(int)
	if exact <= 0 {
		return nil, fmt.Errorf("invalid exact: %d", exact)
	}
	return &ChoiceExactLimit{Limit: exact}, nil
}

func (p *parser) callonConformance49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance49(stack["limit"])
}

func (c *current) onConformance19(limit any) (any, error) {
	return limit.(ChoiceLimit), nil
}

func (p *parser) callonConformance19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance19(stack["limit"])
}

func (c *current) onConformance10(set, limit any) (any, error) {
	choice := &Choice{Set: set.(string)}
	if limit != nil {
		switch v := limit.(type) {
		case ChoiceLimit:
			choice.Limit = v
		default:
			return nil, fmt.Errorf("unexpected choice limit type: %T", limit)
		}
	}
	return choice, nil
}

func (p *parser) callonConformance10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance10(stack["set"], stack["limit"])
}

func (c *current) onConformance2(i, choice any) (any, error) {
	exp := i.(matter.ConformanceExpression)
	o := &OptionalConformance{Expression: exp}
	if choice != nil {
		o.Choice = choice.(*Choice)
	}
	return o, nil
}

func (p *parser) callonConformance2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance2(stack["i"], stack["choice"])
}

func (c *current) onConformance60(eq any) (any, error) {
	exp := eq.(matter.ConformanceExpression)
	return &MandatoryConformance{Expression: exp}, nil
}

func (p *parser) callonConformance60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance60(stack["eq"])
}

func (c *current) onConformance70() (any, error) {
	return &MandatoryConformance{}, nil
}

func (p *parser) callonConformance70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance70()
}

func (c *current) onConformance88() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonConformance88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance88()
}

func (c *current) onConformance99() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance99()
}

func (c *current) onConformance104() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance104()
}

func (c *current) onConformance96(lower, upper any) (any, error) {
	minVal := lower.(int)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	maxVal := upper.(int)
	if maxVal <= 0 && minVal > maxVal {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceRangeLimit{Min: minVal, Max: maxVal}, nil
}

func (p *parser) callonConformance96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance96(stack["lower"], stack["upper"])
}

func (c *current) onConformance111() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance111()
}

func (c *current) onConformance107(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMinLimit{Min: 1}, nil
	}
	minVal := limit.(int)
	if minVal <= 0 {
		return nil, fmt.Errorf("invalid minimum: %d", minVal)
	}
	return &ChoiceMinLimit{Min: minVal}, nil
}

func (p *parser) callonConformance107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance107(stack["limit"])
}

func (c *current) onConformance119() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance119() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance119()
}

func (c *current) onConformance115(limit any) (any, error) {
	if limit == nil {
		return &ChoiceMaxLimit{Max: 1}, nil
	}
	maxVal := limit.(int)
	if maxVal <= 0 {
		return nil, fmt.Errorf("invalid maximum: %d", maxVal)
	}
	return &ChoiceMaxLimit{Max: maxVal}, nil
}

func (p *parser) callonConformance115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance115(stack["limit"])
}

func (c *current) onConformance125() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonConformance125() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance125()
}

func (c *current) onConformance123(limit any) (any, error) {
	exact := limit.(int)
	if exact <= 0 {
		return nil, fmt.Errorf("invalid exact: %d", exact)
	}
	return &ChoiceExactLimit{Limit: exact}, nil
}

func (p *parser) callonConformance123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance123(stack["limit"])
}

func (c *current) onConformance93(limit any) (any, error) {
	return limit.(ChoiceLimit), nil
}

func (p *parser) callonConformance93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance93(stack["limit"])
}

func (c *current) onConformance84(set, limit any) (any, error) {
	choice := &Choice{Set: set.(string)}
	if limit != nil {
		switch v := limit.(type) {
		case ChoiceLimit:
			choice.Limit = v
		default:
			return nil, fmt.Errorf("unexpected choice limit type: %T", limit)
		}
	}
	return choice, nil
}

func (p *parser) callonConformance84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance84(stack["set"], stack["limit"])
}

func (c *current) onConformance79(choice any) (any, error) {
	o := &OptionalConformance{}
	if choice != nil {
		o.Choice = choice.(*Choice)
	}
	return o, nil
}

func (p *parser) callonConformance79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance79(stack["choice"])
}

func (c *current) onConformance134() (any, error) {
	return &ProvisionalConformance{}, nil
}

func (p *parser) callonConformance134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance134()
}

func (c *current) onConformance143() (any, error) {
	return &DeprecatedConformance{}, nil
}

func (p *parser) callonConformance143() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance143()
}

func (c *current) onConformance152() (any, error) {
	return &DisallowedConformance{}, nil
}

func (p *parser) callonConformance152() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance152()
}

func (c *current) onConformance161() (any, error) {

	return &DescribedConformance{}, nil

}

func (p *parser) callonConformance161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConformance161()
}

func (c *current) onEquality1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	equalityOps := right.([]interface{})
	if len(equalityOps) == 0 {
		return left, nil
	}
	leftCE := left.(matter.ConformanceExpression)
	var ee *EqualityExpression
	for _, equalityOp := range equalityOps {
		ee = equalityOp.(*EqualityExpression)
		ee.Left = leftCE
		leftCE = ee
	}
	return ee, nil
}

func (p *parser) callonEquality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality1(stack["left"], stack["right"])
}

func (c *current) onEqualsOp1(equals, f any) (any, error) {
	fc := f.(matter.ConformanceExpression)
	return &EqualityExpression{
		Not:   (string(equals.([]uint8)) == "!="),
		Right: fc,
	}, nil
}

func (p *parser) callonEqualsOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualsOp1(stack["equals"], stack["f"])
}

func (c *current) onLogical1(left, right any) (any, error) {
	if right == nil {
		return left, nil
	}
	logicalOps := right.([]interface{})
	if len(logicalOps) == 0 {
		return left, nil
	}
	leftCE := left.(matter.ConformanceExpression)
	var le *LogicalExpression
	for _, logicalOp := range logicalOps {
		le = logicalOp.(*LogicalExpression)
		le.Left = leftCE
		leftCE = le
	}
	return le, nil
}

func (p *parser) callonLogical1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogical1(stack["left"], stack["right"])
}

func (c *current) onLogicalOp6() (any, error) {
	return c.text, nil
}

func (p *parser) callonLogicalOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOp6()
}

func (c *current) onLogicalOp1(logical, f any) (any, error) {
	fc := f.(matter.ConformanceExpression)
	return &LogicalExpression{
		Operand: string(logical.([]uint8)),
		Right:   fc,
	}, nil
}

func (p *parser) callonLogicalOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOp1(stack["logical"], stack["f"])
}

func (c *current) onFeatureTerm2(not, eq any) (any, error) {
	if not != nil {
		switch eq := eq.(type) {
		case *EqualityExpression:
			eq.Not = true
		case *LogicalExpression:
			eq.Not = true
		}
	}
	return eq, nil
}

func (p *parser) callonFeatureTerm2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm2(stack["not"], stack["eq"])
}

func (c *current) onFeatureTerm30() (any, error) {
	debug("matched uppercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonFeatureTerm30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm30()
}

func (c *current) onFeatureTerm33() (any, error) {
	debug("matched lowercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonFeatureTerm33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm33()
}

func (c *current) onFeatureTerm27() (any, error) {
	debug("matched capitalized %s\n", string(c.text))

	return string(c.text), nil
}

func (p *parser) callonFeatureTerm27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm27()
}

func (c *current) onFeatureTerm39() (any, error) {
	debug("matched uppercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonFeatureTerm39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm39()
}

func (c *current) onFeatureTerm42() (any, error) {
	debug("matched lowercase %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonFeatureTerm42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm42()
}

func (c *current) onFeatureTerm36() (any, error) {
	debug("matched capitalized %s\n", string(c.text))

	return string(c.text), nil
}

func (p *parser) callonFeatureTerm36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm36()
}

func (c *current) onFeatureTerm24() (any, error) {
	debug("matched pascal %s\n", string(c.text))

	return string(c.text), nil
}

func (p *parser) callonFeatureTerm24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm24()
}

func (c *current) onFeatureTerm23() (any, error) {
	debug("matched identifier %s\n", string(c.text))
	return string(c.text), nil
}

func (p *parser) callonFeatureTerm23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm23()
}

func (c *current) onFeatureTerm17(not, identifier any) (any, error) {
	id := identifier.(string)
	ic := &IdentifierExpression{ID: id}
	if not != nil {
		ic.Not = true
	}
	return ic, nil
}

func (p *parser) callonFeatureTerm17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm17(stack["not"], stack["identifier"])
}

func (c *current) onFeatureTerm15(identifier any) (any, error) {
	return identifier, nil
}

func (p *parser) callonFeatureTerm15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm15(stack["identifier"])
}

func (c *current) onFeatureTerm52() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFeatureTerm52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm52()
}

func (c *current) onFeatureTerm46(not, feature any) (any, error) {
	id := feature.(string)
	switch id {
	case "O", "M", "P":
		return nil, fmt.Errorf("invalid optional conformance value: %s", id)
	}
	ic := &FeatureExpression{ID: id}
	if not != nil {
		ic.Not = true
	}
	return ic, nil
}

func (p *parser) callonFeatureTerm46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm46(stack["not"], stack["feature"])
}

func (c *current) onFeatureTerm44(feature any) (any, error) {
	return feature, nil
}

func (p *parser) callonFeatureTerm44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFeatureTerm44(stack["feature"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
